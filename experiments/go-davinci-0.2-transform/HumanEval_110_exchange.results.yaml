language: go_test.go
name: HumanEval_110_exchange
results:
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if len(lst1)\
    \ == 0 || len(lst2) == 0 {\n        return \"NO\"\n    }\n    for _, v := range\
    \ lst1 {\n        if v % 2 != 0 {\n            return \"NO\"\n        }\n    }\n\
    \    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpvatxo28h_test.go:52: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpvatxo28h_test.go:52: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpvatxo28h_test.go:52:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073622
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Your\
    \ code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpn5j72j3w_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpn5j72j3w_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpn5j72j3w_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073622
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ evens int\n    for _, n := range lst1 {\n        if n % 2 == 0 {\n         \
    \   evens++\n        }\n    }\n    if evens == len(lst1) {\n        return \"\
    YES\"\n    }\n    for _, n := range lst2 {\n        if n % 2 == 0 {\n        \
    \    evens++\n        }\n    }\n    if evens == len(lst1) + len(lst2) {\n    \
    \    return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp68ow96b8_test.go:61: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp68ow96b8_test.go:61: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp68ow96b8_test.go:61:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073622
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Your\
    \ code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpn5j72j3w_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpn5j72j3w_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpn5j72j3w_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpn5j72j3w_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073622
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO:\
    \ implement\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpr4wrbbm7_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpr4wrbbm7_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpr4wrbbm7_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpr4wrbbm7_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpr4wrbbm7_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpr4wrbbm7_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpr4wrbbm7_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073622
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp8t526zh7_test.go:44:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO:\
    \ implement\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpr4wrbbm7_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpr4wrbbm7_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpr4wrbbm7_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpr4wrbbm7_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpr4wrbbm7_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpr4wrbbm7_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpr4wrbbm7_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073622
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO:\
    \ implement this function\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpzfvw3jr4_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpzfvw3jr4_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpzfvw3jr4_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpzfvw3jr4_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpzfvw3jr4_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpzfvw3jr4_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpzfvw3jr4_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073622
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    evens\
    \ := 0\n    for _, v := range lst1 {\n        if v % 2 == 0 {\n            evens++\n\
    \        }\n    }\n    odds := len(lst1) - evens\n    for _, v := range lst2 {\n\
    \        if v % 2 == 0 {\n            odds--\n        } else {\n            evens--\n\
    \        }\n        if evens < 0 || odds < 0 {\n            return \"NO\"\n  \
    \      }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmpceqrb5nx_test.go:61: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073622
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpg1wi5lb6_test.go:44: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpg1wi5lb6_test.go:44: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpg1wi5lb6_test.go:44:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    if len(lst1)\
    \ == 0 || len(lst2) == 0 {\n        return \"NO\"\n    }\n    for i := 0; i <\
    \ len(lst1); i++ {\n        if lst1[i] % 2 == 1 {\n            for j := 0; j <\
    \ len(lst2); j++ {\n                if lst2[j] % 2 == 0 {\n                  \
    \  lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n          \
    \      }\n            }\n        }\n    }\n    for i := 0; i < len(lst1); i++\
    \ {\n        if lst1[i] % 2 == 1 {\n            return \"NO\"\n        }\n   \
    \ }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmprpi2xnli_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmprpi2xnli_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmprpi2xnli_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    var\
    \ evens int\n    for _, v := range lst1 {\n        if v % 2 == 0 {\n         \
    \   evens++\n        }\n    }\n    if evens == len(lst1) {\n        return \"\
    YES\"\n    }\n    for _, v := range lst2 {\n        if v % 2 == 0 {\n        \
    \    evens++\n        }\n    }\n    if evens == len(lst1) + len(lst2) {\n    \
    \    return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpx2u01x64_test.go:61: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpx2u01x64_test.go:61: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpx2u01x64_test.go:61:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073622
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpp4vf3gv8_test.go:44: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpp4vf3gv8_test.go:44:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp8t526zh7_test.go:44: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp8t526zh7_test.go:44:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmp8t526zh7_test.go:44: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists\
    \ will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // TODO\
    \ - Add your code here\n    return \"\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmppvifsx4o_test.go:45: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmppvifsx4o_test.go:45: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmppvifsx4o_test.go:45:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
