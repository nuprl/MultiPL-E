language: go_test.go
name: HumanEval_3_below_zero
results:
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var sum int\n    for _, v := range operations {\n       \
    \ sum += v\n        if sum < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, v := range operations {\n   \
    \     balance += v\n        if balance < 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var sum int\n    for _, v := range operations {\n       \
    \ sum += v\n        if sum < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var sum int\n    for _, v := range operations {\n       \
    \ sum += v\n        if sum < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, v := range operations {\n      \
    \  balance += v\n        if balance < 0 {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, value := range operations {\n\
    \        balance += value\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var sum int\n    for _, v := range operations {\n       \
    \ sum += v\n        if sum < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var sum int\n    for _, v := range operations {\n       \
    \ sum += v\n        if sum < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n   \
    \  { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n     { actual:\
    \ candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n     { actual:\
    \ candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, op := range operations {\n  \
    \      balance += op\n        if balance < 0 {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, operation := range operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T)\
    \ {\n  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    var balance int\n    for _, v := range operations {\n   \
    \     balance += v\n        if balance < 0 {\n            return true\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, operation := range operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n\
    \  candidate := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false\
    \ },\n     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true\
    \ },\n     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075235
- exit_code: 0
  program: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([]int{1, 2,\
    \ 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations\
    \ []int) bool {\n    balance := 0\n    for _, op := range operations {\n     \
    \   balance += op\n        if balance < 0 {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\nfunc TestBelow_Zero(t *testing.T) {\n  candidate\
    \ := below_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, -3, 1, 2, -3}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, -4, 5, 6}), expected: true },\n   \
    \  { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -4}), expected: false },\n\
    \     { actual: candidate([]int{1, -1, 2, -2, 5, -5, 4, -5}), expected: true },\n\
    \     { actual: candidate([]int{1, -2, 2, -2, 5, -5, 4, -4}), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075235
