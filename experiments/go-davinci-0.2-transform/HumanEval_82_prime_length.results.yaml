language: go_test.go
name: HumanEval_82_prime_length
results:
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    for i := 2; i < length; i++\
    \ {\n        if length % i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp_l845irj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp_l845irj_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp_l845irj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    myLength := len(myString)\n    if myLength == 1 {\n    \
    \    return false\n    }\n    for i := 2; i < myLength; i++ {\n        if myLength\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpuxwfve9d_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var length = len(myString)\n    if length == 2 {\n     \
    \   return true\n    }\n    for i := 2; i < length; i++ {\n        if length %\
    \ i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpq65xp145_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq65xp145_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpq65xp145_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpnop_59n3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpnop_59n3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpnop_59n3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpnop_59n3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpnop_59n3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpnop_59n3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpnop_59n3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpnop_59n3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpnop_59n3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpnop_59n3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    if len(myString) == 2 || len(myString) == 3 || len(myString)\
    \ == 5 || len(myString) == 7 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: Write your code here\n    return false\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpp9hr2182_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpp9hr2182_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpp9hr2182_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpp9hr2182_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpp9hr2182_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpp9hr2182_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpp9hr2182_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpp9hr2182_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpp9hr2182_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpp9hr2182_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    myLength := len(myString)\n    if myLength == 1 {\n    \
    \    return false\n    }\n    for i := 2; i < myLength; i++ {\n        if myLength\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpuxwfve9d_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    if length % 2 == 0 {\n        return false\n    }\n    for\
    \ i := 3; i < length; i += 2 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp6ko450pe_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp6ko450pe_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var isPrime bool = true\n    var length int = len(myString)\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ isPrime = false\n            break\n        }\n    }\n    return isPrime\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp74_e_bkv_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp74_e_bkv_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp74_e_bkv_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    if len(myString) == 2 || len(myString) == 3 || len(myString)\
    \ == 5 || len(myString) == 7 {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: implement\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp4obvjmaq_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp4obvjmaq_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp4obvjmaq_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp4obvjmaq_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp4obvjmaq_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp4obvjmaq_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp4obvjmaq_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp4obvjmaq_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp4obvjmaq_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp4obvjmaq_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    if len(myString) == 1 {\n        return false\n    }\n \
    \   for i := 2; i < len(myString); i++ {\n        if len(myString) % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp24soav1n_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    if len(myString) == 1 {\n        return false\n    }\n \
    \   for i := 2; i < len(myString); i++ {\n        if len(myString) % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp24soav1n_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    if len(myString) == 1 {\n        return false\n    }\n \
    \   for i := 2; i < len(myString); i++ {\n        if len(myString) % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp24soav1n_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    if len(myString) == 1 {\n        return false\n    }\n \
    \   for i := 2; i < len(myString); i++ {\n        if len(myString) % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp24soav1n_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var length = len(myString)\n    if length == 2 {\n     \
    \   return true\n    }\n    for i := 2; i < length; i++ {\n        if length %\
    \ i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpq65xp145_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpq65xp145_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpq65xp145_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var myLength int = len(myString)\n    var i int = 2\n  \
    \  var isPrime bool = true\n    for i < myLength {\n        if myLength % i ==\
    \ 0 {\n            isPrime = false\n            break\n        }\n        i++\n\
    \    }\n    return isPrime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpm2xisozs_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpm2xisozs_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpm2xisozs_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    } else if length == 2 {\n        return true\n    } else {\n    \
    \    for i := 2; i < length; i++ {\n            if length % i == 0 {\n       \
    \         return false\n            }\n        }\n        return true\n    }\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmptql3ycd9_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    if len(myString) == 1 {\n        return false\n    }\n \
    \   for i := 2; i < len(myString); i++ {\n        if len(myString) % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp24soav1n_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    if length == 2 {\n        return true\n    }\n    for i :=\
    \ 2; i < length; i++ {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var isPrime bool = true\n    var length int = len(myString)\n\
    \    if length == 1 {\n        isPrime = false\n    } else {\n        for i :=\
    \ 2; i < length; i++ {\n            if length % i == 0 {\n                isPrime\
    \ = false\n                break\n            }\n        }\n    }\n    return\
    \ isPrime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplycfm91z_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // get the length of the string\n    length := len(myString)\n\
    \    // check if the length is a prime number\n    if length == 2 || length ==\
    \ 3 || length == 5 || length == 7 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp58p_vs5q_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp58p_vs5q_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    if len(myString) == 1 {\n        return false\n    }\n \
    \   for i := 2; i < len(myString); i++ {\n        if len(myString) % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp24soav1n_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: implement\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp4obvjmaq_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp4obvjmaq_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp4obvjmaq_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp4obvjmaq_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp4obvjmaq_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp4obvjmaq_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp4obvjmaq_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmp4obvjmaq_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmp4obvjmaq_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp4obvjmaq_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return false\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpo01jz6pe_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpo01jz6pe_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var isPrime bool = true\n    var length int = len(myString)\n\
    \    for i := 2; i < length; i++ {\n        if length % i == 0 {\n           \
    \ isPrime = false\n            break\n        }\n    }\n    return isPrime\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp74_e_bkv_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp74_e_bkv_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp74_e_bkv_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmps7nsrs38_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmps7nsrs38_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmps7nsrs38_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmps7nsrs38_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmps7nsrs38_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmps7nsrs38_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmps7nsrs38_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmps7nsrs38_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmps7nsrs38_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmps7nsrs38_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073624
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: Write me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmprglzb3j3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmprglzb3j3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmprglzb3j3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmprglzb3j3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmprglzb3j3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmprglzb3j3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmprglzb3j3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmprglzb3j3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmprglzb3j3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmprglzb3j3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073624
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    var length = len(myString)\n    if length == 1 {\n     \
    \   return false\n    }\n    for i := 2; i < length; i++ {\n        if length\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpwvhqix_6_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073624
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    if length == 2 {\n        return true\n    }\n    for i :=\
    \ 2; i < length; i++ {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpqm2gtser_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073624
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: Implement me\n    return false\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpanxb03ks_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpanxb03ks_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    if len(myString) == 1 {\n        return false\n    }\n \
    \   for i := 2; i < len(myString); i++ {\n        if len(myString) % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp24soav1n_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    // TODO: Implement this function\n    return false\n}\n\n\
    func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpjzcru8o3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpjzcru8o3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpjzcru8o3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpjzcru8o3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpjzcru8o3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpjzcru8o3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpjzcru8o3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__9 (0.00s)\n        tmpjzcru8o3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__10\
    \ (0.00s)\n        tmpjzcru8o3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpjzcru8o3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073624
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpyajfbc04_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpyajfbc04_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpfamu2w3x_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpfamu2w3x_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    if len(myString) == 1 {\n        return false\n    }\n \
    \   for i := 2; i < len(myString); i++ {\n        if len(myString) % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp24soav1n_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 2 {\n        return\
    \ true\n    }\n    if length % 2 == 0 {\n        return false\n    }\n    for\
    \ i := 3; i < length; i += 2 {\n        if length % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp6ko450pe_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp6ko450pe_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmplah4dtwy_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073623
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length == 1 {\n        return\
    \ false\n    }\n    if length == 2 {\n        return true\n    }\n    for i :=\
    \ 2; i < length; i++ {\n        if length % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpqm2gtser_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073624
- exit_code: 0
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\n// >>> prime_length(\"\
    Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
    kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if length % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073623
