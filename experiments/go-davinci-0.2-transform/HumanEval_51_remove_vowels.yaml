name: HumanEval_51_remove_vowels
language: go_test.go
prompt: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// remove_vowels is a function that takes string and returns string without vowels.\n\
  // >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\
  \n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n//\
  \ \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunc remove_vowels(text string)\
  \ string {\n"
tests: "func TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
  \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
  \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
  ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
  \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
  ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result string\n    for _, char := range text {\n        if\
    \ char != 'a' && char != 'e' && char != 'i' && char != 'o' && char != 'u' {\n\
    \            result += string(char)\n        }\n    }\n    return result\n}\n",
  "    var result string\n    for _, char := range text {\n        if char != 'a'\
    \ && char != 'e' && char != 'i' && char != 'o' && char != 'u' {\n            result\
    \ += string(char)\n        }\n    }\n    return result\n}\n", "    vowels := \"\
    aeiouAEIOU\"\n    result := \"\"\n    for _, c := range text {\n        if !strings.ContainsRune(vowels,\
    \ c) {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    for _, char := range text {\n        if char\
    \ != 'a' && char != 'e' && char != 'i' && char != 'o' && char != 'u' {\n     \
    \       result += string(char)\n        }\n    }\n    return result\n}\n", " \
    \   vowels := \"aeiou\"\n    result := \"\"\n    for _, char := range text {\n\
    \        if !strings.Contains(vowels, strings.ToLower(string(char))) {\n     \
    \       result += string(char)\n        }\n    }\n    return result\n}\n", " \
    \   vowels := \"aeiou\"\n    result := \"\"\n    for _, c := range text {\n  \
    \      if !strings.Contains(vowels, string(c)) {\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    for _, v :=\
    \ range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n \
    \   return text\n}\n", "    var result string\n    for _, char := range text {\n\
    \        if char != 'a' && char != 'e' && char != 'i' && char != 'o' && char !=\
    \ 'u' {\n            result += string(char)\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    for _, char := range text {\n        if char\
    \ != 'a' && char != 'e' && char != 'i' && char != 'o' && char != 'u' {\n     \
    \       result += string(char)\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    for _, c := range text {\n        if c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result string\n\
    \    for _, char := range text {\n        if !contains(vowels, string(char)) {\n\
    \            result += string(char)\n        }\n    }\n    return result\n}\n",
  "    if len(text) == 0 {\n        return \"\"\n    }\n    vowels := map[rune]bool{'a':\
    \ true, 'e': true, 'i': true, 'o': true, 'u': true, 'A': true, 'E': true, 'I':\
    \ true, 'O': true, 'U': true}\n    var result []rune\n    for _, char := range\
    \ text {\n        if _, ok := vowels[char]; !ok {\n            result = append(result,\
    \ char)\n        }\n    }\n    return string(result)\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    for _,\
    \ v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n   \
    \ }\n    return text\n}\n", "    var result string\n    for _, c := range text\
    \ {\n        if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \           result += string(c)\n        }\n    }\n    return result\n}\n", " \
    \   vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, char := range text\
    \ {\n        if !strings.ContainsRune(vowels, char) {\n            result += string(char)\n\
    \        }\n    }\n    return result\n}\n", "    vowels := \"aeiouAEIOU\"\n  \
    \  newText := \"\"\n    for _, char := range text {\n        if !strings.Contains(vowels,\
    \ string(char)) {\n            newText += string(char)\n        }\n    }\n   \
    \ return newText\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    for _, v := range vowels {\n    \
    \    text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n",
  "    var result string\n    for _, c := range text {\n        if c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u' {\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    for _,\
    \ c := range text {\n        if c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u' {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\"\
    , \"I\", \"O\", \"U\"}\n    for _, v := range vowels {\n        text = strings.Replace(text,\
    \ v, \"\", -1)\n    }\n    return text\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
