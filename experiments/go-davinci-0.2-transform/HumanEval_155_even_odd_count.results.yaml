language: go_test.go
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpi36jp9dk_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpi36jp9dk_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj3afgb82_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpaovqxa4h_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num >\
    \ 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpb9fdm5my_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpb9fdm5my_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpb9fdm5my_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpb9fdm5my_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpb9fdm5my_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpl5sgondq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpaovqxa4h_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpl5sgondq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj3afgb82_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj3afgb82_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    if num < 0 {\n        num =\
    \ -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        num /= 10\n    }\n  \
    \  return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5t0lqrck_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj3afgb82_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        num /=\
    \ 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpc1y4fbnw_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj3afgb82_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpaovqxa4h_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj3afgb82_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        num /=\
    \ 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpc1y4fbnw_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj3afgb82_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    if num < 0 {\n        num =\
    \ -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        num /= 10\n    }\n  \
    \  return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5t0lqrck_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpl5sgondq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj3afgb82_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            evenCount += 1\n        } else {\n\
    \            oddCount += 1\n        }\n        num /= 10\n    }\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpxh9zue1l_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj3afgb82_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj3afgb82_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj3afgb82_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpl5sgondq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpl5sgondq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpl5sgondq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpaovqxa4h_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpl5sgondq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        num /=\
    \ 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpc1y4fbnw_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    if num < 0 {\n        num =\
    \ -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        num /= 10\n    }\n  \
    \  return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5t0lqrck_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpaovqxa4h_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpl5sgondq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpaovqxa4h_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count++\n\
    \        } else {\n            odd_count++\n        }\n        num /= 10\n   \
    \ }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmppr1qliu5_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if (num % 10) % 2 == 0 {\n            even_count += 1\n       \
    \ } else {\n            odd_count += 1\n        }\n        num /= 10\n    }\n\
    \    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp661gzoii_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        num /=\
    \ 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpc1y4fbnw_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpl5sgondq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj3afgb82_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqvvjlweq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpaovqxa4h_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5x1c5oot_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphaatz6me_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpl5sgondq_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    if num < 0 {\n      \
    \  num = -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n         \
    \   even++\n        } else {\n            odd++\n        }\n        num /= 10\n\
    \    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpwtgohohg_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a tuple that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6g1g9b_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074256
