name: HumanEval_70_strange_sort_list
language: go_test.go
prompt: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3,\
  \ 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5,\
  \ 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst\
  \ []int) []int {\n"
tests: "func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
  \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
  \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
  \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
  \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
  \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4,\
  \ 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5,\
  \ 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111}\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(lst) == 0 {\n        return lst\n    }\n    min, max :=\
    \ lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n        \
    \    min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n    if min == max {\n        return lst\n    }\n    res := []int{min}\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ continue\n        }\n        res = append(res, lst[i])\n    }\n    res = append(res,\
    \ max)\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == max {\n\
    \            continue\n        }\n        res = append(res, lst[i])\n    }\n \
    \   return res\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n   \
    \ var (\n        min = lst[0]\n        max = lst[0]\n        min_idx = 0\n   \
    \     max_idx = 0\n    )\n    for i, v := range lst {\n        if v < min {\n\
    \            min = v\n            min_idx = i\n        }\n        if v > max {\n\
    \            max = v\n            max_idx = i\n        }\n    }\n    if min_idx\
    \ == max_idx {\n        return lst\n    }\n    lst[min_idx] = max\n    lst[max_idx]\
    \ = min\n    return strange_sort_list(lst[1:])\n}\n", "    if len(lst) == 0 {\n\
    \        return lst\n    }\n    if len(lst) == 1 {\n        return lst\n    }\n\
    \    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    new_lst = append(new_lst, max)\n    for _, v := range lst {\n    \
    \    if v != min && v != max {\n            new_lst = append(new_lst, v)\n   \
    \     }\n    }\n    return strange_sort_list(new_lst)\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n  \
    \  for _, v := range lst {\n        if v < min {\n            min = v\n      \
    \  }\n        if v > max {\n            max = v\n        }\n    }\n    if min\
    \ == max {\n        return lst\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    if min == max {\n        return\
    \ lst\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    return\
    \ strange_sort_list(lst)\n}\n", "    if len(lst) == 0 {\n        return lst\n\
    \    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n  \
    \      if v < min {\n            min = v\n        }\n        if v > max {\n  \
    \          max = v\n        }\n    }\n    if min == max {\n        return lst\n\
    \    }\n    var res []int\n    res = append(res, min)\n    res = append(res, max)\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max\
    \ {\n            res = append(res, lst[i])\n        }\n    }\n    return res\n\
    }\n", "    if len(lst) == 0 {\n        return lst\n    }\n    var result []int\n\
    \    var min, max int\n    var min_index, max_index int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i == 0 {\n            min = lst[i]\n            max = lst[i]\n\
    \            min_index = i\n            max_index = i\n        } else {\n    \
    \        if lst[i] < min {\n                min = lst[i]\n                min_index\
    \ = i\n            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \                max_index = i\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, max)\n    var new_lst []int\n\
    \    for i := 0; i < len(lst); i++ {\n        if i != min_index && i != max_index\
    \ {\n            new_lst = append(new_lst, lst[i])\n        }\n    }\n    result\
    \ = append(result, strange_sort_list(new_lst)...)\n    return result\n}\n", " \
    \   if len(lst) == 0 {\n        return lst\n    }\n    result := make([]int, len(lst))\n\
    \    min, max := lst[0], lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    result[0] = min\n    result[len(lst) - 1] = max\n    for\
    \ i := 1; i < len(lst) - 1; i++ {\n        if i % 2 == 0 {\n            result[i]\
    \ = max\n        } else {\n            result[i] = min\n        }\n    }\n   \
    \ return result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    if min == max {\n        return lst\n    }\n    var\
    \ result []int\n    result = append(result, min)\n    for i := 0; i < len(lst)\
    \ - 1; i++ {\n        if i % 2 == 0 {\n            result = append(result, max)\n\
    \        } else {\n            result = append(result, min)\n        }\n    }\n\
    \    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n\
    \    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    if min == max {\n        return lst\n    }\n\
    \    var result []int\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n \
    \   var result []int\n    var min int\n    var max int\n    var min_idx int\n\
    \    var max_idx int\n    var idx int\n    var lst_len int = len(lst)\n    for\
    \ idx = 0; idx < lst_len; idx++ {\n        if idx == 0 {\n            min = lst[idx]\n\
    \            max = lst[idx]\n            min_idx = idx\n            max_idx =\
    \ idx\n        } else {\n            if lst[idx] < min {\n                min\
    \ = lst[idx]\n                min_idx = idx\n            }\n            if lst[idx]\
    \ > max {\n                max = lst[idx]\n                max_idx = idx\n   \
    \         }\n        }\n    }\n    result = append(result, min)\n    lst = append(lst[:min_idx],\
    \ lst[min_idx+1:]...)\n    if len(lst) > 0 {\n        result = append(result,\
    \ max)\n        lst = append(lst[:max_idx], lst[max_idx+1:]...)\n    }\n    for\
    \ len(lst) > 0 {\n        result = append(result, strange_sort_list(lst)...)\n\
    \        break\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n    \
    \    return lst\n    }\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    var new_lst\
    \ []int\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst, max)\n\
    \    for _, v := range lst {\n        if v != min && v != max {\n            new_lst\
    \ = append(new_lst, v)\n        }\n    }\n    return new_lst\n}\n", "    if len(lst)\
    \ == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n        return lst\n\
    \    }\n    if len(lst) == 2 {\n        if lst[0] > lst[1] {\n            return\
    \ []int{lst[1], lst[0]}\n        }\n        return lst\n    }\n    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    lst =\
    \ append(lst[:0], lst[2:]...)\n    return strange_sort_list(lst)\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    if min\
    \ == max {\n        return lst\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 1; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n", "    if len(lst) == 0 {\n        return\
    \ lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst {\n  \
    \      if v < min {\n            min = v\n        }\n        if v > max {\n  \
    \          max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst,\
    \ max)\n    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n  \
    \  }\n    sorted := make([]int, len(lst))\n    i := 0\n    for len(lst) > 0 {\n\
    \        min := lst[0]\n        max := lst[0]\n        min_i := 0\n        max_i\
    \ := 0\n        for j, v := range lst {\n            if v < min {\n          \
    \      min = v\n                min_i = j\n            }\n            if v > max\
    \ {\n                max = v\n                max_i = j\n            }\n     \
    \   }\n        sorted[i] = min\n        i++\n        if min_i < max_i {\n    \
    \        lst = append(lst[:min_i], lst[min_i+1:]...)\n            lst = append(lst[:max_i-1],\
    \ lst[max_i:]...)\n        } else {\n            lst = append(lst[:max_i], lst[max_i+1:]...)\n\
    \            lst = append(lst[:min_i-1], lst[min_i:]...)\n        }\n        i++\n\
    \    }\n    return sorted\n}\n", "    if len(lst) == 0 {\n        return lst\n\
    \    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n  \
    \      if v < min {\n            min = v\n        }\n        if v > max {\n  \
    \          max = v\n        }\n    }\n    if min == max {\n        return lst\n\
    \    }\n    var res []int\n    res = append(res, min)\n    res = append(res, max)\n\
    \    for _, v := range lst {\n        if v != min && v != max {\n            res\
    \ = append(res, v)\n        }\n    }\n    return strange_sort_list(res)\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max :=\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    if min == max {\n        return lst\n    }\n    lst = append(lst, min)\n\
    \    lst = append(lst, max)\n    return strange_sort_list(lst)\n}\n", "    if\
    \ len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    if min\
    \ == max {\n        return lst\n    }\n    res := []int{min}\n    lst = append(lst[:0],\
    \ lst[1:]...)\n    for len(lst) > 0 {\n        max = lst[0]\n        max_index\
    \ := 0\n        for i, v := range lst {\n            if v > max {\n          \
    \      max = v\n                max_index = i\n            }\n        }\n    \
    \    res = append(res, max)\n        lst = append(lst[:max_index], lst[max_index+1:]...)\n\
    \        min = lst[0]\n        min_index := 0\n        for i, v := range lst {\n\
    \            if v < min {\n                min = v\n                min_index\
    \ = i\n            }\n        }\n        res = append(res, min)\n        lst =\
    \ append(lst[:min_index], lst[min_index+1:]...)\n    }\n    return res\n}\n",
  "    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst) == 1 {\n   \
    \     return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    if len(lst) == 4 {\n        return []int{lst[0], lst[3],\
    \ lst[1], lst[2]}\n    }\n    if len(lst) == 5 {\n        return []int{lst[0],\
    \ lst[4], lst[1], lst[3], lst[2]}\n    }\n    if len(lst) == 6 {\n        return\
    \ []int{lst[0], lst[5], lst[1], lst[4], lst[2], lst[3]}\n    }\n    if len(lst)\
    \ == 7 {\n        return []int{lst[0], lst[6], lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]}\n    }\n    if len(lst) == 8 {\n        return []int{lst[0], lst[7],\
    \ lst[1], lst[6], lst[2], lst[5], lst[3], lst[4]}\n    }\n    if len(lst) == 9\
    \ {\n        return []int{lst[0], lst[8], lst[1], lst[7], lst[2], lst[6], lst[3],\
    \ lst[5], lst[4]}\n    }\n    if len(lst) == 10 {\n        return []int{lst[0],\
    \ lst[9], lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]}\n  \
    \  }\n    if len(lst) == 11 {\n        return []int{lst[0], lst"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
