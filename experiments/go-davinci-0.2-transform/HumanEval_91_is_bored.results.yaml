language: go_test.go
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentence string\n    for _, c := range S {\n        if c == '.' || c\
    \ == '?' || c == '!' {\n            if sentence[0] == 'I' {\n                boredoms++\n\
    \            }\n            sentence = \"\"\n        } else {\n            sentence\
    \ += string(c)\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmp19cvtsm8_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp19cvtsm8_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    boredoms := 0\n  \
    \  for _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgtuvc7w__test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentence string\n    for _, char := range S {\n        if char == '.'\
    \ || char == '?' || char == '!' {\n            if sentence[0] == 'I' {\n     \
    \           boredoms++\n            }\n            sentence = \"\"\n        }\
    \ else {\n            sentence += string(char)\n        }\n    }\n    return boredoms\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpn4tvlehm_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpn4tvlehm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentences []string\n    var sentence string\n    var word string\n  \
    \  var i int\n    var c byte\n\n    sentences = strings.Split(S, \".\")\n    for\
    \ _, sentence = range sentences {\n        words = strings.Split(sentence, \"\
    \ \")\n        for i, word = range words {\n            c = word[0]\n        \
    \    if c == 'I' {\n                boredoms++\n                break\n      \
    \      }\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ouon1ss_test.go:21:9: i declared but not used

    /tmp/tmp3ouon1ss_test.go:24:17: undefined: strings

    /tmp/tmp3ouon1ss_test.go:26:9: undefined: words

    /tmp/tmp3ouon1ss_test.go:26:17: undefined: strings

    /tmp/tmp3ouon1ss_test.go:27:29: undefined: words

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073218
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        var words []string = strings.Split(sentence, \"\
    \ \")\n        if words[0] == \"I\" {\n            boredoms++\n        }\n   \
    \ }\n    return boredoms\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz3c1y3l__test.go:18:30: undefined: strings

    /tmp/tmpz3c1y3l__test.go:20:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073188
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, s := range S {\n        if s == 'I' {\n            count++\n        }\n \
    \   }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpwgvjbqgu_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpwgvjbqgu_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3\
    \ (0.00s)\n        tmpwgvjbqgu_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpwgvjbqgu_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5\
    \ (0.00s)\n        tmpwgvjbqgu_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentence string = \"\"\n    for _, c := range S {\n        if c ==\
    \ '.' || c == '?' || c == '!' {\n            if sentence[0] == 'I' {\n       \
    \         boredoms++\n            }\n            sentence = \"\"\n        } else\
    \ {\n            sentence += string(c)\n        }\n    }\n    return boredoms\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpf86oka74_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpf86oka74_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n  \
    \  for _, v := range S {\n        if v == 'I' {\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp1r1mz4ix_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp1r1mz4ix_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcveo_rwn_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n\
    \    return 0\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmptjznpwz0_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmptjznpwz0_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms += 1\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_zzdplq1_test.go:18:30: undefined: strings

    /tmp/tmp_zzdplq1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcveo_rwn_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcveo_rwn_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n  \
    \  for _, v := range S {\n        if v == 'I' {\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp1r1mz4ix_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp1r1mz4ix_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var i int\n    for i = 0; i < len(S); i++ {\n        if S[i] == 'I' {\n \
    \           boredoms++\n        }\n        if S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!' {\n            break\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpwmemdrh3_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpwmemdrh3_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3\
    \ (0.00s)\n        tmpwmemdrh3_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpwmemdrh3_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestIs_Bored/test_num__5\
    \ (0.00s)\n        tmpwmemdrh3_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073218
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    for _, word := range S {\n        if word == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t *testing.T) {\n\
    \  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\
    \ world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected:\
    \ 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual:\
    \ candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today.\
    \ I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"\
    You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmp2axi2hhi_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp2axi2hhi_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3\
    \ (0.00s)\n        tmp2axi2hhi_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp2axi2hhi_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5\
    \ (0.00s)\n        tmp2axi2hhi_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    // your code here\n\
    \    return 0\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmp651njgoc_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp651njgoc_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentence string\n    for _, c := range S {\n        if c == '.' || c\
    \ == '?' || c == '!' {\n            if sentence[0] == 'I' {\n                boredoms++\n\
    \            }\n            sentence = \"\"\n        } else {\n            sentence\
    \ += string(c)\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmp19cvtsm8_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp19cvtsm8_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcveo_rwn_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentences []string\n    var sentence string\n    var words []string\n\
    \    var word string\n    var i int\n    var j int\n    var k int\n    var l int\n\
    \    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n \
    \   var r int\n    var s int\n    var t int\n    var u int\n    var v int\n  \
    \  var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n  \
    \  var ab int\n    var ac int\n    var ad int\n    var ae int\n    var af int\n\
    \    var ag int\n    var ah int\n    var ai int\n    var aj int\n    var ak int\n\
    \    var al int\n    var am int\n    var an int\n    var ao int\n    var ap int\n\
    \    var aq int\n    var ar int\n    var as int\n    var at int\n    var au int\n\
    \    var av int\n    var aw int\n    var ax int\n    var ay int\n    var az int\n\
    \    var ba int\n    var bb int\n    var bc int\n    var bd int\n    var be int\n\
    \    var bf int\n    var bg int\n    var bh int\n    var bi int\n    var bj int\n\
    \    var bk int\n    var bl int\n    var bm int\n    var bn int\n    var bo int\n\
    \    var bp int\n    var bq int\n    var br int\n    var bs int\n    var bt int\n\
    \    var bu int\n    var bv int\n    var bw int\n    var bx int\n    var by int\n\
    \    var bz int\n    var ca int\n    var cb int\n    var cc int\n    var cd int\n\
    \    var ce int\n    var cf int\n    var cg int\n    var ch int\n    var ci int\n\
    \    var cj int\n    var ck int\n    var cl int\n    var cm int\n    var cn int\n\
    \    var co int\n    var cp int\n    var cq int\n    var cr int\n    var cs int\n\
    \    var ct int\n    var\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfrd_ofxq_test.go:113:1: expected ''IDENT'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentences []string\n    var sentence string\n    var word string\n  \
    \  var i int\n    var c byte\n\n    sentences = make([]string, 0)\n    sentence\
    \ = \"\"\n    word = \"\"\n    i = 0\n    for i < len(S) {\n        c = S[i]\n\
    \        if c == '.' || c == '?' || c == '!' {\n            if len(word) > 0 {\n\
    \                sentence += word\n                word = \"\"\n            }\n\
    \            sentences = append(sentences, sentence)\n            sentence = \"\
    \"\n        } else if c == ' ' {\n            if len(word) > 0 {\n           \
    \     sentence += word\n                word = \"\"\n            }\n         \
    \   sentence += \" \"\n        } else {\n            word += string(c)\n     \
    \   }\n        i++\n    }\n    if len(word) > 0 {\n        sentence += word\n\
    \        word = \"\"\n    }\n    sentences = append(sentences, sentence)\n\n \
    \   for _, sentence = range sentences {\n        if len(sentence) > 0 && sentence[0]\
    \ == 'I' {\n            boredoms++\n        }\n    }\n\n    return boredoms\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpiayc1p2o_test.go:81: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpiayc1p2o_test.go:81:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073218
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentences []string\n    var words []string\n    sentences = strings.Split(S,\
    \ \".\")\n    for _, sentence := range sentences {\n        words = strings.Split(sentence,\
    \ \" \")\n        if words[0] == \"I\" {\n            boredoms++\n        }\n\
    \    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5a3cohky_test.go:20:17: undefined: strings

    /tmp/tmp5a3cohky_test.go:22:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    boredoms := 0\n  \
    \  for _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgtuvc7w__test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms += 1\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_zzdplq1_test.go:18:30: undefined: strings

    /tmp/tmp_zzdplq1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n  \
    \  for _, word := range strings.Split(S, \" \") {\n        if strings.HasPrefix(word,\
    \ \"I\") {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnsjiu_1g_test.go:18:26: undefined: strings

    /tmp/tmpnsjiu_1g_test.go:19:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073218
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var words []string\n    words = strings.Split(S, \" \")\n    for _, word\
    \ := range words {\n        if word == \"I\" {\n            boredoms++\n     \
    \   }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0tnm_cqj_test.go:19:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if strings.HasPrefix(word,\
    \ \"I\") {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\
    \nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2eazxi4l_test.go:18:26: undefined: strings

    /tmp/tmp2eazxi4l_test.go:19:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    for _, word := range strings.Split(S, \" \") {\n        if word == \"\
    I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\
    func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyesje_eh_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n\
    \    return 0\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmptjznpwz0_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmptjznpwz0_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n  \
    \  for _, v := range S {\n        if v == 'I' {\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp1r1mz4ix_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp1r1mz4ix_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms += 1\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_zzdplq1_test.go:18:30: undefined: strings

    /tmp/tmp_zzdplq1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    // your code here\n\
    \    return 0\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmp651njgoc_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp651njgoc_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    // your code here\n\
    \    return 0\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmp651njgoc_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp651njgoc_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, sentence := range split_sentences(S) {\n        if is_bored_sentence(sentence)\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb1xy1ux2_test.go:18:30: undefined: split_sentences

    /tmp/tmpb1xy1ux2_test.go:19:12: undefined: is_bored_sentence

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentence string = \"\"\n    for _, c := range S {\n        if c ==\
    \ '.' || c == '?' || c == '!' {\n            if sentence[0] == 'I' {\n       \
    \         boredoms++\n            }\n            sentence = \"\"\n        } else\
    \ {\n            sentence += string(c)\n        }\n    }\n    return boredoms\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpf86oka74_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpf86oka74_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentences []string\n    var sentence string\n    var i int\n    var c\
    \ byte\n\n    sentences = strings.Split(S, \".\")\n    for _, sentence = range\
    \ sentences {\n        if len(sentence) > 0 {\n            if sentence[0] == 'I'\
    \ {\n                boredoms++\n            }\n        }\n    }\n\n    sentences\
    \ = strings.Split(S, \"?\")\n    for _, sentence = range sentences {\n       \
    \ if len(sentence) > 0 {\n            if sentence[0] == 'I' {\n              \
    \  boredoms++\n            }\n        }\n    }\n\n    sentences = strings.Split(S,\
    \ \"!\")\n    for _, sentence = range sentences {\n        if len(sentence) >\
    \ 0 {\n            if sentence[0] == 'I' {\n                boredoms++\n     \
    \       }\n        }\n    }\n\n    return boredoms\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qvfq_1c_test.go:20:9: i declared but not used

    /tmp/tmp9qvfq_1c_test.go:21:9: c declared but not used

    /tmp/tmp9qvfq_1c_test.go:23:17: undefined: strings

    /tmp/tmp9qvfq_1c_test.go:32:17: undefined: strings

    /tmp/tmp9qvfq_1c_test.go:41:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, sentence := range S {\n        if sentence == 'I' {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t *testing.T) {\n\
    \  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\
    \ world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected:\
    \ 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual:\
    \ candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today.\
    \ I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"\
    You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmp2ww1nqmu_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp2ww1nqmu_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3\
    \ (0.00s)\n        tmp2ww1nqmu_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp2ww1nqmu_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5\
    \ (0.00s)\n        tmp2ww1nqmu_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentence string\n    for _, char := range S {\n        if char == '.'\
    \ || char == '?' || char == '!' {\n            if sentence[0] == 'I' {\n     \
    \           boredoms++\n            }\n            sentence = \"\"\n        }\
    \ else {\n            sentence += string(char)\n        }\n    }\n    return boredoms\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpn4tvlehm_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpn4tvlehm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, s := range S {\n        if s == 'I' {\n            boredoms++\n  \
    \      }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t *testing.T) {\n\
    \  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\
    \ world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected:\
    \ 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual:\
    \ candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today.\
    \ I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"\
    You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpqumvlab3_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpqumvlab3_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3\
    \ (0.00s)\n        tmpqumvlab3_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpqumvlab3_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5\
    \ (0.00s)\n        tmpqumvlab3_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentence string\n    for _, char := range S {\n        if char == '.'\
    \ || char == '?' || char == '!' {\n            if sentence[0] == 'I' {\n     \
    \           boredoms++\n            }\n            sentence = \"\"\n        }\
    \ else {\n            sentence += string(char)\n        }\n    }\n    return boredoms\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpn4tvlehm_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpn4tvlehm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if strings.HasPrefix(word,\
    \ \"I\") {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\
    \nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2eazxi4l_test.go:18:26: undefined: strings

    /tmp/tmp2eazxi4l_test.go:19:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, v := range S {\n        if v == 'I' {\n            count++\n        }\n \
    \   }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate :=\
    \ is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpibj46k16_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpibj46k16_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3\
    \ (0.00s)\n        tmpibj46k16_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpibj46k16_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5\
    \ (0.00s)\n        tmpibj46k16_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n  \
    \  for _, v := range S {\n        if v == 'I' {\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp1r1mz4ix_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp1r1mz4ix_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcveo_rwn_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcveo_rwn_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    for _, word := range strings.Split(S, \" \") {\n        if word == \"\
    I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ula8jve_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcveo_rwn_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n  \
    \  for _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpslqdn65q_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n  \
    \  for _, word := range S {\n        if word == 'I' {\n            count++\n \
    \       }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n \
    \ candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\
    \ world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected:\
    \ 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual:\
    \ candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today.\
    \ I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"\
    You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpl5_t5f26_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmpl5_t5f26_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3\
    \ (0.00s)\n        tmpl5_t5f26_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpl5_t5f26_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5\
    \ (0.00s)\n        tmpl5_t5f26_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073188
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcveo_rwn_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, sentence := range strings.Split(S, \".\") {\n        if strings.HasPrefix(sentence,\
    \ \"I\") {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\
    \nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60zb1t62_test.go:18:30: undefined: strings

    /tmp/tmp60zb1t62_test.go:19:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".!?\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqiisdp0k_test.go:18:30: undefined: strings

    /tmp/tmpqiisdp0k_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcveo_rwn_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var count int\n  \
    \  for _, v := range S {\n        if v == 'I' {\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__2 (0.00s)\n        tmp1r1mz4ix_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestIs_Bored/test_num__3\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp1r1mz4ix_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestIs_Bored/test_num__5\
    \ (0.00s)\n        tmp1r1mz4ix_test.go:44: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentences []string\n    var sentence string\n    var words []string\n\
    \    var word string\n    var i int\n    var j int\n    var k int\n    var l int\n\
    \    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n \
    \   var r int\n    var s int\n    var t int\n    var u int\n    var v int\n  \
    \  var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n  \
    \  var ab int\n    var ac int\n    var ad int\n    var ae int\n    var af int\n\
    \    var ag int\n    var ah int\n    var ai int\n    var aj int\n    var ak int\n\
    \    var al int\n    var am int\n    var an int\n    var ao int\n    var ap int\n\
    \    var aq int\n    var ar int\n    var as int\n    var at int\n    var au int\n\
    \    var av int\n    var aw int\n    var ax int\n    var ay int\n    var az int\n\
    \    var ba int\n    var bb int\n    var bc int\n    var bd int\n    var be int\n\
    \    var bf int\n    var bg int\n    var bh int\n    var bi int\n    var bj int\n\
    \    var bk int\n    var bl int\n    var bm int\n    var bn int\n    var bo int\n\
    \    var bp int\n    var bq int\n    var br int\n    var bs int\n    var bt int\n\
    \    var bu int\n    var bv int\n    var bw int\n    var bx int\n    var by int\n\
    \    var bz int\n    var ca int\n    var cb int\n    var cc int\n    var cd int\n\
    \    var ce int\n    var cf int\n    var cg int\n    var ch int\n    var ci int\n\
    \    var cj int\n    var ck int\n    var cl int\n    var cm int\n    var cn int\n\
    \    var co int\n    var cp int\n    var cq int\n    var cr int\n    var cs int\n\
    \    var ct int\n    var\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfrd_ofxq_test.go:113:1: expected ''IDENT'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentence string\n    for _, c := range S {\n        sentence += string(c)\n\
    \        if c == '.' || c == '?' || c == '!' {\n            if sentence[0] ==\
    \ 'I' {\n                boredoms++\n            }\n            sentence = \"\"\
    \n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t *testing.T)\
    \ {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpg2qbc8ne_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpg2qbc8ne_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073218
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp89sr7cwo_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = split_sentences(S)\n    for _, sentence := range\
    \ sentences {\n        if is_bored_sentence(sentence) {\n            boredoms++\n\
    \        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t *testing.T) {\n\
    \  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\
    \ world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected:\
    \ 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n     { actual:\
    \ candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today.\
    \ I will be productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"\
    You and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf49nxby2_test.go:18:30: undefined: split_sentences

    /tmp/tmpf49nxby2_test.go:20:12: undefined: is_bored_sentence

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcveo_rwn_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms += 1\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_zzdplq1_test.go:18:30: undefined: strings

    /tmp/tmp_zzdplq1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    // your code here\n\
    \    return 0\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmp651njgoc_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp651njgoc_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    // your code here\n\
    \    return 0\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmp651njgoc_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmp651njgoc_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentence string = \"\"\n    var sentences []string\n    var words\
    \ []string\n\n    sentences = strings.Split(S, \".\")\n    sentences = append(sentences,\
    \ strings.Split(S, \"?\")...)\n    sentences = append(sentences, strings.Split(S,\
    \ \"!\")...)\n\n    for _, sentence = range sentences {\n        words = strings.Split(sentence,\
    \ \" \")\n        if words[0] == \"I\" {\n            boredoms++\n        }\n\
    \    }\n\n    return boredoms\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo7ek3rq4_test.go:22:17: undefined: strings

    /tmp/tmpo7ek3rq4_test.go:23:35: undefined: strings

    /tmp/tmpo7ek3rq4_test.go:24:35: undefined: strings

    /tmp/tmpo7ek3rq4_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n\
    \    return 0\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmptjznpwz0_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmptjznpwz0_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".!?\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqiisdp0k_test.go:18:30: undefined: strings

    /tmp/tmpqiisdp0k_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n\
    \    return 0\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmptjznpwz0_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmptjznpwz0_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentences []string\n    sentences = split_sentences(S)\n    for _, sentence\
    \ := range sentences {\n        if is_bored_sentence(sentence) {\n           \
    \ boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqu_zhgd7_test.go:19:17: undefined: split_sentences

    /tmp/tmpqu_zhgd7_test.go:21:12: undefined: is_bored_sentence

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcveo_rwn_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Your code here\n\
    \    return 0\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello world\"), expected: 0 },\n\
    \     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     { actual:\
    \ candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"bIt\"\
    ), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be productive.\
    \ will kill It\"), expected: 2 },\n     { actual: candidate(\"You and I are going\
    \ for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmptjznpwz0_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmptjznpwz0_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentence string\n    for _, char := range S {\n        if char == '.'\
    \ || char == '?' || char == '!' {\n            if sentence[0] == 'I' {\n     \
    \           boredoms++\n            }\n            sentence = \"\"\n        }\
    \ else {\n            sentence += string(char)\n        }\n    }\n    return boredoms\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpn4tvlehm_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpn4tvlehm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentence string\n    for _, char := range S {\n        if char == '.'\
    \ || char == '?' || char == '!' {\n            if sentence[0] == 'I' {\n     \
    \           boredoms++\n            }\n            sentence = \"\"\n        }\
    \ else {\n            sentence += string(char)\n        }\n    }\n    return boredoms\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpn4tvlehm_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpn4tvlehm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentence string\n    for _, char := range S {\n        if char == '.'\
    \ || char == '?' || char == '!' {\n            if sentence[0] == 'I' {\n     \
    \           boredoms++\n            }\n            sentence = \"\"\n        }\
    \ else {\n            sentence += string(char)\n        }\n    }\n    return boredoms\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpn4tvlehm_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpn4tvlehm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    count := 0\n    for\
    \ _, word := range strings.Split(S, \" \") {\n        if strings.HasPrefix(word,\
    \ \"I\") {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp96q15bhj_test.go:18:26: undefined: strings

    /tmp/tmp96q15bhj_test.go:19:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073188
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    for _, word := range strings.Split(S, \" \") {\n        if word == \"I\"\
    \ {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxd1m0qa_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms += 1\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_zzdplq1_test.go:18:30: undefined: strings

    /tmp/tmp_zzdplq1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int\n\
    \    var sentence string\n    for _, char := range S {\n        if char == '.'\
    \ || char == '?' || char == '!' {\n            if sentence[0] == 'I' {\n     \
    \           boredoms++\n            }\n            sentence = \"\"\n        }\
    \ else {\n            sentence += string(char)\n        }\n    }\n    return boredoms\n\
    }\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__1\
    \ (0.00s)\n        tmpn4tvlehm_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpn4tvlehm_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        var words []string = strings.Split(sentence, \"\
    \ \")\n        if words[0] == \"I\" {\n            boredoms++\n        }\n   \
    \ }\n    return boredoms\n}\n\nfunc TestIs_Bored(t *testing.T) {\n  candidate\
    \ := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello world\"), expected:\
    \ 0 },\n     { actual: candidate(\"Is the sky blue?\"), expected: 0 },\n     {\
    \ actual: candidate(\"I love It !\"), expected: 1 },\n     { actual: candidate(\"\
    bIt\"), expected: 0 },\n     { actual: candidate(\"I feel good today. I will be\
    \ productive. will kill It\"), expected: 2 },\n     { actual: candidate(\"You\
    \ and I are going for a walk\"), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz3c1y3l__test.go:18:30: undefined: strings

    /tmp/tmpz3c1y3l__test.go:20:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073188
- exit_code: 2
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    var boredoms int =\
    \ 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        if strings.HasPrefix(sentence, \"I\") {\n    \
    \        boredoms++\n        }\n    }\n    return boredoms\n}\n\nfunc TestIs_Bored(t\
    \ *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello world\"), expected: 0 },\n     { actual: candidate(\"Is the sky blue?\"\
    ), expected: 0 },\n     { actual: candidate(\"I love It !\"), expected: 1 },\n\
    \     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual: candidate(\"\
    I feel good today. I will be productive. will kill It\"), expected: 2 },\n   \
    \  { actual: candidate(\"You and I are going for a walk\"), expected: 0 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp883omzal_test.go:18:30: undefined: strings

    /tmp/tmp883omzal_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You'll be given a string of words, and your task is to count the number\n//\
    \ of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
    \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello\
    \ world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n// 1\nfunc is_bored(S string) int {\n    return 0\n}\n\nfunc\
    \ TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
    Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"\
    ), expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
    \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
    \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
    \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Bored (0.00s)\n    --- FAIL: TestIs_Bored/test_num__2\
    \ (0.00s)\n        tmpnlvzq7p4_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestIs_Bored/test_num__4 (0.00s)\n        tmpnlvzq7p4_test.go:38:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073156
