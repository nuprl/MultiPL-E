name: HumanEval_6_parse_nested_parens
language: go_test.go
prompt: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string string) []int {\n"
tests: "func TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"),\
  \ expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
  ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"),\
  \ expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []int\n    var current_level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level++\n\
    \        } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level--\n        }\n    }\n    return result\n}\n", "   \
    \ var result []int\n    var count int\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            count++\n        } else if char == ')'\
    \ {\n            count--\n        } else if char == ' ' {\n            result\
    \ = append(result, count)\n            count = 0\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var paren_count int\n    var max_paren_count\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         paren_count += 1\n            if paren_count > max_paren_count {\n \
    \               max_paren_count = paren_count\n            }\n        } else if\
    \ char == ')' {\n            paren_count -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_paren_count)\n            max_paren_count\
    \ = 0\n            paren_count = 0\n        }\n    }\n    result = append(result,\
    \ max_paren_count)\n    return result\n}\n", "    var result []int\n    var max_level\
    \ int\n    var level int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            level++\n            if level > max_level {\n           \
    \     max_level = level\n            }\n        } else if c == ')' {\n       \
    \     level--\n        } else if c == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            level = 0\n        }\n  \
    \  }\n    result = append(result, max_level)\n    return result\n}\n", "    var\
    \ max_depth []int\n    var depth int\n    for _, c := range paren_string {\n \
    \       if c == '(' {\n            depth++\n        } else if c == ')' {\n   \
    \         depth--\n        } else if c == ' ' {\n            max_depth = append(max_depth,\
    \ depth)\n            depth = 0\n        }\n    }\n    max_depth = append(max_depth,\
    \ depth)\n    return max_depth\n}\n", "    var result []int\n    var level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   level++\n        } else if char == ')' {\n            level--\n        } else\
    \ if char == ' ' {\n            result = append(result, level)\n        }\n  \
    \  }\n    return result\n}\n", "    var result []int\n    var max_depth int\n\
    \    var current_depth int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            current_depth += 1\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == ')' {\n            current_depth -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_depth)\n         \
    \   max_depth = 0\n            current_depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var result []int\n\
    \    var paren_stack []int\n    var current_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            paren_stack = append(paren_stack, current_level)\n\
    \            current_level++\n        } else if c == ')' {\n            current_level\
    \ = paren_stack[len(paren_stack)-1]\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \        } else if c == ' ' {\n            result = append(result, current_level)\n\
    \            current_level = 0\n        }\n    }\n    return result\n}\n", " \
    \   // TODO: Implement this function.\n    return []int{}\n}\n", "    max_depth\
    \ := 0\n    depth := 0\n    depths := []int{}\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth += 1\n            if depth >\
    \ max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if char == ')' {\n            depths = append(depths, max_depth)\n         \
    \   depth -= 1\n        }\n    }\n    return depths\n}\n", "    var result []int\n\
    \    var current_level int\n    var max_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var max_depth int\n    var depth int\n\
    \    var result []int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            depth += 1\n            if depth > max_depth {\n     \
    \           max_depth = depth\n            }\n        } else if char == ')' {\n\
    \            depth -= 1\n        } else if char == ' ' {\n            result =\
    \ append(result, max_depth)\n            max_depth = 0\n            depth = 0\n\
    \        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var max_nesting int\n    var current_nesting\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_nesting += 1\n            if current_nesting > max_nesting {\n\
    \                max_nesting = current_nesting\n            }\n        } else\
    \ if char == ')' {\n            current_nesting -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_nesting)\n            max_nesting\
    \ = 0\n            current_nesting = 0\n        }\n    }\n    result = append(result,\
    \ max_nesting)\n    return result\n}\n", "    var result []int\n    var level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   level++\n        } else if c == ')' {\n            level--\n        } else\
    \ if c == ' ' {\n            result = append(result, level)\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    var stack []int\n    var\
    \ max_depth int\n    for _, char := range paren_string {\n        if char == '('\
    \ {\n            stack = append(stack, 1)\n            if len(stack) > max_depth\
    \ {\n                max_depth = len(stack)\n            }\n        } else if\
    \ char == ')' {\n            stack = stack[:len(stack)-1]\n        } else if char\
    \ == ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n        }\n    }\n    return result\n}\n", "    var result []int\n    var\
    \ current_level int\n    var max_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var max_depth\
    \ int\n    var current_depth int\n    for _, char := range paren_string {\n  \
    \      if char == '(' {\n            current_depth += 1\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == ')' {\n            if current_depth == 0 {\n        \
    \        panic(\"Invalid input string\")\n            }\n            current_depth\
    \ -= 1\n            if current_depth == 0 {\n                result = append(result,\
    \ max_depth)\n                max_depth = 0\n            }\n        } else if\
    \ char == ' ' {\n            continue\n        } else {\n            panic(\"\
    Invalid input string\")\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var stack []int\n    var max_depth int\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            stack = append(stack,\
    \ 1)\n            max_depth++\n        } else if char == ')' {\n            stack\
    \ = stack[:len(stack)-1]\n            max_depth--\n        } else if char == '\
    \ ' {\n            result = append(result, max_depth)\n            max_depth =\
    \ 0\n        }\n    }\n    return result\n}\n", "    var result []int\n    var\
    \ current_level int\n    var max_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if c == ')' {\n            current_level -= 1\n        } else if\
    \ c == ' ' {\n            result = append(result, max_level)\n            current_level\
    \ = 0\n            max_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n        } else if c == ')' {\n            result = append(result,\
    \ current_level)\n            current_level -= 1\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_level)\n         \
    \   current_level = 0\n            max_level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var result []int\n\
    \    var current_level int\n    var max_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var depth int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            depth += 1\n \
    \       } else if c == ')' {\n            depth -= 1\n        } else if c == '\
    \ ' {\n            result = append(result, depth)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var current_level int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \        } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level--\n        }\n    }\n    return result\n}\n", "   \
    \ var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var paren_stack []int\n    var max_depth int\n    var depth int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            depth\
    \ += 1\n            paren_stack = append(paren_stack, depth)\n            if depth\
    \ > max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if c == ')' {\n            depth -= 1\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \        } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var result []int\n\
    \    var current_level int\n    var max_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if c == ')' {\n            current_level--\n        } else if c\
    \ == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    result := make([]int, 0)\n    max_depth\
    \ := 0\n    depth := 0\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            depth += 1\n            if depth > max_depth {\n        \
    \        max_depth = depth\n            }\n        } else if c == ')' {\n    \
    \        depth -= 1\n        } else if c == ' ' {\n            result = append(result,\
    \ max_depth)\n            max_depth = 0\n            depth = 0\n        }\n  \
    \  }\n    result = append(result, max_depth)\n    return result\n}\n", "    var\
    \ max_depth int\n    var depth int\n    var result []int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            depth++\n            if depth\
    \ > max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if c == ')' {\n            depth--\n        } else if c == ' ' {\n         \
    \   result = append(result, max_depth)\n            max_depth = 0\n          \
    \  depth = 0\n        }\n    }\n    result = append(result, max_depth)\n    return\
    \ result\n}\n", "    var max_nesting []int\n    var current_nesting int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            current_nesting\
    \ += 1\n        } else if char == ')' {\n            current_nesting -= 1\n  \
    \      } else if char == ' ' {\n            max_nesting = append(max_nesting,\
    \ current_nesting)\n            current_nesting = 0\n        }\n    }\n    max_nesting\
    \ = append(max_nesting, current_nesting)\n    return max_nesting\n}\n", "    var\
    \ result []int\n    var current_level int\n    var max_level int\n    for _, c\
    \ := range paren_string {\n        if c == '(' {\n            current_level +=\
    \ 1\n            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            current_level -= 1\n\
    \        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var max_depth int\n    var depth int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth += 1\n            if depth >\
    \ max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if char == ')' {\n            depth -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_depth)\n            max_depth = 0\n \
    \           depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var depth int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            depth++\n    \
    \    } else if c == ')' {\n            depth--\n        } else if c == ' ' {\n\
    \            result = append(result, depth)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            current_level += 1\n \
    \       } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            current_level--\n  \
    \      } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var stack []rune\n    var max_depth int\n    var current_depth int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            stack\
    \ = append(stack, c)\n            current_depth++\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if c == ')' {\n            stack = stack[:len(stack)-1]\n      \
    \      current_depth--\n        } else if c == ' ' {\n            result = append(result,\
    \ max_depth)\n            max_depth = 0\n            current_depth = 0\n     \
    \   }\n    }\n    result = append(result, max_depth)\n    return result\n}\n",
  "    var result []int\n    var stack []int\n    var max_depth int\n    for _, c\
    \ := range paren_string {\n        if c == '(' {\n            stack = append(stack,\
    \ 1)\n            if len(stack) > max_depth {\n                max_depth = len(stack)\n\
    \            }\n        } else if c == ')' {\n            stack = stack[:len(stack)-1]\n\
    \        } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var current_level int\n    var max_level int\n    for _, c\
    \ := range paren_string {\n        if c == '(' {\n            current_level +=\
    \ 1\n            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            if current_level ==\
    \ max_level {\n                result = append(result, max_level)\n          \
    \      max_level = 0\n            }\n            current_level -= 1\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    var stack []int\n\
    \    var level int\n    for _, char := range paren_string {\n        if char ==\
    \ '(' {\n            level++\n            stack = append(stack, level)\n     \
    \   } else if char == ')' {\n            result = append(result, stack[len(stack)-1])\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return result\n\
    }\n", "    var max_depth int\n    var depths []int\n    var depth int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            depth++\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if char == ')' {\n            depths = append(depths,\
    \ depth)\n            depth--\n        }\n    }\n    return depths\n}\n", "  \
    \  var result []int\n    var stack []string\n    var max_depth int\n    var depth\
    \ int\n    var paren_group string\n    var paren_char string\n\n    for _, paren_group\
    \ = range paren_string {\n        stack = []string{}\n        max_depth = 0\n\
    \        depth = 0\n        for _, paren_char = range paren_group {\n        \
    \    if paren_char == '(' {\n                stack = append(stack, \"(\")\n  \
    \              depth += 1\n                if depth > max_depth {\n          \
    \          max_depth = depth\n                }\n            } else if paren_char\
    \ == ')' {\n                stack = stack[:len(stack)-1]\n                depth\
    \ -= 1\n            }\n        }\n        result = append(result, max_depth)\n\
    \    }\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_level)\n         \
    \   max_level = 0\n            current_level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var result []int\n\
    \    var max_level int\n    var level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            level++\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        } else if char\
    \ == ')' {\n            level--\n        } else if char == ' ' {\n           \
    \ result = append(result, max_level)\n            max_level = 0\n            level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if char == ')'\
    \ {\n            current_level -= 1\n        } else if char == ' ' {\n       \
    \     result = append(result, max_level)\n            max_level = 0\n        \
    \    current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var max_depth int\n    var\
    \ current_depth int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == ')' {\n            current_depth -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            current_depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            if current_level == max_level {\n\
    \                result = append(result, max_level)\n                max_level\
    \ = 0\n            }\n            current_level -= 1\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level++\n        } else if\
    \ c == ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, level)\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var current_level int\n    var max_level int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var max_depth\
    \ int = 0\n    var depth int = 0\n    var result []int = make([]int, 0)\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            depth += 1\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if c == ')' {\n            depth -= 1\n        } else\
    \ if c == ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var max_nesting []int\n    var current_nesting\
    \ int\n    var current_char byte\n    var i int\n    for i = 0; i < len(paren_string);\
    \ i++ {\n        current_char = paren_string[i]\n        if current_char == '('\
    \ {\n            current_nesting++\n        } else if current_char == ')' {\n\
    \            current_nesting--\n        } else if current_char == ' ' {\n    \
    \        max_nesting = append(max_nesting, current_nesting)\n            current_nesting\
    \ = 0\n        }\n    }\n    max_nesting = append(max_nesting, current_nesting)\n\
    \    return max_nesting\n}\n", "    var result []int\n    var max_depth int\n\
    \    var current_depth int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            current_depth += 1\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == ')' {\n            current_depth -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_depth)\n         \
    \   max_depth = 0\n            current_depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var result []int\n\
    \    for _, paren_group := range paren_string {\n        var depth int\n     \
    \   for _, paren := range paren_group {\n            if paren == '(' {\n     \
    \           depth += 1\n            } else if paren == ')' {\n               \
    \ depth -= 1\n            }\n        }\n        result = append(result, depth)\n\
    \    }\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level--\n        } else if c == ' ' {\n \
    \           result = append(result, max_level)\n            max_level = 0\n  \
    \          current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   for _, char := range paren_string {\n        if char == '(' {\n          \
    \  current_level += 1\n        } else if char == ')' {\n            current_level\
    \ -= 1\n        } else if char == ' ' {\n            result = append(result, current_level)\n\
    \            current_level = 0\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if char == ')' {\n          \
    \  if current_level == max_level {\n                result = append(result, max_level)\n\
    \                max_level = 0\n            }\n            current_level -= 1\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ paren_group := range paren_string {\n        var level int\n        for _, paren\
    \ := range paren_group {\n            if paren == '(' {\n                level++\n\
    \            } else if paren == ')' {\n                level--\n            }\n\
    \        }\n        result = append(result, level)\n    }\n    return result\n\
    }\n", "    max_depth := 0\n    depth := 0\n    max_depths := []int{}\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if char == ')' {\n            depth -= 1\n    \
    \        if depth == 0 {\n                max_depths = append(max_depths, max_depth)\n\
    \                max_depth = 0\n            }\n        }\n    }\n    return max_depths\n\
    }\n", "    var max_depth []int\n    var depth int\n    var i int\n    for i =\
    \ 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n     \
    \       depth++\n        } else if paren_string[i] == ')' {\n            depth--\n\
    \        } else if paren_string[i] == ' ' {\n            max_depth = append(max_depth,\
    \ depth)\n            depth = 0\n        }\n    }\n    max_depth = append(max_depth,\
    \ depth)\n    return max_depth\n}\n", "    var result []int\n    var paren_stack\
    \ []int\n    var paren_count int\n    var paren_max int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            paren_stack = append(paren_stack,\
    \ 1)\n            paren_count++\n            if paren_count > paren_max {\n  \
    \              paren_max = paren_count\n            }\n        } else if c ==\
    \ ')' {\n            paren_stack = paren_stack[:len(paren_stack)-1]\n        \
    \    paren_count--\n        } else if c == ' ' {\n            result = append(result,\
    \ paren_max)\n            paren_max = 0\n            paren_count = 0\n       \
    \ }\n    }\n    result = append(result, paren_max)\n    return result\n}\n", " \
    \   var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            current_level--\n  \
    \      } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var max_depth\
    \ int\n    var depth int\n    var result []int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth += 1\n            if depth >\
    \ max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if char == ')' {\n            depth -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_depth)\n            max_depth = 0\n \
    \           depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var stack []int\n    var\
    \ max_depth int\n    var depth int\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            stack = append(stack, 1)\n            depth++\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if char == ')' {\n            stack = stack[:len(stack)-1]\n\
    \            depth--\n        } else if char == ' ' {\n            result = append(result,\
    \ max_depth)\n            max_depth = 0\n            depth = 0\n        }\n  \
    \  }\n    result = append(result, max_depth)\n    return result\n}\n", "    var\
    \ max_depth int\n    var depth int\n    var result []int\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            depth++\n            if\
    \ depth > max_depth {\n                max_depth = depth\n            }\n    \
    \    } else if char == ')' {\n            depth--\n        } else if char == '\
    \ ' {\n            result = append(result, max_depth)\n            max_depth =\
    \ 0\n            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            current_level\
    \ = 0\n            max_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n        } else if char == ')' {\n            result\
    \ = append(result, current_level)\n            current_level--\n        }\n  \
    \  }\n    return result\n}\n", "    var result []int\n    var current_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level += 1\n        } else if char == ')' {\n            result =\
    \ append(result, current_level)\n            current_level -= 1\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    var current_level int\n\
    \    var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var max_nesting []int\n    var nesting\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   nesting += 1\n        } else if c == ')' {\n            nesting -= 1\n   \
    \     } else if c == ' ' {\n            max_nesting = append(max_nesting, nesting)\n\
    \            nesting = 0\n        }\n    }\n    max_nesting = append(max_nesting,\
    \ nesting)\n    return max_nesting\n}\n", "    var result []int\n    var depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         depth += 1\n        } else if char == ')' {\n            depth -= 1\n\
    \        } else if char == ' ' {\n            result = append(result, depth)\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    var stack\
    \ []rune\n    var depth int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            stack = append(stack, c)\n            depth += 1\n \
    \       } else if c == ')' {\n            stack = stack[:len(stack)-1]\n     \
    \       depth -= 1\n        } else if c == ' ' {\n            result = append(result,\
    \ depth)\n        }\n    }\n    return result\n}\n", "    var result []int\n \
    \   var current_level int\n    var max_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if c == ')' {\n            current_level--\n        } else if c\
    \ == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            if current_level == max_level {\n\
    \                result = append(result, max_level)\n                max_level\
    \ = 0\n            }\n            current_level -= 1\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var stack []rune\n    var\
    \ current_level int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            stack = append(stack, c)\n            current_level++\n     \
    \   } else if c == ')' {\n            stack = stack[:len(stack)-1]\n         \
    \   if len(stack) == 0 {\n                result = append(result, current_level)\n\
    \                current_level = 0\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var max_depth int\n    var depth int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var result []int\n\
    \    var max_nesting int\n    var current_nesting int\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            current_nesting++\n  \
    \          if current_nesting > max_nesting {\n                max_nesting = current_nesting\n\
    \            }\n        } else if char == ')' {\n            current_nesting--\n\
    \        } else if char == ' ' {\n            result = append(result, max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n        }\n   \
    \ }\n    result = append(result, max_nesting)\n    return result\n}\n", "    var\
    \ result []int\n    var level int\n    for _, c := range paren_string {\n    \
    \    if c == '(' {\n            level++\n        } else if c == ')' {\n      \
    \      level--\n        } else if c == ' ' {\n            result = append(result,\
    \ level)\n        }\n    }\n    return result\n}\n", "    var result []int\n \
    \   var depth int\n    for _, char := range paren_string {\n        if char ==\
    \ '(' {\n            depth += 1\n        } else if char == ')' {\n           \
    \ depth -= 1\n        } else if char == ' ' {\n            result = append(result,\
    \ depth)\n        }\n    }\n    return result\n}\n", "    var paren_stack []int\n\
    \    var result []int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            paren_stack = append(paren_stack, 1)\n        } else if\
    \ char == ')' {\n            if len(paren_stack) > 0 {\n                paren_stack\
    \ = paren_stack[:len(paren_stack)-1]\n            }\n        } else if char ==\
    \ ' ' {\n            result = append(result, len(paren_stack))\n        }\n  \
    \  }\n    return result\n}\n", "    var result []int\n    var current_level int\n\
    \    var max_level int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            if current_level == max_level {\n               \
    \ result = append(result, max_level)\n                max_level = 0\n        \
    \    }\n            current_level--\n        } else if c == ' ' {\n          \
    \  if current_level == max_level {\n                result = append(result, max_level)\n\
    \                max_level = 0\n            }\n            current_level = 0\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    var max_depth\
    \ int\n    var depth int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            depth += 1\n            if depth > max_depth {\n        \
    \        max_depth = depth\n            }\n        } else if c == ')' {\n    \
    \        depth -= 1\n        } else if c == ' ' {\n            result = append(result,\
    \ max_depth)\n            max_depth = 0\n            depth = 0\n        }\n  \
    \  }\n    result = append(result, max_depth)\n    return result\n}\n", "    var\
    \ result []int\n    var current_level int\n    var max_level int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var max_depth\
    \ []int\n    var depth int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            depth += 1\n        } else if char == ')' {\n   \
    \         depth -= 1\n        } else if char == ' ' {\n            max_depth =\
    \ append(max_depth, depth)\n            depth = 0\n        }\n    }\n    return\
    \ max_depth\n}\n", "    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            level++\n        } else if char ==\
    \ ')' {\n            result = append(result, level)\n            level--\n   \
    \     }\n    }\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var cur_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            cur_level++\n            if cur_level > max_level {\n\
    \                max_level = cur_level\n            }\n        } else if c ==\
    \ ')' {\n            cur_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            cur_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var paren_stack []rune\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            paren_stack = append(paren_stack, c)\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if c == ')' {\n            if\
    \ len(paren_stack) == 0 {\n                panic(\"Unmatched parentheses\")\n\
    \            }\n            paren_stack = paren_stack[:len(paren_stack)-1]\n \
    \           current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            current_level--\n  \
    \      } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            current_level++\n       \
    \     if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            if current_level ==\
    \ max_level {\n                result = append(result, max_level)\n          \
    \      max_level = 0\n            }\n            current_level--\n        } else\
    \ if c == ' ' {\n            if current_level == max_level {\n               \
    \ result = append(result, max_level)\n                max_level = 0\n        \
    \    }\n            current_level = 0\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    var current_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_level += 1\n        } else\
    \ if char == ')' {\n            result = append(result, current_level)\n     \
    \       current_level -= 1\n        }\n    }\n    return result\n}\n", "    var\
    \ max_depth []int\n    var depth int\n    for _, c := range paren_string {\n \
    \       if c == '(' {\n            depth++\n        } else if c == ')' {\n   \
    \         depth--\n        } else if c == ' ' {\n            max_depth = append(max_depth,\
    \ depth)\n            depth = 0\n        }\n    }\n    return max_depth\n}\n",
  "    var result []int\n    var max_level int\n    var level int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            level++\n   \
    \         if level > max_level {\n                max_level = level\n        \
    \    }\n        } else if char == ')' {\n            level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var depth int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            depth += 1\n \
    \       } else if c == ')' {\n            depth -= 1\n        } else if c == '\
    \ ' {\n            result = append(result, depth)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int = 0\n\
    \    var max_level int = 0\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var depth_stack []int\n    var depth_list\
    \ []int\n    var depth int\n\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            depth += 1\n            depth_stack = append(depth_stack,\
    \ depth)\n        } else if char == ')' {\n            depth_list = append(depth_list,\
    \ depth_stack[len(depth_stack)-1])\n            depth_stack = depth_stack[:len(depth_stack)-1]\n\
    \            depth -= 1\n        }\n    }\n\n    return depth_list\n}\n", "  \
    \  var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var max_level int\n    var level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            level += 1\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        } else if c ==\
    \ ')' {\n            level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            level =\
    \ 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var max_depth int\n    var current_depth int\n    var result []int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_depth++\n            if current_depth > max_depth {\n            \
    \    max_depth = current_depth\n            }\n        } else if char == ')' {\n\
    \            current_depth--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var level int\n    var max_level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            level++\n \
    \           if level > max_level {\n                max_level = level\n      \
    \      }\n        } else if c == ')' {\n            level--\n        } else if\
    \ c == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var stack []int\n    var\
    \ max_level int\n    for _, char := range paren_string {\n        if char == '('\
    \ {\n            stack = append(stack, 1)\n            if len(stack) > max_level\
    \ {\n                max_level = len(stack)\n            }\n        } else if\
    \ char == ')' {\n            stack = stack[:len(stack)-1]\n        } else if char\
    \ == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n        }\n    }\n    return result\n}\n", "    var result []int\n    var\
    \ depth int\n    for _, c := range paren_string {\n        if c == '(' {\n   \
    \         depth += 1\n        } else if c == ')' {\n            depth -= 1\n \
    \       } else if c == ' ' {\n            result = append(result, depth)\n   \
    \     }\n    }\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n        } else if c == ')' {\n            current_level--\n\
    \        } else if c == ' ' {\n            result = append(result, current_level)\n\
    \            current_level = 0\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            if current_level ==\
    \ max_level {\n                result = append(result, max_level)\n          \
    \      max_level = 0\n            }\n            current_level--\n        } else\
    \ if c == ' ' {\n            if current_level == max_level {\n               \
    \ result = append(result, max_level)\n                max_level = 0\n        \
    \    }\n            current_level = 0\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    var max_nesting int\n    var nesting int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            nesting++\n  \
    \          if nesting > max_nesting {\n                max_nesting = nesting\n\
    \            }\n        } else if c == ')' {\n            nesting--\n        }\
    \ else if c == ' ' {\n            result = append(result, max_nesting)\n     \
    \       max_nesting = 0\n            nesting = 0\n        }\n    }\n    result\
    \ = append(result, max_nesting)\n    return result\n}\n", "    var result []int\n\
    \    var current_level int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            current_level++\n        } else if char == ')' {\n\
    \            result = append(result, current_level)\n            current_level--\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    var depth\
    \ int\n    var i int\n    for i = 0; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            depth++\n        } else if paren_string[i]\
    \ == ')' {\n            depth--\n        } else if paren_string[i] == ' ' {\n\
    \            result = append(result, depth)\n            depth = 0\n        }\n\
    \    }\n    result = append(result, depth)\n    return result\n}\n", "    var\
    \ max_depth int\n    var depth int\n    var result []int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            depth += 1\n            if\
    \ depth > max_depth {\n                max_depth = depth\n            }\n    \
    \    } else if c == ')' {\n            depth -= 1\n        } else if c == ' '\
    \ {\n            result = append(result, max_depth)\n            max_depth = 0\n\
    \            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var stack []int\n    var\
    \ max_depth int\n    for _, c := range paren_string {\n        if c == '(' {\n\
    \            stack = append(stack, 1)\n            if len(stack) > max_depth {\n\
    \                max_depth = len(stack)\n            }\n        } else if c ==\
    \ ')' {\n            stack = stack[:len(stack)-1]\n        } else if c == ' '\
    \ {\n            result = append(result, max_depth)\n            max_depth = 0\n\
    \        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var max_depth int\n    var depth int\n    var result []int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            depth += 1\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if c == ')' {\n            depth -= 1\n        } else\
    \ if c == ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var current_max int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            current_level += 1\n            if current_level > current_max\
    \ {\n                current_max = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, current_max)\n            current_max = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ current_max)\n    return result\n}\n", "    var result []int\n    var paren_stack\
    \ []string\n    var paren_count int\n    for _, paren := range paren_string {\n\
    \        if paren == '(' {\n            paren_stack = append(paren_stack, \"(\"\
    )\n            paren_count += 1\n        } else if paren == ')' {\n          \
    \  paren_stack = paren_stack[:len(paren_stack)-1]\n            paren_count -=\
    \ 1\n        } else if paren == ' ' {\n            result = append(result, paren_count)\n\
    \            paren_count = 0\n        }\n    }\n    return result\n}\n", "   \
    \ var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var stack []int\n    var max_level int\n    var level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            stack = append(stack,\
    \ 1)\n            level++\n            if level > max_level {\n              \
    \  max_level = level\n            }\n        } else if c == ')' {\n          \
    \  stack = stack[:len(stack)-1]\n            level--\n        } else if c == '\
    \ ' {\n            result = append(result, max_level)\n            max_level =\
    \ 0\n            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_level)\n         \
    \   max_level = 0\n            current_level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var result []int\n\
    \    var paren_stack []string\n    var current_level int\n    var current_max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         paren_stack = append(paren_stack, \"(\")\n            current_level\
    \ += 1\n            if current_level > current_max_level {\n                current_max_level\
    \ = current_level\n            }\n        } else if char == ')' {\n          \
    \  paren_stack = paren_stack[:len(paren_stack)-1]\n            current_level -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, current_max_level)\n\
    \            current_level = 0\n            current_max_level = 0\n        }\n\
    \    }\n    result = append(result, current_max_level)\n    return result\n}\n",
  "    var result []int\n    var level int\n    for _, c := range paren_string {\n\
    \        if c == '(' {\n            level++\n        } else if c == ')' {\n  \
    \          level--\n        } else if c == ' ' {\n            result = append(result,\
    \ level)\n        }\n    }\n    return result\n}\n", "    var result []int\n \
    \   var current_level int = 0\n    var max_level int = 0\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            current_level++\n    \
    \        if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var max_nesting_levels\
    \ []int\n    var current_nesting_level int\n    var current_group string\n   \
    \ var current_group_index int\n    var current_char string\n    var current_char_index\
    \ int\n\n    for current_group_index, current_group = range strings.Split(paren_string,\
    \ \" \") {\n        current_nesting_level = 0\n        for current_char_index,\
    \ current_char = range current_group {\n            if current_char == '(' {\n\
    \                current_nesting_level++\n            } else if current_char ==\
    \ ')' {\n                current_nesting_level--\n            } else {\n     \
    \           fmt.Printf(\"Invalid character %s at position %d of group %d\\n\"\
    , current_char, current_char_index, current_group_index)\n            }\n    \
    \    }\n        max_nesting_levels = append(max_nesting_levels, current_nesting_level)\n\
    \    }\n    return max_nesting_levels\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            if current_level == max_level {\n               \
    \ result = append(result, max_level)\n                max_level = 0\n        \
    \    }\n            current_level--\n        } else if c == ' ' {\n          \
    \  if current_level == max_level {\n                result = append(result, max_level)\n\
    \                max_level = 0\n            }\n            current_level = 0\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            if current_level == max_level {\n               \
    \ result = append(result, max_level)\n                max_level = 0\n        \
    \    }\n            current_level--\n        } else if c == ' ' {\n          \
    \  if current_level == max_level {\n                result = append(result, max_level)\n\
    \                max_level = 0\n            }\n            current_level = 0\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n        } else if c == ')' {\n            current_level--\n\
    \        } else if c == ' ' {\n            result = append(result, current_level)\n\
    \            current_level = 0\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if c == ')' {\n            current_level\
    \ -= 1\n        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var depth int\n    for _, c := range paren_string {\n        if c\
    \ == '(' {\n            depth++\n        } else if c == ')' {\n            depth--\n\
    \        } else if c == ' ' {\n            result = append(result, depth)\n  \
    \      }\n    }\n    return result\n}\n", "    var result []int\n    var level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   level++\n        } else if c == ')' {\n            level--\n        } else\
    \ if c == ' ' {\n            result = append(result, level)\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var depth int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            depth\
    \ += 1\n        } else if c == ')' {\n            depth -= 1\n        } else if\
    \ c == ' ' {\n            result = append(result, depth)\n        }\n    }\n \
    \   return result\n}\n", "    var result []int\n    var current_level int\n  \
    \  for _, char := range paren_string {\n        if char == '(' {\n           \
    \ current_level++\n        } else if char == ')' {\n            result = append(result,\
    \ current_level)\n            current_level--\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if char == ')' {\n\
    \            current_level--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            current_level++\n       \
    \ } else if c == ')' {\n            current_level--\n        } else if c == '\
    \ ' {\n            result = append(result, current_level)\n            current_level\
    \ = 0\n        }\n    }\n    return result\n}\n", "    var max_depth int\n   \
    \ var depth int\n    var result []int\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            depth += 1\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if char\
    \ == ')' {\n            depth -= 1\n        } else if char == ' ' {\n        \
    \    result = append(result, max_depth)\n            max_depth = 0\n         \
    \   depth = 0\n        }\n    }\n    result = append(result, max_depth)\n    return\
    \ result\n}\n", "    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            current_level--\n        } else if char == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, paren := range paren_string {\n     \
    \   if paren == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if paren == ')' {\n            current_level -= 1\n        } else\
    \ if paren == ' ' {\n            result = append(result, max_level)\n        \
    \    max_level = 0\n            current_level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var result []int\n\
    \    var level int\n    for _, char := range paren_string {\n        if char ==\
    \ '(' {\n            level += 1\n        } else if char == ')' {\n           \
    \ result = append(result, level)\n            level -= 1\n        }\n    }\n \
    \   return result\n}\n", "    var result []int\n    var current_level int\n  \
    \  var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var level int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            level++\n\
    \        } else if c == ')' {\n            level--\n        } else if c == ' '\
    \ {\n            result = append(result, level)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var stack []int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   stack = append(stack, 1)\n            if len(stack) > max_level {\n      \
    \          max_level = len(stack)\n            }\n        } else if c == ')' {\n\
    \            stack = stack[:len(stack)-1]\n        } else if c == ' ' {\n    \
    \        result = append(result, max_level)\n            max_level = 0\n     \
    \   }\n    }\n    result = append(result, max_level)\n    return result\n}\n",
  "    var result []int\n    var paren_count int\n    var max_paren_count int\n  \
    \  for _, c := range paren_string {\n        if c == '(' {\n            paren_count++\n\
    \            if paren_count > max_paren_count {\n                max_paren_count\
    \ = paren_count\n            }\n        } else if c == ')' {\n            paren_count--\n\
    \        } else if c == ' ' {\n            result = append(result, max_paren_count)\n\
    \            max_paren_count = 0\n            paren_count = 0\n        }\n   \
    \ }\n    result = append(result, max_paren_count)\n    return result\n}\n", " \
    \   var result []int\n    var max_level int\n    var level int\n    for _, c :=\
    \ range paren_string {\n        if c == '(' {\n            level++\n         \
    \   if level > max_level {\n                max_level = level\n            }\n\
    \        } else if c == ')' {\n            level--\n        } else if c == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var depth int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            depth += 1\n \
    \       } else if c == ')' {\n            depth -= 1\n        } else if c == '\
    \ ' {\n            result = append(result, depth)\n        }\n    }\n    return\
    \ result\n}\n", "    paren_list := []int{}\n    paren_count := 0\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            paren_count +=\
    \ 1\n        } else if char == ')' {\n            paren_count -= 1\n        }\
    \ else if char == ' ' {\n            paren_list = append(paren_list, paren_count)\n\
    \            paren_count = 0\n        }\n    }\n    return paren_list\n}\n", " \
    \   var result []int\n    var max_nesting int\n    var nesting int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            nesting += 1\n\
    \            if nesting > max_nesting {\n                max_nesting = nesting\n\
    \            }\n        } else if c == ')' {\n            nesting -= 1\n     \
    \   } else if c == ' ' {\n            result = append(result, max_nesting)\n \
    \           max_nesting = 0\n            nesting = 0\n        }\n    }\n    result\
    \ = append(result, max_nesting)\n    return result\n}\n", "    var result []int\n\
    \    var current_level int\n    var max_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if c == ')' {\n            current_level--\n        } else if c\
    \ == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var count int\n\
    \    var max int\n    for _, c := range paren_string {\n        if c == '(' {\n\
    \            count++\n            if count > max {\n                max = count\n\
    \            }\n        } else if c == ')' {\n            count--\n        } else\
    \ if c == ' ' {\n            result = append(result, max)\n            max = 0\n\
    \            count = 0\n        }\n    }\n    result = append(result, max)\n \
    \   return result\n}\n", "    var result []int\n    var current_level int\n  \
    \  var max_level int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            current_level++\n            if current_level > max_level {\n\
    \                max_level = current_level\n            }\n        } else if c\
    \ == ')' {\n            current_level--\n        } else if c == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var stack []int\n\
    \    var depth int\n    for _, char := range paren_string {\n        if char ==\
    \ '(' {\n            stack = append(stack, 1)\n            depth += 1\n      \
    \  } else if char == ')' {\n            stack = stack[:len(stack)-1]\n       \
    \     depth -= 1\n        } else if char == ' ' {\n            result = append(result,\
    \ depth)\n        }\n    }\n    return result\n}\n", "    var result []int\n \
    \   var current_level int\n    var max_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if c == ')' {\n            current_level--\n        } else if c\
    \ == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var paren_stack\
    \ []rune\n    var current_level int\n    for _, c := range paren_string {\n  \
    \      if c == '(' {\n            paren_stack = append(paren_stack, c)\n     \
    \       current_level += 1\n        } else if c == ')' {\n            paren_stack\
    \ = paren_stack[:len(paren_stack)-1]\n            current_level -= 1\n       \
    \ } else if c == ' ' {\n            result = append(result, current_level)\n \
    \       }\n    }\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level--\n        } else if c == ' ' {\n \
    \           result = append(result, max_level)\n            max_level = 0\n  \
    \          current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var max_depth []int\n    var depth int\n    var\
    \ paren_count int\n    for _, char := range paren_string {\n        if char ==\
    \ '(' {\n            depth += 1\n            paren_count += 1\n        } else\
    \ if char == ')' {\n            depth -= 1\n            paren_count += 1\n   \
    \     } else if char == ' ' {\n            max_depth = append(max_depth, depth)\n\
    \            depth = 0\n            paren_count = 0\n        }\n    }\n    if\
    \ paren_count > 0 {\n        max_depth = append(max_depth, depth)\n    }\n   \
    \ return max_depth\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            current_level++\n            if current_level > max_level {\n\
    \                max_level = current_level\n            }\n        } else if c\
    \ == ')' {\n            current_level--\n        } else if c == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   for _, char := range paren_string {\n        if char == '(' {\n          \
    \  current_level++\n        } else if char == ')' {\n            result = append(result,\
    \ current_level)\n            current_level--\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if char == ')' {\n\
    \            current_level--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var max_depth int\n    var depth int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            depth++\n \
    \           if depth > max_depth {\n                max_depth = depth\n      \
    \      }\n        } else if c == ')' {\n            depth--\n        } else if\
    \ c == ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var max_depth int\n    var\
    \ current_depth int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == ')' {\n            if current_depth == 0 {\n                panic(\"\
    Unmatched closing parentheses\")\n            }\n            current_depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        } else {\n\
    \            panic(\"Unexpected character\")\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var depth int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   depth += 1\n        } else if char == ')' {\n            depth -= 1\n    \
    \    } else if char == ' ' {\n            result = append(result, depth)\n   \
    \     }\n    }\n    return result\n}\n", "    var result []int\n    var max_nesting\
    \ int\n    var nesting int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            nesting += 1\n            if nesting > max_nesting\
    \ {\n                max_nesting = nesting\n            }\n        } else if char\
    \ == ')' {\n            nesting -= 1\n        } else if char == ' ' {\n      \
    \      result = append(result, max_nesting)\n            max_nesting = 0\n   \
    \         nesting = 0\n        }\n    }\n    result = append(result, max_nesting)\n\
    \    return result\n}\n", "    var result []int\n    var max_depth int\n    var\
    \ current_depth int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_depth++\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == ')' {\n            current_depth--\n        } else if char == ' '\
    \ {\n            result = append(result, max_depth)\n            max_depth = 0\n\
    \            current_depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_level)\n         \
    \   max_level = 0\n            current_level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var result []int\n\
    \    var paren_stack []int\n    var current_level int\n    var current_char byte\n\
    \    for i := 0; i < len(paren_string); i++ {\n        current_char = paren_string[i]\n\
    \        if current_char == '(' {\n            paren_stack = append(paren_stack,\
    \ current_level)\n            current_level++\n        } else if current_char\
    \ == ')' {\n            current_level = paren_stack[len(paren_stack) - 1]\n  \
    \          paren_stack = paren_stack[:len(paren_stack) - 1]\n        } else if\
    \ current_char == ' ' {\n            result = append(result, current_level)\n\
    \            current_level = 0\n        }\n    }\n    return result\n}\n", " \
    \   var max_depth []int\n    var depth int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            depth += 1\n        } else if c == ')'\
    \ {\n            depth -= 1\n        } else if c == ' ' {\n            max_depth\
    \ = append(max_depth, depth)\n            depth = 0\n        }\n    }\n    return\
    \ max_depth\n}\n", "    var result []int\n    var current_level int = 0\n    var\
    \ max_level int = 0\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    // TODO: Implement this function.\n\
    \    return []int{}\n}\n", "    var result []int\n    var current_level int\n\
    \    var max_level int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var stack []int\n    var\
    \ depth int\n    for _, c := range paren_string {\n        if c == '(' {\n   \
    \         stack = append(stack, depth)\n            depth += 1\n        } else\
    \ if c == ')' {\n            result = append(result, depth)\n            depth\
    \ = stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    var max_depth int\n\
    \    var current_depth int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            current_depth += 1\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == ')' {\n            current_depth -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_depth)\n         \
    \   max_depth = 0\n            current_depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_level int\n\
    \    var level int\n    var result []int\n    for _, c := range paren_string {\n\
    \        if c == '(' {\n            level++\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        } else if c ==\
    \ ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            level =\
    \ 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    // TODO: Implement this function.\n    return nil\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            current_level += 1\n    \
    \        if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            if current_level ==\
    \ max_level {\n                result = append(result, max_level)\n          \
    \      max_level = 0\n            }\n            current_level -= 1\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    var max_level int\n\
    \    var level int\n    for _, char := range paren_string {\n        if char ==\
    \ '(' {\n            level++\n            if level > max_level {\n           \
    \     max_level = level\n            }\n        } else if char == ')' {\n    \
    \        level--\n        } else if char == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            level = 0\n        }\n  \
    \  }\n    result = append(result, max_level)\n    return result\n}\n", "    paren_list\
    \ := []int{}\n    for _, paren_group := range paren_string {\n        paren_count\
    \ := 0\n        max_paren_count := 0\n        for _, paren := range paren_group\
    \ {\n            if paren == '(' {\n                paren_count++\n          \
    \  } else if paren == ')' {\n                paren_count--\n            }\n  \
    \          if paren_count > max_paren_count {\n                max_paren_count\
    \ = paren_count\n            }\n        }\n        paren_list = append(paren_list,\
    \ max_paren_count)\n    }\n    return paren_list\n}\n", "    var result []int\n\
    \    var current_level int\n    var max_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var level int\n\
    \    for _, c := range paren_string {\n        switch c {\n        case '(':\n\
    \            level++\n        case ')':\n            result = append(result, level)\n\
    \            level--\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    var stack []int\n    var max_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            stack = append(stack, 1)\n           \
    \ if len(stack) > max_level {\n                max_level = len(stack)\n      \
    \      }\n        } else if c == ')' {\n            stack = stack[:len(stack)-1]\n\
    \        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            current_level++\n            if current_level > max_level {\n\
    \                max_level = current_level\n            }\n        } else if c\
    \ == ')' {\n            current_level--\n        } else if c == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    // TODO: Implement this function.\n    return []int{}\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if char == ')'\
    \ {\n            current_level -= 1\n        } else if char == ' ' {\n       \
    \     result = append(result, max_level)\n            current_level = 0\n    \
    \        max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            if current_level == max_level {\n\
    \                result = append(result, max_level)\n                max_level\
    \ = 0\n            }\n            current_level -= 1\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var level int\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            level++\n        } else\
    \ if char == ')' {\n            level--\n        } else if char == ' ' {\n   \
    \         result = append(result, level)\n        }\n    }\n    return result\n\
    }\n", "    var max_depth []int\n    var cur_depth int\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            cur_depth += 1\n     \
    \   } else if char == ')' {\n            cur_depth -= 1\n        } else if char\
    \ == ' ' {\n            max_depth = append(max_depth, cur_depth)\n           \
    \ cur_depth = 0\n        }\n    }\n    return max_depth\n}\n", "    var result\
    \ []int\n    var paren_stack []string\n    var max_level int\n    var level int\n\
    \    for _, paren := range paren_string {\n        if paren == '(' {\n       \
    \     paren_stack = append(paren_stack, \"(\")\n            level++\n        \
    \    if level > max_level {\n                max_level = level\n            }\n\
    \        } else if paren == ')' {\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \            level--\n        }\n        if paren == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            level =\
    \ 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
