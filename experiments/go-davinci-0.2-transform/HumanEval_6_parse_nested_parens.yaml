name: HumanEval_6_parse_nested_parens
language: go_test.go
prompt: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string string) []int {\n"
tests: "func TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"),\
  \ expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
  ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"),\
  \ expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []int\n    var current_level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level++\n\
    \        } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level--\n        }\n    }\n    return result\n}\n", "   \
    \ var result []int\n    var count int\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            count++\n        } else if char == ')'\
    \ {\n            count--\n        } else if char == ' ' {\n            result\
    \ = append(result, count)\n            count = 0\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var paren_count int\n    var max_paren_count\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         paren_count += 1\n            if paren_count > max_paren_count {\n \
    \               max_paren_count = paren_count\n            }\n        } else if\
    \ char == ')' {\n            paren_count -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_paren_count)\n            max_paren_count\
    \ = 0\n            paren_count = 0\n        }\n    }\n    result = append(result,\
    \ max_paren_count)\n    return result\n}\n", "    var result []int\n    var max_level\
    \ int\n    var level int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            level++\n            if level > max_level {\n           \
    \     max_level = level\n            }\n        } else if c == ')' {\n       \
    \     level--\n        } else if c == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            level = 0\n        }\n  \
    \  }\n    result = append(result, max_level)\n    return result\n}\n", "    var\
    \ max_depth []int\n    var depth int\n    for _, c := range paren_string {\n \
    \       if c == '(' {\n            depth++\n        } else if c == ')' {\n   \
    \         depth--\n        } else if c == ' ' {\n            max_depth = append(max_depth,\
    \ depth)\n            depth = 0\n        }\n    }\n    max_depth = append(max_depth,\
    \ depth)\n    return max_depth\n}\n", "    var result []int\n    var level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   level++\n        } else if char == ')' {\n            level--\n        } else\
    \ if char == ' ' {\n            result = append(result, level)\n        }\n  \
    \  }\n    return result\n}\n", "    var result []int\n    var max_depth int\n\
    \    var current_depth int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            current_depth += 1\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == ')' {\n            current_depth -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_depth)\n         \
    \   max_depth = 0\n            current_depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var result []int\n\
    \    var paren_stack []int\n    var current_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            paren_stack = append(paren_stack, current_level)\n\
    \            current_level++\n        } else if c == ')' {\n            current_level\
    \ = paren_stack[len(paren_stack)-1]\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \        } else if c == ' ' {\n            result = append(result, current_level)\n\
    \            current_level = 0\n        }\n    }\n    return result\n}\n", " \
    \   // TODO: Implement this function.\n    return []int{}\n}\n", "    max_depth\
    \ := 0\n    depth := 0\n    depths := []int{}\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth += 1\n            if depth >\
    \ max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if char == ')' {\n            depths = append(depths, max_depth)\n         \
    \   depth -= 1\n        }\n    }\n    return depths\n}\n", "    var result []int\n\
    \    var current_level int\n    var max_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var max_depth int\n    var depth int\n\
    \    var result []int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            depth += 1\n            if depth > max_depth {\n     \
    \           max_depth = depth\n            }\n        } else if char == ')' {\n\
    \            depth -= 1\n        } else if char == ' ' {\n            result =\
    \ append(result, max_depth)\n            max_depth = 0\n            depth = 0\n\
    \        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var max_nesting int\n    var current_nesting\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_nesting += 1\n            if current_nesting > max_nesting {\n\
    \                max_nesting = current_nesting\n            }\n        } else\
    \ if char == ')' {\n            current_nesting -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_nesting)\n            max_nesting\
    \ = 0\n            current_nesting = 0\n        }\n    }\n    result = append(result,\
    \ max_nesting)\n    return result\n}\n", "    var result []int\n    var level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   level++\n        } else if c == ')' {\n            level--\n        } else\
    \ if c == ' ' {\n            result = append(result, level)\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    var stack []int\n    var\
    \ max_depth int\n    for _, char := range paren_string {\n        if char == '('\
    \ {\n            stack = append(stack, 1)\n            if len(stack) > max_depth\
    \ {\n                max_depth = len(stack)\n            }\n        } else if\
    \ char == ')' {\n            stack = stack[:len(stack)-1]\n        } else if char\
    \ == ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n        }\n    }\n    return result\n}\n", "    var result []int\n    var\
    \ current_level int\n    var max_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var max_depth\
    \ int\n    var current_depth int\n    for _, char := range paren_string {\n  \
    \      if char == '(' {\n            current_depth += 1\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == ')' {\n            if current_depth == 0 {\n        \
    \        panic(\"Invalid input string\")\n            }\n            current_depth\
    \ -= 1\n            if current_depth == 0 {\n                result = append(result,\
    \ max_depth)\n                max_depth = 0\n            }\n        } else if\
    \ char == ' ' {\n            continue\n        } else {\n            panic(\"\
    Invalid input string\")\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
