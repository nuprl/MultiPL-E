name: HumanEval_75_is_multiply_prime
language: go_test.go
prompt: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
  \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
  func is_multiply_prime(a int) bool {\n"
tests: "func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual:\
  \ candidate(30), expected: true },\n     { actual: candidate(8), expected: true\
  \ },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
  \ expected: true },\n     { actual: candidate(105), expected: true },\n     { actual:\
  \ candidate(126), expected: false },\n     { actual: candidate(729), expected: false\
  \ },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001),\
  \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return false\n}\n", "    if a == 1 {\n        return false\n  \
    \  }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return\
    \ is_multiply_prime(a / i)\n        }\n    }\n    return true\n}\n", "    // Write\
    \ your code here\n    return false\n}\n", "    return false\n}\n", "    return\
    \ false\n}\n", "    if a < 6 {\n        return false\n    }\n    if a % 2 == 0\
    \ {\n        return is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n   \
    \     return is_multiply_prime(a / 3)\n    }\n    if a % 5 == 0 {\n        return\
    \ is_multiply_prime(a / 5)\n    }\n    return true\n}\n", "    return false\n\
    }\n", "    return false\n}\n", "    if a == 1 {\n        return false\n    }\n\
    \    if a == 2 {\n        return true\n    }\n    if a % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i < a; i += 2 {\n        if a % i == 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n", "    return true\n\
    }\n", "    return false\n}\n", "    if a < 3 {\n        return false\n    }\n\
    \    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return is_multiply_prime(a\
    \ / i)\n        }\n    }\n    return true\n}\n", "    // Write your code here\n\
    \    return false\n}\n", "    return false\n}\n", "    return false\n}\n", " \
    \   return false\n}\n", "    if a == 0 {\n        return false\n    }\n    if\
    \ a == 1 {\n        return true\n    }\n    if a == 2 {\n        return true\n\
    \    }\n    if a == 3 {\n        return true\n    }\n    if a == 5 {\n       \
    \ return true\n    }\n    if a == 7 {\n        return true\n    }\n    if a ==\
    \ 11 {\n        return true\n    }\n    if a == 13 {\n        return true\n  \
    \  }\n    if a == 17 {\n        return true\n    }\n    if a == 19 {\n       \
    \ return true\n    }\n    if a == 23 {\n        return true\n    }\n    if a ==\
    \ 29 {\n        return true\n    }\n    if a == 31 {\n        return true\n  \
    \  }\n    if a == 37 {\n        return true\n    }\n    if a == 41 {\n       \
    \ return true\n    }\n    if a == 43 {\n        return true\n    }\n    if a ==\
    \ 47 {\n        return true\n    }\n    if a == 53 {\n        return true\n  \
    \  }\n    if a == 59 {\n        return true\n    }\n    if a == 61 {\n       \
    \ return true\n    }\n    if a == 67 {\n        return true\n    }\n    if a ==\
    \ 71 {\n        return true\n    }\n    if a == 73 {\n        return true\n  \
    \  }\n    if a == 79 {\n        return true\n    }\n    if a == 83 {\n       \
    \ return true\n    }\n    if a == 89 {\n        return true\n    }\n    if a ==\
    \ 97 {\n        return true\n    }\n    return false\n}\n", "    var primes []int\n\
    \    for i := 2; i < a; i++ {\n        if is_prime(i) {\n            primes =\
    \ append(primes, i)\n        }\n    }\n    for i := 0; i < len(primes); i++ {\n\
    \        for j := i; j < len(primes); j++ {\n            for k := j; k < len(primes);\
    \ k++ {\n                if primes[i] * primes[j] * primes[k] == a {\n       \
    \             return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n", "    return false\n}\n", "    if a == 1 {\n        return\
    \ false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n      \
    \      return is_multiply_prime(a / i)\n        }\n    }\n    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
