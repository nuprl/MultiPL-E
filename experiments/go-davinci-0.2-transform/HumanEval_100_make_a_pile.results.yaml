language: go_test.go
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ < 1 {\n        return []int{}\n    }\n    result := []int{n}\n    for n > 1\
    \ {\n        n = n - 1\n        if n % 2 == 0 {\n            n = n - 1\n     \
    \   }\n        result = append(result, n)\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpqo1f3lw8_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmpqo1f3lw8_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpqo1f3lw8_test.go:50: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpqo1f3lw8_test.go:50: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=5) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpqo1f3lw8_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=5) %!s(int=3) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n\
    \    }\n    return append([]int{n}, make_a_pile(n-2)...)\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpgfruzszl_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmpgfruzszl_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=4) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n\
    \        tmpgfruzszl_test.go:45: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpgfruzszl_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpgfruzszl_test.go:45:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    result = append(result, n)\n    for n > 0 {\n        if n\
    \ % 2 == 0 {\n            n = n / 2\n        } else {\n            n = (n + 1)\
    \ / 2\n        }\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ < 1 {\n        return []int{}\n    }\n    result := []int{n}\n    for n > 0\
    \ {\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n      \
    \      n = (n - 1) / 2\n        }\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp_eeaeiei_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_eeaeiei_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_eeaeiei_test.go:51: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp_eeaeiei_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp_eeaeiei_test.go:51:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ res []int\n    for i := n; i > 0; i-- {\n        res = append(res, i)\n    }\n\
    \    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpwst9zgef_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpwst9zgef_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpwst9zgef_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpwst9zgef_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpwst9zgef_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ pile []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n            pile\
    \ = append(pile, n)\n        } else {\n            if pile[i-1] % 2 == 0 {\n \
    \               pile = append(pile, pile[i-1]+1)\n            } else {\n     \
    \           pile = append(pile, pile[i-1]+2)\n            }\n        }\n    }\n\
    \    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvvif7h0l_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpvvif7h0l_test.go:51: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpvvif7h0l_test.go:51:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = n + 2*i\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ res []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n         \
    \   res = append(res, i + 1)\n        } else {\n            res = append(res,\
    \ i + 2)\n        }\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpbn4ec_n9_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    pile\
    \ := make([]int, n)\n    pile[0] = n\n    for i := 1; i < n; i++ {\n        if\
    \ pile[i-1] % 2 == 0 {\n            pile[i] = pile[i-1] + 1\n        } else {\n\
    \            pile[i] = pile[i-1] + 2\n        }\n    }\n    return pile\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpwmzc0nt1_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpwmzc0nt1_test.go:48: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpwmzc0nt1_test.go:48:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n + 2*i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ pile []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n            pile\
    \ = append(pile, n)\n        } else {\n            if pile[i-1] % 2 == 0 {\n \
    \               pile = append(pile, pile[i-1]+1)\n            } else {\n     \
    \           pile = append(pile, pile[i-1]+2)\n            }\n        }\n    }\n\
    \    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvvif7h0l_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpvvif7h0l_test.go:51: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpvvif7h0l_test.go:51:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n + 2*i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    var i int\n    for i = 0; i < n; i++ {\n        result = append(result,\
    \ n + 2*i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n + 2*i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ res []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n         \
    \   res = append(res, i + 1)\n        } else {\n            res = append(res,\
    \ i + 2)\n        }\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpbn4ec_n9_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ res []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n            res\
    \ = append(res, n)\n        } else {\n            if res[i-1] % 2 == 0 {\n   \
    \             res = append(res, res[i-1]+2)\n            } else {\n          \
    \      res = append(res, res[i-1]+1)\n            }\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpn_q7g_4t_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpn_q7g_4t_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ res []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n         \
    \   res = append(res, i + 1)\n        } else {\n            res = append(res,\
    \ i + 2)\n        }\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpbn4ec_n9_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ pile []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n            pile\
    \ = append(pile, n)\n        } else {\n            if pile[i-1] % 2 == 0 {\n \
    \               pile = append(pile, pile[i-1]+1)\n            } else {\n     \
    \           pile = append(pile, pile[i-1]+2)\n            }\n        }\n    }\n\
    \    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvvif7h0l_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpvvif7h0l_test.go:51: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpvvif7h0l_test.go:51:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ res []int\n    for i := 0; i < n; i++ {\n        res = append(res, n)\n    \
    \    if n % 2 == 0 {\n            n += 1\n        } else {\n            n += 2\n\
    \        }\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073168
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    result := []int{n}\n    for i :=\
    \ n; i > 0; i-- {\n        if i % 2 == 0 {\n            result = append(result,\
    \ i-1)\n        } else {\n            result = append(result, i-2)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp79_hq8q2_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=-1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp79_hq8q2_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=-1)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp79_hq8q2_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=-1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp79_hq8q2_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=3)\
    \ %!s(int=3) %!s(int=1) %!s(int=1) %!s(int=-1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp79_hq8q2_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3) %!s(int=1) %!s(int=1)\
    \ %!s(int=-1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    result = append(result, n)\n    for n > 1 {\n        if n\
    \ % 2 == 0 {\n            n = n / 2\n        } else {\n            n = (n + 1)\
    \ / 2\n        }\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpm6b62o14_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpm6b62o14_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpm6b62o14_test.go:49: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpm6b62o14_test.go:49:\
    \ expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]',\
    \ got '[%!s(int=6) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpm6b62o14_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ pile []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n            pile\
    \ = append(pile, n)\n        } else {\n            if pile[i-1] % 2 == 0 {\n \
    \               pile = append(pile, pile[i-1]+1)\n            } else {\n     \
    \           pile = append(pile, pile[i-1]+2)\n            }\n        }\n    }\n\
    \    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvvif7h0l_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpvvif7h0l_test.go:51: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpvvif7h0l_test.go:51:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n + 2*i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i = i - 2 {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp1kjlvr8r_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmp1kjlvr8r_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=4) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n\
    \        tmp1kjlvr8r_test.go:43: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp1kjlvr8r_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp1kjlvr8r_test.go:43:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n + 2*i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    res\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        res[i] = n\n      \
    \  if n % 2 == 0 {\n            n += 1\n        } else {\n            n += 2\n\
    \        }\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpd7cqroux_test.go:21\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpd7cqroux_test.go:38\
    \ +0x5f2\ntesting.tRunner(0xc00019e000, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    pile\
    \ := make([]int, n)\n    pile[0] = n\n    for i := 1; i < n; i++ {\n        if\
    \ n % 2 == 0 {\n            pile[i] = pile[i-1] + 2\n        } else {\n      \
    \      pile[i] = pile[i-1] + 1\n        }\n    }\n    return pile\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpb8qky50i_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpb8qky50i_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    res\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        res[i] = n + 2*i\n\
    \    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ res []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n         \
    \   res = append(res, i + 1)\n        } else {\n            res = append(res,\
    \ i + 2)\n        }\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpbn4ec_n9_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073154
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = n\n   \
    \     if n % 2 == 0 {\n            n += 1\n        } else {\n            n +=\
    \ 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmp3m6ibbmk_test.go:21\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmp3m6ibbmk_test.go:38\
    \ +0x5f2\ntesting.tRunner(0xc0001031e0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n + i*2)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ res []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n         \
    \   res = append(res, i + 1)\n        } else {\n            res = append(res,\
    \ i + 2)\n        }\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpbn4ec_n9_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpbn4ec_n9_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        if i == 0 {\n     \
    \       result[i] = n\n        } else {\n            if result[i-1] % 2 == 0 {\n\
    \                result[i] = result[i-1] + 1\n            } else {\n         \
    \       result[i] = result[i-1] + 2\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpby_peoj8_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpby_peoj8_test.go:51: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpby_peoj8_test.go:51:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i = i - 2 {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp1kjlvr8r_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmp1kjlvr8r_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=4) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n\
    \        tmp1kjlvr8r_test.go:43: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp1kjlvr8r_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp1kjlvr8r_test.go:43:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    var i int\n    for i = n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpu98mdo81_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpu98mdo81_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpu98mdo81_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpu98mdo81_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpu98mdo81_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    result = append(result, n)\n    for i := n; i > 0; i-- {\n\
    \        if i % 2 == 0 {\n            result = append(result, i - 1)\n       \
    \ } else {\n            result = append(result, i + 1)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmplszjhkhx_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmplszjhkhx_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmplszjhkhx_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmplszjhkhx_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmplszjhkhx_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=1)\
    \ %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    result = append(result, n)\n    for n > 1 {\n        if n\
    \ % 2 == 0 {\n            n = n / 2\n        } else {\n            n = (n + 1)\
    \ / 2\n        }\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpm6b62o14_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpm6b62o14_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpm6b62o14_test.go:49: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpm6b62o14_test.go:49:\
    \ expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]',\
    \ got '[%!s(int=6) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpm6b62o14_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ < 1 {\n        return []int{}\n    }\n    result := []int{n}\n    for n > 1\
    \ {\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n      \
    \      n = (n + 1) / 2\n        }\n        result = append(result, n)\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpg6zo3s96_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpg6zo3s96_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpg6zo3s96_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpg6zo3s96_test.go:51:\
    \ expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]',\
    \ got '[%!s(int=6) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpg6zo3s96_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ pile []int\n    for i := 0; i < n; i++ {\n        pile = append(pile, n)\n \
    \       if n % 2 == 0 {\n            n += 1\n        } else {\n            n +=\
    \ 2\n        }\n    }\n    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073291
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ pile []int\n    for i := n; i > 0; i-- {\n        pile = append(pile, i)\n \
    \   }\n    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd0bjfxpt_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd0bjfxpt_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd0bjfxpt_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd0bjfxpt_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd0bjfxpt_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    result = append(result, n)\n    for i := 1; i < n; i++ {\n\
    \        if n % 2 == 0 {\n            result = append(result, n + i * 2)\n   \
    \     } else {\n            result = append(result, n + i * 2 - 1)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp1u8bfi24_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmp1u8bfi24_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ pile []int\n    pile = append(pile, n)\n    for n > 1 {\n        if n % 2 ==\
    \ 0 {\n            n = n / 2\n        } else {\n            n = (n + 1) / 2\n\
    \        }\n        pile = append(pile, n)\n    }\n    return pile\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpysz191wg_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpysz191wg_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpysz191wg_test.go:49: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpysz191wg_test.go:49:\
    \ expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]',\
    \ got '[%!s(int=6) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpysz191wg_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    pile := []int{n}\n    for n > 0 {\n\
    \        if n % 2 == 0 {\n            n = n / 2\n        } else {\n          \
    \  n = (n + 1) / 2\n        }\n        pile = append(pile, n)\n    }\n    return\
    \ pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073291
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ pile []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n            pile\
    \ = append(pile, n)\n        } else {\n            if pile[i-1] % 2 == 0 {\n \
    \               pile = append(pile, pile[i-1]+1)\n            } else {\n     \
    \           pile = append(pile, pile[i-1]+2)\n            }\n        }\n    }\n\
    \    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvvif7h0l_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpvvif7h0l_test.go:51: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpvvif7h0l_test.go:51:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073163
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp998m20zh_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp998m20zh_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n      \
    \      result = append(result, i + 1)\n        } else {\n            result =\
    \ append(result, i + 2)\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7sav4vbh_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=7)\
    \ %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=7) %!s(int=5)\
    \ %!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7sav4vbh_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=9) %!s(int=7) %!s(int=7) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n + 2*i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n\
    \    }\n    if n == 2 {\n        return []int{2, 4}\n    }\n    if n == 3 {\n\
    \        return []int{3, 5, 7}\n    }\n    if n == 4 {\n        return []int{4,\
    \ 6, 8, 10}\n    }\n    if n == 5 {\n        return []int{5, 7, 9, 11, 13}\n \
    \   }\n    if n == 6 {\n        return []int{6, 8, 10, 12, 14, 16}\n    }\n  \
    \  if n == 7 {\n        return []int{7, 9, 11, 13, 15, 17, 19}\n    }\n    if\
    \ n == 8 {\n        return []int{8, 10, 12, 14, 16, 18, 20, 22}\n    }\n    if\
    \ n == 9 {\n        return []int{9, 11, 13, 15, 17, 19, 21, 23, 25}\n    }\n \
    \   if n == 10 {\n        return []int{10, 12, 14, 16, 18, 20, 22, 24, 26, 28}\n\
    \    }\n    if n == 11 {\n        return []int{11, 13, 15, 17, 19, 21, 23, 25,\
    \ 27, 29, 31}\n    }\n    if n == 12 {\n        return []int{12, 14, 16, 18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34}\n    }\n    if n == 13 {\n        return []int{13,\
    \ 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37}\n    }\n    if n == 14 {\n \
    \       return []int{14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40}\n\
    \    }\n    if n == 15 {\n        return []int{15, 17, 19, 21, 23, 25, 27, 29,\
    \ 31, 33, 35, 37, 39, 41, 43}\n    }\n    if n == 16 {\n        return []int{16,\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8p5ciuxl_test.go:69:6: expected ''('', found TestMake_A_Pile

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n          \
    \  result = append(result, n)\n        } else {\n            if result[i-1] %\
    \ 2 == 0 {\n                result = append(result, result[i-1]+2)\n         \
    \   } else {\n                result = append(result, result[i-1]+1)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpitrsajpu_test.go:51: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
