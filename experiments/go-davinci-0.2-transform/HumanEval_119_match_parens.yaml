name: HumanEval_119_match_parens
language: go_test.go
prompt: "package match_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // You are given a list of two strings, both strings consist of open\n// parentheses\
  \ '(' or close parentheses ')' only.\n// Your job is to check if it is possible\
  \ to concatenate the two strings in\n// some order, that the resulting string will\
  \ be good.\n// A string S is considered to be good if and only if all parentheses\
  \ in S\n// are balanced. For example: the string '(())()' is good, while the string\n\
  // '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return\
  \ 'No' otherwise.\n// Examples:\n// >>> match_parens([]string{\"()(\", \")\"})\n\
  // \"Yes\"\n// >>> match_parens([]string{\")\", \")\"})\n// \"No\"\nfunc match_parens(lst\
  \ []string) string {\n"
tests: "func TestMatch_Parens(t *testing.T) {\n  candidate := match_parens\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]string{\"()(\", \")\"}), expected: \"Yes\"\
  \ },\n     { actual: candidate([]string{\")\", \")\"}), expected: \"No\" },\n  \
  \   { actual: candidate([]string{\"(()(())\", \"())())\"}), expected: \"No\" },\n\
  \     { actual: candidate([]string{\")())\", \"(()()(\"}), expected: \"Yes\" },\n\
  \     { actual: candidate([]string{\"(())))\", \"(()())((\"}), expected: \"Yes\"\
  \ },\n     { actual: candidate([]string{\"()\", \"())\"}), expected: \"No\" },\n\
  \     { actual: candidate([]string{\"(()(\", \"()))()\"}), expected: \"Yes\" },\n\
  \     { actual: candidate([]string{\"((((\", \"((())\"}), expected: \"No\" },\n\
  \     { actual: candidate([]string{\")(()\", \"(()(\"}), expected: \"No\" },\n \
  \    { actual: candidate([]string{\")(\", \")(\"}), expected: \"No\" },\n     {\
  \ actual: candidate([]string{\"(\", \")\"}), expected: \"Yes\" },\n     { actual:\
  \ candidate([]string{\")\", \"(\"}), expected: \"Yes\" },\n   }\n\n\tfor i, tc :=\
  \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(lst) != 2 {\n        return \"No\"\n    }\n    str1, str2\
    \ := lst[0], lst[1]\n    if len(str1) == 0 || len(str2) == 0 {\n        return\
    \ \"No\"\n    }\n    if len(str1) % 2 != 0 || len(str2) % 2 != 0 {\n        return\
    \ \"No\"\n    }\n    if str1[0] == ')' || str2[0] == ')' {\n        return \"\
    No\"\n    }\n    if str1[len(str1)-1] == '(' || str2[len(str2)-1] == '(' {\n \
    \       return \"No\"\n    }\n    if len(str1) == 2 && len(str2) == 2 {\n    \
    \    return \"Yes\"\n    }\n    if len(str1) == 2 {\n        return match_parens([]string{str2,\
    \ str1})\n    }\n    if len(str2) == 2 {\n        return match_parens([]string{str1,\
    \ str2})\n    }\n    if str1[0] == '(' && str1[len(str1)-1] == ')' {\n       \
    \ return match_parens([]string{str1[1:len(str1)-1], str2})\n    }\n    if str2[0]\
    \ == '(' && str2[len(str2)-1] == ')' {\n        return match_parens([]string{str1,\
    \ str2[1:len(str2)-1]})\n    }\n    return \"No\"\n}\n", "    if len(lst) != 2\
    \ {\n        return \"No\"\n    }\n    s1, s2 := lst[0], lst[1]\n    if len(s1)\
    \ == 0 && len(s2) == 0 {\n        return \"Yes\"\n    }\n    if len(s1) == 0 {\n\
    \        return match_parens([]string{s2, \"\"})\n    }\n    if len(s2) == 0 {\n\
    \        return match_parens([]string{s1, \"\"})\n    }\n    if s1[0] == '(' {\n\
    \        return match_parens([]string{s1[1:], s2})\n    }\n    if s2[0] == ')'\
    \ {\n        return match_parens([]string{s1, s2[1:]})\n    }\n    return \"No\"\
    \n}\n", "    var s string\n    for _, v := range lst {\n        s += v\n    }\n\
    \    return match_parens_helper(s)\n}\n", "    return \"Yes\"\n}\n", "    if len(lst)\
    \ != 2 {\n        return \"No\"\n    }\n    s1, s2 := lst[0], lst[1]\n    if len(s1)\
    \ == 0 && len(s2) == 0 {\n        return \"Yes\"\n    }\n    if len(s1) == 0 {\n\
    \        return match_parens([]string{s2, \"\"})\n    }\n    if len(s2) == 0 {\n\
    \        return match_parens([]string{s1, \"\"})\n    }\n    if s1[0] == '(' {\n\
    \        return match_parens([]string{s1[1:], s2})\n    }\n    if s2[0] == ')'\
    \ {\n        return match_parens([]string{s1, s2[1:]})\n    }\n    return \"No\"\
    \n}\n", "    var s string\n    for _, v := range lst {\n        s += v\n    }\n\
    \    if len(s) % 2 != 0 {\n        return \"No\"\n    }\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == '(' {\n            for j := i + 1; j < len(s); j++\
    \ {\n                if s[j] == ')' {\n                    s = s[:i] + s[i+1:j]\
    \ + s[j+1:]\n                    i = -1\n                    break\n         \
    \       }\n            }\n        }\n    }\n    if len(s) == 0 {\n        return\
    \ \"Yes\"\n    }\n    return \"No\"\n}\n", "    if len(lst) != 2 {\n        return\
    \ \"No\"\n    }\n    s1, s2 := lst[0], lst[1]\n    if len(s1) == 0 && len(s2)\
    \ == 0 {\n        return \"Yes\"\n    }\n    if len(s1) == 0 {\n        return\
    \ is_good(s2)\n    }\n    if len(s2) == 0 {\n        return is_good(s1)\n    }\n\
    \    if is_good(s1) == \"Yes\" {\n        return \"Yes\"\n    }\n    if is_good(s2)\
    \ == \"Yes\" {\n        return \"Yes\"\n    }\n    if is_good(s1 + s2) == \"Yes\"\
    \ {\n        return \"Yes\"\n    }\n    if is_good(s2 + s1) == \"Yes\" {\n   \
    \     return \"Yes\"\n    }\n    return \"No\"\n}\n", "    // TODO: implement\n\
    \    return \"\"\n}\n", "    return \"Yes\"\n}\n", "    var s string\n    for\
    \ _, s1 := range lst {\n        s += s1\n    }\n    var stack []byte\n    for\
    \ _, c := range s {\n        if c == '(' {\n            stack = append(stack,\
    \ byte(c))\n        } else {\n            if len(stack) == 0 {\n             \
    \   return \"No\"\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n  \
    \  return \"No\"\n}\n", "    var left, right int\n    for _, s := range lst {\n\
    \        for _, c := range s {\n            if c == '(' {\n                left++\n\
    \            } else {\n                right++\n            }\n        }\n   \
    \ }\n    if left == right {\n        return \"Yes\"\n    }\n    return \"No\"\n\
    }\n", "    var s string\n    for _, v := range lst {\n        s += v\n    }\n\
    \    var stack []rune\n    for _, r := range s {\n        if r == '(' {\n    \
    \        stack = append(stack, r)\n        } else {\n            if len(stack)\
    \ == 0 {\n                return \"No\"\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n \
    \   return \"No\"\n}\n", "    var left, right int\n    for _, s := range lst {\n\
    \        for _, c := range s {\n            if c == '(' {\n                left++\n\
    \            } else {\n                right++\n            }\n        }\n   \
    \ }\n    if left == right {\n        return \"Yes\"\n    }\n    return \"No\"\n\
    }\n", "    if len(lst) != 2 {\n        return \"No\"\n    }\n    s1, s2 := lst[0],\
    \ lst[1]\n    if len(s1) == 0 && len(s2) == 0 {\n        return \"Yes\"\n    }\n\
    \    if len(s1) == 0 {\n        return match_parens_helper(s2)\n    }\n    if\
    \ len(s2) == 0 {\n        return match_parens_helper(s1)\n    }\n    if match_parens_helper(s1)\
    \ == \"Yes\" {\n        return \"Yes\"\n    }\n    if match_parens_helper(s2)\
    \ == \"Yes\" {\n        return \"Yes\"\n    }\n    if match_parens_helper(s1 +\
    \ s2) == \"Yes\" {\n        return \"Yes\"\n    }\n    if match_parens_helper(s2\
    \ + s1) == \"Yes\" {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n",
  "    var s string\n    for _, v := range lst {\n        s += v\n    }\n    if len(s)\
    \ % 2 != 0 {\n        return \"No\"\n    }\n    var stack []rune\n    for _, r\
    \ := range s {\n        if r == '(' {\n            stack = append(stack, r)\n\
    \        } else {\n            if len(stack) == 0 {\n                return \"\
    No\"\n            }\n            stack = stack[:len(stack)-1]\n        }\n   \
    \ }\n    if len(stack) == 0 {\n        return \"Yes\"\n    }\n    return \"No\"\
    \n}\n", "    var (\n        s1, s2 string\n        s1_open, s2_open int\n    \
    \    s1_close, s2_close int\n    )\n    s1 = lst[0]\n    s2 = lst[1]\n    for\
    \ _, c := range s1 {\n        if c == '(' {\n            s1_open++\n        }\
    \ else {\n            s1_close++\n        }\n    }\n    for _, c := range s2 {\n\
    \        if c == '(' {\n            s2_open++\n        } else {\n            s2_close++\n\
    \        }\n    }\n    if s1_open == s2_close || s1_close == s2_open {\n     \
    \   return \"Yes\"\n    }\n    return \"No\"\n}\n", "    var (\n        s1, s2\
    \ string\n        i, j int\n        l1, l2 int\n        res string\n    )\n  \
    \  s1 = lst[0]\n    s2 = lst[1]\n    l1 = len(s1)\n    l2 = len(s2)\n    for i\
    \ = 0; i < l1; i++ {\n        if s1[i] == '(' {\n            for j = 0; j < l2;\
    \ j++ {\n                if s2[j] == ')' {\n                    s1 = s1[:i] +\
    \ s1[i+1:]\n                    s2 = s2[:j] + s2[j+1:]\n                    l1--\n\
    \                    l2--\n                    i--\n                    break\n\
    \                }\n            }\n        }\n    }\n    if l1 == 0 && l2 == 0\
    \ {\n        res = \"Yes\"\n    } else {\n        res = \"No\"\n    }\n    return\
    \ res\n}\n", "    if len(lst) != 2 {\n        return \"No\"\n    }\n    s1, s2\
    \ := lst[0], lst[1]\n    if len(s1) == 0 && len(s2) == 0 {\n        return \"\
    Yes\"\n    }\n    if len(s1) == 0 {\n        return \"No\"\n    }\n    if len(s2)\
    \ == 0 {\n        return \"No\"\n    }\n    if s1[0] == '(' {\n        if s2[0]\
    \ == '(' {\n            return match_parens([]string{s1[1:], s2})\n        } else\
    \ {\n            return match_parens([]string{s1[1:], s2[1:]})\n        }\n  \
    \  } else {\n        if s2[0] == '(' {\n            return match_parens([]string{s1,\
    \ s2[1:]})\n        } else {\n            return \"No\"\n        }\n    }\n}\n",
  "    // TODO - Add your code here\n    return \"\"\n}\n", "    if len(lst) != 2\
    \ {\n        return \"No\"\n    }\n    s1, s2 := lst[0], lst[1]\n    if len(s1)\
    \ == 0 && len(s2) == 0 {\n        return \"Yes\"\n    }\n    if len(s1) == 0 {\n\
    \        return match_parens([]string{s2, \"\"})\n    }\n    if len(s2) == 0 {\n\
    \        return match_parens([]string{s1, \"\"})\n    }\n    if s1[0] == '(' {\n\
    \        return match_parens([]string{s1[1:], s2})\n    }\n    if s2[0] == ')'\
    \ {\n        return match_parens([]string{s1, s2[1:]})\n    }\n    return \"No\"\
    \n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
