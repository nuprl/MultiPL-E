name: HumanEval_91_is_bored
language: go_test.go
prompt: "package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ You'll be given a string of words, and your task is to count the number\n// of\
  \ boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
  \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\"\
  )\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n// 1\nfunc is_bored(S string) int {\n"
tests: "func TestIs_Bored(t *testing.T) {\n  candidate := is_bored\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"Hello world\"), expected: 0 },\n     { actual: candidate(\"\
  Is the sky blue?\"), expected: 0 },\n     { actual: candidate(\"I love It !\"),\
  \ expected: 1 },\n     { actual: candidate(\"bIt\"), expected: 0 },\n     { actual:\
  \ candidate(\"I feel good today. I will be productive. will kill It\"), expected:\
  \ 2 },\n     { actual: candidate(\"You and I are going for a walk\"), expected:\
  \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return 0\n}\n", "    return 0\n}\n", "    var boredoms int\n  \
    \  for _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    var\
    \ boredoms int = 0\n    var sentences []string = strings.Split(S, \".\")\n   \
    \ for _, sentence := range sentences {\n        if strings.HasPrefix(sentence,\
    \ \"I\") {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int\n    var sentence string\n    for _, c := range S {\n    \
    \    if c == '.' || c == '?' || c == '!' {\n            if sentence[0] == 'I'\
    \ {\n                boredoms++\n            }\n            sentence = \"\"\n\
    \        } else {\n            sentence += string(c)\n        }\n    }\n    return\
    \ boredoms\n}\n", "    var boredoms int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    return 0\n}\n", "    boredoms := 0\n   \
    \ for _, word := range strings.Split(S, \" \") {\n        if word == \"I\" {\n\
    \            boredoms++\n        }\n    }\n    return boredoms\n}\n", "    return\
    \ 0\n}\n", "    return 0\n}\n", "    var boredoms int\n    var sentence string\n\
    \    for _, char := range S {\n        if char == '.' || char == '?' || char ==\
    \ '!' {\n            if sentence[0] == 'I' {\n                boredoms++\n   \
    \         }\n            sentence = \"\"\n        } else {\n            sentence\
    \ += string(char)\n        }\n    }\n    return boredoms\n}\n", "    var boredoms\
    \ int\n    for _, word := range strings.Split(S, \" \") {\n        if word ==\
    \ \"I\" {\n            boredoms++\n        }\n    }\n    return boredoms\n}\n",
  "    var boredoms int\n    var sentences []string\n    var sentence string\n   \
    \ var word string\n    var i int\n    var c byte\n\n    sentences = strings.Split(S,\
    \ \".\")\n    for _, sentence = range sentences {\n        words = strings.Split(sentence,\
    \ \" \")\n        for i, word = range words {\n            c = word[0]\n     \
    \       if c == 'I' {\n                boredoms++\n                break\n   \
    \         }\n        }\n    }\n    return boredoms\n}\n", "    var boredoms int\
    \ = 0\n    var sentences []string = strings.Split(S, \".\")\n    for _, sentence\
    \ := range sentences {\n        var words []string = strings.Split(sentence, \"\
    \ \")\n        if words[0] == \"I\" {\n            boredoms++\n        }\n   \
    \ }\n    return boredoms\n}\n", "    count := 0\n    for _, s := range S {\n \
    \       if s == 'I' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    var boredoms int = 0\n    var sentence string = \"\"\n    for _, c\
    \ := range S {\n        if c == '.' || c == '?' || c == '!' {\n            if\
    \ sentence[0] == 'I' {\n                boredoms++\n            }\n          \
    \  sentence = \"\"\n        } else {\n            sentence += string(c)\n    \
    \    }\n    }\n    return boredoms\n}\n", "    var count int\n    for _, v :=\
    \ range S {\n        if v == 'I' {\n            count++\n        }\n    }\n  \
    \  return count\n}\n", "    var boredoms int\n    for _, word := range strings.Split(S,\
    \ \" \") {\n        if word == \"I\" {\n            boredoms++\n        }\n  \
    \  }\n    return boredoms\n}\n", "    var boredoms int = 0\n    var sentences\
    \ []string = strings.Split(S, \".\")\n    for _, sentence := range sentences {\n\
    \        if strings.HasPrefix(sentence, \"I\") {\n            boredoms++\n   \
    \     }\n    }\n    return boredoms\n}\n", "    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
