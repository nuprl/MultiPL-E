language: go_test.go
name: HumanEval_132_is_nested
results:
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Create a map to hold the bracket pairs\n    bracketMap\
    \ := map[string]string{\n        \"]\": \"[\",\n        \"}\": \"{\",\n      \
    \  \")\": \"(\",\n    }\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is a bracket, push it to the stack\n\
    \        if char == '[' || char == '{' || char == '(' {\n            stack = append(stack,\
    \ string(char))\n        } else {\n            // If the character is not a bracket,\
    \ return false\n            if char != ']' && char != '}' && char != ')' {\n \
    \               return false\n            }\n            // If the stack is empty,\
    \ return false\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            // If the last bracket in the stack does not match\
    \ the current bracket, return false\n            if stack[len(stack)-1] != bracketMap[string(char)]\
    \ {\n                return false\n            }\n            // Pop the last\
    \ bracket from the stack\n            stack = stack[:len(stack)-1]\n        }\n\
    \    }\n    // If the stack is empty, return true\n    if len(stack) == 0 {\n\
    \        return true\n    }\n    // If the stack is not empty, return false\n\
    \    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpscjr3my2_test.go:88: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpscjr3my2_test.go:88:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpscjr3my2_test.go:88: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpscjr3my2_test.go:88:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    if len(stack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphokx9an6_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphokx9an6_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphokx9an6_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphokx9an6_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Your code here\n    return false\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmpvjv7u11o_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmpvjv7u11o_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmpvjv7u11o_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmpvjv7u11o_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmpvjv7u11o_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n       \
    \     } else {\n                return false\n            }\n        }\n    }\n\
    \    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp19owpddp_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp19owpddp_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp19owpddp_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp19owpddp_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []byte\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, byte(c))\n\
    \        } else if c == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpe2ehgh75_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpe2ehgh75_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpe2ehgh75_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpe2ehgh75_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    if len(myString) == 0 {\n        return\
    \ false\n    }\n    var stack []string\n    for _, char := range myString {\n\
    \        if char == '[' {\n            stack = append(stack, \"[\")\n        }\
    \ else if char == ']' {\n            if len(stack) == 0 {\n                return\
    \ false\n            }\n            stack = stack[:len(stack)-1]\n        }\n\
    \    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwof7lk1l_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwof7lk1l_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwof7lk1l_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to keep track of\
    \ the brackets\n    myStack := []string{}\n    // Loop through the string\n  \
    \  for _, char := range myString {\n        // If the character is an opening\
    \ bracket, push it to the stack\n        if char == '[' {\n            myStack\
    \ = append(myStack, \"[\")\n        } else {\n            // If the character\
    \ is a closing bracket, pop the last element from the stack\n            if len(myStack)\
    \ > 0 {\n                myStack = myStack[:len(myStack)-1]\n            } else\
    \ {\n                // If the stack is empty, return false\n                return\
    \ false\n            }\n        }\n    }\n    // If the stack is empty, return\
    \ true\n    if len(myStack) == 0 {\n        return true\n    }\n    // If the\
    \ stack is not empty, return false\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpcyc3997w_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpcyc3997w_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpcyc3997w_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpcyc3997w_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) > 0 {\n \
    \               stack = stack[:len(stack)-1]\n            } else {\n         \
    \       return false\n            }\n        }\n    }\n    return len(stack) ==\
    \ 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpk59vcf_z_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpk59vcf_z_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpk59vcf_z_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpk59vcf_z_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Iterate through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, push it\
    \ to the stack\n        if char == '[' {\n            stack = append(stack, \"\
    [\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            if len(stack) > 0 {\n     \
    \           stack = stack[:len(stack)-1]\n            } else {\n             \
    \   // If the stack is empty, return false\n                return false\n   \
    \         }\n        }\n    }\n    // If the stack is empty, return true\n   \
    \ if len(stack) == 0 {\n        return true\n    }\n    // Otherwise, return false\n\
    \    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp_gc63pi8_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp_gc63pi8_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp_gc63pi8_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp_gc63pi8_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack\n    myStack :=\
    \ make([]string, 0)\n    // Iterate through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if string(char) == \"[\" {\n            myStack = append(myStack,\
    \ string(char))\n        } else {\n            // If the character is a closing\
    \ bracket, pop the last element from the stack\n            if len(myStack) >\
    \ 0 {\n                myStack = myStack[:len(myStack)-1]\n            } else\
    \ {\n                // If the stack is empty, return false\n                return\
    \ false\n            }\n        }\n    }\n    // If the stack is empty, return\
    \ true\n    if len(myStack) == 0 {\n        return true\n    }\n    // Otherwise,\
    \ return false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpxt2avk4m_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpxt2avk4m_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpxt2avk4m_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpxt2avk4m_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []byte\n    for i := 0;\
    \ i < len(myString); i++ {\n        if len(stack) == 0 {\n            stack =\
    \ append(stack, myString[i])\n        } else {\n            if myString[i] ==\
    \ ']' && stack[len(stack)-1] == '[' {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                stack = append(stack, myString[i])\n  \
    \          }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpeizjhb_5_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpeizjhb_5_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpeizjhb_5_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpeizjhb_5_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []byte\n    for _, v :=\
    \ range myString {\n        if v == '[' {\n            stack = append(stack, byte(v))\n\
    \        } else if v == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp40x9um74_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp40x9um74_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp40x9um74_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp40x9um74_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, c)\n\
    \        } else if c == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpayaouuo0_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpayaouuo0_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpayaouuo0_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpayaouuo0_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) > 0 {\n \
    \               stack = stack[:len(stack)-1]\n            } else {\n         \
    \       return false\n            }\n        }\n    }\n    return len(stack) ==\
    \ 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpk59vcf_z_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpk59vcf_z_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpk59vcf_z_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpk59vcf_z_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    return true\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__1\
    \ (0.00s)\n        tmp8iku6f2b_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__2 (0.00s)\n        tmp8iku6f2b_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__3\
    \ (0.00s)\n        tmp8iku6f2b_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__5 (0.00s)\n        tmp8iku6f2b_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__7\
    \ (0.00s)\n        tmp8iku6f2b_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__8 (0.00s)\n        tmp8iku6f2b_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__11\
    \ (0.00s)\n        tmp8iku6f2b_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__12 (0.00s)\n        tmp8iku6f2b_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__13\
    \ (0.00s)\n        tmp8iku6f2b_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // TODO: Implement me\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp1dgxypse_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp1dgxypse_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp1dgxypse_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp1dgxypse_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp1dgxypse_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, c)\n\
    \        } else if c == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpayaouuo0_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpayaouuo0_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpayaouuo0_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpayaouuo0_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var count int = 0\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            count++\n       \
    \ } else if char == ']' {\n            count--\n        }\n        if count <\
    \ 0 {\n            return false\n        }\n    }\n    return count > 0\n}\n\n\
    func TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmpb8a76w39_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmpb8a76w39_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmpb8a76w39_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__7 (0.00s)\n        tmpb8a76w39_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmpb8a76w39_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__12 (0.00s)\n        tmpb8a76w39_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // TODO: Implement me\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp1dgxypse_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp1dgxypse_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp1dgxypse_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp1dgxypse_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp1dgxypse_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    if len(stack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphokx9an6_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphokx9an6_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphokx9an6_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphokx9an6_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack\n    stack := make([]string,\
    \ 0)\n    // Iterate through the string\n    for _, char := range myString {\n\
    \        // If the character is a [, push it onto the stack\n        if string(char)\
    \ == \"[\" {\n            stack = append(stack, \"[\")\n        } else {\n   \
    \         // If the character is a ], pop the stack\n            if len(stack)\
    \ > 0 {\n                stack = stack[:len(stack)-1]\n            } else {\n\
    \                // If the stack is empty, return false\n                return\
    \ false\n            }\n        }\n    }\n    // If the stack is empty, return\
    \ true\n    if len(stack) == 0 {\n        return true\n    }\n    // If the stack\
    \ is not empty, return false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp0po52idn_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp0po52idn_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp0po52idn_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp0po52idn_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to keep track of\
    \ the brackets\n    stack := make([]string, 0)\n    // Iterate through the string\n\
    \    for _, char := range myString {\n        // If the character is a left bracket,\
    \ push it onto the stack\n        if string(char) == \"[\" {\n            stack\
    \ = append(stack, string(char))\n        } else {\n            // If the character\
    \ is a right bracket, pop the last element off the stack\n            if len(stack)\
    \ > 0 {\n                stack = stack[:len(stack)-1]\n            } else {\n\
    \                // If the stack is empty, return false\n                return\
    \ false\n            }\n        }\n    }\n    // If the stack is empty, return\
    \ true\n    if len(stack) == 0 {\n        return true\n    }\n    // If the stack\
    \ is not empty, return false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp8lrg3033_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp8lrg3033_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp8lrg3033_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp8lrg3033_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // TODO: Implement me\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp1dgxypse_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp1dgxypse_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp1dgxypse_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp1dgxypse_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp1dgxypse_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, v :=\
    \ range myString {\n        if v == '[' {\n            stack = append(stack, \"\
    [\")\n        } else if v == ']' {\n            if len(stack) == 0 {\n       \
    \         return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpgbx2bg32_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpgbx2bg32_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpgbx2bg32_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpgbx2bg32_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, \"[\")\n\
    \        } else {\n            // If the character is a closing bracket, pop the\
    \ last item from the stack\n            // If the stack is empty, return false\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    // If the stack\
    \ is empty, return true\n    if len(stack) == 0 {\n        return true\n    }\n\
    \    // If the stack is not empty, return false\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplc3p9m6j_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplc3p9m6j_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplc3p9m6j_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplc3p9m6j_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it to the stack\n        if string(char) == \"[\" {\n            stack = append(stack,\
    \ string(char))\n        } else {\n            // If the character is a closing\
    \ bracket, pop the last element from the stack\n            // If the stack is\
    \ empty, return false\n            if len(stack) == 0 {\n                return\
    \ false\n            }\n            stack = stack[:len(stack)-1]\n        }\n\
    \    }\n    // If the stack is empty, return true\n    if len(stack) == 0 {\n\
    \        return true\n    }\n    // Otherwise, return false\n    return false\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpzq2re60x_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpzq2re60x_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpzq2re60x_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpzq2re60x_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmptflsx1vq_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmptflsx1vq_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmptflsx1vq_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmptflsx1vq_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmptflsx1vq_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if len(stack) > 0 {\n          \
    \  stack = stack[:len(stack)-1]\n        } else {\n            return false\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp56xkiqps_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp56xkiqps_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp56xkiqps_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp56xkiqps_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) > 0 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmppv68ckd9_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmppv68ckd9_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmppv68ckd9_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmppv68ckd9_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    stack := make([]string, 0)\n    // Iterate through the string\n    for _,\
    \ char := range myString {\n        // If the character is an opening bracket,\
    \ push it onto the stack\n        if string(char) == \"[\" {\n            stack\
    \ = append(stack, string(char))\n        } else {\n            // If the character\
    \ is a closing bracket, pop the last item off the stack\n            // If the\
    \ stack is empty, return false\n            if len(stack) == 0 {\n           \
    \     return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    // If the stack is empty, return true\n\
    \    if len(stack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpuui87kz5_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpuui87kz5_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpuui87kz5_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpuui87kz5_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    for _, char := range myString {\n        // If the\
    \ character is an opening bracket, push it onto the stack\n        if char ==\
    \ '[' {\n            stack = append(stack, \"[\")\n        } else {\n        \
    \    // If the character is a closing bracket, pop the last bracket off the stack\n\
    \            // If the stack is empty, return false\n            if len(stack)\
    \ == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    // If the stack is empty, return true\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpxx372fpe_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpxx372fpe_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpxx372fpe_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpxx372fpe_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            if stack[len(stack)-1]\
    \ == '[' {\n                stack = stack[:len(stack)-1]\n            } else {\n\
    \                return false\n            }\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpu2t5r9jo_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpu2t5r9jo_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpu2t5r9jo_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpu2t5r9jo_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    if len(myString) == 0 {\n        return\
    \ false\n    }\n    var stack []string\n    for _, char := range myString {\n\
    \        if string(char) == \"[\" {\n            stack = append(stack, string(char))\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9exwdb3l_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9exwdb3l_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9exwdb3l_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, add\
    \ it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last bracket from the stack\n            if len(stack) > 0 {\n     \
    \           stack = stack[:len(stack)-1]\n            } else {\n             \
    \   // If the stack is empty, return false\n                return false\n   \
    \         }\n        }\n    }\n    // If the stack is empty, return true\n   \
    \ if len(stack) == 0 {\n        return true\n    }\n    // If the stack is not\
    \ empty, return false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpw7gvbz4c_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpw7gvbz4c_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpw7gvbz4c_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpw7gvbz4c_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // We need to keep track of the number\
    \ of open brackets\n    // and the number of closed brackets\n    // If the number\
    \ of open brackets is greater than the number of closed brackets\n    // then\
    \ we have a nested bracket\n    // If the number of open brackets is equal to\
    \ the number of closed brackets\n    // then we have a non-nested bracket\n  \
    \  // If the number of open brackets is less than the number of closed brackets\n\
    \    // then we have an invalid bracket\n    openBrackets := 0\n    closedBrackets\
    \ := 0\n    for _, char := range myString {\n        if char == '[' {\n      \
    \      openBrackets++\n        } else if char == ']' {\n            closedBrackets++\n\
    \        }\n    }\n    if openBrackets > closedBrackets {\n        return true\n\
    \    } else if openBrackets == closedBrackets {\n        return false\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmpp6hngc9b_test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmpp6hngc9b_test.go:76:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmpp6hngc9b_test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__7 (0.00s)\n        tmpp6hngc9b_test.go:76:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmpp6hngc9b_test.go:76: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__12 (0.00s)\n        tmpp6hngc9b_test.go:76:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var count int\n    for _, char :=\
    \ range myString {\n        if char == '[' {\n            count++\n        } else\
    \ if char == ']' {\n            count--\n        }\n        if count < 0 {\n \
    \           return false\n        }\n    }\n    return count == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpjw8lnftn_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpjw8lnftn_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpjw8lnftn_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpjw8lnftn_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := []string{}\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, add it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, \"[\")\n\
    \        } else {\n            // If the character is a closing bracket, pop the\
    \ last bracket from the stack\n            if len(stack) > 0 {\n             \
    \   stack = stack[:len(stack)-1]\n            } else {\n                // If\
    \ the stack is empty, return false\n                return false\n           \
    \ }\n        }\n    }\n    // If the stack is empty, return true\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    // If the stack is not empty, return\
    \ false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmps6cx0man_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmps6cx0man_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmps6cx0man_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmps6cx0man_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, c :=\
    \ range myString {\n        if string(c) == \"[\" {\n            stack = append(stack,\
    \ \"[\")\n        } else if string(c) == \"]\" {\n            if len(stack) ==\
    \ 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp1tcugbbg_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp1tcugbbg_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp1tcugbbg_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp1tcugbbg_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) > 0 {\n \
    \               stack = stack[:len(stack)-1]\n            } else {\n         \
    \       return false\n            }\n        }\n    }\n    return len(stack) ==\
    \ 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpk59vcf_z_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpk59vcf_z_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpk59vcf_z_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpk59vcf_z_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, c)\n\
    \        } else if c == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpayaouuo0_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpayaouuo0_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpayaouuo0_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpayaouuo0_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []byte\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, byte(c))\n\
    \        } else if c == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpe2ehgh75_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpe2ehgh75_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpe2ehgh75_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpe2ehgh75_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []byte\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ byte(char))\n        } else if char == ']' {\n            if len(stack) == 0\
    \ {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpdxbpcxum_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpdxbpcxum_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpdxbpcxum_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpdxbpcxum_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp8gl1w_34_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp8gl1w_34_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp8gl1w_34_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp8gl1w_34_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var myStack []string\n    // Loop through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, push it\
    \ to the stack\n        if char == '[' {\n            myStack = append(myStack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            // If the stack is empty, return\
    \ false\n            if len(myStack) == 0 {\n                return false\n  \
    \          } else {\n                myStack = myStack[:len(myStack)-1]\n    \
    \        }\n        }\n    }\n    // If the stack is empty, return true\n    if\
    \ len(myStack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp8cuinhcp_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp8cuinhcp_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp8cuinhcp_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp8cuinhcp_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var myStack []string\n    // Loop through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, add it\
    \ to the stack\n        if char == '[' {\n            myStack = append(myStack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ check if the stack is empty\n            if len(myStack) == 0 {\n          \
    \      // If the stack is empty, return false\n                return false\n\
    \            } else {\n                // If the stack is not empty, pop the last\
    \ element from the stack\n                myStack = myStack[:len(myStack)-1]\n\
    \            }\n        }\n    }\n    // If the stack is empty, return true\n\
    \    if len(myStack) == 0 {\n        return true\n    } else {\n        // If\
    \ the stack is not empty, return false\n        return false\n    }\n}\n\nfunc\
    \ TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmps6moisgg_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmps6moisgg_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmps6moisgg_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmps6moisgg_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            if stack[len(stack)-1]\
    \ == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpq4596988_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpq4596988_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpq4596988_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpq4596988_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var myStack []string\n    // Loop through the string\n    for _, char :=\
    \ range myString {\n        // If the character is a left bracket, push it to\
    \ the stack\n        if string(char) == \"[\" {\n            myStack = append(myStack,\
    \ string(char))\n        } else {\n            // If the character is a right\
    \ bracket, pop the last item from the stack\n            if len(myStack) > 0 {\n\
    \                myStack = myStack[:len(myStack)-1]\n            } else {\n  \
    \              // If the stack is empty, return false\n                return\
    \ false\n            }\n        }\n    }\n    // If the stack is empty, return\
    \ true\n    if len(myStack) == 0 {\n        return true\n    }\n    // Else return\
    \ false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpg8z_8nzy_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpg8z_8nzy_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpg8z_8nzy_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpg8z_8nzy_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, c)\n\
    \        } else if c == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpayaouuo0_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpayaouuo0_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpayaouuo0_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpayaouuo0_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is a left bracket, push it\
    \ to the stack\n        if string(char) == \"[\" {\n            stack = append(stack,\
    \ string(char))\n        } else {\n            // If the character is a right\
    \ bracket, pop the last element from the stack\n            // If the stack is\
    \ empty, return false\n            if len(stack) == 0 {\n                return\
    \ false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    // If the stack is empty, return true\n\
    \    if len(stack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpuuka1rit_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpuuka1rit_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpuuka1rit_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpuuka1rit_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    if len(stack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphokx9an6_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphokx9an6_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphokx9an6_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphokx9an6_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, \"\
    [\")\n        } else if c == ']' {\n            if len(stack) == 0 {\n       \
    \         return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpxfsatwei_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpxfsatwei_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpxfsatwei_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpxfsatwei_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, c)\n\
    \        } else if c == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpayaouuo0_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpayaouuo0_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpayaouuo0_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpayaouuo0_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var count int\n    for _, char :=\
    \ range myString {\n        if char == '[' {\n            count++\n        } else\
    \ if char == ']' {\n            count--\n        }\n        if count < 0 {\n \
    \           return false\n        }\n    }\n    return count == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpjw8lnftn_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpjw8lnftn_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpjw8lnftn_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpjw8lnftn_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    if len(stack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphokx9an6_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphokx9an6_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphokx9an6_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphokx9an6_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, \"\
    [\")\n        } else if c == ']' {\n            if len(stack) > 0 {\n        \
    \        stack = stack[:len(stack)-1]\n            } else {\n                return\
    \ false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc\
    \ TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp749pdwgu_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp749pdwgu_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp749pdwgu_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp749pdwgu_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    if len(stack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphokx9an6_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphokx9an6_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphokx9an6_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphokx9an6_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // TODO: Implement\n    return false\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmpbimhg7tg_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmpbimhg7tg_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmpbimhg7tg_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmpbimhg7tg_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmpbimhg7tg_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []byte\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == '[' {\n            stack\
    \ = append(stack, myString[i])\n        } else {\n            if len(stack) ==\
    \ 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9n0ean6h_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9n0ean6h_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9n0ean6h_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9n0ean6h_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Iterate through the string\n    for i := 0; i\
    \ < len(myString); i++ {\n        // If the current character is a left bracket,\
    \ push it onto the stack\n        if myString[i] == '[' {\n            stack =\
    \ append(stack, \"[\")\n        } else {\n            // If the current character\
    \ is a right bracket, pop the last item off the stack\n            // If the stack\
    \ is empty, return false\n            if len(stack) == 0 {\n                return\
    \ false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    // If the stack is empty, return true\n\
    \    if len(stack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvl65lm3z_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvl65lm3z_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvl65lm3z_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvl65lm3z_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, c :=\
    \ range myString {\n        if string(c) == \"[\" {\n            stack = append(stack,\
    \ string(c))\n        } else {\n            if len(stack) == 0 {\n           \
    \     return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpjg9hwh0w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpjg9hwh0w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpjg9hwh0w_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpjg9hwh0w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            if stack[len(stack)-1]\
    \ == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpq4596988_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpq4596988_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpq4596988_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpq4596988_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, \"\
    [\")\n        } else if c == ']' {\n            if len(stack) == 0 {\n       \
    \         return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpxfsatwei_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpxfsatwei_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpxfsatwei_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpxfsatwei_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmpj83pgnpd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmpj83pgnpd_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmpj83pgnpd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmpj83pgnpd_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmpj83pgnpd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack\n    var myStack\
    \ []string\n    for _, char := range myString {\n        if char == '[' {\n  \
    \          myStack = append(myStack, \"[\")\n        } else if char == ']' {\n\
    \            if len(myStack) == 0 {\n                return false\n          \
    \  } else {\n                myStack = myStack[:len(myStack)-1]\n            }\n\
    \        }\n    }\n    if len(myStack) == 0 {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpabs54li8_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpabs54li8_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpabs54li8_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpabs54li8_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var myStack []string\n    // Loop through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, push it\
    \ to the stack\n        if char == '[' {\n            myStack = append(myStack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the stack\n            if len(myStack) > 0 {\n                myStack =\
    \ myStack[:len(myStack)-1]\n            } else {\n                // If the stack\
    \ is empty, return false\n                return false\n            }\n      \
    \  }\n    }\n    // If the stack is empty, return true\n    if len(myStack) ==\
    \ 0 {\n        return true\n    }\n    // Otherwise, return false\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwufki42o_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwufki42o_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwufki42o_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwufki42o_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // TODO: Implement me\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmp1dgxypse_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmp1dgxypse_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmp1dgxypse_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmp1dgxypse_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmp1dgxypse_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmptflsx1vq_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmptflsx1vq_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmptflsx1vq_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmptflsx1vq_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmptflsx1vq_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to keep track of\
    \ the brackets\n    myStack := make([]string, 0)\n    // Loop through the string\n\
    \    for _, char := range myString {\n        // If the character is a left bracket,\
    \ push it onto the stack\n        if string(char) == \"[\" {\n            myStack\
    \ = append(myStack, string(char))\n        } else {\n            // If the character\
    \ is a right bracket, pop the last element off the stack\n            if len(myStack)\
    \ > 0 {\n                myStack = myStack[:len(myStack)-1]\n            } else\
    \ {\n                // If the stack is empty, return false\n                return\
    \ false\n            }\n        }\n    }\n    // If the stack is empty, return\
    \ true\n    if len(myStack) == 0 {\n        return true\n    }\n    // Otherwise,\
    \ return false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpu_ud7211_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpu_ud7211_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpu_ud7211_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpu_ud7211_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    stack := make([]string, 0)\n    // Iterate through the string\n    for _,\
    \ char := range myString {\n        // If the character is an opening bracket,\
    \ push it onto the stack\n        if string(char) == \"[\" {\n            stack\
    \ = append(stack, string(char))\n        } else {\n            // If the character\
    \ is a closing bracket, pop the last element off the stack\n            // If\
    \ the stack is empty, return false\n            if len(stack) == 0 {\n       \
    \         return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    // If the stack is empty, return true\n\
    \    if len(stack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp3t16olvh_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp3t16olvh_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp3t16olvh_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp3t16olvh_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, \"[\")\n\
    \        } else {\n            // If the character is a closing bracket, pop the\
    \ stack\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                // If the stack is empty, return false\n\
    \                return false\n            }\n        }\n    }\n    // If the\
    \ stack is empty, return true\n    if len(stack) == 0 {\n        return true\n\
    \    }\n    // If the stack is not empty, return false\n    return false\n}\n\n\
    func TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpq655mz31_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpq655mz31_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpq655mz31_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpq655mz31_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            } else\
    \ {\n                stack = stack[:len(stack)-1]\n            }\n        }\n\
    \    }\n    if len(stack) == 0 {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphcczgs8t_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphcczgs8t_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphcczgs8t_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphcczgs8t_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    if len(myString) == 0 {\n        return\
    \ false\n    }\n    if len(myString) == 1 {\n        return false\n    }\n   \
    \ if len(myString) == 2 {\n        if myString[0] == '[' && myString[1] == ']'\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n    if myString[0] == '[' && myString[len(myString)-1] == ']'\
    \ {\n        return true\n    }\n    if myString[0] == '[' && myString[len(myString)-1]\
    \ != ']' {\n        return is_nested(myString[1:])\n    }\n    if myString[0]\
    \ != '[' && myString[len(myString)-1] == ']' {\n        return is_nested(myString[:len(myString)-1])\n\
    \    }\n    if myString[0] != '[' && myString[len(myString)-1] != ']' {\n    \
    \    return is_nested(myString[1:len(myString)-1])\n    }\n    return false\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__1\
    \ (0.00s)\n        tmpqgxgic9j_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__2 (0.00s)\n        tmpqgxgic9j_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__3\
    \ (0.00s)\n        tmpqgxgic9j_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__5 (0.00s)\n        tmpqgxgic9j_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__7\
    \ (0.00s)\n        tmpqgxgic9j_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__8 (0.00s)\n        tmpqgxgic9j_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpqgxgic9j_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // Create a stack\n    stack := make([]string,\
    \ 0)\n    // Iterate through the string\n    for _, char := range myString {\n\
    \        // If the character is an opening bracket, push it onto the stack\n \
    \       if char == '[' {\n            stack = append(stack, \"[\")\n        }\
    \ else {\n            // If the character is a closing bracket, pop the stack\n\
    \            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                // If the stack is empty, return false\n\
    \                return false\n            }\n        }\n    }\n    // If the\
    \ stack is empty, return true\n    if len(stack) == 0 {\n        return true\n\
    \    }\n    // Otherwise, return false\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpxg4g1dfk_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpxg4g1dfk_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpxg4g1dfk_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpxg4g1dfk_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) > 0 {\n \
    \               stack = stack[:len(stack)-1]\n            } else {\n         \
    \       return false\n            }\n        }\n    }\n    return len(stack) ==\
    \ 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpk59vcf_z_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpk59vcf_z_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpk59vcf_z_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpk59vcf_z_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9ncnvb02_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9ncnvb02_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    if len(myString) == 0 {\n        return\
    \ false\n    }\n    if len(myString) == 1 {\n        return false\n    }\n   \
    \ if len(myString) == 2 {\n        if myString[0] == '[' && myString[1] == ']'\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n    if myString[0] == '[' && myString[len(myString)-1] == ']'\
    \ {\n        return true\n    }\n    if myString[0] == '[' && myString[len(myString)-1]\
    \ != ']' {\n        return is_nested(myString[1:])\n    }\n    if myString[0]\
    \ != '[' && myString[len(myString)-1] == ']' {\n        return is_nested(myString[:len(myString)-1])\n\
    \    }\n    return is_nested(myString[1:len(myString)-1])\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__1\
    \ (0.00s)\n        tmp46f5_w83_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__2 (0.00s)\n        tmp46f5_w83_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__3\
    \ (0.00s)\n        tmp46f5_w83_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__5 (0.00s)\n        tmp46f5_w83_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__7\
    \ (0.00s)\n        tmp46f5_w83_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__8 (0.00s)\n        tmp46f5_w83_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp46f5_w83_test.go:75: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            if stack[len(stack)-1]\
    \ == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpq4596988_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpq4596988_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpq4596988_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpq4596988_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmptflsx1vq_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmptflsx1vq_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__6\
    \ (0.00s)\n        tmptflsx1vq_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmptflsx1vq_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__10\
    \ (0.00s)\n        tmptflsx1vq_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpwez82k0i_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpwez82k0i_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpz3o2b1_i_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpz3o2b1_i_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074420
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpj7a3qpdz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpj7a3qpdz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else if string(char) == \"]\" {\n   \
    \         if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpo1cc5nvz_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpo1cc5nvz_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, v :=\
    \ range myString {\n        if string(v) == \"[\" {\n            stack = append(stack,\
    \ string(v))\n        } else if string(v) == \"]\" {\n            if len(stack)\
    \ == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmptuej_kvf_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmptuej_kvf_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmptuej_kvf_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmptuej_kvf_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, \"[\")\n        } else if string(char) == \"]\" {\n          \
    \  if len(stack) == 0 {\n                return false\n            } else {\n\
    \                stack = stack[:len(stack)-1]\n            }\n        }\n    }\n\
    \    if len(stack) > 0 {\n        return false\n    }\n    return true\n}\n\n\
    func TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpal2otnub_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpal2otnub_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpal2otnub_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpal2otnub_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074422
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    // >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n//\
    \ false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n\
    // >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpi9m83k0n_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpi9m83k0n_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074417
