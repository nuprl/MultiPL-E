name: HumanEval_37_sort_even
language: php
results:
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $c = 0;\n    $arr = [];\n    $even = [];\n    $odd = [];\n\
    \    for ($i = 0; $i < count($l); $i++) {\n        if ($l[$i] % 2 === 0) {\n \
    \           $even[$c] = $l[$i];\n            $c++;\n        } else {\n       \
    \     $odd[] = $l[$i];\n        }\n    }\n    sort($even);\n    $arr = array_merge($odd,\
    \ $even);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7w8lx3o.php:32\n\
    Stack trace:\n#0 /tmp/tmpw7w8lx3o.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpw7w8lx3o.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l_prime = [];\n    $even_vals = [];\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n            $l_prime[]\
    \ = $l[$i];\n        } else {\n            $even_vals[] = $l[$i];\n        }\n\
    \    }\n    asort($even_vals);\n    foreach ($even_vals as $val) {\n        $l_prime[]\
    \ = $val;\n    }\n    return $l_prime;\n}\nfunction candidate(...$args) {\n  \
    \  return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4eg3ohd.php:30\n\
    Stack trace:\n#0 /tmp/tmpe4eg3ohd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpe4eg3ohd.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_x9qzfe.php:18\n\
    Stack trace:\n#0 /tmp/tmph_x9qzfe.php(23): test()\n#1 {main}\n  thrown in /tmp/tmph_x9qzfe.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even_indices = [];\n    $odd_indices = [];\n    $result\
    \ = [];\n    $i = 0;\n    foreach ($l as $value) {\n        if ($i % 2 == 0) {\n\
    \            $even_indices[] = $value;\n        } else {\n            $odd_indices[]\
    \ = $value;\n        }\n        $i++;\n    }\n    sort($even_indices);\n    $i\
    \ = 0;\n    foreach ($l as $value) {\n        if ($i % 2 == 0) {\n           \
    \ $result[] = $even_indices[$i / 2];\n        } else {\n            $result[]\
    \ = $odd_indices[($i - 1) / 2];\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\nprint_r(sort_even([1, 2, 3]));\nprint_r(sort_even([5, 6, 3, 4]));\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nArray\n(\n    [0]\
    \ => 3\n    [1] => 6\n    [2] => 5\n    [3] => 4\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $evens = array();\n  $odds = array();\n  foreach ($l as $key\
    \ => $val) {\n    if ($key % 2 == 0) {\n      $evens[] = $val;\n    } else {\n\
    \      $odds[] = $val;\n    }\n  }\n  sort($evens);\n  return array_merge($evens,\
    \ $odds);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0mrqzc2.php:28\n\
    Stack trace:\n#0 /tmp/tmpr0mrqzc2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr0mrqzc2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    if(count($l) == 0) {\n        return array();\n    } else\
    \ if(count($l) == 1) {\n        return $l;\n    } else {\n        $list_odds =\
    \ array();\n        $list_evens = array();\n        for($i = 0; $i < count($l);\
    \ $i++) {\n            if($i % 2 == 0) {\n                array_push($list_odds,\
    \ $l[$i]);\n            } else {\n                array_push($list_evens, $l[$i]);\n\
    \            }\n        }\n        sort($list_evens);\n        for($i = 0; $i\
    \ < count($list_evens); $i++) {\n            array_push($list_odds, $list_evens[$i]);\n\
    \        }\n        return $list_odds;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzpd69erp.php:37\n\
    Stack trace:\n#0 /tmp/tmpzpd69erp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzpd69erp.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $res = array();\n  $evens = array();\n  $odds = array();\n\
    \  for ($i = 0; $i < count($l); $i++) {\n    if ($i % 2 == 0) {\n      $odds[]\
    \ = $l[$i];\n    } else {\n      $evens[] = $l[$i];\n    }\n  }\n  sort($evens);\n\
    \  for ($i = 0; $i < count($odds); $i++) {\n    $res[] = $odds[$i];\n    $res[]\
    \ = $evens[$i];\n  }\n  return $res;\n}\n\nfunction candidate(...$args) {\n  \
    \  return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpieaccjc5.php:33\n\
    Stack trace:\n#0 /tmp/tmpieaccjc5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpieaccjc5.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $new_list = array();\n    for ($i = 0; $i < count($l);\
    \ $i += 2) {\n        $new_list[] = $l[$i];\n        $new_list[] = $l[$i + 1];\n\
    \        $second_array = array_slice($new_list, 1);\n        sort($second_array);\n\
    \        $new_list[1] = $second_array[0];\n        $new_list[3] = $second_array[1];\n\
    \    }\n    return $new_list;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xrohuag.php:27\n\
    Stack trace:\n#0 /tmp/tmp5xrohuag.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5xrohuag.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $sorted = array();\n    $final = array();\n    $i = 0;\n\
    \    foreach ($l as $key => $value) {\n        if ($key % 2 == 0) {\n        \
    \    $sorted[$i] = $value;\n            $i++;\n        }\n    }\n    sort($sorted);\n\
    \    $i = 0;\n    foreach ($l as $key => $value) {\n        if ($key % 2 == 0)\
    \ {\n            $final[$key] = $sorted[$i];\n            $i++;\n        } else\
    \ {\n            $final[$key] = $value;\n        }\n    }\n    return $final;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    // Your code here\n}\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuz6x2z1p.php:17\n\
    Stack trace:\n#0 /tmp/tmpuz6x2z1p.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpuz6x2z1p.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l = array_merge($l);\n  $odd = array();\n  $even = array();\n\
    \  for ($i = 0; $i < count($l); $i++) {\n    if ($i % 2 == 0) {\n      $odd[]\
    \ = $l[$i];\n    } else {\n      $even[] = $l[$i];\n    }\n  }\n  sort($even);\n\
    \  for ($i = 0; $i < count($l); $i++) {\n    if ($i % 2 == 0) {\n      $l[$i]\
    \ = $odd[$i / 2];\n    } else {\n      $l[$i] = $even[($i - 1) / 2];\n    }\n\
    \  }\n  return $l;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qdbhcou.php:37\n\
    Stack trace:\n#0 /tmp/tmp1qdbhcou.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1qdbhcou.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$array = array();\n\tfor ($i = 0; $i < count($l); $i++) {\n\
    \t\tif ($i % 2 == 0) {\n\t\t\tarray_push($array, $l[$i]);\n\t\t} else {\n\t\t\t\
    array_push($array, $l[$i]);\n\t\t\tsort($array[$i]);\n\t\t}\n\t}\n\treturn $array;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpianph935.php\
    \ on line 16\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpianph935.php on line 16\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmpianph935.php on line 16\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmpianph935.php on line 16\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmpianph935.php on\
    \ line 16\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpianph935.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpianph935.php:28\n\
    Stack trace:\n#0 /tmp/tmpianph935.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpianph935.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even_indicies = array();\n  for ($i = 0; $i < count($l);\
    \ $i++) {\n    if ($i % 2 == 0) {\n      $even_indicies[] = $l[$i];\n    }\n \
    \ }\n  sort($even_indicies);\n  $result = array();\n  for ($i = 0; $i < count($l);\
    \ $i++) {\n    if ($i % 2 == 0) {\n      $result[] = $even_indicies[($i / 2)];\n\
    \    } else {\n      $result[] = $l[$i];\n    }\n  }\n  return $result;\n}\n$test\
    \ = [[1, 2, 3], [5, 6, 3, 4]];\nfor ($i = 0; $i < count($test); $i++) {\n  echo\
    \ join(\", \", sort_even($test[$i])) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "1, 2, 3\n3, 6, 5, 4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    if ($l == []) {\n        return [];\n    }\n    $rest =\
    \ sort_even(array_slice($l, 2));\n    if ($l[0] > $l[1]) {\n        return [$l[1],\
    \ $l[0]];\n    } else {\n        return [$l[0], $l[1]];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv7zaui3o.php:26\n\
    Stack trace:\n#0 /tmp/tmpv7zaui3o.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpv7zaui3o.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    $i = 0;\n  \
    \  $j = 0;\n    $k = 0;\n    $n = sizeof($l);\n    foreach ($l as $value) {\n\
    \        if ($i % 2 == 0) {\n            $even[$j] = $value;\n            $j++;\n\
    \        } else {\n            $odd[$k] = $value;\n            $k++;\n       \
    \ }\n        $i++;\n    }\n    $even = merge_sort($even);\n    $l = array();\n\
    \    $i = 0;\n    $j = 0;\n    $k = 0;\n    foreach ($even as $value) {\n    \
    \    if ($i % 2 == 0) {\n            $l[$j] = $value;\n            $j++;\n   \
    \     } else {\n            $l[$k] = $value;\n            $k++;\n        }\n \
    \       $i++;\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n  \
    \  return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function merge_sort()\
    \ in /tmp/tmpymcbl3jg.php:26\nStack trace:\n#0 /tmp/tmpymcbl3jg.php(45): sort_even(Array)\n\
    #1 /tmp/tmpymcbl3jg.php(49): candidate(Array)\n#2 /tmp/tmpymcbl3jg.php(54): test()\n\
    #3 {main}\n  thrown in /tmp/tmpymcbl3jg.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l2 = array();\n  for ($i = 0; $i < count($l); $i += 2) {\n\
    \    $l2[] = $l[$i];\n    if (isset($l[$i + 1])) {\n      $l2[] = $l[$i + 1];\n\
    \      sort($l2);\n    }\n  }\n  return $l2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfa8fyukv.php:27\n\
    Stack trace:\n#0 /tmp/tmpfa8fyukv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpfa8fyukv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    // TODO\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnes0qqq.php:20\n\
    Stack trace:\n#0 /tmp/tmprnes0qqq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprnes0qqq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l1 = [];\n    $l2 = [];\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $l1[] = $l[$i];\n        }\
    \ else {\n            $l2[] = $l[$i];\n        }\n    }\n    for ($i = 0; $i <\
    \ count($l2); $i++) {\n        for ($j = $i + 1; $j < count($l2); $j++) {\n  \
    \          if ($l2[$i] > $l2[$j]) {\n                $temp = $l2[$i];\n      \
    \          $l2[$i] = $l2[$j];\n                $l2[$j] = $temp;\n            }\n\
    \        }\n    }\n    $l1[] = $l2[0];\n    $l1[] = $l2[1];\n    return $l1;\n\
    }\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpemylx0wd.php:37\n\
    Stack trace:\n#0 /tmp/tmpemylx0wd.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpemylx0wd.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $sorted_evens = [];\n  $sorted_odds = [];\n  foreach ($l\
    \ as $index => $number) {\n    if ($index % 2 == 0) {\n      array_push($sorted_odds,\
    \ $number);\n    } else {\n      array_push($sorted_evens, $number);\n    }\n\
    \  }\n  sort($sorted_evens);\n  for ($i = 0; $i < count($sorted_evens); $i++)\
    \ {\n    array_splice($sorted_odds, $i + 1, 0, $sorted_evens[$i]);\n  }\n  return\
    \ $sorted_odds;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmple5y7vuf.php:32\n\
    Stack trace:\n#0 /tmp/tmple5y7vuf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmple5y7vuf.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tif ($l == []) return [];\n\tif (array_key_exists(1, $l))\
    \ {\n\t\tif (array_key_exists(2, $l)) {\n\t\t\t$a = sort_even(array_slice($l,\
    \ 2));\n\t\t\tif ($l[0] < $l[1]) {\n\t\t\t\treturn [$l[0], $l[1]] + $a;\n\t\t\t\
    } else {\n\t\t\t\treturn [$l[1], $l[0]] + $a;\n\t\t\t}\n\t\t} else {\n\t\t\treturn\
    \ $l;\n\t\t}\n\t} else {\n\t\treturn $l;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxleycobr.php:32\n\
    Stack trace:\n#0 /tmp/tmpxleycobr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxleycobr.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $result = [];\n  $size = count($l);\n  for ($i = 0; $i <\
    \ $size; $i = $i + 2) {\n    array_push($result, $l[$i]);\n    $sub_list = array_slice($l,\
    \ $i + 1, 2);\n    sort($sub_list);\n    array_push($result, $sub_list[0]);\n\
    \    array_push($result, $sub_list[1]);\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1h6gvpq.php:27\n\
    Stack trace:\n#0 /tmp/tmpp1h6gvpq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpp1h6gvpq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i %\
    \ 2 == 0) {\n            sort($l);\n        }\n    }\n    return $l;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp301klyku.php:24\n\
    Stack trace:\n#0 /tmp/tmp301klyku.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp301klyku.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l_odd = [];\n    $l_even = [];\n    $i = 0;\n    $len\
    \ = count($l);\n    while ($i < $len) {\n        $l_odd[] = $l[$i];\n        $i++;\n\
    \        if ($i < $len) {\n            $l_even[] = $l[$i];\n            $i++;\n\
    \        }\n    }\n    // print_r($l_odd);\n    // print_r($l_even);\n    sort($l_even);\n\
    \    // print_r($l_even);\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $len_odd\
    \ = count($l_odd);\n    $len_even = count($l_even);\n    while ($i < $len_odd\
    \ || $j < $len_even) {\n        if ($i < $len_odd) {\n            $l[$k] = $l_odd[$i];\n\
    \            $i++;\n            $k++;\n        }\n        if ($j < $len_even)\
    \ {\n            $l[$k] = $l_even[$j];\n            $j++;\n            $k++;\n\
    \        }\n    }\n    return $l;\n}\n\n$l = [5, 6, 3, 4];\nprint_r(sort_even($l));\n\
    function candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 6\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpwji3jwdy.php:54\nStack\
    \ trace:\n#0 /tmp/tmpwji3jwdy.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpwji3jwdy.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        $p = $i;\n\
    \        for ($j = $i + 1; $j < count($l); $j++) {\n            if ($l[$j] < $l[$p])\
    \ {\n                $p = $j;\n            }\n        }\n        $temp = $l[$i];\n\
    \        $l[$i] = $l[$p];\n        $l[$p] = $temp;\n    }\n    return $l;\n}\n\
    function candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzmtx4111.php:29\n\
    Stack trace:\n#0 /tmp/tmpzmtx4111.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzmtx4111.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evenIndicies = [];\n    $oddIndicies = [];\n    foreach\
    \ ($l as $index => $value) {\n        if ($index % 2 == 0) {\n            $evenIndicies[]\
    \ = $value;\n        } else {\n            $oddIndicies[] = $value;\n        }\n\
    \    }\n    sort($evenIndicies);\n    return array_merge($evenIndicies, $oddIndicies);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl085e4b6.php:28\n\
    Stack trace:\n#0 /tmp/tmpl085e4b6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpl085e4b6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    // write your code here\n    // For example, [1, 2, 3]\
    \ ---> [1, 2, 3]\n    // [5, 6, 3, 4] ---> [3, 6, 5, 4]\n    $length = count($l);\n\
    \    if ($length == 0) {\n        return $l;\n    } else if ($length == 1) {\n\
    \        return $l;\n    } else {\n        $even = array();\n        $odd = array();\n\
    \        $output = array();\n        $i = 0;\n        while ($i < $length) {\n\
    \            if ($i % 2 == 0) {\n                array_push($odd, $l[$i]);\n \
    \           } else {\n                array_push($even, $l[$i]);\n           \
    \ }\n            $i++;\n        }\n        $even = array_unique($even);\n    \
    \    sort($even);\n        $j = 0;\n        $even_length = count($even);\n   \
    \     $odd_length = count($odd);\n        while ($j < $length) {\n           \
    \ if ($j % 2 == 0) {\n                array_push($output, $odd[$j / 2]);\n   \
    \         } else {\n                array_push($output, $even[(int)($j / 2)]);\n\
    \            }\n            $j++;\n        }\n        return $output;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_mmdlpn.php:54\n\
    Stack trace:\n#0 /tmp/tmp4_mmdlpn.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp4_mmdlpn.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$prev = array();\n\tfor ($i = 0; $i < count($l); $i++) {\n\
    \t\tif ($i % 2 == 0) {\n\t\t\tarray_push($prev, $l[$i]);\n\t\t} else {\n\t\t\t\
    $prev = array_merge($prev, array_reverse(sort(array_splice($l, $i, 1))));\n\t\t\
    }\n\t}\n\treturn $prev;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, bool given\
    \ in /tmp/tmp7oaalwxv.php on line 15\n\nWarning: array_merge(): Expected parameter\
    \ 2 to be an array, null given in /tmp/tmp7oaalwxv.php on line 15\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp7oaalwxv.php:26\nStack trace:\n\
    #0 /tmp/tmp7oaalwxv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7oaalwxv.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$l1 = array();\n\t$l2 = array();\n\t$f = 0;\n\t$s = 0;\n\t\
    foreach ($l as $x) {\n\t\tif ($f%2 == 0) {\n\t\t\t$l1[] = $x;\n\t\t} else {\n\t\
    \t\t$l2[] = $x;\n\t\t}\n\t\t$f++;\n\t}\n\tsort($l1);\n\tforeach ($l1 as $x) {\n\
    \t\t$l[$s] = $x;\n\t\t$s+=2;\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfp1uccsq.php:18\n\
    Stack trace:\n#0 /tmp/tmpfp1uccsq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpfp1uccsq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    for ($i = 0; $i < count($l); $i += 2) {\n        // Sort\
    \ the elements in $l[$i] and then assign this back to $l[$i]\n        $l[$i] =\
    \ sort_odd($l[$i]);\n    }\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_odd() in\
    \ /tmp/tmpm_1uogbx.php:12\nStack trace:\n#0 /tmp/tmpm_1uogbx.php(18): sort_even(Array)\n\
    #1 /tmp/tmpm_1uogbx.php(22): candidate(Array)\n#2 /tmp/tmpm_1uogbx.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpm_1uogbx.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $newl = array();\n    $i = 0;\n    foreach ($l as $v) {\n\
    \        if ($i % 2 == 0) {\n            $newl[] = $v;\n        } else {\n   \
    \         sort($newl);\n            $newl[] = $v;\n        }\n        $i++;\n\
    \    }\n    return $newl;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiaot71ku.php:30\n\
    Stack trace:\n#0 /tmp/tmpiaot71ku.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpiaot71ku.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $ret = array();\n  foreach($l as $k => $v) {\n    if($k %\
    \ 2 == 0) {\n      $ret[] = $v;\n    } else {\n      $ret[] = array_shift($l);\n\
    \    }\n  }\n  return $ret;\n}\n\n$l = [1, 2, 3];\nprint_r(sort_even($l));\n$l\
    \ = [5, 6, 3, 4];\nprint_r(sort_even($l));\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 3\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n    [2] => 3\n    [3] => 6\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpws2_d5n5.php:30\nStack trace:\n#0 /tmp/tmpws2_d5n5.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpws2_d5n5.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    // TODO: Your code here\n\t$arr_even=array();\n\t$arr_odd=array();\n\
    \t\n\tfor($i=0;$i<count($l);$i++){\n\t\tif($i%2==0){\n\t\t\t$arr_odd[]=$l[$i];\n\
    \t\t}\n\t\telse{\n\t\t\t$arr_even[]=$l[$i];\n\t\t}\n\t}\n\tsort($arr_even);\n\t\
    $res=array();\n\tfor($i=0;$i<count($arr_odd);$i++){\n\t\t$res[]=$arr_odd[$i];\n\
    \t\t$res[]=$arr_even[$i];\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdesebkl_.php:36\n\
    Stack trace:\n#0 /tmp/tmpdesebkl_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdesebkl_.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    if (count($l) == 0) return $l;\n    $odds = array();\n\
    \    $evens = array();\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $odds[] = $l[$i];\n        } else {\n            $evens[]\
    \ = $l[$i];\n        }\n    }\n    sort($evens);\n    $result = array();\n   \
    \ for ($i = 0; $i < count($odds); $i++) {\n        $result[] = $odds[$i];\n  \
    \      $result[] = $evens[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp01n91318.php:34\n\
    Stack trace:\n#0 /tmp/tmp01n91318.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp01n91318.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $new_list = array();\n  for ($i = 0; $i < count($l); $i++)\
    \ {\n    $new_list[] = $l[$i];\n    if ($i % 2 == 0) {\n      sort($new_list);\n\
    \    }\n  }\n  return $new_list;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiqyt6a5z.php:26\n\
    Stack trace:\n#0 /tmp/tmpiqyt6a5z.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiqyt6a5z.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tfor ($i = 0; $i < count($l); $i += 2) {\n\t\t$s = array_slice($l,\
    \ $i, $i + 2);\n\t\tsort($s);\n\t\t$l[$i] = $s[0];\n\t\t$l[$i + 1] = $s[1];\n\t\
    }\n\treturn $l;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdihyswc8.php:23\n\
    Stack trace:\n#0 /tmp/tmpdihyswc8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdihyswc8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $newList = [];\n    for ($i = 0; $i < count($l); $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $newList[] = $l[$i];\n        } else\
    \ {\n            $newList[] = sort_e($l[$i]);\n        }\n    }\n    return $newList;\n\
    }\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_e() in /tmp/tmpnh89vm_g.php:15\n\
    Stack trace:\n#0 /tmp/tmpnh89vm_g.php(21): sort_even(Array)\n#1 /tmp/tmpnh89vm_g.php(25):\
    \ candidate(Array)\n#2 /tmp/tmpnh89vm_g.php(30): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpnh89vm_g.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    if (count($l) == 0) {\n        return $l;\n    }\n    else\
    \ {\n        $evens = array();\n        for ($i = 0; $i < count($l); $i += 2)\
    \ {\n            $evens[] = $l[$i];\n        }\n        $sorted_evens = sort_array($evens);\n\
    \        $odds = array();\n        for ($i = 1; $i < count($l); $i += 2) {\n \
    \           $odds[] = $l[$i];\n        }\n        $result = array();\n       \
    \ for ($i = 0; $i < count($l); $i++) {\n            if ($i % 2 == 0) {\n     \
    \           $result[] = $sorted_evens[0];\n                array_shift($sorted_evens);\n\
    \            }\n            else {\n                $result[] = $odds[0];\n  \
    \              array_shift($odds);\n            }\n        }\n        return $result;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_array()\
    \ in /tmp/tmpw_3ls9gg.php:18\nStack trace:\n#0 /tmp/tmpw_3ls9gg.php(39): sort_even(Array)\n\
    #1 /tmp/tmpw_3ls9gg.php(43): candidate(Array)\n#2 /tmp/tmpw_3ls9gg.php(48): test()\n\
    #3 {main}\n  thrown in /tmp/tmpw_3ls9gg.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $result = [];\n    $even = [];\n    $odd = [];\n    $is_odd\
    \ = true;\n    foreach ($l as $num) {\n        if ($is_odd) {\n            $odd[]\
    \ = $num;\n        } else {\n            $even[] = $num;\n        }\n        $is_odd\
    \ = !$is_odd;\n    }\n    sort($even);\n    $is_odd = true;\n    foreach ($l as\
    \ $num) {\n        if ($is_odd) {\n            $result[] = array_shift($odd);\n\
    \        } else {\n            $result[] = array_shift($even);\n        }\n  \
    \      $is_odd = !$is_odd;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0mcdywh.php:41\n\
    Stack trace:\n#0 /tmp/tmpt0mcdywh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpt0mcdywh.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\treturn array_map(function($odd, $even) {\n\t\treturn $odd;\n\
    \t}, $l, array_map(function($even) {\n\t\tsort($even);\n\t\treturn $even;\n\t\
    }, array_chunk($l, 2)));\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvmzyt22.php:24\n\
    Stack trace:\n#0 /tmp/tmpgvmzyt22.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgvmzyt22.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tif(!is_array($l)) {\n\t\techo 'Error: sort_even('.$l.') failed!\
    \ Not an array.';\n\t\treturn false;\n\t}\n\tif(empty($l)) {\n\t\treturn $l;\n\
    \t}\n\t$l = array_values($l);\n\t// Odd indicies\n\t$result = array_filter($l,\
    \ function($i) { return $i % 2; });\n\t$odd = array_keys($result);\n\t// Even\
    \ indicies\n\t$result = array_filter($l, function($i) { return !($i % 2); });\n\
    \t$even = array_keys($result);\n\tsort($result);\n\tforeach($odd as $i) {\n\t\t\
    $result[$i] = $l[$i];\n\t}\n\tforeach($even as $i) {\n\t\t$result[$i] = $l[$i];\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92d9iins.php:39\n\
    Stack trace:\n#0 /tmp/tmp92d9iins.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp92d9iins.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$n = count($l);\n\tif ($n == 0) {\n\t\treturn $l;\n\t} else\
    \ if ($n == 1) {\n\t\treturn [$l[0]];\n\t} else {\n\t\t$odd_l = [$l[0]];\n\t\t\
    $even_l = [];\n\t\tfor ($i = 1; $i < $n; $i++) {\n\t\t\tif ($i % 2 == 0) {\n\t\
    \t\t\t$even_l[] = $l[$i];\n\t\t\t} else {\n\t\t\t\t$odd_l[] = $l[$i];\n\t\t\t\
    }\n\t\t}\n\t\tsort($even_l);\n\t\treturn array_merge($odd_l, $even_l);\n\t}\n\
    }\necho implode(sort_even([1, 2, 3]), \" \") . \"\\n\";\necho implode(sort_even([5,\
    \ 6, 3, 4]), \" \") . \"\\n\";\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1 2 3\n5 6 4 3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpajlhng_5.php:38\n\
    Stack trace:\n#0 /tmp/tmpajlhng_5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpajlhng_5.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfr1quwbi.php:18\n\
    Stack trace:\n#0 /tmp/tmpfr1quwbi.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpfr1quwbi.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$len = count($l);\n\t$odd = [];\n\t$even = [];\n\tfor ($i\
    \ = 0; $i < $len; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$odd[] = $l[$i];\n\t\t\
    } else {\n\t\t\t$even[] = $l[$i];\n\t\t}\n\t}\n\tsort($even);\n\t$result = [];\n\
    \tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$result[] = $odd[$i\
    \ / 2];\n\t\t} else {\n\t\t\t$result[] = $even[$i / 2];\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\n\n$l = [1, 2, 3];\nvar_dump(sort_even($l));\n\n$l = [5, 6, 3, 4];\n\
    var_dump(sort_even($l));\n\n$l = [1, 4, 9, 16, 9, 7, 4, 9, 11];\nvar_dump(sort_even($l));\n\
    \n$l = [0, 2, 4, 6, 8, 7, 5, 3, 1];\nvar_dump(sort_even($l));\n\n$l = [];\nvar_dump(sort_even($l));\n\
    \n$l = [1];\nvar_dump(sort_even($l));\n\n$l = [0, 2, 4, 6, 8, 7, 5, 3, 1, 1];\n\
    var_dump(sort_even($l));\n\n$l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\nvar_dump(sort_even($l));\n\
    \nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}\n\
    array(4) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(4)\n  [2]=>\n  int(3)\n  [3]=>\n\
    \  int(6)\n}\narray(9) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(9)\n\
    \  [3]=>\n  int(7)\n  [4]=>\n  int(9)\n  [5]=>\n  int(9)\n  [6]=>\n  int(4)\n\
    \  [7]=>\n  int(16)\n  [8]=>\n  int(11)\n}\narray(9) {\n  [0]=>\n  int(0)\n  [1]=>\n\
    \  int(2)\n  [2]=>\n  int(4)\n  [3]=>\n  int(3)\n  [4]=>\n  int(8)\n  [5]=>\n\
    \  int(6)\n  [6]=>\n  int(5)\n  [7]=>\n  int(7)\n  [8]=>\n  int(1)\n}\narray(0)\
    \ {\n}\narray(1) {\n  [0]=>\n  int(1)\n}\narray(10) {\n  [0]=>\n  int(0)\n  [1]=>\n\
    \  int(1)\n  [2]=>\n  int(4)\n  [3]=>\n  int(2)\n  [4]=>\n  int(8)\n  [5]=>\n\
    \  int(3)\n  [6]=>\n  int(5)\n  [7]=>\n  int(6)\n  [8]=>\n  int(1)\n  [9]=>\n\
    \  int(7)\n}\narray(10) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(0)\n  [2]=>\n  int(3)\n\
    \  [3]=>\n  int(2)\n  [4]=>\n  int(5)\n  [5]=>\n  int(4)\n  [6]=>\n  int(7)\n\
    \  [7]=>\n  int(6)\n  [8]=>\n  int(9)\n  [9]=>\n  int(8)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpgzb46nga.php:62\nStack trace:\n#0 /tmp/tmpgzb46nga.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgzb46nga.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l_even = array();\n  $l_odd = array();\n  $l_prime = array();\n\
    \  for ($i = 0; $i < count($l); $i++) {\n    if ($i % 2 == 0) {\n      array_push($l_odd,\
    \ $l[$i]);\n    } else {\n      array_push($l_even, $l[$i]);\n    }\n  }\n  sort($l_even);\n\
    \  for ($i = 0; $i < count($l_odd); $i++) {\n    array_push($l_prime, $l_odd[$i]);\n\
    \    array_push($l_prime, $l_even[$i]);\n  }\n  return $l_prime;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6phbma99.php:33\n\
    Stack trace:\n#0 /tmp/tmp6phbma99.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6phbma99.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $n = count($l);\n    $res = array();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            $res[] = $l[$i];\n\
    \        } else {\n            $res[] = get_min($l, $i);\n        }\n    }\n \
    \   return $res;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_min() in\
    \ /tmp/tmpe84gj70v.php:16\nStack trace:\n#0 /tmp/tmpe84gj70v.php(23): sort_even(Array)\n\
    #1 /tmp/tmpe84gj70v.php(27): candidate(Array)\n#2 /tmp/tmpe84gj70v.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe84gj70v.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l2 = array();\n    $i = 0;\n    foreach ($l as $val) {\n\
    \        if ($i % 2 == 0) {\n            $l2[] = $val;\n        } else {\n   \
    \         $l2[] = $val;\n            sort($l2);\n        }\n        $i++;\n  \
    \  }\n    return $l2;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ipyc7ps.php:29\n\
    Stack trace:\n#0 /tmp/tmp6ipyc7ps.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6ipyc7ps.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $res = [];\n    $even = [];\n    $odd = [];\n    $i = 0;\n\
    \    foreach ($l as $el) {\n        if ($i % 2 == 0) {\n            $even[] =\
    \ $el;\n        } else {\n            $odd[] = $el;\n        }\n        $i++;\n\
    \    }\n    sort($even);\n    for ($i = 0; $i < count($even); $i++) {\n      \
    \  $res[] = $even[$i];\n        $res[] = $odd[$i];\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmtelw989.php:35\n\
    Stack trace:\n#0 /tmp/tmpmtelw989.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmtelw989.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$ans = [];\n\t$j = 0;\n\tfor ($i = 0; $i < count($l); $i++)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\t$ans[$i] = $l[$i];\n\t\t} else {\n\t\t\t$ans[$i]\
    \ = $l[$i];\n\t\t\tsort($ans);\n\t\t}\n\t}\n\treturn $ans;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph4zdu9x3.php:29\n\
    Stack trace:\n#0 /tmp/tmph4zdu9x3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmph4zdu9x3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tif (count($l) < 2) {\n\t\treturn $l;\n\t}\n\t$evens = array();\n\
    \t$odds = array();\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\t$odds[] = $l[$i];\n\t\t} else {\n\t\t\t$evens[] = $l[$i];\n\t\t\
    }\n\t}\n\tsort($evens);\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i %\
    \ 2 == 0) {\n\t\t\t$l[$i] = $odds[$i / 2];\n\t\t} else {\n\t\t\t$l[$i] = $evens[($i\
    \ - 1) / 2];\n\t\t}\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9h81kwn.php:39\n\
    Stack trace:\n#0 /tmp/tmpx9h81kwn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpx9h81kwn.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $result = array();\n    foreach ($l as $i => $v) {\n  \
    \      if ($i % 2 == 0) {\n            $result[] = $v;\n        } else {\n   \
    \         $sorted = $result;\n            sort($sorted);\n            $result\
    \ = array_merge($result, $sorted);\n        }\n    }\n    return $result;\n}\n\
    \necho '<pre>';\nprint_r(sort_even([1, 2, 3]));\nprint_r(sort_even([5, 6, 3, 4]));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 3\n)\nArray\n(\n\
    \    [0] => 5\n    [1] => 5\n    [2] => 3\n    [3] => 3\n    [4] => 5\n    [5]\
    \ => 5\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_22vqzr.php:32\n\
    Stack trace:\n#0 /tmp/tmp0_22vqzr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0_22vqzr.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$e = array();\n\t$o = array();\n\t$l2 = array();\n\tforeach\
    \ ($l as $i => $x) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$e[] = $x;\n\t\t} else {\n\
    \t\t\t$o[] = $x;\n\t\t}\n\t}\n\tsort($e);\n\tforeach ($l as $i => $x) {\n\t\t\
    if ($i % 2 == 0) {\n\t\t\t$l2[] = array_shift($e);\n\t\t} else {\n\t\t\t$l2[]\
    \ = array_shift($o);\n\t\t}\n\t}\n\treturn $l2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$arr = array();\n\tfor ($i = 0; $i < count($l); $i++) {\n\
    \t\tif ($i % 2 == 0) {\n\t\t\tarray_push($arr, $l[$i]);\n\t\t} else {\n\t\t\t\
    $arr = array_merge($arr, [sort(array_slice($l, $i, 2))]);\n\t\t\t$i++;\n\t\t}\n\
    \t}\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqclzlgav.php:26\n\
    Stack trace:\n#0 /tmp/tmpqclzlgav.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqclzlgav.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $n = count($l);\n  if ($n == 0) {\n    return array();\n\
    \  }\n  $evens = array();\n  $odds = array();\n  for ($i = 0; $i < $n; $i++) {\n\
    \    if ($i % 2 == 0) {\n      $odds[] = $l[$i];\n    } else {\n      $evens[]\
    \ = $l[$i];\n    }\n  }\n  sort($evens);\n  $new = array();\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    if ($i % 2 == 0) {\n      $new[] = $odds[$i / 2];\n    }\
    \ else {\n      $new[] = $evens[($i - 1) / 2];\n    }\n  }\n  return $new;\n}\n\
    \nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2_wx355.php:41\n\
    Stack trace:\n#0 /tmp/tmpg2_wx355.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpg2_wx355.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t// YOUR CODE HERE\n\t$i = 1;\n\tforeach ($l as $key => $value)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\tsort($l[$key]);\n\t\t}\n\t\t$i += 1;\n\t}\n\
    \treturn $l;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpv1bfz_el.php\
    \ on line 14\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpv1bfz_el.php on line 14\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmpv1bfz_el.php on line 14\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmpv1bfz_el.php on line 14\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmpv1bfz_el.php on\
    \ line 14\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpv1bfz_el.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv1bfz_el.php:26\n\
    Stack trace:\n#0 /tmp/tmpv1bfz_el.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpv1bfz_el.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  // Your code here\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5sfjq64s.php:18\n\
    Stack trace:\n#0 /tmp/tmp5sfjq64s.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp5sfjq64s.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$e = [];\n\t$o = [];\n\t$l_even = [];\n\t$l_odd = [];\n\t\
    foreach ($l as $v) {\n\t\tif ($v % 2 == 0) {\n\t\t\t$e[] = $v;\n\t\t} else {\n\
    \t\t\t$o[] = $v;\n\t\t}\n\t}\n\tsort($e);\n\tforeach ($l as $v) {\n\t\tif ($v\
    \ % 2 == 0) {\n\t\t\t$l_even[] = array_shift($e);\n\t\t} else {\n\t\t\t$l_even[]\
    \ = $v;\n\t\t}\n\t}\n\treturn $l_even;\n}\nfunction candidate(...$args) {\n  \
    \  return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9du1zu7.php:37\n\
    Stack trace:\n#0 /tmp/tmpv9du1zu7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpv9du1zu7.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$sorted = [];\n\t$count = 0;\n\tforeach ($l as $value) {\n\
    \t\tif ($count % 2 == 0) {\n\t\t\t$sorted[] = $value;\n\t\t} else {\n\t\t\t$sorted[]\
    \ = $value;\n\t\t\tsort($sorted);\n\t\t}\n\t\t$count++;\n\t}\n\treturn $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoaks04_2.php:30\n\
    Stack trace:\n#0 /tmp/tmpoaks04_2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpoaks04_2.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 2 == 0)\
    \ {\n\t\t\t$evens[] = $l[$i];\n\t\t} else {\n\t\t\t$odds[] = $l[$i];\n\t\t}\n\t\
    }\n\tasort($evens);\n\t$m = array_merge($evens, $odds);\n\treturn $m;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6n233gt9.php:27\n\
    Stack trace:\n#0 /tmp/tmp6n233gt9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6n233gt9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even_indices = [];\n    $odd_indices = [];\n    foreach\
    \ ($l as $index => $value) {\n        if ($index % 2 == 0) {\n            $even_indices[]\
    \ = $value;\n        } else {\n            $odd_indices[] = $value;\n        }\n\
    \    }\n    sort($even_indices);\n    foreach ($odd_indices as $index => $value)\
    \ {\n        $even_indices[] = $value;\n    }\n    return $even_indices;\n}\n\n\
    function candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp797qbv_b.php:31\n\
    Stack trace:\n#0 /tmp/tmp797qbv_b.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp797qbv_b.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  if (empty($l)) return $l;\n  $sorted_evens = array_merge(array_filter($l,\
    \ function($x) { return ($x % 2 == 0); }), array_filter($l, function($x) { return\
    \ ($x % 2 == 1); }));\n  return array_map(function($x, $y) { return ($x % 2 ==\
    \ 0) ? $y : $x; }, $l, $sorted_evens);\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnq7cvzl.php:20\n\
    Stack trace:\n#0 /tmp/tmpjnq7cvzl.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpjnq7cvzl.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $n = count($l);\n    $l2 = [];\n    $sorted_evens = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            array_push($l2,\
    \ $l[$i]);\n        } else {\n            array_push($sorted_evens, $l[$i]);\n\
    \        }\n    }\n    sort($sorted_evens);\n    for ($i = 0; $i < $n; $i++) {\n\
    \        if ($i % 2 == 1) {\n            array_push($l2, array_shift($sorted_evens));\n\
    \        }\n    }\n    return $l2;\n}\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuqgq1mpk.php:33\n\
    Stack trace:\n#0 /tmp/tmpuqgq1mpk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpuqgq1mpk.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$ret = [];\n\t$odd = true;\n\tforeach ($l as $i) {\n\t\t\
    if ($odd) {\n\t\t\t$ret[] = $i;\n\t\t} else {\n\t\t\t// Check if the last element\
    \ of $ret is greater than $i,\n\t\t\t// if so, shift elements until we find the\
    \ right position\n\t\t\t// to insert $i\n\t\t\t$right_pos = count($ret);\n\t\t\
    \twhile ($right_pos >= 0 && end($ret) > $i) {\n\t\t\t\t$right_pos--;\n\t\t\t\t\
    array_pop($ret);\n\t\t\t}\n\t\t\t$ret[] = $i;\n\t\t\t// Fill in the missing elements\n\
    \t\t\twhile (count($ret) < $right_pos) {\n\t\t\t\t$ret[] = $i;\n\t\t\t}\n\t\t\
    }\n\t\t$odd = !$odd;\n\t}\n\treturn $ret;\n}\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp108y2n18.php:40\n\
    Stack trace:\n#0 /tmp/tmp108y2n18.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp108y2n18.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$size = count($l);\n\t$odds = [];\n\t$evens = [];\n\tfor\
    \ ($i = 0; $i < $size; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$odds[] = $l[$i];\n\
    \t\t} else {\n\t\t\t$evens[] = $l[$i];\n\t\t}\n\t}\n\tsort($evens);\n\t$new_list\
    \ = [];\n\tfor ($i = 0; $i < $size; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$new_list[]\
    \ = $odds[$i / 2];\n\t\t} else {\n\t\t\t$new_list[] = $evens[$i / 2];\n\t\t}\n\
    \t}\n\treturn $new_list;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptg73c8ns.php:38\n\
    Stack trace:\n#0 /tmp/tmptg73c8ns.php(42): test()\n#1 {main}\n  thrown in /tmp/tmptg73c8ns.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l1 = $l;\n    sort($l1);\n    $result = array();\n   \
    \ $k = 0;\n    $c = 0;\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[$i] = $l[$i];\n        } else {\n         \
    \   $result[$i] = $l1[$k];\n            $k++;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02j06wbs.php:31\n\
    Stack trace:\n#0 /tmp/tmp02j06wbs.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp02j06wbs.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $res = [];\n    $even = [];\n    $odd = [];\n    foreach\
    \ ($l as $key => $val) {\n        if ($key % 2 === 0) {\n            $even[] =\
    \ $val;\n        } else {\n            $odd[] = $val;\n        }\n    }\n    sort($even);\n\
    \    $even_idx = 0;\n    foreach ($l as $key => $val) {\n        if ($key % 2\
    \ === 0) {\n            $res[] = $even[$even_idx];\n            $even_idx++;\n\
    \        } else {\n            $res[] = $val;\n        }\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l_prime = array();\n    $even_indicies = array();\n  \
    \  $odd_indicies = array();\n    $size = count($l);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $odd_indicies[] = $l[$i];\n\
    \        } else {\n            $even_indicies[] = $l[$i];\n        }\n    }\n\
    \    sort($even_indicies);\n    $even_pos = 0;\n    for ($i = 0; $i < $size; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $l_prime[] = $odd_indicies[$i];\n\
    \        } else {\n            $l_prime[] = $even_indicies[$even_pos];\n     \
    \       $even_pos++;\n        }\n    }\n    return $l_prime;\n}\n\necho \"sort_even([1,\
    \ 2, 3])<br>\";\nvar_dump(sort_even([1, 2, 3]));\necho \"<br>\";\necho \"sort_even([5,\
    \ 6, 3, 4])<br>\";\nvar_dump(sort_even([5, 6, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "sort_even([1, 2, 3])<br>array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n\
    \  [2]=>\n  NULL\n}\n<br>sort_even([5, 6, 3, 4])<br>array(4) {\n  [0]=>\n  int(5)\n\
    \  [1]=>\n  int(4)\n  [2]=>\n  NULL\n  [3]=>\n  int(6)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvgvey5jh.php:44\nStack trace:\n#0 /tmp/tmpvgvey5jh.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvgvey5jh.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  for ($i = 0; $i < count($l); $i++) {\n    if ($i % 2 == 0)\
    \ {\n      $odd[$i] = $l[$i];\n    } else {\n      $even[$i] = $l[$i];\n    }\n\
    \  }\n  $even = sort($even);\n  $j = 0;\n  for ($i = 0; $i < count($l); $i++)\
    \ {\n    if ($i % 2 == 0) {\n      $new_list[$i] = $odd[$i];\n    } else {\n \
    \     $new_list[$i] = $even[$j];\n      $j++;\n    }\n  }\n  return $new_list;\n\
    }\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphz8y8iks.php:34\n\
    Stack trace:\n#0 /tmp/tmphz8y8iks.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphz8y8iks.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l = $l->toArray();\n    for ($i = 0; $i < count($l); $i\
    \ += 2) {\n        $seg = array_slice($l, $i, 2);\n        sort($seg);\n     \
    \   $l = array_merge(array_slice($l, 0, $i), $seg, array_slice($l, $i + 2));\n\
    \    }\n    return new ListClass($l);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function toArray() on array\
    \ in /tmp/tmpwsfgn9gh.php:10\nStack trace:\n#0 /tmp/tmpwsfgn9gh.php(20): sort_even(Array)\n\
    #1 /tmp/tmpwsfgn9gh.php(24): candidate(Array)\n#2 /tmp/tmpwsfgn9gh.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwsfgn9gh.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$ret = array();\n\t$evens = array();\n\t$i = 0;\n\tforeach\
    \ ($l as $e) {\n\t\tif (($i % 2) == 0) {\n\t\t\t$evens[] = $e;\n\t\t} else {\n\
    \t\t\t$ret[] = $e;\n\t\t}\n\t\t$i++;\n\t}\n\tsort($evens);\n\t$i = 0;\n\tforeach\
    \ ($evens as $e) {\n\t\tarray_splice($ret, $i, 0, $e);\n\t\t$i += 2;\n\t}\n\t\
    return $ret;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evenIndexes = array();\n    $oddIndexes = array();\n \
    \   foreach ($l as $key => $value) {\n        if ($key % 2 == 0) {\n         \
    \   $evenIndexes[$key] = $value;\n        } else {\n            $oddIndexes[$key]\
    \ = $value;\n        }\n    }\n    $evenIndexes = asort($evenIndexes);\n    $i\
    \ = 0;\n    foreach ($evenIndexes as $key => $value) {\n        $l[$key] = $value;\n\
    \        $i++;\n    }\n    $i = 0;\n    foreach ($oddIndexes as $key => $value)\
    \ {\n        $l[$key] = $value;\n        $i++;\n    }\n    return $l;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpo6mort7x.php\
    \ on line 21\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpo6mort7x.php\
    \ on line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6mort7x.php:39\n\
    Stack trace:\n#0 /tmp/tmpo6mort7x.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpo6mort7x.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l_prime = [];\n    $even_indicies = [];\n    for ($i =\
    \ 0; $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n            $l_prime[]\
    \ = $l[$i];\n        } else {\n            $even_indicies[] = $l[$i];\n      \
    \  }\n    }\n    sort($even_indicies);\n    $index = 0;\n    for ($i = 0; $i <\
    \ count($l); $i++) {\n        if ($i % 2 == 1) {\n            $l_prime[] = $even_indicies[$index];\n\
    \            $index++;\n        }\n    }\n    return $l_prime;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2_pe4ct.php:35\n\
    Stack trace:\n#0 /tmp/tmpd2_pe4ct.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpd2_pe4ct.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $o = [];\n  for ($i = 0; $i < count($l); $i++) {\n    if\
    \ ($i % 2 == 0) {\n      $o[] = $l[$i];\n    } else {\n      $sub = array_slice($l,\
    \ $i, count($l));\n      sort($sub);\n      $o[] = $sub[0];\n    }\n  }\n  return\
    \ $o;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6g_vt1nw.php:29\n\
    Stack trace:\n#0 /tmp/tmp6g_vt1nw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6g_vt1nw.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$lp = array();\n\t$even_index_list = array();\n\t$odd_index_list\
    \ = array();\n\tforeach($l as $i => $value) {\n\t\tif ($i % 2 == 0) {\n\t\t\t\
    $even_index_list[] = $value;\n\t\t} else {\n\t\t\t$odd_index_list[] = $value;\n\
    \t\t}\n\t}\n\t// Now sort the even indicies\n\t// Note: The -1 is because our\
    \ indicies are odd and we want the even indicies\n\tsort($even_index_list);\n\t\
    // Now construct the list we want\n\tforeach($l as $i => $value) {\n\t\tif ($i\
    \ % 2 == 0) {\n\t\t\t$lp[] = $even_index_list[$i / 2];\n\t\t} else {\n\t\t\t$lp[]\
    \ = $odd_index_list[($i - 1) / 2];\n\t\t}\n\t}\n\treturn $lp;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $a = array();\n    for ($i = 0; $i < count($l); $i++) {\n\
    \        if ($i % 2 == 0) {\n            $a[] = $l[$i];\n        } else {\n  \
    \          $a[] = $l[$i];\n            sort($a[$i]);\n        }\n    }\n    return\
    \ $a;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp_9o6ckvr.php\
    \ on line 16\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmp_9o6ckvr.php on line 16\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmp_9o6ckvr.php on line 16\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmp_9o6ckvr.php on line 16\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmp_9o6ckvr.php on\
    \ line 16\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp_9o6ckvr.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9o6ckvr.php:27\n\
    Stack trace:\n#0 /tmp/tmp_9o6ckvr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_9o6ckvr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tif (count($l) == 0) {\n\t\treturn $l;\n\t}\n\t$odds = array();\n\
    \t$evens = array();\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\t$odds[] = $l[$i];\n\t\t} else {\n\t\t\t$evens[] = $l[$i];\n\t\t\
    }\n\t}\n\tsort($evens);\n\t$result = array();\n\tfor ($i = 0; $i < count($odds);\
    \ $i++) {\n\t\t$result[] = $odds[$i];\n\t\t$result[] = $evens[$i];\n\t}\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnm4r9lpr.php:36\n\
    Stack trace:\n#0 /tmp/tmpnm4r9lpr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnm4r9lpr.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $oddList = array();\n    $evenList = array();\n    $evenListSorted\
    \ = array();\n    $i = 0;\n    foreach ($l as $item) {\n        if ($i % 2 ==\
    \ 0) {\n            array_push($oddList, $item);\n        } else {\n         \
    \   array_push($evenList, $item);\n        }\n        $i++;\n    }\n    sort($evenList);\n\
    \    $i = 0;\n    foreach ($oddList as $item) {\n        array_push($evenListSorted,\
    \ $item);\n        array_push($evenListSorted, $evenList[$i]);\n        $i++;\n\
    \    }\n    return $evenListSorted;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5qazgpa.php:37\n\
    Stack trace:\n#0 /tmp/tmpl5qazgpa.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpl5qazgpa.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $sorted_l = [];\n    for ($i = 0; $i < count($l); $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $sorted_l[] = $l[$i];\n        }\
    \ else {\n            $sorted_l[] = $l[$i];\n            sort($sorted_l);\n  \
    \      }\n    }\n    return $sorted_l;\n}\n\nprint_r(sort_even([1, 2, 3]));\n\
    print_r(sort_even([5, 6, 3, 4]));\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nArray\n(\n    [0]\
    \ => 3\n    [1] => 4\n    [2] => 5\n    [3] => 6\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpkgsm74wr.php:31\nStack trace:\n#0 /tmp/tmpkgsm74wr.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkgsm74wr.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array();\n  $odd = array();\n  for ($i = 0; $i <\
    \ count($l); $i++) {\n    if ($i % 2 == 0) {\n      $odd[] = $l[$i];\n    } else\
    \ {\n      $even[] = $l[$i];\n    }\n  }\n  sort($even);\n  for ($i = 0; $i <\
    \ count($l); $i++) {\n    if ($i % 2 == 0) {\n      $l[$i] = $odd[$i / 2];\n \
    \   } else {\n      $l[$i] = $even[($i - 1) / 2];\n    }\n  }\n  return $l;\n\
    }\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll1xgtq0.php:35\n\
    Stack trace:\n#0 /tmp/tmpll1xgtq0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpll1xgtq0.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  // ...\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4y0yyteg.php:18\n\
    Stack trace:\n#0 /tmp/tmp4y0yyteg.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4y0yyteg.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $new_l = array();\n  $sort_l = array();\n  foreach ($l as\
    \ $k => $v) {\n    if ($k % 2 == 0) {\n      $new_l[] = $v;\n    } else {\n  \
    \    $sort_l[] = $v;\n    }\n  }\n  sort($sort_l);\n  $new_l = array_merge($new_l,\
    \ $sort_l);\n  return $new_l;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprgsdxtkf.php:29\n\
    Stack trace:\n#0 /tmp/tmprgsdxtkf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmprgsdxtkf.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  for ($i = 0; $i < count($l); $i++) {\n    if ($i % 2 != 0)\
    \ {\n      $l = insert($l, $i, sort_one($l, $i));\n    }\n  }\n  return $l;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function insert() in /tmp/tmp9ujhu20l.php:12\n\
    Stack trace:\n#0 /tmp/tmp9ujhu20l.php(19): sort_even(Array)\n#1 /tmp/tmp9ujhu20l.php(23):\
    \ candidate(Array)\n#2 /tmp/tmp9ujhu20l.php(28): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp9ujhu20l.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $new_l = [];\n    $i = 0;\n    foreach ($l as $v) {\n \
    \       if ($i % 2 == 0) {\n            $new_l[] = $v;\n        } else {\n   \
    \         sort($v);\n            $new_l[] = $v;\n        }\n        $i++;\n  \
    \  }\n    return $new_l;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp2xbc725u.php\
    \ on line 16\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmp2xbc725u.php on line 16\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmp2xbc725u.php on line 16\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmp2xbc725u.php on line 16\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmp2xbc725u.php on\
    \ line 16\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp2xbc725u.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xbc725u.php:30\n\
    Stack trace:\n#0 /tmp/tmp2xbc725u.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2xbc725u.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$new_list = array();\n\tfor ($i = 0; $i < count($l); $i++)\
    \ {\n\t\t$new_list[$i] = $l[$i];\n\t}\n\tfor ($i = 0; $i < count($l); $i += 2)\
    \ {\n\t\tfor ($j = $i + 2; $j < count($l); $j += 2) {\n\t\t\tif ($l[$i] > $l[$j])\
    \ {\n\t\t\t\t$tmp = $new_list[$i];\n\t\t\t\t$new_list[$i] = $new_list[$j];\n\t\
    \t\t\t$new_list[$j] = $tmp;\n\t\t\t}\n\t\t}\n\t}\n\treturn $new_list;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7vu0nkj.php:31\n\
    Stack trace:\n#0 /tmp/tmpb7vu0nkj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpb7vu0nkj.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $e = []; // even indicies\n    $o = []; // odd indicies\n\
    \    foreach ($l as $i => $v) {\n        if ($i % 2 == 0) {\n            $e[]\
    \ = $v;\n        } else {\n            $o[] = $v;\n        }\n    }\n    sort($e);\n\
    \    return array_merge(array_merge($e, $o), []);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvuyd2oa8.php:27\n\
    Stack trace:\n#0 /tmp/tmpvuyd2oa8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvuyd2oa8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$odd_part = array();\n\t$even_part = array();\n\t$res = array();\n\
    \tforeach ($l as $key => $val) {\n\t\tif ($key%2 == 0) {\n\t\t\t$odd_part[] =\
    \ $val;\n\t\t} else {\n\t\t\t$even_part[] = $val;\n\t\t}\n\t}\n\tsort($even_part);\n\
    \tforeach ($odd_part as $key => $val) {\n\t\t$res[] = $val;\n\t\t$res[] = $even_part[$key];\n\
    \t}\n\treturn $res;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpki_w_hsk.php:32\n\
    Stack trace:\n#0 /tmp/tmpki_w_hsk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpki_w_hsk.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array();\n    $odds = array();\n    $res = array();\n\
    \    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n      \
    \      $odds[] = $l[$i];\n        } else {\n            $evens[] = $l[$i];\n \
    \       }\n    }\n    sort($evens);\n    $i = 0;\n    foreach ($odds as $o) {\n\
    \        $res[] = $o;\n        $res[] = $evens[$i];\n        $i++;\n    }\n  \
    \  return $res;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjd5v27n.php:35\n\
    Stack trace:\n#0 /tmp/tmpjjd5v27n.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjjd5v27n.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$even = [];\n\t$sorted = [];\n\tfor ($i = 0; $i < count($l);\
    \ $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$even[] = $l[$i];\n\t\t}\n\t}\n\t$sorted\
    \ = $even;\n\tsort($sorted);\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i\
    \ % 2 == 0) {\n\t\t\t$even[] = $l[$i];\n\t\t}\n\t}\n\t// echo $sorted . \"\\n\"\
    ;\n\t// echo $even . \"\\n\";\n\treturn $even;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ac93luo.php:34\n\
    Stack trace:\n#0 /tmp/tmp4ac93luo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4ac93luo.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$result = [];\n\t$even = [];\n\tforeach ($l as $index =>\
    \ $value) {\n\t\tif ($index % 2 == 0) {\n\t\t\t$result[] = $value;\n\t\t} else\
    \ {\n\t\t\t$even[] = $value;\n\t\t}\n\t}\n\tsort($even);\n\treturn array_merge($result,\
    \ $even);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnd68ycsa.php:28\n\
    Stack trace:\n#0 /tmp/tmpnd68ycsa.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnd68ycsa.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l = $l;\n    $new = array();\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if (($i%2) == 0) {\n            $new[] = $l[$i];\n        }\
    \ else {\n            $new[] = sort(array($l[$i], $l[$i - 1]));\n        }\n \
    \   }\n    return $new;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Only variables can be passed by reference in /tmp/tmp7ljdbqcr.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    // TODO implement this function\n    // Write a test case\
    \ in tests/sort_even_test.php\n    $l_new = [];\n    $odd_index = 0;\n    $even_index\
    \ = 0;\n    $key = 0;\n    foreach ($l as $value) {\n        if ($key % 2 == 0)\
    \ {\n            $l_new[$key] = $value;\n        } else {\n            $tmp_l[$even_index]\
    \ = $value;\n            $even_index++;\n        }\n        $key++;\n    }\n \
    \   sort($tmp_l);\n    foreach ($l_new as $key => $value) {\n        if ($key\
    \ % 2 == 1) {\n            $l_new[$key] = $tmp_l[$odd_index];\n            $odd_index++;\n\
    \        }\n    }\n    return $l_new;\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptz1g1ngs.php:40\n\
    Stack trace:\n#0 /tmp/tmptz1g1ngs.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptz1g1ngs.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $out = [];\n    foreach ($l as $idx => $val) {\n      \
    \  if ($idx & 1) {\n            $out[] = $val;\n        } else {\n           \
    \ $out[] = sort([$l[$idx], $l[$idx + 1]]);\n        }\n    }\n    return $out;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Only variables can be passed by reference in /tmp/tmpcb0m7ccl.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t// Your solution here!\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9hf9bxqo.php:18\n\
    Stack trace:\n#0 /tmp/tmp9hf9bxqo.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp9hf9bxqo.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l_prime = [];\n    for ($i = 0; $i < count($l); $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $l_prime[] = $l[$i];\n        } else\
    \ {\n            $l_prime[] = sort_even_helper($l, $i);\n        }\n    }\n  \
    \  return $l_prime;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_even_helper()\
    \ in /tmp/tmpfd0rhz74.php:15\nStack trace:\n#0 /tmp/tmpfd0rhz74.php(21): sort_even(Array)\n\
    #1 /tmp/tmpfd0rhz74.php(25): candidate(Array)\n#2 /tmp/tmpfd0rhz74.php(30): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfd0rhz74.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$result = array();\n\t$l_odd = array();\n\t$l_even = array();\n\
    \tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\tarray_push($l_odd,\
    \ $l[$i]);\n\t\t} else {\n\t\t\tarray_push($l_even, $l[$i]);\n\t\t}\n\t}\n\tsort($l_even);\n\
    \t$i = 0;\n\tfor ($j = 0; $j < count($l); $j++) {\n\t\tif ($j % 2 == 0) {\n\t\t\
    \tarray_push($result, $l_odd[$i]);\n\t\t} else {\n\t\t\tarray_push($result, $l_even[$i]);\n\
    \t\t\t$i++;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpji_h4_uz.php:39\n\
    Stack trace:\n#0 /tmp/tmpji_h4_uz.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpji_h4_uz.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t// Copy list l to list l'\n\t$l_ = $l;\n\t// Sort the even\
    \ indicies in list l'\n\tfor ($i = 1; $i < count($l_); $i += 2) {\n\t\tfor ($j\
    \ = 1; $j < count($l_); $j += 2) {\n\t\t\tif ($l_[$j] > $l_[$j + 2]) {\n\t\t\t\
    \t$temp = $l_[$j];\n\t\t\t\t$l_[$j] = $l_[$j + 2];\n\t\t\t\t$l_[$j + 2] = $temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $l_;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpvyaz9h.php:30\n\
    Stack trace:\n#0 /tmp/tmprpvyaz9h.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprpvyaz9h.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$indicies_even = range(0, count($l) - 1, 2);\n\t$even_list\
    \ = array_values(array_intersect_key($l, array_flip($indicies_even)));\n\t$odd_list\
    \ = array_values(array_diff_key($l, array_flip($indicies_even)));\n\tsort($even_list);\n\
    \treturn array_merge($odd_list, $even_list);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpje96aa8b.php:22\n\
    Stack trace:\n#0 /tmp/tmpje96aa8b.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpje96aa8b.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$length = count($l);\n\t$evens = [];\n\t$odds = [];\n\tfor\
    \ ($i = 0; $i < $length; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$odds[] = $l[$i];\n\
    \t\t} else {\n\t\t\t$evens[] = $l[$i];\n\t\t}\n\t}\n\tsort($evens);\n\t$l_dash\
    \ = [];\n\tfor ($i = 0; $i < $length; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t\
    $l_dash[] = $odds[$i / 2];\n\t\t} else {\n\t\t\t$l_dash[] = $evens[$i / 2];\n\t\
    \t}\n\t}\n\treturn $l_dash;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg7mup9zj.php:38\n\
    Stack trace:\n#0 /tmp/tmpg7mup9zj.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpg7mup9zj.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $odds = [];\n    $evens = [];\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $odds[] = $l[$i];\n       \
    \ } else {\n            $evens[] = $l[$i];\n        }\n    }\n    $sortedEvens\
    \ = sort_even_nums($evens);\n    for ($i = 0; $i < count($odds); $i++) {\n   \
    \     array_splice($sortedEvens, $i * 2, 0, [$odds[$i]]);\n    }\n    return $sortedEvens;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_even_nums()\
    \ in /tmp/tmp2yvjgcxf.php:19\nStack trace:\n#0 /tmp/tmp2yvjgcxf.php(27): sort_even(Array)\n\
    #1 /tmp/tmp2yvjgcxf.php(31): candidate(Array)\n#2 /tmp/tmp2yvjgcxf.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2yvjgcxf.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tif (is_list($l)) {\n\t\tif (empty($l)) {\n\t\t\treturn $l;\n\
    \t\t} else {\n\t\t\t$first = first($l);\n\t\t\t$l_prime = sort_even(rest($l));\n\
    \t\t\tif (is_zero(modulo($l_prime, 2))) {\n\t\t\t\t$first_prime = sort($first);\n\
    \t\t\t} else {\n\t\t\t\t$first_prime = $first;\n\t\t\t}\n\t\t\treturn append($first_prime,\
    \ $l_prime);\n\t\t}\n\t} else {\n\t\treturn $l;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_list() in\
    \ /tmp/tmphdxps46u.php:10\nStack trace:\n#0 /tmp/tmphdxps46u.php(29): sort_even(Array)\n\
    #1 /tmp/tmphdxps46u.php(33): candidate(Array)\n#2 /tmp/tmphdxps46u.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmphdxps46u.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $i => $item) {\n        if (($i % 2) == 0) {\n            $even[] = $item;\n\
    \        } else {\n            $odd[] = $item;\n        }\n    }\n    sort($even);\n\
    \    foreach ($odd as $i => $item) {\n        $even[] = $item;\n    }\n    return\
    \ $even;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk65y6scf.php:31\n\
    Stack trace:\n#0 /tmp/tmpk65y6scf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk65y6scf.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\treturn array_map(\n\t\tfunction($v, $i) use ($l) {\n\t\t\t\
    return $i % 2 == 0 ? $v : sort_by($l[$i-1], $v);\n\t\t},\n\t\t$l,\n\t\tarray_keys($l)\n\
    \t);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_by() in\
    \ /tmp/tmphnjzam5s.php:12\nStack trace:\n#0 [internal function]: {closure}(2,\
    \ 1)\n#1 /tmp/tmphnjzam5s.php(15): array_map(Object(Closure), Array, Array)\n\
    #2 /tmp/tmphnjzam5s.php(19): sort_even(Array)\n#3 /tmp/tmphnjzam5s.php(23): candidate(Array)\n\
    #4 /tmp/tmphnjzam5s.php(28): test()\n#5 {main}\n  thrown in /tmp/tmphnjzam5s.php\
    \ on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    // Your code here\n    $even_list = array();\n    $even_list_odd_indices\
    \ = array();\n    $i = 0;\n    foreach ($l as $value) {\n        if ($i % 2 ==\
    \ 0) {\n            array_push($even_list, $value);\n        } else {\n      \
    \      array_push($even_list_odd_indices, $value);\n        }\n        $i++;\n\
    \    }\n    sort($even_list);\n    $i = 0;\n    foreach ($l as $key => $value)\
    \ {\n        if ($i % 2 == 0) {\n            $l[$key] = $even_list[$i / 2];\n\
    \        } else {\n            $l[$key] = $even_list_odd_indices[(($i - 1) / 2)];\n\
    \        }\n        $i++;\n    }\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$l_prime = array();\n\t$even_indicies = array();\n\tfor ($i\
    \ = 0; $i < count($l); $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$l_prime[] = $l[$i];\n\
    \t\t} else {\n\t\t\t$even_indicies[] = $l[$i];\n\t\t}\n\t}\n\tsort($even_indicies);\n\
    \t$j = 0;\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 2 == 1) {\n\t\t\
    \t$l_prime[] = $even_indicies[$j];\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $l_prime;\n\
    }\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr371362.php:34\n\
    Stack trace:\n#0 /tmp/tmpzr371362.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzr371362.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array();\n    $count = 0;\n    foreach ($l as\
    \ $v) {\n        if ($count % 2 == 0) {\n            $evens[] = $v;\n        }\n\
    \        $count++;\n    }\n    sort($evens);\n    $count = 0;\n    foreach ($l\
    \ as $k => $v) {\n        if ($count % 2 == 0) {\n            $l[$k] = array_shift($evens);\n\
    \        }\n        $count++;\n    }\n    return $l;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  // TODO: Implement me\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44xpqs29.php:18\n\
    Stack trace:\n#0 /tmp/tmp44xpqs29.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp44xpqs29.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $r = array();\n    $r[0] = $l[0];\n    $j = 1;\n    for\
    \ ($i = 1; $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n            $r[$i]\
    \ = $l[$i];\n        } else {\n            $r[$i] = $l[$j];\n            $j++;\n\
    \        }\n    }\n    return $r;\n}\n\n$arr = array(5, 6, 3, 4);\n$arr1 = array(1,\
    \ 2, 3);\necho sort_even($arr);\necho sort_even($arr1);\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "ArrayArray\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06jnqx25.php:35\n\
    Stack trace:\n#0 /tmp/tmp06jnqx25.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp06jnqx25.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $lprime = array();\n  for ($i = 0; $i < count($l); $i++)\
    \ {\n    if ($i % 2 == 0) {\n      array_push($lprime, $l[$i]);\n    } else {\n\
    \      array_push($lprime, min($l[$i], $l[$i-1]), max($l[$i], $l[$i-1]));\n  \
    \  }\n  }\n  return $lprime;\n}\n\n$l = array(1, 2, 3);\necho \"Sort Even of [1,\
    \ 2, 3]: \";\nprint_r(sort_even($l));\necho \"<br>\";\n\n$l = array(5, 6, 3, 4);\n\
    echo \"Sort Even of [5, 6, 3, 4]: \";\nprint_r(sort_even($l));\necho \"<br>\"\
    ;\n\n$l = array(5, 6, 3, 4, 1, 2, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7,\
    \ 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5,\
    \ 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7,\
    \ 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5,\
    \ 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7,\
    \ 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7,\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp87boyttp.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $n = count($l);\n    $result = array();\n    $evenIndex\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 === 0) {\n     \
    \       $result[$i] = $l[$i];\n        } else {\n            $e = $l[$i];\n  \
    \          $inserted = false;\n            for ($j = 0; $j < $evenIndex; $j++)\
    \ {\n                if ($e < $result[$j * 2]) {\n                    array_splice($result,\
    \ $j * 2, 0, $e);\n                    $inserted = true;\n                   \
    \ break;\n                }\n            }\n            if (!$inserted) {\n  \
    \              $result[$i] = $e;\n            }\n            $evenIndex++;\n \
    \       }\n    }\n    return $result;\n}\n\n$l = [1, 2, 3];\n$l = [5, 6, 3, 4];\n\
    $l = [5, 1, 2, 3, 4];\n$l = [5, 3, 1, 2, 4];\n$l = [4, 2, 6, 2, 1, 2, 5, 2, 3,\
    \ 2];\nprint_r(sort_even($l));\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 4\n    [2] => 2\n    [3] => 6\n    [4]\
    \ => 1\n    [5] => 2\n    [6] => 2\n    [7] => 5\n    [8] => 2\n    [9] => 3\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgnsvot0.php:47\n\
    Stack trace:\n#0 /tmp/tmpkgnsvot0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpkgnsvot0.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $sorted = array();\n  for ($i = 0; $i < count($l); $i++)\
    \ {\n    if ($i % 2 === 0) {\n      array_push($sorted, $l[$i]);\n    } else {\n\
    \      array_splice($sorted, $i, 0, $l[$i]);\n    }\n  }\n  return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsz6l0mwr.php:27\n\
    Stack trace:\n#0 /tmp/tmpsz6l0mwr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsz6l0mwr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $result = array();\n    $temp = array();\n    foreach ($l\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $result[] =\
    \ $value;\n        } else {\n            $temp[] = $value;\n        }\n    }\n\
    \    sort($temp);\n    $j = 0;\n    for ($i = 0; $i < count($result); $i++) {\n\
    \        if ($i % 2 == 0) {\n            $result[$i] = $temp[$j];\n          \
    \  $j++;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3bio3e_.php:35\n\
    Stack trace:\n#0 /tmp/tmpp3bio3e_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpp3bio3e_.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  for ($i = 0; $i < count($l); $i++) {\n    if ($i % 2 == 0)\
    \ {\n      $evens[] = $l[$i];\n    } else {\n      $odds[] = $l[$i];\n    }\n\
    \  }\n  sort($evens);\n  for ($i = 0; $i < count($l); $i++) {\n    if ($i % 2\
    \ == 0) {\n      $sorted[] = $evens[$i / 2];\n    } else {\n      $sorted[] =\
    \ $odds[$i / 2];\n    }\n  }\n  return $sorted;\n}\n$l = array(1, 2, 3);\n$l =\
    \ array(5, 6, 3, 4);\necho \"<br>\";\necho \"<br>\";\necho \"Testing sort_even:\
    \ \";\nprint_r(sort_even($l));\necho \"<br>\";\necho \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "<br><br>Testing sort_even: Array\n(\n    [0] => 3\n    [1] => 6\n    [2]\
    \ => 5\n    [3] => 4\n)\n<br><br>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tif (empty($l)) {\n\t\treturn [];\n\t}\n\tif (count($l) ==\
    \ 1) {\n\t\treturn $l;\n\t}\n\t$evens = [];\n\t$odds = [];\n\tfor ($i = 0; $i\
    \ < count($l); $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$odds[] = $l[$i];\n\t\t\
    } else {\n\t\t\t$evens[] = $l[$i];\n\t\t}\n\t}\n\tsort($evens);\n\t$evens = array_reverse($evens);\n\
    \t$newl = [];\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 2 == 0) {\n\
    \t\t\t$newl[] = array_pop($odds);\n\t\t} else {\n\t\t\t$newl[] = array_pop($evens);\n\
    \t\t}\n\t}\n\treturn $newl;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltrf0oit.php:43\n\
    Stack trace:\n#0 /tmp/tmpltrf0oit.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpltrf0oit.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l_even = array();\n  $l_odd = array();\n  $l_final = array();\n\
    \  $index = 0;\n  foreach ($l as $value) {\n    if($index % 2 == 0) {\n      array_push($l_even,\
    \ $value);\n    } else {\n      array_push($l_odd, $value);\n    }\n    $index++;\n\
    \  }\n  sort($l_even);\n  $index = 0;\n  foreach ($l_even as $value) {\n    array_push($l_final,\
    \ $value);\n    array_push($l_final, $l_odd[$index]);\n    $index++;\n  }\n  return\
    \ $l_final;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6hv9mcd.php:37\n\
    Stack trace:\n#0 /tmp/tmpi6hv9mcd.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpi6hv9mcd.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l = array_values($l);\n    $l_length = count($l);\n  \
    \  $even_list = [];\n    $odd_list = [];\n    for ($i = 0; $i < $l_length; $i++)\
    \ {\n        if ($i % 2 === 0) {\n            $odd_list[] = $l[$i];\n        }\
    \ else {\n            $even_list[] = $l[$i];\n        }\n    }\n    sort($even_list);\n\
    \    $odd_list_length = count($odd_list);\n    $even_list_length = count($even_list);\n\
    \    $even_count = 0;\n    $odd_count = 0;\n    $l_prime = [];\n    for ($i =\
    \ 0; $i < $l_length; $i++) {\n        if ($i % 2 === 0) {\n            $l_prime[]\
    \ = $odd_list[$odd_count];\n            $odd_count++;\n        } else {\n    \
    \        $l_prime[] = $even_list[$even_count];\n            $even_count++;\n \
    \       }\n    }\n    return $l_prime;\n}\n\n$l = [1, 2, 3];\n$l = [5, 6, 3, 4];\n\
    $l = [2, 5, 6, 3, 4, 1];\necho implode(\", \", sort_even($l));\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "2, 1, 6, 3, 4, 5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3xhnhpg.php:49\n\
    Stack trace:\n#0 /tmp/tmpc3xhnhpg.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpc3xhnhpg.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    for ($i = 1; $i < count($l); $i += 2) {\n        sort($l[$i]);\n\
    \    }\n    return $l;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmphbum3prg.php\
    \ on line 11\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmphbum3prg.php on line 11\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmphbum3prg.php on line 11\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmphbum3prg.php on line 11\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmphbum3prg.php on\
    \ line 11\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmphbum3prg.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbum3prg.php:21\n\
    Stack trace:\n#0 /tmp/tmphbum3prg.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphbum3prg.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$i = 1;\n\twhile ($i < count($l)) {\n\t\t$min_idx = $i;\n\
    \t\t$j = $i + 1;\n\t\twhile ($j < count($l)) {\n\t\t\tif ($l[$j] < $l[$min_idx])\n\
    \t\t\t\t$min_idx = $j;\n\t\t\t$j++;\n\t\t}\n\t\tif ($min_idx != $i) {\n\t\t\t\
    $temp = $l[$i];\n\t\t\t$l[$i] = $l[$min_idx];\n\t\t\t$l[$min_idx] = $temp;\n\t\
    \t}\n\t\t$i += 2;\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args) {\n  \
    \  return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpso71_1td.php:35\n\
    Stack trace:\n#0 /tmp/tmpso71_1td.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpso71_1td.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $return_l = array();\n    $i = 0;\n    $l_size = count($l);\n\
    \    while ($i < $l_size) {\n        if ($i % 2 == 0) {\n            array_push($return_l,\
    \ $l[$i]);\n        } else {\n            // sort\n            $to_sort = array($l[$i],\
    \ $l[$i + 1]);\n            sort($to_sort);\n            array_push($return_l,\
    \ $to_sort[0]);\n            array_push($return_l, $to_sort[1]);\n           \
    \ $i += 1;\n        }\n        $i += 1;\n    }\n    return $return_l;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjfiv0aq.php:35\n\
    Stack trace:\n#0 /tmp/tmpyjfiv0aq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyjfiv0aq.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t// get index of even indicies\n\t$even = array_filter(array_keys($l),\
    \ function($key) {\n\t\treturn ($key % 2) == 0;\n\t});\n\t// sort even indicies,\
    \ store results in another array\n\t$sorted = array();\n\tforeach ($even as $key)\
    \ {\n\t\t$sorted[$key] = $l[$key];\n\t}\n\tsort($sorted);\n\t// replace even indicies\
    \ in the original array with values from the sorted array\n\tforeach ($even as\
    \ $key) {\n\t\t$l[$key] = $sorted[$key];\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9uhxheb.php:32\n\
    Stack trace:\n#0 /tmp/tmp_9uhxheb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_9uhxheb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l1 = [];\n    $l2 = [];\n    $l1_index = 0;\n    $l2_index\
    \ = 0;\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n\
    \            $l1[$l1_index] = $l[$i];\n            $l1_index++;\n        } else\
    \ {\n            $l2[$l2_index] = $l[$i];\n            $l2_index++;\n        }\n\
    \    }\n    sort($l2);\n    $l1_index = 0;\n    $l2_index = 0;\n    for ($i =\
    \ 0; $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n            $l[$i] =\
    \ $l1[$l1_index];\n            $l1_index++;\n        } else {\n            $l[$i]\
    \ = $l2[$l2_index];\n            $l2_index++;\n        }\n    }\n    return $l;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_9s1daa.php:44\n\
    Stack trace:\n#0 /tmp/tmp5_9s1daa.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp5_9s1daa.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2iruf7r.php:18\n\
    Stack trace:\n#0 /tmp/tmpt2iruf7r.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpt2iruf7r.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l2 = [];\n    for ($i = 0; $i < count($l); $i++) {\n \
    \       if ($i % 2 == 0) {\n            $l2[] = $l[$i];\n        } else {\n  \
    \          $sorted = $l[$i];\n            sort($sorted);\n            $l2[] =\
    \ $sorted;\n        }\n    }\n    return $l2;\n}\necho json_encode(sort_even([1,\
    \ 2, 3]));\necho json_encode(sort_even([5, 6, 3, 4]));\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmph2mubd5j.php\
    \ on line 16\n[1,2,3]\nWarning: sort() expects parameter 1 to be array, int given\
    \ in /tmp/tmph2mubd5j.php on line 16\n\nWarning: sort() expects parameter 1 to\
    \ be array, int given in /tmp/tmph2mubd5j.php on line 16\n[5,6,3,4]\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmph2mubd5j.php on\
    \ line 16\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmph2mubd5j.php\
    \ on line 16\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmph2mubd5j.php on line 16\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmph2mubd5j.php on line 16\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmph2mubd5j.php on line 16\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmph2mubd5j.php on\
    \ line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2mubd5j.php:30\n\
    Stack trace:\n#0 /tmp/tmph2mubd5j.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph2mubd5j.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$ret = array();\n\t$even = array();\n\tfor ($i = 0; $i <\
    \ count($l); $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$ret[] = $l[$i];\n\t\t} else\
    \ {\n\t\t\t$even[] = $l[$i];\n\t\t}\n\t}\n\tsort($even);\n\tforeach ($even as\
    \ $value) {\n\t\t$ret[] = $value;\n\t}\n\treturn $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5y4o6hr.php:31\n\
    Stack trace:\n#0 /tmp/tmpj5y4o6hr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpj5y4o6hr.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$r = array();\n\t$index = 0;\n\t$even_index = 0;\n\t$even_l\
    \ = array();\n\twhile($index < count($l)) {\n\t\tif ($index % 2 == 0) {\n\t\t\t\
    $r[$index] = $l[$index];\n\t\t} else {\n\t\t\t$even_l[$even_index] = $l[$index];\n\
    \t\t\t$even_index++;\n\t\t}\n\t\t$index++;\n\t}\n\tsort($even_l);\n\t$even_index\
    \ = 0;\n\t$index = 0;\n\twhile($index < count($l)) {\n\t\tif ($index % 2 == 1)\
    \ {\n\t\t\t$r[$index] = $even_l[$even_index];\n\t\t\t$even_index++;\n\t\t}\n\t\
    \t$index++;\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9j0s9xmf.php:41\n\
    Stack trace:\n#0 /tmp/tmp9j0s9xmf.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp9j0s9xmf.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l1 = [];\n  $l2 = [];\n  for ($i = 0; $i < count($l); $i\
    \ = $i + 2) {\n    array_push($l1, $l[$i]);\n  }\n  for ($i = 1; $i < count($l);\
    \ $i = $i + 2) {\n    array_push($l2, $l[$i]);\n  }\n  sort($l2);\n  return array_merge($l1,\
    \ $l2);\n}\n\necho \"<b>sort_even([1, 2, 3])</b>\";\necho \"<br>\";\nprint_r(sort_even([1,\
    \ 2, 3]));\necho \"<br>\";\necho \"<b>sort_even([5, 6, 3, 4])</b>\";\necho \"\
    <br>\";\nprint_r(sort_even([5, 6, 3, 4]));\necho \"<br>\";\necho \"<b>sort_even([3,\
    \ 5, 2, 4, 6, 1])</b>\";\necho \"<br>\";\nprint_r(sort_even([3, 5, 2, 4, 6, 1]));\n\
    echo \"<br>\";\necho \"<b>sort_even([1, 2, 3, 4, 5, 6])</b>\";\necho \"<br>\"\
    ;\nprint_r(sort_even([1, 2, 3, 4, 5, 6]));\necho \"<br>\";\necho \"<b>sort_even([1,\
    \ 2, 3, 4, 5, 6, 7])</b>\";\necho \"<br>\";\nprint_r(sort_even([1, 2, 3, 4, 5,\
    \ 6, 7]));\necho \"<br>\";\necho \"<b>sort_even([6, 4, 2, 3, 5, 1])</b>\";\necho\
    \ \"<br>\";\nprint_r(sort_even([6, 4, 2, 3, 5, 1]));\necho \"<br>\";\necho \"\
    <b>sort_even([7, 4, 3, 2, 6, 5, 1])</b>\";\necho \"<br>\";\nprint_r(sort_even([7,\
    \ 4, 3, 2, 6\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl3x54isy.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $sorted_evens = $l;\n\n  $sorted_evens = array_values(array_filter($sorted_evens,\
    \ function($i) {\n    return !($i % 2);\n  }));\n\n  sort($sorted_evens);\n\n\
    \  $index = 0;\n  for ($i = 0; $i < count($l); $i++) {\n    if (!($i % 2)) {\n\
    \      $l[$i] = $sorted_evens[$index];\n      $index++;\n    }\n  }\n\n  return\
    \ $l;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4thuxxqg.php:33\n\
    Stack trace:\n#0 /tmp/tmp4thuxxqg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4thuxxqg.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $ret = array();\n    $i = 0;\n    foreach ($l as $x) {\n\
    \        if ($i % 2 == 0) {\n            $ret[] = $x;\n        } else {\n    \
    \        $temp = array_slice($ret, 0, -1);\n            $temp[] = $x;\n      \
    \      sort($temp);\n            $ret = array_merge($temp, array_slice($ret, -1));\n\
    \        }\n        $i++;\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd6eq_7jq.php:31\n\
    Stack trace:\n#0 /tmp/tmpd6eq_7jq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpd6eq_7jq.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $index = 0;\n  $out = array();\n  foreach ($l as $e) {\n\
    \    if ($index%2 == 0) {\n      $out[] = $e;\n    } else {\n      $out[] = get_smallest($l,\
    \ $index);\n    }\n    $index++;\n  }\n  return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_smallest()\
    \ in /tmp/tmpae8g6djy.php:16\nStack trace:\n#0 /tmp/tmpae8g6djy.php(24): sort_even(Array)\n\
    #1 /tmp/tmpae8g6djy.php(28): candidate(Array)\n#2 /tmp/tmpae8g6djy.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpae8g6djy.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l1 = $l;\n    $sorted = array();\n    $i = 0;\n    foreach\
    \ ($l as $item) {\n        if ($i % 2 == 0) {\n            $sorted[] = $item;\n\
    \        }\n        $i++;\n    }\n    sort($sorted);\n    $i = 0;\n    foreach\
    \ ($l1 as $key => $item) {\n        if ($i % 2 == 0) {\n            $l1[$key]\
    \ = $sorted[$i/2];\n        }\n        $i++;\n    }\n    return $l1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    if (empty($l)) return $l;\n    $list1 = [];\n    $list2\
    \ = [];\n    $list3 = [];\n    $even = true;\n    foreach ($l as $value) {\n \
    \       if ($even) {\n            $list1[] = $value;\n        } else {\n     \
    \       $list2[] = $value;\n        }\n        $even = !$even;\n    }\n    sort($list1);\n\
    \    foreach ($list1 as $value) {\n        $list3[] = $value;\n        if (count($list2)\
    \ > 0) {\n            $list3[] = array_shift($list2);\n        }\n    }\n    return\
    \ $list3;\n}\n\nassert(sort_even([1, 2, 3]) == [1, 2, 3]);\nassert(sort_even([5,\
    \ 6, 3, 4]) == [3, 6, 5, 4]);\nassert(sort_even([5, 6, 3, 4, 1, 2]) == [3, 6,\
    \ 5, 4, 1, 2]);\nassert(sort_even([2, 1, 3, 4]) == [1, 2, 3, 4]);\nassert(sort_even([5,\
    \ 6, 3, 4, 8, 9, 1, 2]) == [3, 6, 5, 4, 8, 9, 1, 2]);\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nWarning: assert(): assert(sort_even([5, 6, 3, 4, 1, 2]) == [3, 6, 5,\
    \ 4, 1, 2]) failed in /tmp/tmphrh96zy9.php on line 35\n\nWarning: assert(): assert(sort_even([2,\
    \ 1, 3, 4]) == [1, 2, 3, 4]) failed in /tmp/tmphrh96zy9.php on line 36\n\nWarning:\
    \ assert(): assert(sort_even([5, 6, 3, 4, 8, 9, 1, 2]) == [3, 6, 5, 4, 8, 9, 1,\
    \ 2]) failed in /tmp/tmphrh96zy9.php on line 37\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $res = array();\n  for ($i = 0; $i < count($l); $i++) {\n\
    \    if ($i % 2 === 0) {\n      array_push($res, $l[$i]);\n    } else {\n    \
    \  array_push($res, min($l[$i], $l[$i - 1]), max($l[$i], $l[$i - 1]));\n    }\n\
    \  }\n  return $res;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8li2q6ak.php:25\n\
    Stack trace:\n#0 /tmp/tmp8li2q6ak.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8li2q6ak.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$evens = array();\n\t$odds = array();\n\t$list = array();\n\
    \tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$odds[]\
    \ = $l[$i];\n\t\t} else {\n\t\t\t$evens[] = $l[$i];\n\t\t}\n\t}\n\tsort($evens);\n\
    \tfor ($i = 0; $i < count($odds); $i++) {\n\t\t$list[] = $odds[$i];\n\t\t$list[]\
    \ = $evens[$i];\n\t}\n\treturn $list;\n}\n\necho \"\\n\\n\";\necho implode(\"\
    \ \", sort_even([1, 2, 3]));\necho \"\\n\\n\";\necho implode(\" \", sort_even([5,\
    \ 6, 3, 4]));\necho \"\\n\\n\";\necho implode(\" \", sort_even([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]));\necho \"\\n\\n\";\necho implode(\" \", sort_even([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\necho \"\\\
    n\\n\";\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1 2 3 \n\n5 4 3 6\n\n1 2 3 4 5 6 7 8 9 10\n\n1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14 15 16 17 18 19 20\n\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmps0mr_x6m.php:42\nStack trace:\n#0 /tmp/tmps0mr_x6m.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmps0mr_x6m.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $r = array();\n    $j = 0;\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $r[$i] = $l[$i];\n        }\
    \ else {\n            $r[$i] = $l[$i];\n            sort($r[$i]);\n        }\n\
    \    }\n    return $r;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpf7whqclm.php\
    \ on line 17\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpf7whqclm.php on line 17\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmpf7whqclm.php on line 17\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmpf7whqclm.php on line 17\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmpf7whqclm.php on\
    \ line 17\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpf7whqclm.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7whqclm.php:28\n\
    Stack trace:\n#0 /tmp/tmpf7whqclm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpf7whqclm.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $result = array();\n    $evens = array();\n    foreach\
    \ ($l as $i => $x) {\n        if ($i % 2 == 0) {\n            $result[] = $x;\n\
    \        } else {\n            $evens[] = $x;\n        }\n    }\n    sort($evens);\n\
    \    foreach ($evens as $x) {\n        $result[] = $x;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8boi0pwf.php:31\n\
    Stack trace:\n#0 /tmp/tmp8boi0pwf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8boi0pwf.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tfor ($i = 1; $i < count($l); $i += 2) {\n\t\tsort($l[$i]);\n\
    \t}\n\treturn $l;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp_wfng0uq.php\
    \ on line 11\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmp_wfng0uq.php on line 11\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmp_wfng0uq.php on line 11\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmp_wfng0uq.php on line 11\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmp_wfng0uq.php on\
    \ line 11\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp_wfng0uq.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wfng0uq.php:22\n\
    Stack trace:\n#0 /tmp/tmp_wfng0uq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_wfng0uq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $r = array();\n    for ($i = 0; $i < count($l); $i += 2)\
    \ {\n        array_push($r, $l[$i]);\n        if ($i + 1 < count($l)) {\n    \
    \        $arr = array($l[$i + 1]);\n            $arr = insert_sort($arr);\n  \
    \          array_push($r, $arr[0]);\n        }\n    }\n    return $r;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function insert_sort()\
    \ in /tmp/tmph9vx6m5c.php:15\nStack trace:\n#0 /tmp/tmph9vx6m5c.php(22): sort_even(Array)\n\
    #1 /tmp/tmph9vx6m5c.php(26): candidate(Array)\n#2 /tmp/tmph9vx6m5c.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmph9vx6m5c.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$sorted = [];\n\t$i = 0;\n\tforeach ($l as $e) {\n\t\tif\
    \ ($i % 2 == 0) {\n\t\t\tarray_push($sorted, $e);\n\t\t} else {\n\t\t\tarray_push($sorted,\
    \ sorted_insert($sorted, $e));\n\t\t}\n\t\t$i++;\n\t}\n\treturn $sorted;\n}\n\n\
    function candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sorted_insert()\
    \ in /tmp/tmpjt9fz4mw.php:16\nStack trace:\n#0 /tmp/tmpjt9fz4mw.php(24): sort_even(Array)\n\
    #1 /tmp/tmpjt9fz4mw.php(28): candidate(Array)\n#2 /tmp/tmpjt9fz4mw.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjt9fz4mw.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tforeach($l as $i=>$value) {\n\t\tif ($i % 2 == 0) {\n\t\t\
    \t$l[$i] = sort_array($l[$i]);\n\t\t}\n\t}\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_array()\
    \ in /tmp/tmpqyihlr8w.php:12\nStack trace:\n#0 /tmp/tmpqyihlr8w.php(19): sort_even(Array)\n\
    #1 /tmp/tmpqyihlr8w.php(23): candidate(Array)\n#2 /tmp/tmpqyihlr8w.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqyihlr8w.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    // ...\n    $even = 0;\n    $odd = 1;\n    $length = count($l);\n\
    \    $result = array();\n    for ($i = 0; $i < $length; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[$even] = $l[$i];\n            $even += 2;\n\
    \        } else {\n            $result[$odd] = $l[$i];\n            $odd += 2;\n\
    \        }\n    }\n    for ($i = 1; $i < $length; $i += 2) {\n        for ($j\
    \ = $i + 2; $j < $length; $j += 2) {\n            if ($result[$i] > $result[$j])\
    \ {\n                $t = $result[$i];\n                $result[$i] = $result[$j];\n\
    \                $result[$j] = $t;\n            }\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9b5dg1uw.php:41\n\
    Stack trace:\n#0 /tmp/tmp9b5dg1uw.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9b5dg1uw.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $ret = array();\n    $i = 0;\n    $last_odd = true;\n \
    \   while ($i < count($l)) {\n        $even_index = $i;\n        $even_val = $l[$i];\n\
    \        $i += 1;\n        $odd_index = $i;\n        $odd_val = $l[$i];\n    \
    \    $i += 1;\n        if ($last_odd) {\n            array_push($ret, $odd_val);\n\
    \            array_push($ret, $even_val);\n        } else {\n            array_push($ret,\
    \ $even_val);\n            array_push($ret, $odd_val);\n        }\n        $last_odd\
    \ = !$last_odd;\n    }\n    return $ret;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzlku7eu2.php:37\n\
    Stack trace:\n#0 /tmp/tmpzlku7eu2.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzlku7eu2.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even_only = array_filter($l, function($x) {\n        return\
    \ $x % 2 == 0;\n    });\n    sort($even_only);\n    $even_only = array_values($even_only);\n\
    \    $even_index = 0;\n    foreach ($l as $k => $v) {\n        if ($v % 2 == 0)\
    \ {\n            $l[$k] = $even_only[$even_index];\n            $even_index++;\n\
    \        }\n    }\n    return $l;\n}\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7v6fk1px.php:30\n\
    Stack trace:\n#0 /tmp/tmp7v6fk1px.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7v6fk1px.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$odds = [];\n\t$evens = [];\n\t$result = [];\n\tforeach ($l\
    \ as $i => $v) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$odds[] = $v;\n\t\t} else {\n\t\
    \t\t$evens[] = $v;\n\t\t}\n\t}\n\tsort($evens);\n\tforeach ($odds as $i => $v)\
    \ {\n\t\t$result[] = $v;\n\t\t$result[] = $evens[$i];\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1eye19ny.php:33\n\
    Stack trace:\n#0 /tmp/tmp1eye19ny.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1eye19ny.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$evenIndices = [];\n\t$oddIndices = [];\n\t$index = 0;\n\t\
    foreach ($l as $item) {\n\t\tif ($index % 2 === 0) {\n\t\t\t$evenIndices[] = $item;\n\
    \t\t} else {\n\t\t\t$oddIndices[] = $item;\n\t\t}\n\t\t$index++;\n\t}\n\tsort($evenIndices);\n\
    \treturn array_merge($evenIndices, $oddIndices);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjz0q90uw.php:30\n\
    Stack trace:\n#0 /tmp/tmpjz0q90uw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjz0q90uw.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $new_l = array();\n  $new_even_l = array();\n  $l_len = count($l);\n\
    \  for ($i = 0; $i < $l_len; $i++) {\n    if ($i % 2 == 0) {\n      array_push($new_l,\
    \ $l[$i]);\n    } else {\n      array_push($new_even_l, $l[$i]);\n    }\n  }\n\
    \  sort($new_even_l);\n  for ($i = 0; $i < $l_len; $i++) {\n    if ($i % 2 ==\
    \ 1) {\n      $new_l[$i] = array_shift($new_even_l);\n    }\n  }\n  return $new_l;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6k622hq.php:34\n\
    Stack trace:\n#0 /tmp/tmpf6k622hq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpf6k622hq.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    // Fill in your answer here.\n    // Remember to return\
    \ the result\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp385fjaid.php:18\n\
    Stack trace:\n#0 /tmp/tmp385fjaid.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp385fjaid.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $new_list = array();\n    $new_value = NULL;\n    foreach\
    \ ($l as $key => $value) {\n        if ($key % 2 == 0) {\n            array_push($new_list,\
    \ $value);\n        } else {\n            $new_value = $value;\n            asort($new_list);\n\
    \            $new_list = array_values($new_list);\n            array_push($new_list,\
    \ $new_value);\n        }\n    }\n    return $new_list;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56lyu1u5.php:30\n\
    Stack trace:\n#0 /tmp/tmp56lyu1u5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp56lyu1u5.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $length = count($l);\n    $sorted = [];\n    for ($i =\
    \ 0; $i < $length; $i++) {\n        if ($i % 2 == 0) {\n            $sorted[]\
    \ = $l[$i];\n        } else {\n            $sorted[] = sort_even_helper($l[$i]);\n\
    \        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_even_helper()\
    \ in /tmp/tmp84zm4zjo.php:16\nStack trace:\n#0 /tmp/tmp84zm4zjo.php(23): sort_even(Array)\n\
    #1 /tmp/tmp84zm4zjo.php(27): candidate(Array)\n#2 /tmp/tmp84zm4zjo.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmp84zm4zjo.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l2 = array();\n    $j = 0;\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $l2[$i] = $l[$i];\n       \
    \ } else {\n            $sublist = array();\n            for ($k = $i; $k < count($l);\
    \ $k++) {\n                if ($k % 2 == 1) {\n                    $sublist[$j]\
    \ = $l[$k];\n                    $j++;\n                }\n            }\n   \
    \         asort($sublist);\n            $j = 0;\n            foreach ($sublist\
    \ as $item) {\n                $l2[$i] = $item;\n                $i++;\n     \
    \       }\n            $i--;\n        }\n    }\n    return $l2;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkw4nz85g.php:41\n\
    Stack trace:\n#0 /tmp/tmpkw4nz85g.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkw4nz85g.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $count = count($l);\n    $odd = [];\n    $even = [];\n\
    \    for ($i = 0; $i < $count; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   $odd[] = $l[$i];\n        } else {\n            $even[] = $l[$i];\n      \
    \  }\n    }\n    sort($even);\n    for ($i = 0; $i < $count; $i++) {\n       \
    \ if ($i % 2 == 0) {\n            $l[$i] = $odd[$i / 2];\n        } else {\n \
    \           $l[$i] = $even[($i - 1) / 2];\n        }\n    }\n    return $l;\n\
    }\necho '<pre>';\nprint_r(sort_even([1, 2, 3]));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(sort_even([5, 6, 3, 4]));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n</pre><pre>Array\n\
    (\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 6\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp38ekfopw.php:43\nStack trace:\n\
    #0 /tmp/tmp38ekfopw.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp38ekfopw.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$isEven = true;\n\t$sorted = array();\n\tforeach ($l as $el)\
    \ {\n\t\tif ($isEven) {\n\t\t\tarray_push($sorted, $el);\n\t\t} else {\n\t\t\t\
    // $sorted = array_merge(array_slice($sorted, 0, count($sorted)-1), array($el),\
    \ array_slice($sorted, count($sorted)-1));\n\t\t\tarray_splice($sorted, count($sorted)-1,\
    \ 0, $el);\n\t\t}\n\t\t$isEven = !$isEven;\n\t}\n\treturn $sorted;\n}\n\nassert(sort_even([1,\
    \ 2, 3]) == [1, 2, 3]);\nassert(sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]);\nassert(sort_even([1,\
    \ 2, 3, 4, 5, 6]) == [1, 4, 2, 5, 3, 6]);\nassert(sort_even([]) == []);\nassert(sort_even([1])\
    \ == [1]);\nassert(sort_even([1, 2]) == [1, 2]);\nassert(sort_even([2, 1]) ==\
    \ [1, 2]);\nassert(sort_even([1, 2, 3, 4]) == [1, 3, 2, 4]);\nassert(sort_even([4,\
    \ 2, 1, 3]) == [1, 3, 2, 4]);\nassert(sort_even([1, 3, 2, 4]) == [1, 3, 2, 4]);\n\
    \nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(sort_even([1, 2, 3]) == [1, 2, 3]) failed in\
    \ /tmp/tmpvkulll4_.php on line 24\n\nWarning: assert(): assert(sort_even([5, 6,\
    \ 3, 4]) == [3, 6, 5, 4]) failed in /tmp/tmpvkulll4_.php on line 25\n\nWarning:\
    \ assert(): assert(sort_even([1, 2, 3, 4, 5, 6]) == [1, 4, 2, 5, 3, 6]) failed\
    \ in /tmp/tmpvkulll4_.php on line 26\n\nWarning: assert(): assert(sort_even([1,\
    \ 2]) == [1, 2]) failed in /tmp/tmpvkulll4_.php on line 29\n\nWarning: assert():\
    \ assert(sort_even([1, 2, 3, 4]) == [1, 3, 2, 4]) failed in /tmp/tmpvkulll4_.php\
    \ on line 31\n\nWarning: assert(): assert(sort_even([4, 2, 1, 3]) == [1, 3, 2,\
    \ 4]) failed in /tmp/tmpvkulll4_.php on line 32\n\nWarning: assert(): assert(sort_even([1,\
    \ 3, 2, 4]) == [1, 3, 2, 4]) failed in /tmp/tmpvkulll4_.php on line 33\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpvkulll4_.php:40\nStack trace:\n\
    #0 /tmp/tmpvkulll4_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvkulll4_.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    for ($j = 0; $j < count($l); $j++) {\n        for ($i =\
    \ 0; $i < count($l) - 1; $i++) {\n            if ($i % 2 == 0) {\n           \
    \     if ($l[$i] > $l[$i + 1]) {\n                    $temp = $l[$i];\n      \
    \              $l[$i] = $l[$i + 1];\n                    $l[$i + 1] = $temp;\n\
    \                }\n            }\n        }\n    }\n    return $l;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaebloo5t.php:30\n\
    Stack trace:\n#0 /tmp/tmpaebloo5t.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpaebloo5t.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array();\n    $odds = array();\n    foreach ($l\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $evens[] = $value;\n\
    \        } else {\n            $odds[] = $value;\n        }\n    }\n    sort($evens);\n\
    \    return array_merge($evens, $odds);\n}\n\necho '<h3>sort_even</h3>';\n$test1\
    \ = array(1, 2, 3);\n$test2 = array(5, 6, 3, 4);\necho 'Test 1: ';\nprint_r($test1);\n\
    echo 'Result 1: ';\nprint_r(sort_even($test1));\necho 'Test 2: ';\nprint_r($test2);\n\
    echo 'Result 2: ';\nprint_r(sort_even($test2));\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "<h3>sort_even</h3>Test 1: Array\n(\n    [0] => 1\n    [1] => 2\n    [2]\
    \ => 3\n)\nResult 1: Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 2\n)\nTest\
    \ 2: Array\n(\n    [0] => 5\n    [1] => 6\n    [2] => 3\n    [3] => 4\n)\nResult\
    \ 2: Array\n(\n    [0] => 3\n    [1] => 5\n    [2] => 6\n    [3] => 4\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpk2d29riz.php:40\nStack trace:\n\
    #0 /tmp/tmpk2d29riz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpk2d29riz.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t// ---your code here---\n\treturn $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpnhw_9l.php:20\n\
    Stack trace:\n#0 /tmp/tmpwpnhw_9l.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpwpnhw_9l.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $ev = [];\n    $all = [];\n    foreach ($l as $key => $value)\
    \ {\n        if ($key % 2 == 0) {\n            $ev[] = $value;\n        }\n  \
    \      $all[] = $value;\n    }\n    sort($ev);\n    foreach ($l as $key => $value)\
    \ {\n        if ($key % 2 == 0) {\n            $all[$key] = array_shift($ev);\n\
    \        }\n    }\n    return $all;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$l_copy = $l;\n\tfor ($i = 0; $i < count($l); $i += 2) {\n\
    \t\t$subset = array_slice($l_copy, $i, 2);\n\t\trsort($subset);\n\t\t$l[$i] =\
    \ $subset[0];\n\t\t$l[$i + 1] = $subset[1];\n\t}\n\treturn $l;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b6n_4li.php:25\n\
    Stack trace:\n#0 /tmp/tmp_b6n_4li.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_b6n_4li.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l_even = array();\n    $l_odd = array();\n    $size =\
    \ count($l);\n    for ($i = 0; $i < $size; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $l_odd[] = $l[$i];\n        } else {\n            $l_even[] = $l[$i];\n\
    \        }\n    }\n    sort($l_even);\n    $l_sorted = array();\n    for ($i =\
    \ 0; $i < $size; $i++) {\n        if ($i % 2 == 0) {\n            $l_sorted[]\
    \ = $l_odd[$i / 2];\n        } else {\n            $l_sorted[] = $l_even[($i -\
    \ 1) / 2];\n        }\n    }\n    return $l_sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6nq6lq1.php:37\n\
    Stack trace:\n#0 /tmp/tmpg6nq6lq1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpg6nq6lq1.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$a = array();\n\tfor ($i = 0; $i < count($l); $i += 2) {\n\
    \t\t$a[$i] = $l[$i];\n\t}\n\tfor ($i = 1; $i < count($l); $i += 2) {\n\t\t$a[$i]\
    \ = $l[$i];\n\t}\n\tsort($a);\n\treturn $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkvtqv6d.php:27\n\
    Stack trace:\n#0 /tmp/tmpvkvtqv6d.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvkvtqv6d.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $res = array();\n  for ($i = 0; $i < count($l); $i += 2)\
    \ {\n    $res[] = $l[$i];\n    if ($i + 1 < count($l)) {\n      $tmp = array();\n\
    \      $tmp[] = $l[$i + 1];\n      while ($i + 2 < count($l) && $l[$i + 2] % 2\
    \ == 0) {\n        $tmp[] = $l[$i + 2];\n        $i += 2;\n      }\n      sort($tmp);\n\
    \      $res = array_merge($res, $tmp);\n    }\n  }\n  return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0uzxgxdo.php:32\n\
    Stack trace:\n#0 /tmp/tmp0uzxgxdo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0uzxgxdo.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$r = array();\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\
    \tif ($i % 2 == 0) {\n\t\t\t$r[] = $l[$i];\n\t\t} else {\n\t\t\t$s = array();\n\
    \t\t\tfor ($j = 0; $j < count($l); $j++) {\n\t\t\t\tif ($j % 2 == 0) {\n\t\t\t\
    \t\t$s[] = $l[$j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tsort($s);\n\t\t\t$r[] = $s[(count($s)\
    \ - 1)];\n\t\t}\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpng84tld2.php:33\n\
    Stack trace:\n#0 /tmp/tmpng84tld2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpng84tld2.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evenList = [];\n    $oddList = [];\n    $sortedEvenList\
    \ = [];\n    $fullList = [];\n    $i = 0;\n    foreach ($l as $key => $value)\
    \ {\n        if ($key % 2 == 0) {\n            $evenList[$i] = $value;\n     \
    \       $i++;\n        } else {\n            $oddList[] = $value;\n        }\n\
    \    }\n    sort($evenList);\n    $j = 0;\n    foreach ($l as $key => $value)\
    \ {\n        if ($key % 2 == 0) {\n            $fullList[$key] = $evenList[$j];\n\
    \            $j++;\n        } else {\n            $fullList[$key] = $value;\n\
    \        }\n    }\n    return $fullList;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l2 = [];\n  $i = 0;\n  foreach ($l as $item) {\n    if ($i\
    \ % 2 == 0) {\n      $l2[] = $item;\n    } else {\n      $l2[] = $item;\n    \
    \  sort($l2);\n    }\n    $i++;\n  }\n  return $l2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsg9w9lf9.php:30\n\
    Stack trace:\n#0 /tmp/tmpsg9w9lf9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsg9w9lf9.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $l_out = array();\n    for ($i = 0; $i < count($l); $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $l_out[] = $l[$i];\n        } else\
    \ {\n            $l_out[] = $l[$i];\n            sort($l_out[$i]);\n        }\n\
    \    }\n    return $l_out;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp4ojw_ui2.php\
    \ on line 16\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmp4ojw_ui2.php on line 16\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmp4ojw_ui2.php on line 16\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmp4ojw_ui2.php on line 16\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmp4ojw_ui2.php on\
    \ line 16\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmp4ojw_ui2.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ojw_ui2.php:27\n\
    Stack trace:\n#0 /tmp/tmp4ojw_ui2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4ojw_ui2.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$len = count($l);\n\t$ret = [];\n\tfor ($i = 0; $i < $len;\
    \ $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$ret[] = $l[$i];\n\t\t} else {\n\t\t\t\
    $new = [];\n\t\t\tfor ($j = $i; $j < $len; $j++) {\n\t\t\t\tif ($j % 2 == 1) {\n\
    \t\t\t\t\t$new[] = $l[$j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tsort($new);\n\t\t\tfor ($j\
    \ = $i; $j < $len; $j++) {\n\t\t\t\tif ($j % 2 == 1) {\n\t\t\t\t\t$ret[] = array_shift($new);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\t$i = $len - 1;\n\t\t}\n\t}\n\treturn $ret;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4quhjcmi.php:39\n\
    Stack trace:\n#0 /tmp/tmp4quhjcmi.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4quhjcmi.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $indicies = array_keys($l);\n    $even_keys = array_filter($indicies,\
    \ function($k) { return $k % 2 === 0; });\n    $sorted_evens = array_map(function($k)\
    \ use ($l) { return $l[$k]; }, $even_keys);\n    sort($sorted_evens);\n    $sorted_evens\
    \ = array_combine($even_keys, $sorted_evens);\n    return array_replace($l, $sorted_evens);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tif (count($l) < 2) {\n\t\treturn $l;\n\t}\n\t$evens = array();\n\
    \t$odds = array();\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\t$odds[] = $l[$i];\n\t\t} else {\n\t\t\t$evens[] = $l[$i];\n\t\t\
    }\n\t}\n\tsort($evens);\n\t$r = array();\n\tfor ($i = 0; $i < count($l); $i++)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\t$r[] = $odds[$i/2];\n\t\t} else {\n\t\t\t$r[]\
    \ = $evens[($i-1)/2];\n\t\t}\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcf5zh0ev.php:40\n\
    Stack trace:\n#0 /tmp/tmpcf5zh0ev.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcf5zh0ev.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $new_l = [];\n    for ($i = 0; $i < count($l); $i++) {\n\
    \        if ($i % 2 == 0) {\n            $new_l[] = $l[$i];\n        } else {\n\
    \            $new_l[] = selection_sort($l[$i]);\n        }\n    }\n    return\
    \ $new_l;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function selection_sort()\
    \ in /tmp/tmpb6x4avuf.php:15\nStack trace:\n#0 /tmp/tmpb6x4avuf.php(22): sort_even(Array)\n\
    #1 /tmp/tmpb6x4avuf.php(26): candidate(Array)\n#2 /tmp/tmpb6x4avuf.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpb6x4avuf.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$r = array();\n\t$count = 0;\n\tfor ($i = 0; $i < count($l);\
    \ $i += 2) {\n\t\t$r[$i] = $l[$i];\n\t\t$r[$i + 1] = sort_me($l[$i + 1]);\n\t\
    }\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_me() in\
    \ /tmp/tmpq6hmf5_g.php:14\nStack trace:\n#0 /tmp/tmpq6hmf5_g.php(20): sort_even(Array)\n\
    #1 /tmp/tmpq6hmf5_g.php(24): candidate(Array)\n#2 /tmp/tmpq6hmf5_g.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq6hmf5_g.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$len = count($l);\n\tfor ($i = 0; $i < $len; $i += 2) {\n\
    \t\t$odd = $i;\n\t\t$even = $i + 1;\n\t\t$even_arr = array();\n\t\t$odd_arr =\
    \ array();\n\t\tif ($odd < $len) {\n\t\t\t$odd_arr[] = $l[$odd];\n\t\t}\n\t\t\
    if ($even < $len) {\n\t\t\t$even_arr[] = $l[$even];\n\t\t}\n\t\tsort($even_arr);\n\
    \t\t$l[$odd] = $odd_arr[0];\n\t\t$l[$even] = $even_arr[0];\n\t}\n\treturn $l;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb0vwqekb.php:34\n\
    Stack trace:\n#0 /tmp/tmpb0vwqekb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpb0vwqekb.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    for ($i = 1; $i < count($l); $i++) {\n        if ($i %\
    \ 2 == 0) {\n            sort($l, SORT_NUMERIC, $i - 1, 2);\n        }\n    }\n\
    \    return $l;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects at most 2 parameters, 4 given in /tmp/tmp7nkmsmn5.php\
    \ on line 12\n\nWarning: sort() expects at most 2 parameters, 4 given in /tmp/tmp7nkmsmn5.php\
    \ on line 12\n\nWarning: sort() expects at most 2 parameters, 4 given in /tmp/tmp7nkmsmn5.php\
    \ on line 12\n\nWarning: sort() expects at most 2 parameters, 4 given in /tmp/tmp7nkmsmn5.php\
    \ on line 12\n\nWarning: sort() expects at most 2 parameters, 4 given in /tmp/tmp7nkmsmn5.php\
    \ on line 12\n\nWarning: sort() expects at most 2 parameters, 4 given in /tmp/tmp7nkmsmn5.php\
    \ on line 12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nkmsmn5.php:24\n\
    Stack trace:\n#0 /tmp/tmp7nkmsmn5.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp7nkmsmn5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $ret = [];\n    $even = [];\n    $odd = [];\n    $len =\
    \ count($l);\n    for ($i = 0; $i < $len; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $even[] = $l[$i];\n        } else {\n            $odd[] = $l[$i];\n\
    \        }\n    }\n    sort($even);\n    $ret = array_merge($even, $odd);\n  \
    \  return $ret;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp614gquv.php:30\n\
    Stack trace:\n#0 /tmp/tmpp614gquv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpp614gquv.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $result = array();\n  $evens = array();\n  $evens_i = 0;\n\
    \  $l_i = 0;\n  while ($l_i < count($l)) {\n    $val = $l[$l_i];\n    if ($l_i\
    \ % 2 == 0) {\n      $result[] = $val;\n    } else {\n      $evens[] = $val;\n\
    \    }\n    $l_i++;\n  }\n  sort($evens);\n  $evens_i = 0;\n  $result_i = 0;\n\
    \  while ($result_i < count($result)) {\n    if ($result_i % 2 == 1) {\n     \
    \ $result[$result_i] = $evens[$evens_i];\n      $evens_i++;\n    }\n    $result_i++;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt9oy5cn9.php:41\n\
    Stack trace:\n#0 /tmp/tmpt9oy5cn9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpt9oy5cn9.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $ans = array();\n    for ($i = 0; $i < count($l); $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $ans[] = $l[$i];\n        } else\
    \ {\n            $subl = array();\n            for ($j = 0; $j < count($l); $j++)\
    \ {\n                if ($j % 2 == 0) {\n                    $subl[] = $l[$j];\n\
    \                }\n            }\n            sort($subl);\n            $ans[]\
    \ = $subl[$i/2];\n        }\n    }\n    return $ans;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kn3tqcf.php:33\n\
    Stack trace:\n#0 /tmp/tmp8kn3tqcf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8kn3tqcf.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t//FIX ME\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtxrvtwc.php:17\n\
    Stack trace:\n#0 /tmp/tmpdtxrvtwc.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpdtxrvtwc.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tif (count($l) == 0) {\n\t\treturn $l;\n\t} else {\n\t\tif\
    \ (count($l) == 1) {\n\t\t\treturn $l;\n\t\t} else {\n\t\t\tif (count($l) == 2)\
    \ {\n\t\t\t\tif ($l[0] < $l[1]) {\n\t\t\t\t\treturn $l;\n\t\t\t\t} else {\n\t\t\
    \t\t\treturn array($l[1], $l[0]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (count($l)\
    \ == 3) {\n\t\t\t\t\tif ($l[0] < $l[1]) {\n\t\t\t\t\t\treturn array($l[0], $l[1],\
    \ $l[2]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn array($l[1], $l[0], $l[2]);\n\
    \t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$even = array();\n\t\t\t\t\t$odd = array();\n\
    \t\t\t\t\tfor ($i = 0; $i < count($l); $i++) {\n\t\t\t\t\t\tif ($i % 2 == 0) {\n\
    \t\t\t\t\t\t\t$odd[] = $l[$i];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$even[] =\
    \ $l[$i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn array_merge(array($odd[0]),\
    \ sort_even(array_merge(array($even[0]), sort_even(array_merge(array($odd[1]),\
    \ sort_even(array_merge(array($even[1]), array_slice($l, 4))))))));\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n}\necho json_encode(sort_even(array(1, 2, 3)));\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "[1,2,3]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzgsc_wt.php:52\n\
    Stack trace:\n#0 /tmp/tmphzgsc_wt.php(56): test()\n#1 {main}\n  thrown in /tmp/tmphzgsc_wt.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = [];\n    $odd = [];\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $odd[] = $l[$i];\n        }\
    \ else {\n            $even[] = $l[$i];\n        }\n    }\n    sort($even);\n\
    \    for ($i = 0; $i < count($even); $i++) {\n        $odd[] = $even[$i];\n  \
    \  }\n    return $odd;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4tub2z19.php:31\n\
    Stack trace:\n#0 /tmp/tmp4tub2z19.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4tub2z19.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2_o8dw1.php:18\n\
    Stack trace:\n#0 /tmp/tmpa2_o8dw1.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa2_o8dw1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array();\n    $odds = array();\n    $evens_sorted\
    \ = array();\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 2 ===\
    \ 0) {\n            $odds[] = $l[$i];\n        } else {\n            $evens[]\
    \ = $l[$i];\n        }\n    }\n    sort($evens);\n    $i = 0;\n    $j = 0;\n \
    \   while ($i < count($odds) && $j < count($evens)) {\n        $evens_sorted[]\
    \ = $odds[$i];\n        $evens_sorted[] = $evens[$j];\n        $i++;\n       \
    \ $j++;\n    }\n    return $evens_sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_37fz3c.php:37\n\
    Stack trace:\n#0 /tmp/tmpr_37fz3c.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpr_37fz3c.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $ans = [];\n    for ($i = 0; $i < count($l); $i++) {\n\
    \        if ($i % 2 == 0) {\n            $ans[] = $l[$i];\n        } else {\n\
    \            $even = $l[$i];\n            $even_sort = $even;\n            sort($even_sort);\n\
    \            $ans[] = $even_sort;\n        }\n    }\n    return $ans;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpjzmv3p3m.php\
    \ on line 17\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmpjzmv3p3m.php on line 17\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmpjzmv3p3m.php on line 17\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmpjzmv3p3m.php on line 17\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmpjzmv3p3m.php on\
    \ line 17\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmpjzmv3p3m.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzmv3p3m.php:30\n\
    Stack trace:\n#0 /tmp/tmpjzmv3p3m.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjzmv3p3m.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $r = $l;\n    for ($i = 0; $i < count($l); $i++) {\n  \
    \      if ($i % 2 == 0) {\n            $r[$i] = $l[$i];\n        } else {\n  \
    \          sort($l[$i]);\n            $r[$i] = $l[$i];\n        }\n    }\n   \
    \ return $r;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmppmzo1ccj.php\
    \ on line 15\n\nWarning: sort() expects parameter 1 to be array, int given in\
    \ /tmp/tmppmzo1ccj.php on line 15\n\nWarning: sort() expects parameter 1 to be\
    \ array, int given in /tmp/tmppmzo1ccj.php on line 15\n\nWarning: sort() expects\
    \ parameter 1 to be array, int given in /tmp/tmppmzo1ccj.php on line 15\n\nWarning:\
    \ sort() expects parameter 1 to be array, int given in /tmp/tmppmzo1ccj.php on\
    \ line 15\n\nWarning: sort() expects parameter 1 to be array, int given in /tmp/tmppmzo1ccj.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmzo1ccj.php:28\n\
    Stack trace:\n#0 /tmp/tmppmzo1ccj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppmzo1ccj.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $n = count($l);\n    $sorted = array();\n    for ($i =\
    \ 0; $i < $n; $i = $i + 2) {\n        $left = $i + 1;\n        $right = $i + 2;\n\
    \        if ($right < $n) {\n            if ($l[$left] < $l[$right]) {\n     \
    \           $sorted[] = $l[$left];\n                $sorted[] = $l[$right];\n\
    \            } else {\n                $sorted[] = $l[$right];\n             \
    \   $sorted[] = $l[$left];\n            }\n        } else {\n            $sorted[]\
    \ = $l[$left];\n        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1r2tqau.php:35\n\
    Stack trace:\n#0 /tmp/tmpi1r2tqau.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpi1r2tqau.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $i = 0;\n  $n = count($l);\n  while ($i < $n) {\n    if ($i\
    \ % 2 == 0) {\n      $i++;\n      continue;\n    }\n    // do some work\n    $curr\
    \ = $l[$i];\n    $prev = $l[$i - 1];\n    $next = $l[$i + 1];\n    if ($curr <\
    \ $prev && $curr < $next) {\n      $l[$i] = $prev;\n      $l[$i - 1] = $curr;\n\
    \    } else if ($curr > $prev && $curr > $next) {\n      $l[$i] = $next;\n   \
    \   $l[$i + 1] = $curr;\n    }\n    $i++;\n  }\n  return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprktvpaq0.php:39\n\
    Stack trace:\n#0 /tmp/tmprktvpaq0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmprktvpaq0.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  // TODO\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqryk577q.php:17\n\
    Stack trace:\n#0 /tmp/tmpqryk577q.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpqryk577q.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$even = [];\n\t$odd = [];\n\tforeach ($l as $key => $value)\
    \ {\n\t\tif ($key % 2 == 0) {\n\t\t\t$even[] = $value;\n\t\t} else {\n\t\t\t$odd[]\
    \ = $value;\n\t\t}\n\t}\n\tsort($even);\n\tforeach ($odd as $key => $value) {\n\
    \t\t$even[] = $value;\n\t}\n\treturn $even;\n}\n\n$l = [1, 2, 3];\nvar_dump(sort_even($l));\n\
    $l = [5, 6, 3, 4];\nvar_dump(sort_even($l));\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(3)\n  [2]=>\n  int(2)\n}\n\
    array(4) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(5)\n  [2]=>\n  int(6)\n  [3]=>\n\
    \  int(4)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1xs4cdaq.php:36\n\
    Stack trace:\n#0 /tmp/tmp1xs4cdaq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1xs4cdaq.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    if (count($l) == 0) {\n        return [];\n    } else {\n\
    \        $even = [];\n        $odd = [];\n        foreach ($l as $index => $value)\
    \ {\n            if ($index % 2 == 0) {\n                $even[] = $value;\n \
    \           } else {\n                $odd[] = $value;\n            }\n      \
    \  }\n        sort($even);\n        return array_merge($even, $odd);\n    }\n\
    }\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp62r7octd.php:31\n\
    Stack trace:\n#0 /tmp/tmp62r7octd.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp62r7octd.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $newl = array();\n    foreach ($l as $key => $value) {\n\
    \        if ($key % 2 == 0) {\n            $newl[] = $value;\n        } else {\n\
    \            $newl[] = $value;\n            sort($newl);\n        }\n    }\n \
    \   return $newl;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubtl6ssz.php:28\n\
    Stack trace:\n#0 /tmp/tmpubtl6ssz.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpubtl6ssz.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $newList = [];\n    foreach ($l as $key => $value) {\n\
    \        if ($key % 2 == 0) {\n            array_push($newList, $value);\n   \
    \     } else {\n            array_push($newList, $value);\n            sort($newList);\n\
    \        }\n    }\n    return $newList;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpira85q4n.php:28\n\
    Stack trace:\n#0 /tmp/tmpira85q4n.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpira85q4n.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$evens = array();\n\t$odds = array();\n\tfor ($i = 0; $i\
    \ < count($l); $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$odds[] = $l[$i];\n\t\t\
    } else {\n\t\t\t$evens[] = $l[$i];\n\t\t}\n\t}\n\tsort($evens);\n\treturn array_merge($odds,\
    \ $evens);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_e_397dt.php:28\n\
    Stack trace:\n#0 /tmp/tmp_e_397dt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_e_397dt.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $odd = array();\n    $even = array();\n    for ($i = 0;\
    \ $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n            $odd[] = $l[$i];\n\
    \        } else {\n            $even[] = $l[$i];\n        }\n    }\n    sort($even);\n\
    \    for ($i = 0; $i < count($even); $i++) {\n        $odd[] = $even[$i];\n  \
    \  }\n    return $odd;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7knexx_4.php:31\n\
    Stack trace:\n#0 /tmp/tmp7knexx_4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7knexx_4.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\tif ($l == null) {\n\t\treturn null;\n\t} else if (count($l)\
    \ == 1) {\n\t\treturn array(array_pop($l));\n\t} else {\n\t\t$even_unsorted =\
    \ array();\n\t\t$i = 0;\n\t\tforeach ($l as $val) {\n\t\t\tif ($i % 2 == 0) {\n\
    \t\t\t\t$even_unsorted[] = $val;\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\t\t$even_sorted\
    \ = $even_unsorted;\n\t\tsort($even_sorted);\n\t\t$result = array();\n\t\t$i =\
    \ 0;\n\t\tforeach ($l as $val) {\n\t\t\tif ($i % 2 == 0) {\n\t\t\t\t$result[]\
    \ = array_shift($even_sorted);\n\t\t\t} else {\n\t\t\t\t$result[] = $val;\n\t\t\
    \t}\n\t\t\t$i++;\n\t\t}\n\t\treturn $result;\n\t}\n}\n\n$l = array(1, 2, 3);\n\
    echo implode(\" \", sort_even($l)) . \"\\n\";\n$l = array(5, 6, 3, 4);\necho implode(\"\
    \ \", sort_even($l)) . \"\\n\";\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1 2 3\n3 6 5 4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$l_prime = array();\n\t$l_even = array();\n\tfor ($i = 0;\
    \ $i < count($l); $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$l_prime[] = $l[$i];\n\
    \t\t} else {\n\t\t\t$l_even[] = $l[$i];\n\t\t}\n\t}\n\tsort($l_even);\n\t$count\
    \ = 0;\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tif ($i % 2 == 1) {\n\t\t\t\
    $l_prime[] = $l_even[$count];\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $l_prime;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7t7_swvu.php:35\n\
    Stack trace:\n#0 /tmp/tmp7t7_swvu.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7t7_swvu.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $res = array();\n    $idx = 0;\n    $l2 = array();\n  \
    \  while ($idx < count($l)) {\n        $res[] = $l[$idx];\n        $idx++;\n \
    \       if ($idx < count($l)) {\n            $l2[] = $l[$idx];\n            $idx++;\n\
    \        }\n    }\n    sort($l2);\n    $res = array_merge($res, $l2);\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4grnozt.php:31\n\
    Stack trace:\n#0 /tmp/tmpp4grnozt.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp4grnozt.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$lPrime = array();\n\tfor ($i = 0; $i < count($l); $i++)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\tarray_push($lPrime, $l[$i]);\n\t\t} else {\n\
    \t\t\t$pair = array();\n\t\t\t$pair[] = $l[$i];\n\t\t\t$pair[] = $l[$i-1];\n\t\
    \t\tsort($pair);\n\t\t\tfor ($j = 0; $j < count($pair); $j++) {\n\t\t\t\tarray_push($lPrime,\
    \ $pair[$j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn $lPrime;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tjim1mp.php:32\n\
    Stack trace:\n#0 /tmp/tmp1tjim1mp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1tjim1mp.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even_index_values = [];\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $even_index_values[] = $l[$i];\n\
    \        }\n    }\n    sort($even_index_values);\n    for ($i = 0; $i < count($l);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $l[$i] = $even_index_values[$i/2];\n\
    \        }\n    }\n    return $l;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n\t$len = count($l);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t\
    $current = $l[$i];\n\t\tfor ($j = $i - 1; $j >= 0; $j--) {\n\t\t\tif ($l[$j] >\
    \ $current) {\n\t\t\t\t$l[$j + 1] = $l[$j];\n\t\t\t\t$l[$j] = $current;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn $l;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplecmftru.php:28\n\
    Stack trace:\n#0 /tmp/tmplecmftru.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplecmftru.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l_e = [];\n  $l_o = [];\n  $l_s = [];\n  foreach ($l as\
    \ $index => $value) {\n    if ($index % 2 == 0) {\n      $l_e[] = $value;\n  \
    \  } else {\n      $l_o[] = $value;\n    }\n  }\n  sort($l_e);\n  foreach ($l\
    \ as $index => $value) {\n    if ($index % 2 == 0) {\n      $l_s[] = $l_e[0];\n\
    \      array_shift($l_e);\n    } else {\n      $l_s[] = $l_o[0];\n      array_shift($l_o);\n\
    \    }\n  }\n  return $l_s;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $newl = [];\n  $evenl = [];\n  for ($i = 0; $i < count($l);\
    \ $i++) {\n    if ($i % 2 == 0) {\n      $newl[] = $l[$i];\n    } else {\n   \
    \   $evenl[] = $l[$i];\n    }\n  }\n  sort($evenl);\n  for ($i = 0; $i < count($evenl);\
    \ $i++) {\n    $newl[] = $evenl[$i];\n  }\n  return $newl;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxk2750lf.php:31\n\
    Stack trace:\n#0 /tmp/tmpxk2750lf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxk2750lf.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l_even = array();\n  $l_odd = array();\n  foreach ($l as\
    \ $key => $val) {\n    if ($key % 2 == 0) {\n      $l_even[] = $val;\n    } else\
    \ {\n      $l_odd[] = $val;\n    }\n  }\n  sort($l_even);\n  $l_even_odd = array();\n\
    \  foreach ($l_even as $key => $val) {\n    $l_even_odd[] = $val;\n    $l_even_odd[]\
    \ = $l_odd[$key];\n  }\n  return $l_even_odd;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_kz2r0f.php:32\n\
    Stack trace:\n#0 /tmp/tmpp_kz2r0f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpp_kz2r0f.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even_indicies = [];\n    $odd_indicies = [];\n    $sorted_even_indicies\
    \ = [];\n    $result = [];\n    $num_indicies = count($l);\n    for ($i = 0; $i\
    \ < $num_indicies; $i++) {\n        if ($i % 2 == 0) {\n            $odd_indicies[]\
    \ = $l[$i];\n        } else {\n            $even_indicies[] = $l[$i];\n      \
    \  }\n    }\n    $sorted_even_indicies = $even_indicies;\n    sort($sorted_even_indicies);\n\
    \    for ($i = 0; $i < $num_indicies; $i++) {\n        if ($i % 2 == 0) {\n  \
    \          $result[] = $odd_indicies[$i / 2];\n        } else {\n            $result[]\
    \ = $sorted_even_indicies[($i - 1) / 2];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqipcva.php:40\n\
    Stack trace:\n#0 /tmp/tmpfuqipcva.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfuqipcva.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  for ($i = 0; $i < count($l); $i++) {\n    //echo \"i = $i\\\
    n\";\n    if ($i % 2 == 0) {\n      //echo \"Odd\\n\";\n      $first[$i] = $l[$i];\n\
    \    } else {\n      //echo \"Even\\n\";\n      //swap values at indicies\n  \
    \    $first[$i] = $l[$i];\n      $second[$i] = $l[$i - 1];\n      sort($first);\n\
    \      sort($second);\n      $l[$i] = $first[$i];\n      $l[$i - 1] = $second[$i\
    \ - 1];\n    }\n  }\n  return $l;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8jhyhk4.php:35\n\
    Stack trace:\n#0 /tmp/tmpr8jhyhk4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpr8jhyhk4.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  if (count($l) == 0) {\n    return $l;\n  } else {\n    $first\
    \ = array_shift($l);\n    $second = array_shift($l);\n    if ($second) {\n   \
    \   usort($l, function($a, $b) {\n        return $a > $b;\n      });\n      array_unshift($l,\
    \ $second);\n      array_unshift($l, $first);\n    } else {\n      array_unshift($l,\
    \ $first);\n    }\n    return $l;\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm4435ad5.php:34\n\
    Stack trace:\n#0 /tmp/tmpm4435ad5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpm4435ad5.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
