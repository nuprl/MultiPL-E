name: HumanEval_89_encrypt
language: php
prompt: "<?php\n// Create a function encrypt that takes a string as an argument and\n\
  // returns a string encrypted with the alphabet being rotated. \n// The alphabet\
  \ should be rotated in a manner such that the letters \n// shift down by two multiplied\
  \ to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
  \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\n\
  function encrypt($s) {\n"
tests: "function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"\
  jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"\
  hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $s = strtolower($s);\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $alphabetArray = str_split($alphabet);\n    $encryptAlphabet = array_slice($alphabetArray,\
    \ 2, 24);\n    $encryptAlphabet = array_merge($encryptAlphabet, array_slice($alphabetArray,\
    \ 0, 2));\n    $sArray = str_split($s);\n    $newWord = \"\";\n    for ($i = 0;\
    \ $i < sizeof($sArray); $i++) {\n        $index = array_search($sArray[$i], $alphabetArray);\n\
    \        $newWord .= $encryptAlphabet[$index];\n    }\n    return $newWord;\n\
    }\n", "\t\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$s[$i] = chr(ord($s[$i])\
    \ + 2 * 2);\n\t}\n\t\n\treturn $s;\n}\n\necho encrypt('hi') . \"<br>\";\necho\
    \ encrypt('asdfghjkl') . \"<br>\";\necho encrypt('gf') . \"<br>\";\necho encrypt('et')\
    \ . \"<br>\";", "\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\t$alphabetArray\
    \ = str_split($alphabet);\n\t//create an array of the values in $s\n\t$sArray\
    \ = str_split($s);\n\t//create an empty array to store the encrypted values\n\t\
    $encryptionArray = [];\n\t//loop through $sArray and $alphabetArray\n\tfor ($i\
    \ = 0; $i < count($sArray); $i++) {\n\t\tfor ($j = 0; $j < count($alphabetArray);\
    \ $j++) {\n\t\t\t//check if the value in $sArray matches the value in $alphabetArray\n\
    \t\t\tif ($sArray[$i] == $alphabetArray[$j]) {\n\t\t\t\t//check if the value is\
    \ at the end of the alphabet\n\t\t\t\tif ($j < (count($alphabetArray) - 2)) {\n\
    \t\t\t\t\t//if not, push the next 2 values of $alphabetArray into $encryptionArray\n\
    \t\t\t\t\tarray_push($encryptionArray, $alphabetArray[$j + 2]);\n\t\t\t\t} else\
    \ {\n\t\t\t\t\t//if it is, push the value 2 values from the beginning of $alphabetArray\
    \ into $encryptionArray\n\t\t\t\t\tarray_push($encryptionArray, $alphabetArray[$j\
    \ - (count($alphabetArray) - 2)]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//join the\
    \ values in $encryptionArray together and return the value\n\treturn implode('',\
    \ $encryptionArray);\n}\n\necho encrypt('asdfghjkl');", "\t$c = '';\n\tfor ($i\
    \ = 0; $i < strlen($s); $i++) {\n\t\t$l = ord($s[$i]) + $i * 2;\n\t\t$c .= chr($l);\n\
    \t}\n\treturn $c;\n}\n\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl')\
    \ . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\n",
  "  $characters = str_split($s);\n  $result = '';\n  foreach ($characters as $character)\
    \ {\n    if($character == ' ') {\n      $result .= ' ';\n    } else {\n      if($character\
    \ == 'y') {\n        $character = 'a';\n      } else if($character == 'z') {\n\
    \        $character = 'b';\n      } else {\n        $character = chr(ord($character)\
    \ + 2);\n      }\n      $result .= $character;\n    }\n  }\n  return $result;\n\
    }\n", "    $encrypt = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n       \
    \ if (ord($s[$i]) + 2 * 2 > ord('z')) {\n            $encrypt .= chr(ord($s[$i])\
    \ + 2 * 2 - 26);\n        } else {\n            $encrypt .= chr(ord($s[$i]) +\
    \ 2 * 2);\n        }\n    }\n    return $encrypt;\n}\n\necho encrypt('hi') . \"\
    \\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf') . \"\\n\";\n\
    echo encrypt('et') . \"\\n\";\n", "    $len = strlen($s);\n    $step = $len *\
    \ 2;\n    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    $aLen = strlen($alphabet);\n\
    \    $aStart = $step % $aLen;\n    $sArr = str_split($s);\n    $aArr = str_split($alphabet);\n\
    \    $result = array();\n    foreach ($sArr as $ch) {\n        $i = 0;\n     \
    \   while ($i < $aLen) {\n            if ($ch == $aArr[$i]) {\n              \
    \  $j = $i + $aStart;\n                if ($j >= $aLen) {\n                  \
    \  $j = $j - $aLen;\n                }\n                $result[] = $aArr[$j];\n\
    \                break;\n            }\n            $i++;\n        }\n    }\n\
    \    return implode('', $result);\n}", "    $alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $beta = \"cdefghijklmnopqrstuvwxyzab\";\n    $newString = \"\";\n    for\
    \ ($i = 0; $i < strlen($s); $i++) {\n        $index = strpos($alpha, $s[$i]);\n\
    \        $newString .= $beta[$index];\n    }\n    return $newString;\n}\n", "\t\
    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\t$alphabet_array = str_split($alphabet);\n\
    \t$alphabet_array_length = count($alphabet_array);\n\t$s_array = str_split($s);\n\
    \t$s_array_length = count($s_array);\n\tfor ($i = 0; $i < $s_array_length; $i++)\
    \ {\n\t\tfor ($j = 0; $j < $alphabet_array_length; $j++) {\n\t\t\tif ($s_array[$i]\
    \ == $alphabet_array[$j]) {\n\t\t\t\t$index = $j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t\tif ($index < 24) {\n\t\t\t$s_array[$i] = $alphabet_array[$index + 2];\n\
    \t\t} elseif ($index == 24) {\n\t\t\t$s_array[$i] = $alphabet_array[0];\n\t\t\
    } elseif ($index == 25) {\n\t\t\t$s_array[$i] = $alphabet_array[1];\n\t\t}\n\t\
    }\n\t$encrypt_string = implode($s_array);\n\treturn $encrypt_string;\n}", "  \
    \  $alphabet = range('a', 'z');\n    $result = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = array_search($s[$i], $alphabet);\n        $index =\
    \ $index + (2 * 2);\n        if ($index > 25) {\n            $index = $index -\
    \ 26;\n        }\n        $result .= $alphabet[$index];\n    }\n    return $result;\n\
    }\necho encrypt('hi') . '<br>';\necho encrypt('asdfghjkl') . '<br>';\necho encrypt('gf')\
    \ . '<br>';\necho encrypt('et') . '<br>';\n", "\n}\n\n$test = encrypt('hi');\n\
    echo \"Passed: encrypt('hi') == 'lm'\\n\";\nassert(($test == 'lm'), \"Test Failed.\"\
    );\n\n$test = encrypt('asdfghjkl');\necho \"Passed: encrypt('asdfghjkl') == 'ewhjklnop'\\\
    n\";\nassert(($test == 'ewhjklnop'), \"Test Failed.\");\n\n$test = encrypt('gf');\n\
    echo \"Passed: encrypt('gf') == 'kj'\\n\";\nassert(($test == 'kj'), \"Test Failed.\"\
    );\n\n$test = encrypt('et');\necho \"Passed: encrypt('et') == 'ix'\\n\";\nassert(($test\
    \ == 'ix'), \"Test Failed.\");", "\t$letters = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$rotate = array();\n\t$i = 0;\n\t$rotate[$i] = $letters[$i+1];\n\t$rotate[$i+1]\
    \ = $letters[$i+2];\n\t$rotate[$i+2] = $letters[$i+3];\n\t$rotate[$i+3] = $letters[$i+4];\n\
    \t$rotate[$i+4] = $letters[$i+5];\n\t$rotate[$i+5] = $letters[$i+6];\n\t$rotate[$i+6]\
    \ = $letters[$i+7];\n\t$rotate[$i+7] = $letters[$i+8];\n\t$rotate[$i+8] = $letters[$i+9];\n\
    \t$rotate[$i+9] = $letters[$i+10];\n\t$rotate[$i+10] = $letters[$i+11];\n\t$rotate[$i+11]\
    \ = $letters[$i+12];\n\t$rotate[$i+12] = $letters[$i+13];\n\t$rotate[$i+13] =\
    \ $letters[$i+14];\n\t$rotate[$i+14] = $letters[$i+15];\n\t$rotate[$i+15] = $letters[$i+16];\n\
    \t$rotate[$i+16] = $letters[$i+17];\n\t$rotate[$i+17] = $letters[$i+18];\n\t$rotate[$i+18]\
    \ = $letters[$i+19];\n\t$rotate[$i+19] = $letters[$i+20];\n\t$rotate[$i+20] =\
    \ $letters[$i+21];\n\t$rotate[$i+21] = $letters[$i+22];", "    $arr = str_split($s);\n\
    \    $str = '';\n    foreach ($arr as $value) {\n        if (ord($value) <= ord('y'))\
    \ {\n            $str .= chr(ord($value) + 2);\n        } elseif (ord($value)\
    \ <= ord('z')) {\n            $str .= chr(ord($value) - 26 + 2);\n        } elseif\
    \ (ord($value) <= ord('Y')) {\n            $str .= chr(ord($value) + 2);\n   \
    \     } elseif (ord($value) <= ord('Z')) {\n            $str .= chr(ord($value)\
    \ - 26 + 2);\n        } else {\n            $str .= $value;\n        }\n    }\n\
    \    return $str;\n}\n", "    // Your Code Here\n}\n", "    $alpha = array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $split_string = str_split($s);\n\
    \    $empty_string = '';\n    foreach ($split_string as $letter) {\n        $index\
    \ = array_search($letter, $alpha);\n        $new_index = ($index + 2) * 2;\n \
    \       $new_letter = $alpha[$new_index];\n        $empty_string .= $new_letter;\n\
    \    }\n    return $empty_string;\n}\n", "  $chars = str_split($s);\n  foreach\
    \ ($chars as $key => $val) {\n    if (ctype_lower($val)) {\n      $asciiVal =\
    \ ord($val);\n      if ($asciiVal < 110) {\n        $asciiVal += 13;\n      }\
    \ else {\n        $asciiVal -= 13;\n      }\n      $chars[$key] = chr($asciiVal);\n\
    \    }\n  }\n  return implode($chars);\n}\n$s = 'asdfghjkl';\necho encrypt($s);\n\
    echo \"\\n\";", "\t$arr = str_split($s);\n\t$encryptedString = '';\n\tforeach\
    \ ($arr as $char) {\n\t\t$encryptedString .= chr(ord($char) + 4);\n\t}\n\treturn\
    \ $encryptedString;\n}\n\necho encrypt('hi') . PHP_EOL;\necho encrypt('asdfghjkl')\
    \ . PHP_EOL;\necho encrypt('gf') . PHP_EOL;\necho encrypt('et') . PHP_EOL;\n",
  "//\n}\n", "\t$alphabet = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\
    \t$encryptedString = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$letter\
    \ = $s[$i];\n\t\t$index = array_search($letter, $alphabet);\n\t\tif ($index ==\
    \ 25) {\n\t\t\t$encryptedString .= $alphabet[1];\n\t\t} else if ($index == 24)\
    \ {\n\t\t\t$encryptedString .= $alphabet[0];\n\t\t} else {\n\t\t\t$encryptedString\
    \ .= $alphabet[$index + 2];\n\t\t}\n\t}\n\treturn $encryptedString;\n}\n$encryptedString\
    \ = encrypt('xyz');\necho $encryptedString;", "  $s = strtolower($s);\n  $s =\
    \ str_split($s);\n  $alphabet = range('a', 'z');\n  $result = array();\n  foreach\
    \ ($s as $char) {\n    foreach ($alphabet as $alpha) {\n      if ($char == $alpha)\
    \ {\n        array_push($result, $alphabet[(array_search($alpha, $alphabet) +\
    \ 4) % 26]);\n      }\n    }\n  }\n  return implode($result);\n}\n", "    $i =\
    \ 0;\n    $encryptString = \"\";\n    while ($i < strlen($s)) {\n        if ($s[$i]\
    \ == 'z') {\n            $encryptString .= 'b';\n        } else if ($s[$i] ==\
    \ 'y') {\n            $encryptString .= 'a';\n        } else {\n            $encryptString\
    \ .= chr(ord($s[$i]) + 2);\n        }\n        $i++;\n    }\n    return $encryptString;\n\
    }\n", "  $rot = 2 * 2;\n  $letters = str_split($s);\n  foreach ($letters as $key\
    \ => $letter) {\n    $letters[$key] = chr(ord($letter) + $rot);\n  }\n  return\
    \ implode($letters);\n}\n", "    $alphabet = range('a', 'z');\n    $ciphered =\
    \ '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $idx = array_search($s[$i],\
    \ $alphabet);\n        $ciphered .= $alphabet[($idx + $i * 2) % 26];\n    }\n\
    \    return $ciphered;\n}\n", "\n}\necho encrypt('hi');\necho encrypt('asdfghjkl');\n\
    echo encrypt('gf');\necho encrypt('et');", "  return strtr($s, \"abcdefghijklmnopqrstuvwxyz\"\
    , \"cdefghijklmnopqrstuvwxyzab\");\n}", "  $result = '';\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $len = strlen($s);\n  for ($i = 0; $i < $len; $i++) {\n    $char = $s[$i];\n\
    \    $alphabet_idx = strpos($alphabet, $char);\n    $result_idx = $alphabet_idx\
    \ + ($alphabet_idx * 2) + 2;\n    $result .= $alphabet[$result_idx];\n  }\n  return\
    \ $result;\n}\n", "\t// add code here\n\t$strArr = str_split($s);\n\t$result =\
    \ \"\";\n\tfor ($i = 0; $i < count($strArr); $i++) {\n\t\tif (ord($strArr[$i])\
    \ > 115 && ord($strArr[$i]) < 122) {\n\t\t\t$result .= chr(ord($strArr[$i]) -\
    \ 22);\n\t\t} else if (ord($strArr[$i]) > 87 && ord($strArr[$i]) < 97) {\n\t\t\
    \t$result .= chr(ord($strArr[$i]) - 4);\n\t\t} else if (ord($strArr[$i]) > 79\
    \ && ord($strArr[$i]) < 86) {\n\t\t\t$result .= chr(ord($strArr[$i]) + 22);\n\t\
    \t} else if (ord($strArr[$i]) > 109 && ord($strArr[$i]) < 114) {\n\t\t\t$result\
    \ .= chr(ord($strArr[$i]) + 4);\n\t\t} else {\n\t\t\t$result .= $strArr[$i];\n\
    \t\t}\n\t}\n\treturn $result;\n}\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl')\
    \ . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\n",
  "    $chars = \"abcdefghijklmnopqrstuvwxyz\";\n    $result = '';\n    $len = strlen($s);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $pos = strpos($chars, $s[$i]);\n\
    \        $pos += 2 * $i;\n        $pos = $pos % 26;\n        $result .= $chars[$pos];\n\
    \    }\n    return $result;\n}\n", "    $alphabet = array('a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z');\n    $encrypted = '';\n    for ($i = 0; $i <\
    \ strlen($s); $i++) {\n        $currentChar = $s[$i];\n        $pos = array_search($currentChar,\
    \ $alphabet);\n        if ($pos + 2 <= 25) {\n            $encrypted = $encrypted\
    \ . $alphabet[$pos + 2];\n        } else {\n            $encrypted = $encrypted\
    \ . $alphabet[$pos - 24];\n        }\n    }\n    return $encrypted;\n}\n\necho\
    \ encrypt('et');\necho encrypt('asdfghjkl');\necho encrypt('gf');\necho encrypt('hi');\n",
  "   $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n   $newAlphabet = substr($alphabet,2,strlen($alphabet)-2)\
    \ . substr($alphabet,0,2);\n   $newString = '';\n   for ($i = 0; $i < strlen($s);\
    \ $i++) {\n      $oldPos = strpos($alphabet,$s[$i]);\n      $newString .= $newAlphabet[$oldPos];\n\
    \   }\n   return $newString;\n}", "    return $s;\n}", "}\n", "\treturn $s;\n\
    }\n", "    $alphabet = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\
    \    $newAlphabet = array();\n    $encrypted = '';\n    $shift = 2;\n    $power\
    \ = 2;\n    // Create a function that will shift the alphabet to the right by\
    \ 2*power\n    function shiftAlphabet($alpha, $shift, $power) {\n        $count\
    \ = count($alpha);\n        $newArr = array();\n        for ($i = 0; $i < $count;\
    \ $i++) {\n            $newIndex = ($i + ($shift * $power)) % $count;\n      \
    \      $newArr[$newIndex] = $alpha[$i];\n        }\n        return $newArr;\n\
    \    }\n    // Change the array to use lowercase\n    for ($i = 0; $i < count($alphabet);\
    \ $i++) {\n        $alphabet[$i] = strtolower($alphabet[$i]);\n    }\n    // Shift\
    \ the alphabet as needed\n    $newAlphabet = shiftAlphabet($alphabet, $shift,\
    \ $power);\n    // Walk through the string, converting each letter to the new\
    \ version\n    for ($i = 0; $i < strlen($s); $i++) {\n        $char = $s[$i];\n\
    \        if (ctype_alpha($char)) {\n            $char = strtolower($char);\n \
    \           $index = array_search($char, $alphabet);\n            $encrypted .=\
    \ $newAlphabet[$index];\n        } else {\n            $encrypted .= $char;\n\
    \        }\n    }\n    return $encrypted;\n}\n\necho encrypt('hi');\necho encrypt('asdfghjkl');\n\
    echo encrypt('gf');\necho encrypt('et');\necho encrypt('aB');\necho encrypt('5aB');",
  "  \t\n}\n", "    $arr = str_split($s);\n    $newArr = [];\n    foreach ($arr as\
    \ $k => $v) {\n        $n = ord($v) + 2;\n        if ($n > 122) {\n          \
    \  $n = 96 + ($n - 122);\n        }\n        $newArr[] = chr($n);\n    }\n   \
    \ return implode('', $newArr);\n}\n", "\t\n\t$alpha = array('a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z');\n\t\n\t$len = strlen($s);\n\t\n\t$sub = array();\n\
    \t\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t\n\t\t$sub[] = $s[$i];\n\t\t\n\t}\n\
    \t\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t\n\t\t$sub[$i] = $alpha[(array_search($sub[$i],\
    \ $alpha) + 2) % 26];\n\t\t\n\t}\n\t\n\t$sub = implode($sub);\n\t\n\treturn $sub;\n\
    \t\n}\necho encrypt('hi');\n", "    $x = \"\";\n    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    $letter_count = strlen($alphabet);\n    $s_length = strlen($s);\n    for\
    \ ($i = 0; $i < $s_length; $i++) {\n        for ($j = 0; $j < $letter_count; $j++)\
    \ {\n            if ($s[$i] == $alphabet[$j]) {\n                $x .= $alphabet[($j\
    \ + 2) * 2];\n            }\n        }\n    }\n    return $x;\n}", "\t$alpha =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n\t$result = '';\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\t$index = strpos($alpha, $s[$i]);\n\t\t$result .= $alpha[($index\
    \ + 2) % 26];\n\t}\n\treturn $result;\n}\n", "\t$len = strlen($s);\n\t$arr = str_split($s);\n\
    \t$new_str = \"\";\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$new_char = chr(ord($arr[$i])\
    \ + 2*2);\n\t\t$new_str .= $new_char;\n\t}\n\treturn $new_str;\n}\necho encrypt('hi');\n\
    echo encrypt('asdfghjkl');\necho encrypt('gf');\necho encrypt('et');", "    $s\
    \ = strtolower($s);\n    $new = \"\";\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        $new .= chr(ord($s[$i]) + 2 * 2);\n    }\n    return $new;\n}", " \
    \ $lower = 'abcdefghijklmnopqrstuvwxyz';\n  $upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \  $e = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $e .= $s[$i] ^ $s[$i\
    \ + 1];\n  }\n  return $e;\n}\n\necho encrypt('hi');", "\t\n\t$l=strlen($s);\n\
    \t$r='';\n\t\n\tfor($i=0;$i<$l;$i++) {\n\t\t$o=ord($s[$i]);\n\t\tif($o<97) {\n\
    \t\t\t$r.=$s[$i];\n\t\t} else {\n\t\t\t$o=($o+2*2)%123;\n\t\t\tif($o<97) {\n\t\
    \t\t\t$o+=97;\n\t\t\t}\n\t\t\t$r.=chr($o);\n\t\t}\n\t}\n\t\n\treturn $r;\n}\n",
  "    $str = 'abcdefghijklmnopqrstuvwxyz';\n    $a = str_split($str);\n    $b = str_split($s);\n\
    \    $out = '';\n    foreach ($b as $key => $value) {\n        $index = array_search($value,\
    \ $a);\n        if($index+2 > 25) {\n            $out .= $a[($index+2)-26];\n\
    \        } else {\n            $out .= $a[$index+2];\n        }\n    }\n    return\
    \ $out;\n}\n", "\t$alp = array_merge(range('a', 'z'), range('a', 'z'));\n\t$enc\
    \ = array();\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\tif ($s[$i] == 'a' ||\
    \ $s[$i] == 'e' || $s[$i] == 'i' || $s[$i] == 'o' || $s[$i] == 'u') {\n\t\t\t\
    $enc[] = $alp[$i + 4];\n\t\t} else {\n\t\t\t$enc[] = $alp[$i + 2];\n\t\t}\n\t\
    }\n\treturn implode('', $enc);\n}\n$str = 'hi';\necho encrypt($str) . \"\\n\"\
    ;\n$str = 'asdfghjkl';\necho encrypt($str) . \"\\n\";\n$str = 'gf';\necho encrypt($str)\
    \ . \"\\n\";\n$str = 'et';\necho encrypt($str) . \"\\n\";", "    $s = strtolower($s);\n\
    \    $s = str_split($s);\n    $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \    $return = array();\n    foreach ($s as $char) {\n        $val = array_search($char,\
    \ $alphabet);\n        $newChar = $alphabet[$val + 8];\n        array_push($return,\
    \ $newChar);\n    }\n    return implode($return);\n}", "  $split = str_split($s);\n\
    \  $res = [];\n  foreach ($split as $letter) {\n    $code = ord($letter);\n  \
    \  $code = $code + (2 * 2);\n    if ($code > 122) {\n      $code = $code - 26;\n\
    \    }\n    $char = chr($code);\n    array_push($res, $char);\n  }\n  return implode($res);\n\
    }\n", "\t$encrypted = '';\n\t$alpha = 'abcdefghijklmnopqrstuvwxyz';\n\t$alphaLen\
    \ = strlen($alpha);\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alpha,\
    \ $s[$i]);\n\t\t$new_index = ($index + ($index * 2)) % $alphaLen;\n\t\t$encrypted\
    \ .= $alpha[$new_index];\n\t}\n\treturn $encrypted;\n}\n", "\t// Write your code\
    \ here\n\t// Use ord and chr to convert between char and ascii\n\t// i.e. ord('a')\
    \ returns 97\n\t// and chr(97) returns 'a'\n\t// You can use for loops and conditionals\
    \ to do this \n\t$length = strlen($s);\n\t$result = '';\n\tfor ($i = 0; $i < $length;\
    \ $i++) {\n\t\tif (ord($s[$i]) > 109) {\n\t\t\t$result .= chr(ord($s[$i]) + 20);\n\
    \t\t} else if (ord($s[$i]) > 100) {\n\t\t\t$result .= chr(ord($s[$i]) + 18);\n\
    \t\t} else if (ord($s[$i]) > 76) {\n\t\t\t$result .= chr(ord($s[$i]) + 20);\n\t\
    \t} else if (ord($s[$i]) > 68) {\n\t\t\t$result .= chr(ord($s[$i]) + 18);\n\t\t\
    } else if (ord($s[$i]) > 43) {\n\t\t\t$result .= chr(ord($s[$i]) + 20);\n\t\t\
    } else if (ord($s[$i]) > 35) {\n\t\t\t$result .= chr(ord($s[$i]) + 18);\n\t\t\
    } else if (ord($s[$i]) > 11) {\n\t\t\t$result .= chr(ord($s[$i]) + 20);\n\t\t\
    } else if (ord($s[$i]) > 3) {\n\t\t\t$result .= chr(ord($s[$i]) + 18);\n\t\t}\
    \ else {\n\t\t\t$result .= chr(ord($s[$i]) + 1);\n\t\t}\n\t}\n\treturn $result;\n\
    }\necho encrypt('hi') . PHP_EOL;\necho encrypt('asdfghjkl') . PHP_EOL;\necho encrypt('gf')\
    \ . PHP_EOL;\necho encrypt('et') . PHP_EOL;", "    $a = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \    $b = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $b[] = $a[(array_search($s[$i],\
    \ $a) + 4) % 26];\n    }\n    return implode($b);\n}\n", "\treturn $s;\n}\n\n\
    $s = 'hi';\nvar_dump(encrypt($s) === 'lm');\n$s = 'asdfghjkl';\nvar_dump(encrypt($s)\
    \ === 'ewhjklnop');\n$s = 'gf';\nvar_dump(encrypt($s) === 'kj');\n$s = 'et';\n\
    var_dump(encrypt($s) === 'ix');", "    $arr = str_split($s);\n    $length = count($arr);\n\
    \    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $alphabet_arr = str_split($alphabet);\n\
    \    $new_word = \"\";\n    $new_letter = \"\";\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $letter = $arr[$i];\n        $index = array_search($letter,\
    \ $alphabet_arr);\n        $new_index = $index + 2;\n        if ($new_index >\
    \ 25) {\n            $new_index = $new_index - 26;\n        }\n        $new_letter\
    \ = $alphabet_arr[$new_index];\n        $new_word .= $new_letter;\n    }\n   \
    \ return $new_word;\n}", "\n}\n", "    $arr = range('a', 'z');\n    $arr2 = [];\n\
    \    $newString = '';\n    foreach ($arr as $key => $value) {\n        if ($key\
    \ >= 2) {\n            $arr2[$key] = $value;\n        }\n    }\n    foreach ($arr\
    \ as $key => $value) {\n        if ($key < 2) {\n            $arr2[$key] = $value;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        for ($j\
    \ = 0; $j < count($arr); $j++) {\n            if ($s[$i] == $arr[$j]) {\n    \
    \            $newString .= $arr2[$j];\n            }\n        }\n    }\n    return\
    \ $newString;\n}", "\t$s = strtolower($s);\n\t$s = str_split($s);\n\tforeach ($s\
    \ as $letter) {\n\t\tif (ctype_alpha($letter)) {\n\t\t\tif ($letter == 'y') {\n\
    \t\t\t\t$letter = 'a';\n\t\t\t} elseif ($letter == 'z') {\n\t\t\t\t$letter = 'b';\n\
    \t\t\t} else {\n\t\t\t\t$letter = ++$letter;\n\t\t\t\t$letter = ++$letter;\n\t\
    \t\t}\n\t\t}\n\t\t$result .= $letter;\n\t}\n\treturn $result;\n}\necho encrypt('gf')\
    \ . PHP_EOL;\necho encrypt('asdfghjkl') . PHP_EOL;\necho encrypt('hello world')\
    \ . PHP_EOL;", "  // Set variables\n  $int = 0;\n  $encrypt = '';\n  $alpha =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \  // Loop through array\n  for ($i = 0; $i < strlen($s); $i++) {\n    // Set\
    \ word to lowercase\n    $s = strtolower($s);\n    // Loop through array\n   \
    \ for ($j = 0; $j < count($alpha); $j++) {\n      // Compare each letter of input\
    \ string to the alphabet array\n      if ($s[$i] == $alpha[$j]) {\n        //\
    \ If letters match, add letter in 2 places to the string\n        $encrypt .=\
    \ $alpha[$j + 2];\n      }\n    }\n  }\n  // Return encrypted string\n  return\
    \ $encrypt;\n}", "  // set up a fixed array of the alphabet with their index positions\n\
    \  $alphabet = [\n    'a' => 1,\n    'b' => 2,\n    'c' => 3,\n    'd' => 4,\n\
    \    'e' => 5,\n    'f' => 6,\n    'g' => 7,\n    'h' => 8,\n    'i' => 9,\n \
    \   'j' => 10,\n    'k' => 11,\n    'l' => 12,\n    'm' => 13,\n    'n' => 14,\n\
    \    'o' => 15,\n    'p' => 16,\n    'q' => 17,\n    'r' => 18,\n    's' => 19,\n\
    \    't' => 20,\n    'u' => 21,\n    'v' => 22,\n    'w' => 23,\n    'x' => 24,\n\
    \    'y' => 25,\n    'z' => 26\n  ];\n  // establish an empty string to return\n\
    \  $returnString = '';\n  // iterate through the input string\n  for ($i = 0;\
    \ $i < strlen($s); $i++) {\n    // if the current character's index exists in\
    \ the alphabet\n    if (isset($alphabet[$s[$i]])) {\n      // set a temporary\
    \ placeholder for the index of the current character\n      $current = $alphabet[$s[$i]];\n\
    \      // iterate through the alphabet and\n      // check if the current character's\
    \ index is within the current alphabet iteration \n      foreach ($alphabet as\
    \ $letter => $index) {\n        // if the current character's index is not within\
    \ the current alphabet iteration\n        if ($current + 4 > 26) {\n         \
    \ // if the current character's index is equal to the current alphabet iteration\n\
    \          if ($current - 22 == $index) {\n            // add the current alphabet\
    \ letter to the return string\n            $returnString .= $letter;\n       \
    \   }\n        } else {\n          // if the current character's index is equal\
    \ to the current alphabet iteration\n          if ($current + 4 == $index) {\n\
    \            // add the current alphabet letter to the return string\n       \
    \     $returnString .=", "  $len = strlen($s);\n  $r = \"\";\n  for ($i = 0; $i\
    \ < $len; $i++) {\n    $c = ord($s[$i]);\n    $n = ord('z') - $c;\n    if ($n\
    \ >= 3) {\n      $c += 3;\n    } else {\n      $c += (3 - 26);\n    }\n    $r\
    \ .= chr($c);\n  }\n  return $r;\n}\n\n$s = \"asdfghjkl\";\n$r = encrypt($s);\n\
    echo $r . \"\\n\";\n", "    $letters = \"abcdefghijklmnopqrstuvwxyz\";\n    $newString\
    \ = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $newString .= $letters[(strpos($letters,\
    \ $s[$i]) + 2) * 2];\n    }\n    return $newString;\n}", "    $encrypt = \"\"\
    ;\n    $str_length = strlen($s);\n    for ($i = 0; $i < $str_length; $i++) {\n\
    \        if ($s[$i] == \"a\") {\n            $encrypt .= \"c\";\n        } else\
    \ if ($s[$i] == \"b\") {\n            $encrypt .= \"d\";\n        } else if ($s[$i]\
    \ == \"c\") {\n            $encrypt .= \"e\";\n        } else if ($s[$i] == \"\
    d\") {\n            $encrypt .= \"f\";\n        } else if ($s[$i] == \"e\") {\n\
    \            $encrypt .= \"g\";\n        } else if ($s[$i] == \"f\") {\n     \
    \       $encrypt .= \"h\";\n        } else if ($s[$i] == \"g\") {\n          \
    \  $encrypt .= \"i\";\n        } else if ($s[$i] == \"h\") {\n            $encrypt\
    \ .= \"j\";\n        } else if ($s[$i] == \"i\") {\n            $encrypt .= \"\
    k\";\n        } else if ($s[$i] == \"j\") {\n            $encrypt .= \"l\";\n\
    \        } else if ($s[$i] == \"k\") {\n            $encrypt .= \"m\";\n     \
    \   } else if ($s[$i] == \"l\") {\n            $encrypt .= \"n\";\n        } else\
    \ if ($s[$i] == \"m\") {\n            $encrypt .= \"o\";\n        } else if ($s[$i]\
    \ == \"n\") {\n            $encrypt .= \"p\";\n        } else if ($s[$i] == \"\
    o\") {\n            $encrypt .= \"q\";\n        } else if ($s[$i] == \"p\") {\n\
    \            $encrypt .= \"r\";\n        } else if ($s[$i] == \"q\") {\n     \
    \       $encrypt .= \"s\";\n        } else if ($s[$i] == \"r\") {\n          \
    \  $encrypt .= \"t\";\n        } else if ($", "  $s = strtolower($s);\n  $s =\
    \ str_split($s);\n  $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \  $keys = array();\n  $values = array();\n  foreach ($s as $letter) {\n  \tforeach\
    \ ($alphabet as $key => $value) {\n  \t\tif ($letter == $value) {\n  \t\t\t$key\
    \ = (($key+2)*2);\n  \t\t\t$key = $key > 25 ? $key-26 : $key;\n  \t\t\t$keys[]\
    \ = $key;\n  \t\t\t$values[] = $alphabet[$key];\n  \t\t}\n  \t}\n  }\n  return\
    \ implode($values);\n}\n\necho encrypt('hi');\necho \"\\n\";\necho encrypt('asdfghjkl');\n\
    echo \"\\n\";\necho encrypt('gf');\necho \"\\n\";\necho encrypt('et');\necho \"\
    \\n\";", "    $index = 0;\n    $result = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = ord($s[$i]) + (2 * 2);\n        $result .= chr($index);\n\
    \    }\n    return $result;\n}\n$string = 'hi';\necho encrypt($string);\n", "\t\
    $a = 'abcdefghijklmnopqrstuvwxyz';\n\t$b = 'cdefghijklmnopqrstuvwxyzab';\n\treturn\
    \ strtr($s, $a, $b);\n}\n\necho encrypt('hi') . '<br>';\necho encrypt('asdfghjkl')\
    \ . '<br>';\necho encrypt('gf') . '<br>';\necho encrypt('et') . '<br>';", "  $num\
    \ = \"\";\n  for ($i = 0; $i < strlen($s); $i++) {\n    $l = ord($s[$i])+4;\n\
    \    $num .= chr($l);\n  }\n  return $num;\n}\necho encrypt('hi');\necho encrypt('asdfghjkl');\n\
    echo encrypt('gf');\necho encrypt('et');\n", "\t$strToArr = str_split($s);\n\t\
    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\t$alphabetArr = str_split($alphabet);\n\
    \t$alphaArrLength = count($alphabetArr);\n\t$result = '';\n\tfor ($i = 0; $i <\
    \ count($strToArr); $i++) {\n\t\tfor ($j = 0; $j < $alphaArrLength; $j++) {\n\t\
    \t\tif ($strToArr[$i] == $alphabetArr[$j]) {\n\t\t\t\t$k = ($j + ($j + 2) * 2)\
    \ % $alphaArrLength;\n\t\t\t\t$result .= $alphabetArr[$k];\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn $result;\n}\n", "  $newS = array();\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $current = $s[$i];\n    $newChar = chr(ord($current) + 4);\n  \
    \  array_push($newS, $newChar);\n  }\n  return implode($newS);\n}\necho encrypt('hi');",
  "  $enc = \"\";\n  $size = strlen($s);\n  for ($i = 0; $i < $size; $i++) {\n   \
    \ $enc .= chr(ord($s[$i]) + $i * 2);\n  }\n  return $enc;\n}", "    $s = strtolower($s);\n\
    \    $en = str_split('abcdefghijklmnopqrstuvwxyz');\n    $de = str_split('cdefghijklmnopqrstuvwxyzab');\n\
    \    $r = '';\n    foreach (str_split($s) as $l) {\n        $r .= $en[array_search($l,\
    \ $de)];\n    }\n    return $r;\n}\necho encrypt('hi');", "\t$s = strtolower($s);\n\
    \t$t = '';\n\t$arr = str_split($s);\n\tforeach ($arr as $i) {\n\t\t$i = ord($i);\n\
    \t\tif ($i >= 97 && $i <= 109) {\n\t\t\t$t .= chr($i + 10);\n\t\t} else if ($i\
    \ >= 110 && $i <= 122) {\n\t\t\t$t .= chr($i - 10);\n\t\t} else {\n\t\t\t$t .=\
    \ $i;\n\t\t}\n\t}\n\treturn $t;\n}\necho encrypt('hi');\necho \"\\n\";\necho encrypt('asdfghjkl');\n\
    echo \"\\n\";\necho encrypt('gf');\necho \"\\n\";\necho encrypt('et');\necho \"\
    \\n\";\n", "\t// $s is string\n\t// $result is a string\n\t$result = '';\n\t$invalid\
    \ = array('a', 'b', 'c', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z');\n\t// for each char in $s\n\tfor ($i = 0; $i\
    \ < strlen($s); $i++) {\n\t\t$char = $s[$i];\n\t\t// if char is valid\n\t\tif\
    \ (in_array($char, $invalid)) {\n\t\t\t// if char is 'c'\n\t\t\tif ($char == 'c')\
    \ {\n\t\t\t\t// result is result + 'a'\n\t\t\t\t$result = $result + 'a';\n\t\t\
    \t} elseif ($char == 'o') {\n\t\t\t\t$result = $result + 'm';\n\t\t\t} elseif\
    \ ($char == 'p') {\n\t\t\t\t$result = $result + 'n';\n\t\t\t} elseif ($char ==\
    \ 'q') {\n\t\t\t\t$result = $result + 'o';\n\t\t\t} elseif ($char == 'r') {\n\t\
    \t\t\t$result = $result + 'p';\n\t\t\t} elseif ($char == 's') {\n\t\t\t\t$result\
    \ = $result + 'q';\n\t\t\t} elseif ($char == 't') {\n\t\t\t\t$result = $result\
    \ + 'r';\n\t\t\t} elseif ($char == 'u') {\n\t\t\t\t$result = $result + 's';\n\t\
    \t\t} elseif ($char == 'v') {\n\t\t\t\t$result = $result + 't';\n\t\t\t} elseif\
    \ ($char == 'w') {\n\t\t\t\t$result = $result + 'u';\n\t\t\t} elseif ($char ==\
    \ 'x') {\n\t\t\t\t$result = $result + 'v';\n\t\t\t} elseif ($char == 'y') {\n\t\
    \t\t\t$result = $result + 'w';", "\t$alphabet = array('a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z');\n\t$newString = \"\";\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\t$letter = substr($s, $i, 1);\n\t\tfor ($j = 0; $j < count($alphabet);\
    \ $j++) {\n\t\t\tif ($letter == $alphabet[$j]) {\n\t\t\t\t$newString .= $alphabet[$j\
    \ + 2];\n\t\t\t}\n\t\t}\n\t}\n\treturn $newString;\n}\necho encrypt('hi');\necho\
    \ encrypt('asdfghjkl');\necho encrypt('gf');\necho encrypt('et');", "  // Write\
    \ your code here\n  $str = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    if\
    \ ($s[$i] == 'z') {\n      $str .= 'b';\n    } else if ($s[$i] == 'y') {\n   \
    \   $str .= 'a';\n    } else {\n      $str .= chr(ord($s[$i]) + 2);\n    }\n \
    \ }\n  return $str;\n}\n", "    //base case if our string is empty return ''\n\
    \    if ($s == '') {\n        return '';\n    }\n    //otherwise call the encrypt\
    \ function recursively on the rest of the string\n    //in each recursive call\
    \ add the encrypted character to the end of the string\n    return encrypt(substr($s,\
    \ 1)) . encryptChar(substr($s, 0, 1));\n}\n", "    return strtr($s, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'cdefghijklmnopqrstuvwxyzab');\n}\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl')\
    \ . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\necho\
    \ encrypt('abcdefghijklmnopqrstuvwxyz') . \"\\n\";", "  $arr1 = str_split($s);\n\
    \  $arr2 = [];\n  $new = \"\";\n  for ($i = 0; $i < count($arr1); $i++) {\n  \
    \  $code = ord($arr1[$i]);\n    if ($code >= ord('a') && $code <= ord('z')) {\n\
    \      $code += 2;\n      if ($code > ord('z')) {\n        $code -= 26;\n    \
    \  }\n    }\n    $new .= chr($code);\n  }\n  return $new;\n}\necho encrypt('hi')\
    \ . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf') . \"\\\
    n\";\necho encrypt('et') . \"\\n\";\necho \"\\n\";\n", "\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\t$ascii = ord($s[$i]);\n\t\tif ($ascii >= ord('a') && $ascii <=\
    \ ord('x')) {\n\t\t\t$ascii += 2;\n\t\t} else if ($ascii >= ord('y') && $ascii\
    \ <= ord('z')) {\n\t\t\t$ascii -= 24;\n\t\t}\n\t\t$encrypt[$i] = chr($ascii);\n\
    \t}\n\t$encrypt = implode('', $encrypt);\n\treturn $encrypt;\n}", '}', "    $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    $result = \"\";\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        $char = substr($s, $i, 1);\n        $j = strpos($alphabet,\
    \ $char);\n        $k = ($j - 2) % 26;\n        $encChar = substr($alphabet, $k,\
    \ 1);\n        $result .= $encChar;\n    }\n    return $result;\n}\n$input = \"\
    hi\";\n$encoded = encrypt($input);\necho $encoded;", "  $n = strlen($s);\n  $s_new\
    \ = \"\";\n  for ($i = 0; $i < $n; $i++) {\n    $s_new .= chr(ord($s[$i]) + 4);\n\
    \  }\n  return $s_new;\n}", "\t// your code here\n\t$alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\t$alpha2 = \"\";\n\tfor ($i = strlen($alpha) - 2; $i < strlen($alpha); $i++)\
    \ {\n\t\t$alpha2 .= $alpha[$i];\n\t}\n\tfor ($i = 0; $i < strlen($alpha) - 2;\
    \ $i++) {\n\t\t$alpha2 .= $alpha[$i];\n\t}\n\t$res = \"\";\n\tfor ($i = 0; $i\
    \ < strlen($s); $i++) {\n\t\t$res .= $alpha2[strpos($alpha, $s[$i])];\n\t}\n\t\
    return $res;\n}\n$s = \"asdfghjkl\";\necho encrypt($s);", "\t$chars = str_split($s);\n\
    \t$str = \"\";\n\tforeach ($chars as $char) {\n\t\t$i = ord($char) + 2;\n\t\t\
    $str .= chr($i);\n\t}\n\treturn $str;\n}\necho encrypt('hi') . \"<br>\";\necho\
    \ encrypt('asdfghjkl') . \"<br>\";\necho encrypt('gf') . \"<br>\";\necho encrypt('et')\
    \ . \"<br>\";", "\t$arr = [];\n\t$arr2 = [];\n\t$str = '';\n\t$characters = array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\tif ($s[$i] === 'z') {\n\t\t\t$arr[] = 'b';\n\t\t} else if ($s[$i]\
    \ === 'y') {\n\t\t\t$arr[] = 'a';\n\t\t} else {\n\t\t\tfor ($j = 0; $j < count($characters);\
    \ $j++) {\n\t\t\t\tif ($s[$i] === $characters[$j]) {\n\t\t\t\t\t$arr[] = $characters[$j\
    \ + 2];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn implode($arr);\n}\necho encrypt('hi');\n\
    echo \"<br>\";\necho encrypt('asdfghjkl');\necho \"<br>\";\necho encrypt('gf');\n\
    echo \"<br>\";\necho encrypt('et');\necho \"<br>\";\necho encrypt('hey');\necho\
    \ \"<br>\";\necho encrypt('tape');\necho \"<br>\";\necho encrypt('you');\necho\
    \ \"<br>\";\necho encrypt('xcv');\necho \"<br>\";\necho encrypt('z');\necho \"\
    <br>\";\necho encrypt('y');\necho \"<br>\";\necho encrypt('coffee');\necho \"\
    <br>\";\necho encrypt('abcdefghijklmnopqrstuvwxyz');\necho \"<br>\";\necho encrypt('zxy');\n\
    echo \"<br>\";\necho encrypt('chicken');\necho \"<br>\";\necho encrypt('gandalf');\n\
    echo \"<br>\";\necho encrypt('thanks');\necho \"<br>\";\necho encrypt('hates');\n\
    echo \"<br>\";\necho encrypt('united');\n", "}\n", "\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$s = strtolower($s);\n\t$s = str_split($s);\n\t$newString = array();\n\tfor\
    \ ($i = 0; $i < count($s); $i++) {\n\t\t$j = 0;\n\t\twhile ($s[$i] != $alphabet[$j])\
    \ {\n\t\t\t$j++;\n\t\t}\n\t\t$newString[$i] = $alphabet[($j + 2) % count($alphabet)];\n\
    \t}\n\t$newString = implode(\"\", $newString);\n\treturn $newString;\n}\necho\
    \ encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf')\
    \ . \"\\n\";\necho encrypt('et') . \"\\n\";", "\t$alphabet = range('a', 'z');\n\
    \t$encryptedString = '';\n\t$twoPlacesDown = range('a', 'z');\n\tfor ($i = 0;\
    \ $i < 26; $i++) {\n\t\t$twoPlacesDown[$i] = $alphabet[$i - 2];\n\t}\n\t$alphabet\
    \ = array_flip($alphabet);\n\t$twoPlacesDown = array_flip($twoPlacesDown);\n\t\
    for ($i = 0; $i < strlen($s); $i++) {\n\t\t$encryptedString .= $twoPlacesDown[$s[$i]];\n\
    \t}\n\treturn $encryptedString;\n}\n", "\t// Write code here\n}\n\n$encrypted\
    \ = encrypt('hi');\necho $encrypted . \"\\n\";\n$encrypted = encrypt('asdfghjkl');\n\
    echo $encrypted . \"\\n\";\n$encrypted = encrypt('gf');\necho $encrypted . \"\\\
    n\";\n$encrypted = encrypt('et');\necho $encrypted . \"\\n\";", "\t$encryptedString\
    \ = \"\";\n\t$encryptedChar = 0;\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t\
    $encryptedChar = ord($s[$i]) + (2 * 2);\n\t\tif ($encryptedChar > 122) {\n\t\t\
    \t$encryptedChar = $encryptedChar - 26;\n\t\t}\n\t\t$encryptedString .= chr($encryptedChar);\n\
    \t}\n\treturn $encryptedString;\n}", "\t$result = '';\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\tif ($s[$i] == 'z') {\n\t\t\t$result .= 'b';\n\t\t} else if ($s[$i]\
    \ == 'y') {\n\t\t\t$result .= 'a';\n\t\t} else {\n\t\t\t$result .= chr(ord($s[$i])\
    \ + 2);\n\t\t}\n\t}\n\treturn $result;\n}\n\n$h = 'hi';\n$as = 'asdfghjkl';\n\
    $g = 'gf';\n$e = 'et';\n$t = 'th';\n\necho encrypt($h) . \"\\n\";\necho encrypt($as)\
    \ . \"\\n\";\necho encrypt($g) . \"\\n\";\necho encrypt($e) . \"\\n\";\necho encrypt($t)\
    \ . \"\\n\";\n", "\t$s = strtolower($s);\n\t$s = str_split($s);\n\t$alphabet =\
    \ array(\n\t\t'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n\t);\n\t$final\
    \ = array();\n\tforeach ($s as $char) {\n\t\tif (in_array($char, $alphabet)) {\n\
    \t\t\t$key = array_search($char, $alphabet);\n\t\t\tif ($key >= 22) {\n\t\t\t\t\
    $key = $key - 23;\n\t\t\t} else {\n\t\t\t\t$key = $key + 4;\n\t\t\t}\n\t\t\t$final[]\
    \ = $alphabet[$key];\n\t\t} else {\n\t\t\t$final[] = $char;\n\t\t}\n\t}\n\treturn\
    \ implode($final);\n}", "  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  $len\
    \ = strlen($s);\n  $result = '';\n  for ($i = 0; $i < $len; $i++) {\n    $pos\
    \ = strpos($alphabet, $s[$i]);\n    $result .= $alphabet[($pos + 2) % 26];\n \
    \ }\n  return $result;\n}\n\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl')\
    \ . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\n",
  "    $s = strtolower($s);\n    $alpha = 'abcdefghijklmnopqrstuvwxyz';\n    $alphaArr\
    \ = str_split($alpha);\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $a = strpos($alpha, $s[$i]);\n        $encrypted .= $alphaArr[$a\
    \ + 2];\n    }\n    return $encrypted;\n}\necho encrypt('hi') . PHP_EOL;\necho\
    \ encrypt('asdfghjkl') . PHP_EOL;\necho encrypt('gf') . PHP_EOL;\necho encrypt('et')\
    \ . PHP_EOL;", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $alphabet_arr\
    \ = str_split($alphabet);\n    $s_arr = str_split($s);\n    $s_len = count($s_arr);\n\
    \    $result = \"\";\n    for ($i = 0; $i < $s_len; $i++) {\n        $s_letter\
    \ = $s_arr[$i];\n        $index = array_search($s_letter, $alphabet_arr);\n  \
    \      $new_index = ($index + 2 * 2) % 26;\n        $result .= $alphabet_arr[$new_index];\n\
    \    }\n    return $result;\n}", "  $alphabet = array_merge(range('a', 'c'), range('d',\
    \ 'f'), range('g', 'i'), range('j', 'l'), range('m', 'o'), range('p', 'r'), range('s',\
    \ 'u'), range('v', 'x'), range('y', 'z'));\n  $letters = str_split($s);\n  $res\
    \ = [];\n  foreach ($letters as $letter) {\n    $res[] = $alphabet[array_search($letter,\
    \ $alphabet) + 2 * 2];\n  }\n  return implode('', $res);\n}\n", "\t$arr = str_split($s);\n\
    \tforeach ($arr as $key => $value) {\n\t\tif ($arr[$key] == 'z') {\n\t\t\t$arr[$key]\
    \ = 'b';\n\t\t} elseif ($arr[$key] == 'y') {\n\t\t\t$arr[$key] = 'a';\n\t\t} else\
    \ {\n\t\t\t$arr[$key] = chr(ord($arr[$key]) + 2);\n\t\t}\n\t}\n\treturn implode('',\
    \ $arr);\n}\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\"\
    ;\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\n", "    $length\
    \ = strlen($s);\n    $encoded = array();\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $char = $s[$i];\n        $ascii = ord($char);\n        if ($ascii\
    \ >= 65 && $ascii <= 90) {\n            $encoded[$i] = chr(($ascii + 2*2) % 65\
    \ % 26 + 65);\n        } else if ($ascii >= 97 && $ascii <= 122) {\n         \
    \   $encoded[$i] = chr(($ascii + 2*2) % 97 % 26 + 97);\n        } else {\n   \
    \         $encoded[$i] = $char;\n        }\n    }\n    return implode($encoded);\n\
    }\n", "  $encrypted = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $encrypted\
    \ .= chr(ord($s[$i]) + 2*2);\n  }\n  return $encrypted;\n}\n\necho encrypt('hi');\n\
    echo \"\\n\";\necho encrypt('asdfghjkl');\necho \"\\n\";\necho encrypt('gf');\n\
    echo \"\\n\";\necho encrypt('et');\necho \"\\n\";", "    $s = strtolower($s);\n\
    \    $s = str_split($s);\n    $letters = range('a', 'z');\n    $letters = array_merge($letters,\
    \ $letters);\n    $encrypted = array();\n    foreach ($s as $l) {\n        $encrypted[]\
    \ = $letters[array_search($l, $letters) + 2];\n    }\n    return implode('', $encrypted);\n\
    }", "\t$arr=str_split($s);\n\t$newarr='';\n\tforeach ($arr as $value) {\n\t\t\
    $value+=2*2;\n\t\t$newarr.=chr($value);\n\t}\n\treturn $newarr;\n}\necho encrypt('hi');",
  "// START\n    $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $alphabetCount = count($alphabet);\n    $sLength = strlen($s);\n    $encryptedString\
    \ = '';\n    for ($i = 0; $i < $sLength; $i++) {\n        $c = substr($s, $i,\
    \ 1);\n        $cIndex = 0;\n        for ($j = 0; $j < $alphabetCount; $j++) {\n\
    \            if ($c == $alphabet[$j]) {\n                $cIndex = $j;\n     \
    \           break;\n            }\n        }\n        $cIndex2 = ($cIndex + 2\
    \ * 2) % $alphabetCount;\n        $encryptedString .= $alphabet[$cIndex2];\n \
    \   }\n    return $encryptedString;", "    $alphabet = range('a', 'z');\n    $new_alphabet\
    \ = [];\n    $key_arr = [];\n    $new_str = \"\";\n    for ($i = 0; $i < count($alphabet);\
    \ $i++) {\n        if ($i + 4 < count($alphabet)) {\n            $new_alphabet[$i]\
    \ = $alphabet[$i + 4];\n        } else {\n            $new_alphabet[$i] = $alphabet[$i\
    \ + 4 - count($alphabet)];\n        }\n    }\n    foreach ($s as $char) {\n  \
    \      $key_arr[] = array_search($char, $alphabet);\n    }\n    foreach ($key_arr\
    \ as $num) {\n        $new_str .= $new_alphabet[$num];\n    }\n    return $new_str;\n\
    }", "\t$result = '';\n\t$alpha = 'abcdefghijklmnopqrstuvwxyz';\n\t\n\tfor ($i\
    \ = 0; $i < strlen($s); $i++) {\n\t\t$result .= $alpha[strpos($alpha, $s[$i])\
    \ + (strpos($alpha, $s[$i]) >= 23 ? -24 : 2)];\n\t}\n\t\n\treturn $result;\n}\n",
  "  $result = \"\";\n  for ($i = 0; $i < strlen($s); $i++) {\n    $result .= str_rot13($s[$i]);\n\
    \  }\n  return $result;\n}\necho encrypt('gf');", "\t// your code here\n\t$str_arr\
    \ = str_split($s);\n\tforeach ($str_arr as $letter) {\n\t\t$num = ord($letter);\n\
    \t\tif ($num < 123 && $num > 96) {\n\t\t\tif ($num + 4 > 122) {\n\t\t\t\t$num\
    \ = $num - 22;\n\t\t\t} else {\n\t\t\t\t$num = $num + 4;\n\t\t\t}\n\t\t} elseif\
    \ ($num < 91 && $num > 64) {\n\t\t\tif ($num + 4 > 90) {\n\t\t\t\t$num = $num\
    \ - 22;\n\t\t\t} else {\n\t\t\t\t$num = $num + 4;\n\t\t\t}\n\t\t}\n\t\t$new_str\
    \ .= chr($num);\n\t}\n\treturn $new_str;\n}\n\necho encrypt('hi');\necho encrypt('asdfghjkl');\n\
    echo encrypt('gf');\necho encrypt('et');\n", "    $s = strtolower($s);\n    $str\
    \ = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $char = $s[$i];\n\
    \        $newChar = rotateChar($char);\n        $str .= $newChar;\n    }\n   \
    \ return $str;\n}", "    $alphabet = range('a', 'z');\n    $encrypted = \"\";\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        $oldChar = $s[$i];\n     \
    \   $oldIndex = array_search($oldChar, $alphabet);\n        $newIndex = $oldIndex\
    \ + (2 * 2);\n        $newChar = $alphabet[$newIndex];\n        $encrypted .=\
    \ $newChar;\n    }\n    return $encrypted;\n}", "  $letters = array_flip(range('a',\
    \ 'z'));\n  $l2 = array_flip(range('c', 'z'));\n  $l3 = array_flip(range('e',\
    \ 'z'));\n  $l4 = array_flip(range('g', 'z'));\n  $l5 = array_flip(range('i',\
    \ 'z'));\n  $l6 = array_flip(range('k', 'z'));\n  $l7 = array_flip(range('m',\
    \ 'z'));\n  $l8 = array_flip(range('o', 'z'));\n  $l9 = array_flip(range('q',\
    \ 'z'));\n  $l10 = array_flip(range('s', 'z'));\n  $l11 = array_flip(range('u',\
    \ 'z'));\n  $l12 = array_flip(range('w', 'z'));\n  $l13 = array_flip(range('y',\
    \ 'z'));\n  $l14 = array_flip(range('a', 'b'));\n  $l15 = array_flip(range('c',\
    \ 'd'));\n  $l16 = array_flip(range('e', 'f'));\n  $l17 = array_flip(range('g',\
    \ 'h'));\n  $l18 = array_flip(range('i', 'j'));\n  $l19 = array_flip(range('k',\
    \ 'l'));\n  $l20 = array_flip(range('m', 'n'));\n  $l21 = array_flip(range('o',\
    \ 'p'));\n  $l22 = array_flip(range('q', 'r'));\n  $l23 = array_flip(range('s',\
    \ 't'));\n  $l24 = array_flip(range('u', 'v'));\n  $l25 = array_flip(range('w',\
    \ 'x'));\n  $l26 = array_flip(range('y', 'z'));\n  $letter_array = [$l2, $l3,\
    \ $l4", "  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  $reArr = [];\n  $newStr\
    \ = '';\n  $arr = str_split($s);\n  $alphaArr = str_split($alphabet);\n  foreach\
    \ ($arr as $val) {\n    $reArr[] = array_search($val, $alphaArr);\n  }\n  foreach\
    \ ($reArr as $val) {\n    $val *= 2;\n    $val += 2;\n    $val %= 26;\n    $newStr\
    \ .= $alphaArr[$val];\n  }\n  return $newStr;\n}\necho encrypt('hi') . PHP_EOL;\n\
    echo encrypt('asdfghjkl') . PHP_EOL;\necho encrypt('gf') . PHP_EOL;\necho encrypt('et')\
    \ . PHP_EOL;", "\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\t$s = strtolower($s);\n\
    \t$s = str_split($s);\n\t$x = '';\n\tforeach ($s as $val) {\n\t\t$x .= $alphabet[(array_search($val,\
    \ str_split($alphabet)) + 4) % 26];\n\t}\n\treturn $x;\n}\necho encrypt('hi');\n\
    echo encrypt('asdfghjkl');\necho encrypt('gf');\necho encrypt('et');", "\t$sub\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n\t$sub2 = 'cdefghijklmnopqrstuvwxyzab';\n\t\
    $sub3 = 'efghijklmnopqrstuvwxyzabc';\n\t$sub4 = 'ghijklmnopqrstuvwxyzabcd';\n\t\
    $sub5 = 'ijklmnopqrstuvwxyzabcdef';\n\t$sub6 = 'klmnopqrstuvwxyzabcdefg';\n\t\
    $sub7 = 'mnopqrstuvwxyzabcdefghi';\n\t$sub8 = 'opqrstuvwxyzabcdefghijk';\n\t$sub9\
    \ = 'qrstuvwxyzabcdefghijklm';\n\t$sub10 = 'stuvwxyzabcdefghijklmno';\n\t$sub11\
    \ = 'uvwxyzabcdefghijklmnopq';\n\t$sub12 = 'wxyzabcdefghijklmnopqrs';\n\t$sub13\
    \ = 'xyzabcdefghijklmnopqrst';\n\t$sub14 = 'yzabcdefghijklmnopqrstu';\n\t$sub15\
    \ = 'zabcdefghijklmnopqrstuv';\n\t$sub16 = 'bcdefghijklmnopqrstuvwx';\n\t$sub17\
    \ = 'cdefghijklmnopqrstuvwxy';\n\t$sub18 = 'defghijklmnopqrstuvwxyz';\n\t$sub19\
    \ = 'efghijklmnopqrstuvwxyza';\n\t$sub20 = 'fghijklmnopqrstuvwxyzab';\n\t$sub21\
    \ = 'ghijklmnopqrstuvwxyzabc';\n\t$sub22 = 'hijklmnopqrstuvwxyzabcd';\n\t$sub23\
    \ = 'ijklmnopqrstuvwxyzabcde';\n\t$sub24 = 'jklmnopqrstuvwxyzabcdef';\n\t$sub25\
    \ = 'klmnop", "    $new_string = \"\";\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        $c = $s[$i];\n        if ($c >= 'w') {\n            $c = chr(ord($c)\
    \ - 22);\n        } else if ($c >= 'u') {\n            $c = chr(ord($c) - 20);\n\
    \        } else if ($c >= 's') {\n            $c = chr(ord($c) - 18);\n      \
    \  } else if ($c >= 'q') {\n            $c = chr(ord($c) - 16);\n        } else\
    \ if ($c >= 'o') {\n            $c = chr(ord($c) - 14);\n        } else if ($c\
    \ >= 'm') {\n            $c = chr(ord($c) - 12);\n        } else if ($c >= 'k')\
    \ {\n            $c = chr(ord($c) - 10);\n        } else if ($c >= 'i') {\n  \
    \          $c = chr(ord($c) - 8);\n        } else if ($c >= 'g') {\n         \
    \   $c = chr(ord($c) - 6);\n        } else if ($c >= 'e') {\n            $c =\
    \ chr(ord($c) - 4);\n        } else if ($c >= 'c') {\n            $c = chr(ord($c)\
    \ - 2);\n        } else if ($c >= 'a') {\n            $c = chr(ord($c) + 26 -\
    \ 2);\n        } else {\n            $c = chr(ord($c) + 26 - 4);\n        }\n\
    \        $new_string .= $c;\n    }\n    return $new_string;\n}\necho encrypt('hi')\
    \ . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf') . \"\\\
    n\";\necho encrypt('et') . \"\\n\";\necho encrypt('hi there') . \"\\n\";\necho\
    \ encrypt('abcdefghijklmnopqrstuvwxyz') . \"\\n\";\necho encrypt('abcdefghijklmnopqrstuvwxyz\
    \ abc", "    $c = '';\n    $arr = range('a', 'z');\n    $arr2 = array_reverse($arr);\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        $c .= array_shift($arr2);\n\
    \        $arr2[] = $c[$i];\n    }\n    $c = str_split($c);\n    $e = '';\n   \
    \ for ($i = 0; $i < strlen($s); $i++) {\n        $e .= $c[array_search($s[$i],\
    \ $arr)];\n    }\n    return $e;\n}\n\necho encrypt('gf') . \"\\n\";", "    $a\
    \ = str_split($s);\n    foreach ($a as $key => $value) {\n        if ($value ==\
    \ 'z') {\n            $a[$key] = 'b';\n        } elseif ($value == 'y') {\n  \
    \          $a[$key] = 'a';\n        } else {\n            $a[$key] = ++$value;\n\
    \            $a[$key] = ++$value;\n        }\n    }\n    return join($a);\n}\n\
    echo encrypt('hi');\necho \"\\n\";\necho encrypt('asdfghjkl');\necho \"\\n\";\n\
    echo encrypt('gf');\necho \"\\n\";\necho encrypt('et');\necho \"\\n\";", "  $alp\
    \ = range('a', 'z');\n  $len = count($alp);\n  $s = str_split($s);\n  $e = [];\n\
    \  foreach ($s as $c) {\n    $offset = array_search($c, $alp);\n    $newpos =\
    \ ($offset + 2) * 2;\n    $e[] = $alp[$newpos % $len];\n  }\n  return implode('',\
    \ $e);\n}\n", "  // Your code here\n}\n", "\t$encryptedString = \"\";\n\t$characterArray\
    \ = str_split($s);\n\tforeach ($characterArray as $character) {\n\t\tif (strcmp($character,\
    \ \"z\") <= 0 && strcmp($character, \"x\") >= 0) {\n\t\t\t$encryptedString .=\
    \ chr(ord($character) + 2);\n\t\t} else if (strcmp($character, \"x\") < 0) {\n\
    \t\t\t$encryptedString .= chr(ord($character) + 24);\n\t\t} else if (strcmp($character,\
    \ \"z\") > 0) {\n\t\t\t$encryptedString .= chr(ord($character) - 24);\n\t\t}\n\
    \t}\n\treturn $encryptedString;\n}\necho encrypt('hi') . \"<br>\";\necho encrypt('asdfghjkl')\
    \ . \"<br>\";\necho encrypt('gf') . \"<br>\";\necho encrypt('et') . \"<br>\";",
  "\t$result = \"\";\n\t$rotation = 2 * 2;\n\t\n\t$s = strtolower($s);\n\t\n\t$dictionary\
    \ = range('a', 'z');\n\t\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$char =\
    \ $s[$i];\n\t\t$pos = array_search($char, $dictionary);\n\t\t\n\t\t$newPos = $pos\
    \ + $rotation;\n\t\t\n\t\tif ($newPos > 25) {\n\t\t\t$newPos = $newPos - 26;\n\
    \t\t}\n\t\t\n\t\t$result .= $dictionary[$newPos];\n\t}\n\t\n\treturn $result;\n\
    }\necho encrypt('hi') . PHP_EOL;\necho encrypt('asdfghjkl') . PHP_EOL;\necho encrypt('gf')\
    \ . PHP_EOL;\necho encrypt('et') . PHP_EOL;\necho encrypt('gaglol') . PHP_EOL;\n\
    echo encrypt('qwerty') . PHP_EOL;\necho encrypt('qwert') . PHP_EOL;\necho encrypt('hi')\
    \ . PHP_EOL;\necho encrypt('herro') . PHP_EOL;\necho encrypt('herro herro herro\
    \ herro herro herro herro herro herro herro herro herro herro herro herro herro\
    \ herro herro herro herro herro herro herro herro herro herro herro herro herro\
    \ herro herro herro herro herro herro herro herro herro herro herro herro herro\
    \ herro herro herro herro herro herro herro herro herro herro herro herro herro\
    \ herro herro herro herro herro herro herro herro herro herro herro herro herro\
    \ herro herro herro herro herro herro herro herro herro herro herro herro herro\
    \ herro herro herro herro herro herro herro herro herro herro herro herro herro\
    \ herro herro herro herro herro herro herro herro herro herro herro herro", "\t\
    $alph = \"abcdefghijklmnopqrstuvwxyz\";\n\t$alph_len = strlen($alph);\n\t$s_len\
    \ = strlen($s);\n\t$arr = str_split($s);\n\t$new_arr = array();\n\tfor ($i = 0;\
    \ $i < $s_len; $i++) {\n\t\t$c = $arr[$i];\n\t\t$index = stripos($alph, $c);\n\
    \t\t$index = $index + 2;\n\t\tif ($index >= $alph_len) {\n\t\t\t$index = $index\
    \ - $alph_len;\n\t\t}\n\t\t$new_arr[] = $alph[$index];\n\t}\n\treturn implode(\"\
    \", $new_arr);\n}\n$str = \"hi\";\necho encrypt($str);\necho \"\\n\";\n$str =\
    \ \"asdfghjkl\";\necho encrypt($str);\necho \"\\n\";\n$str = \"gf\";\necho encrypt($str);\n\
    echo \"\\n\";\n$str = \"et\";\necho encrypt($str);\necho \"\\n\";", "\t$a = str_split($s);\n\
    \t$a = array_map(function($a) {\n\t\tif (ord($a) == 113) {\n\t\t\treturn chr(97);\n\
    \t\t} else if (ord($a) == 114) {\n\t\t\treturn chr(98);\n\t\t} else {\n\t\t\t\
    return chr(ord($a) + 2);\n\t\t}\n\t}, $a);\n\treturn implode($a);\n}", "    $a\
    \ = str_split($s);\n    $n = count($a);\n    for ($i = 0; $i < $n; $i++) {\n \
    \       $a[$i] = chr(ord($a[$i]) + 4);\n    }\n    return implode($a);\n}", " \
    \   // Create an alphabet array\n    $alphabet = array('a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z');\n    // Create an empty result array to add the new\
    \ letters to\n    $result = array();\n    // Create an empty string to add the\
    \ new letters to\n    $string = '';\n    // Create a for loop\n    for ($i = 0;\
    \ $i < strlen($s); $i++) {\n        // Create a variable that returns the index\
    \ of the letter in the alphabet array\n        $index = array_search($s[$i], $alphabet);\n\
    \        // Add the letters in the result array according to the index location\n\
    \        array_push($result, $alphabet[$index + 4]);\n    }\n    // Join the letters\
    \ together in the string variable\n    $string = implode($result);\n    // Return\
    \ the string variable\n    return $string;\n}\n", "\t$res = \"\";\n\t$len = strlen($s);\n\
    \t$chars = str_split($s);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($chars[$i]\
    \ == 'z') {\n\t\t\t$res = $res.'b';\n\t\t} else if ($chars[$i] == 'y') {\n\t\t\
    \t$res = $res.'a';\n\t\t} else {\n\t\t\t$res = $res.chr(ord($chars[$i]) + 2);\n\
    \t\t}\n\t}\n\treturn $res;\n}", "  $res = \"\";\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    if ($s[$i] == 'z') {\n      $res .= 'b';\n    } else if ($s[$i]\
    \ == 'y') {\n      $res .= 'a';\n    } else {\n      $res .= chr(ord($s[$i]) +\
    \ 2 * 2);\n    }\n  }\n  return $res;\n}\n$str = \"asdfghjkl\";\necho encrypt($str);",
  "    $letters = str_split($s);\n    $offset = 2;\n    $cypher = array_map(function($x)\
    \ use ($offset) {\n        $asc = ord($x);\n        $new_asc = $asc + $offset;\n\
    \        if ( $new_asc > 122 ) {\n            $new_asc = 96 + ($new_asc - 122);\n\
    \        }\n        return chr($new_asc);\n    }, $letters);\n    return implode('',\
    \ $cypher);\n}\n", "    $encryptString = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (ord($s[$i]) > 85) {\n            $encryptString .= chr(ord($s[$i])\
    \ - 24);\n        } else {\n            $encryptString .= chr(ord($s[$i]) + 2);\n\
    \        }\n    }\n    return $encryptString;\n}", "  $result = '';\n  $alphabet\
    \ = range('a', 'z');\n  $string = str_split($s);\n  foreach ($string as $letter)\
    \ {\n    $letterIndex = array_search($letter, $alphabet);\n    $letterIndex +=\
    \ (2 * 2);\n    if ($letterIndex > 25) {\n      $letterIndex -= 26;\n    }\n \
    \   $result .= $alphabet[$letterIndex];\n  }\n  return $result;\n}\n", "\t$newStr\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$newStr .= chr(ord($s[$i])\
    \ + 4);\n\t}\n\treturn $newStr;\n}\necho encrypt('hi') . PHP_EOL;\necho encrypt('asdfghjkl')\
    \ . PHP_EOL;\necho encrypt('gf') . PHP_EOL;\necho encrypt('et') . PHP_EOL;\n",
  "\n}", "    $ascii=array();\n    $str_split=str_split($s);\n    $str_length=strlen($s);\n\
    \    $i=0;\n    while($i<$str_length){\n        $ascii[$i]=ord($str_split[$i]);\n\
    \        $i=$i+1;\n    }\n    $i=0;\n    while($i<$str_length){\n        if($ascii[$i]>=97\
    \ && $ascii[$i]<100){\n            $ascii[$i]=$ascii[$i]+24;\n        }\n    \
    \    elseif($ascii[$i]>=100 && $ascii[$i]<103){\n            $ascii[$i]=$ascii[$i]+22;\n\
    \        }\n        elseif($ascii[$i]>=103 && $ascii[$i]<=122){\n            $ascii[$i]=$ascii[$i]+20;\n\
    \        }\n        elseif($ascii[$i]>=65 && $ascii[$i]<68){\n            $ascii[$i]=$ascii[$i]+24;\n\
    \        }\n        elseif($ascii[$i]>=68 && $ascii[$i]<71){\n            $ascii[$i]=$ascii[$i]+22;\n\
    \        }\n        elseif($ascii[$i]>=71 && $ascii[$i]<=90){\n            $ascii[$i]=$ascii[$i]+20;\n\
    \        }\n        $i=$i+1;\n    }\n    $i=0;\n    while($i<$str_length){\n \
    \       $ascii[$i]=chr($ascii[$i]);\n        $i=$i+1;\n    }\n    $i=0;\n    $encrypt='';\n\
    \    while($i<$str_length){\n        $encrypt=$encrypt.$ascii[$i];\n        $i=$i+",
  "  $alphabet = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n  $s\
    \ = strtolower($s);\n  $s = str_split($s);\n  $encrypted = array();\n  foreach\
    \ ($s as $letter) {\n    $encrypted[] = $alphabet[(array_search($letter, $alphabet)\
    \ + 4) % 26];\n  }\n  return implode($encrypted);\n}\necho encrypt('HI'); // 'lm'\n\
    echo encrypt('asdfghjkl'); // 'ewhjklnop'\necho encrypt('gf'); // 'kj'\necho encrypt('et');\
    \ // 'ix'", "    $alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n    $encrypted\
    \ = '';\n    $s = strtolower($s);\n    $list = str_split($s);\n    foreach ($list\
    \ as $letter) {\n        $key = array_search($letter, $alphabet);\n        $newkey\
    \ = ($key * 2 + 2) % 26;\n        $encrypted .= $alphabet[$newkey];\n    }\n \
    \   return $encrypted;\n}\necho encrypt('hi');\necho \"<br />\";\necho encrypt('asdfghjkl');\n\
    echo \"<br />\";\necho encrypt('gf');\necho \"<br />\";\necho encrypt('et');\n\
    echo \"<br />\";\necho encrypt('etb');\necho \"<br />\";", "  $list = ['a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  $result = '';\n  for ($i = 0; $i\
    \ < strlen($s); $i++) {\n    $index = array_search($s[$i], $list);\n    $result\
    \ .= $list[($index + 4) % 26];\n  }\n  return $result;\n}", "\t$encryptedString\
    \ = '';\n\t$encryptedString = strtr($s, \"abcdefghijklmnopqrstuvwxyz\", \"cdefghijklmnopqrstuvwxyzab\"\
    );\n\treturn $encryptedString;\n}\necho encrypt('hi');\necho \"<br>\";\necho encrypt('asdfghjkl');\n\
    echo \"<br>\";\necho encrypt('gf');\necho \"<br>\";\necho encrypt('et');", "\n}",
  "  // Your code here\n  $encrypt = '';\n  $arr = str_split($s);\n  foreach ($arr\
    \ as $value) {\n    $encrypt = $encrypt.chr(ord($value)+2*2);\n  }\n  return $encrypt;\n\
    }\necho encrypt('hi'); // should return 'lm'\necho \"\\n\";\necho encrypt('asdfghjkl');\
    \ // should return 'ewhjklnop'\necho \"\\n\";\necho encrypt('gf'); // should return\
    \ 'kj'\necho \"\\n\";\necho encrypt('et'); // should return 'ix'\necho \"\\n\"\
    ;", "    $a = str_split('abcdefghijklmnopqrstuvwxyz');\n    $b = [];\n    foreach\
    \ ($a as $c) {\n        $b[] = chr(ord($c) + 4);\n    }\n    return strtr($s,\
    \ array_combine($a, $b));\n}\n\necho encrypt('hi') . PHP_EOL;\necho encrypt('asdfghjkl')\
    \ . PHP_EOL;\necho encrypt('gf') . PHP_EOL;\necho encrypt('et') . PHP_EOL;", " \
    \   $arr = str_split($s);\n    $offset = 2;\n    $new_arr = [];\n    foreach ($arr\
    \ as $v) {\n        $new_index = ord($v) + (2 * $offset);\n        $new_index\
    \ > ord('z') ? $new_index -= 26 : null;\n        $new_arr[] = chr($new_index);\n\
    \    }\n    return implode('', $new_arr);\n}", "  $i = 0;\n  $len = strlen($s);\n\
    \  $encrypted = '';\n  while ($i < $len) {\n    $new_char = $s[$i];\n    $j =\
    \ ord($new_char);\n    if ($j >= 97 && $j <= 109) {\n      $new_char = chr($j\
    \ + 20);\n    } else if ($j >= 110 && $j <= 122) {\n      $new_char = chr($j -\
    \ 20);\n    }\n    $encrypted .= $new_char;\n    $i++;\n  }\n  return $encrypted;\n\
    }\n", "    $enc_str = \"\";\n    $alph = \"abcdefghijklmnopqrstuvwxyz\";\n   \
    \ $alph_arr = str_split($alph);\n    $s_arr = str_split($s);\n    foreach ($s_arr\
    \ as $char) {\n        $alph_idx = array_search($char, $alph_arr);\n        $new_idx\
    \ = ($alph_idx + 4) % 26;\n        $enc_str .= $alph_arr[$new_idx];\n    }\n \
    \   return $enc_str;\n}\nprint encrypt('gf') . \"\\n\";\nprint encrypt('et') .\
    \ \"\\n\";", "    $str = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n    \
    \    $str .= chr(ord($s[$i]) + 2 * 2);\n    }\n    return $str;\n}\necho encrypt('gf');",
  "    $chars = str_split($s);\n    foreach ($chars as $i => $char) {\n        $ord\
    \ = ord($char);\n        if ($ord >= 65 && $ord <= 90) {\n            $chars[$i]\
    \ = chr(65 + (($ord - 65 + 1) % 26));\n        } else if ($ord >= 97 && $ord <=\
    \ 122) {\n            $chars[$i] = chr(97 + (($ord - 97 + 1) % 26));\n       \
    \ }\n    }\n    return implode($chars);\n}\n", "\t$alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \t$s = str_split($s);\n\t$str = '';\n\tforeach ($s as $char) {\n\t\t$idx = array_search($char,\
    \ $alphabet);\n\t\t$idx = $idx+4;\n\t\tif ($idx > 25) {\n\t\t\t$idx = $idx-26;\n\
    \t\t}\n\t\t$str .= $alphabet[$idx];\n\t}\n\treturn $str;\n}", "    $s = strtolower($s);\n\
    \    $toReturn = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $char\
    \ = substr($s, $i, 1);\n        if ($char == \" \") {\n            $toReturn .=\
    \ \" \";\n        } else {\n            $code = ord($char);\n            if ($code\
    \ >= 97 && $code <= 99) {\n                $code = 123 - (99 - $code);\n     \
    \       } else if ($code >= 120 && $code <= 122) {\n                $code = 97\
    \ + (122 - $code);\n            } else {\n                $code += 2;\n      \
    \      }\n            $toReturn .= chr($code);\n        }\n    }\n    return $toReturn;\n\
    }\n\necho \"Expected ewhjklnop, got: \" . encrypt('asdfghjkl') . \"\\n\";\necho\
    \ \"Expected kj, got: \" . encrypt('gf') . \"\\n\";\necho \"Expected ix, got:\
    \ \" . encrypt('et') . \"\\n\";\necho \"Expected lm, got: \" . encrypt('hi') .\
    \ \"\\n\";\necho \"Expected ewhjklnop, got: \" . encrypt('asdfghjkl') . \"\\n\"\
    ;\necho \"Expected ix, got: \" . encrypt('et') . \"\\n\";\necho \"Expected ix,\
    \ got: \" . encrypt('et') . \"\\n\";\necho \"Expected ix, got: \" . encrypt('et')\
    \ . \"\\n\";\necho \"Expected ix, got: \" . encrypt('et') . \"\\n\";\necho \"\
    Expected ix, got: \" . encrypt('et') . \"\\n\";\necho \"Expected ix, got: \" .\
    \ encrypt('et') . \"\\n\";\necho \"Expected ix, got: \" . encrypt('et') . \"\\\
    n\";\necho \"Expected ix, got: \" . encrypt('et') . \"\\n\";\necho \"Expected\
    \ ix, got: \" . encrypt('et') . \"\\n\";\necho \"Expected ix, got: \" . encrypt('et')\
    \ . \"\\n\";\necho \"Expected ix,", "  $encrypt = \"\";\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $letter = ord($s[$i]) + 2 * 2;\n    if ($letter > 122) {\n    \
    \  $letter = $letter - 26;\n    }\n    $encrypt .= chr($letter);\n  }\n  return\
    \ $encrypt;\n}\n\necho encrypt('hi');\necho \"\\n\";\necho encrypt('asdfghjkl');\n\
    echo \"\\n\";\necho encrypt('gf');\necho \"\\n\";\necho encrypt('et');\necho \"\
    \\n\";\n", "\n}\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\
    \\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";", "    $s\
    \ = strtolower($s);\n    $s = str_split($s);\n    $enc_s = '';\n    foreach ($s\
    \ as $char) {\n        if ($char >= 'a' && $char <= 'z') {\n            $enc_s\
    \ .= chr(ord($char) + 2);\n        } else {\n            $enc_s .= $char;\n  \
    \      }\n    }\n    return $enc_s;\n}\n", "\t$alph = range('a', 'z');\n\t$str\
    \ = [];\n\t$en = [];\n\t$enString = \"\";\n\tforeach (str_split($s) as $char)\
    \ {\n\t\t$str[] = array_search($char, $alph);\n\t}\n\tforeach ($str as $num) {\n\
    \t\t$en[] = $alph[$num + 2];\n\t}\n\tforeach ($en as $char) {\n\t\t$enString .=\
    \ $char;\n\t}\n\treturn $enString;\n}\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl')\
    \ . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";", "\t\
    $abc = 'abcdefghijklmnopqrstuvwxyz';\n\t$rot = substr($abc, 2) . substr($abc,\
    \ 0, 2);\n\t$enc = strtr($s, $abc, $rot);\n\treturn $enc;\n}\necho encrypt('hi');\n\
    echo encrypt('asdfghjkl');\necho encrypt('gf');\necho encrypt('et');\n", "\t$result\
    \ = \"\";\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$letter = $s[$i];\n\t\t\
    if (ord($letter) >= ord('a') && ord($letter) <= ord('z')) {\n\t\t\t$rotatedLetter\
    \ = ord($letter) + 2 * 2;\n\t\t\tif ($rotatedLetter > ord('z')) {\n\t\t\t\t$rotatedLetter\
    \ = ord('a') + ($rotatedLetter - ord('z') - 1);\n\t\t\t}\n\t\t\t$result .= chr($rotatedLetter);\n\
    \t\t} else {\n\t\t\t$result .= $letter;\n\t\t}\n\t}\n\treturn $result;\n}", "\t\
    $arr = str_split($s);\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\t$arr[$i]\
    \ = chr(ord($arr[$i]) + 2 * 2);\n\t}\n\treturn implode(\"\", $arr);\n}\necho encrypt('hi');\n\
    echo \"\\n\";\necho encrypt('asdfghjkl');\necho \"\\n\";\necho encrypt('gf');\n\
    echo \"\\n\";\necho encrypt('et');\necho \"\\n\";", "\t$c = array('a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\t$enc = '';\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\t$enc .= $c[array_search($s[$i], $c) + (4 * 2)];\n\t}\n\treturn\
    \ $enc;\n}\n\necho encrypt('hi') . PHP_EOL;\necho encrypt('asdfghjkl') . PHP_EOL;\n\
    echo encrypt('gf') . PHP_EOL;\necho encrypt('et') . PHP_EOL;\n", "\t$s = strtolower($s);\n\
    \t$array = str_split($s);\n\t$temp = '';\n\tforeach ($array as $letter) {\n\t\t\
    if ((ord($letter) >= 97) && (ord($letter) <= 100)) {\n\t\t\t$temp .= chr(ord($letter)\
    \ + 20);\n\t\t} else if ((ord($letter) >= 101) && (ord($letter) <= 122)) {\n\t\
    \t\t$temp .= chr(ord($letter) - 4);\n\t\t} else {\n\t\t\t$temp .= $letter;\n\t\
    \t}\n\t}\n\treturn $temp;\n}\n", "\t// You will want to first use str_split\n\t\
    // php.net/manual/en/function.str-split.php\n\t// to split your string into an\
    \ array of characters\n\t$arr = str_split($s);\n\t$result = \"\";\n\t//Next, you\
    \ will need to iterate through the array using \n\t//a 'for' loop. \n\t// Use\
    \ ord to find the ascii value of the character, \n\t// add 2, and use chr to convert\
    \ it back to a character.\n\t// php.net/manual/en/function.ord.php\n\t// php.net/manual/en/function.chr.php\n\
    \t// Finally, append the encrypted character to the result string.\n\tfor ($i\
    \ = 0; $i < count($arr); $i++) {\n\t\t$result .= chr(ord($arr[$i]) + 2);\n\t}\n\
    \treturn $result;\n}\n", "    // write your code here\n}", "  // your code here\n\
    }\n", "\t$alph = str_split('abcdefghijklmnopqrstuvwxyz');\n\t$s = str_split($s);\n\
    \t$encrypted = [];\n\tforeach ($s as $value) {\n\t\t$encrypted[] = $alph[(array_search($value,\
    \ $alph) + (2 * 2)) % 26];\n\t}\n\treturn implode('', $encrypted);\n}\n\necho\
    \ encrypt('hi');\necho PHP_EOL;\necho encrypt('asdfghjkl');\necho PHP_EOL;\necho\
    \ encrypt('gf');\necho PHP_EOL;\necho encrypt('et');\necho PHP_EOL;\n", "\t$alphabet\
    \ = str_split('abcdefghijklmnopqrstuvwxyz');\n\t$newString = '';\n\tfor ($i =\
    \ 0; $i < strlen($s); $i++) {\n\t\t$ind = array_search($s[$i], $alphabet);\n\t\
    \tif ($ind > 23) {\n\t\t\t$newString .= $alphabet[$ind - 24];\n\t\t} else {\n\t\
    \t\t$newString .= $alphabet[$ind + 2];\n\t\t}\n\t}\n\treturn $newString;\n}\n\n\
    echo encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf')\
    \ . \"\\n\";\necho encrypt('et') . \"\\n\";", "\t$alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \t$num = array_search($s[0], $alphabet);\n\t$shift = 4 + $num;\n\tif ($shift >=\
    \ 26) {\n\t\t$shift = $shift - 26;\n\t}\n\treturn $alphabet[$shift];\n}\necho\
    \ encrypt('hi');\necho '<br>';\necho encrypt('asdfghjkl');\necho '<br>';\necho\
    \ encrypt('gf');\necho '<br>';\necho encrypt('et');\necho '<br>';", "    $str\
    \ = '';\n    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    $alphabet_array =\
    \ str_split($alphabet);\n    $alphabet_length = strlen($alphabet);\n    $str_array\
    \ = str_split($s);\n    $str_length = strlen($s);\n    for ($i = 0; $i < $str_length;\
    \ $i++) {\n        $char = $str_array[$i];\n        for ($j = 0; $j < $alphabet_length;\
    \ $j++) {\n            if ($char == $alphabet_array[$j]) {\n                $str\
    \ = $str . $alphabet_array[($j + 2) % $alphabet_length];\n            }\n    \
    \    }\n    }\n    return $str;\n}\necho encrypt('hi');", "\t$alph = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\t$alphArr = str_split($alph);\n\t$sArr = str_split($s);\n\t$count = count($sArr);\n\
    \t$alphLen = count($alphArr);\n\t$encArr = array();\n\tfor ($i = 0; $i < $count;\
    \ $i++) {\n\t\t$index = array_search($sArr[$i], $alphArr);\n\t\tarray_push($encArr,\
    \ $alphArr[($index + (2 * $i)) % $alphLen]);\n\t}\n\treturn implode($encArr);\n\
    }\n\necho encrypt('hi') . PHP_EOL;\necho encrypt('asdfghjkl') . PHP_EOL;\necho\
    \ encrypt('gf') . PHP_EOL;\necho encrypt('et') . PHP_EOL;\n", "  $a = str_split($s);\n\
    \  $b = \"\";\n  foreach ($a as $c) {\n  \t$b .= ++$c;\n  }\n  return $b;\n}",
  "\t$str = '';\n\t$len = strlen($s);\n\t$letters = range('a', 'z');\n\tfor ($i =\
    \ 0; $i < $len; $i++) {\n\t\t$pos = array_search($s[$i], $letters);\n\t\t$str\
    \ .= $letters[($pos + ($i * 2)) % 26];\n\t}\n\treturn $str;\n}\n\n$tests = [\n\
    \t'hi' => 'lm',\n\t'asdfghjkl' => 'ewhjklnop',\n\t'gf' => 'kj',\n\t'et' => 'ix'\n\
    ];\n\nforeach ($tests as $input => $expected) {\n\t$output = encrypt($input);\n\
    \techo \"input: $input\\n\";\n\techo \"expected: $expected\\n\";\n\techo \"output:\
    \ $output\\n\";\n\tif ($expected === $output) {\n\t\techo \"TEST PASSED\\n\";\n\
    \t} else {\n\t\techo \"TEST FAILED\\n\";\n\t}\n\techo \"\\n\";\n}", "\n}\n\nassert(encrypt('hi')\
    \ === 'lm');\nassert(encrypt('asdfghjkl') === 'ewhjklnop');\nassert(encrypt('gf')\
    \ === 'kj');\nassert(encrypt('et') === 'ix');", "\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$result = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$currentChar = $s[$i];\n\
    \t\t$index = strpos($alphabet, $currentChar);\n\t\t$shiftedIndex = $index + 4;\n\
    \t\t$result .= $alphabet[$shiftedIndex];\n\t}\n\treturn $result;\n}\necho encrypt('hi')\
    \ . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf') . \"\\\
    n\";\necho encrypt('et') . \"\\n\";", "\t// return $s;\n\t$str = str_split($s);\n\
    \t$ret = \"\";\n\tforeach ($str as $key => $value) {\n\t\t$ret .= chr(ord($value)\
    \ + 2 * 2);\n\t}\n\treturn $ret;\n}\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl')\
    \ . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\n",
  "  $split = str_split($s);\n  $new_word = \"\";\n  foreach ($split as $char) {\n\
    \    $ord = ord($char);\n    $new_word .= chr($ord + 2);\n  }\n  return $new_word;\n\
    }\necho encrypt('hi') . PHP_EOL;\necho encrypt('asdfghjkl') . PHP_EOL;\necho encrypt('gf')\
    \ . PHP_EOL;\necho encrypt('et') . PHP_EOL;", "    $to_encrypt = $s;\n    $encrypt\
    \ = '';\n    for ($i = 0; $i < strlen($to_encrypt); $i++) {\n        $character\
    \ = $to_encrypt[$i];\n        $encrypt .= chr(ord($character) + 2 * 2);\n    }\n\
    \    return $encrypt;\n}\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl')\
    \ . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";", " \
    \  $encrypt = '';\n   for ($i = 0; $i < strlen($s); $i++) {\n      $ascii = ord($s[$i]);\n\
    \      $ascii = $ascii + 2;\n      $letter = chr($ascii);\n      $encrypt = $encrypt\
    \ . $letter;\n   }\n   return $encrypt;\n}\n", "\t$alpha = range('a', 'z');\n\t\
    $newAlpha = [];\n\tforeach ($alpha as $char) {\n\t\t$newAlpha[] = chr(ord($char)\
    \ + 2);\n\t}\n\t$s = str_split($s);\n\t$result = [];\n\tforeach ($s as $char)\
    \ {\n\t\tif (in_array($char, $alpha)) {\n\t\t\t$result[] = $newAlpha[array_search($char,\
    \ $alpha)];\n\t\t} else {\n\t\t\t$result[] = $char;\n\t\t}\n\t}\n\treturn implode($result);\n\
    }\n", "    $encrypt = array('a' => 'c', 'b' => 'd', 'c' => 'e', 'd' => 'f', 'e'\
    \ => 'g', 'f' => 'h', 'g' => 'i', 'h' => 'j', 'i' => 'k', 'j' => 'l', 'k' => 'm',\
    \ 'l' => 'n', 'm' => 'o', 'n' => 'p', 'o' => 'q', 'p' => 'r', 'q' => 's', 'r'\
    \ => 't', 's' => 'u', 't' => 'v', 'u' => 'w', 'v' => 'x', 'w' => 'y', 'x' => 'z',\
    \ 'y' => 'a', 'z' => 'b');\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n\
    \        echo $encrypt[$s[$i]];\n    }\n    echo \"<br>\";\n}\n\nencrypt('hi');\n\
    encrypt('asdfghjkl');\nencrypt('gf');\nencrypt('et');", "  // Your code here\n\
    }", "\n}\n\necho encrypt('hi') . \"\\n\"; // expect: lm\necho encrypt('asdfghjkl')\
    \ . \"\\n\"; // expect: ewhjklnop\necho encrypt('gf') . \"\\n\"; // expect: kj\n\
    echo encrypt('et') . \"\\n\"; // expect: ix", "    $a = str_split($s);\n    $b\
    \ = '';\n    foreach ($a as $value) {\n        $b .= chr(ord($value) + 2 * 2);\n\
    \    }\n    return $b;\n}\n$t1 = encrypt('hi');\necho $t1 . \"\\n\";\n$t2 = encrypt('asdfghjkl');\n\
    echo $t2 . \"\\n\";\n$t3 = encrypt('gf');\necho $t3 . \"\\n\";\n$t4 = encrypt('et');\n\
    echo $t4 . \"\\n\";\n", "  $str = '';\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $newArr = [];\n  $letter = [];\n  $result = [];\n  $arr = str_split($s);\n\
    \  foreach ($arr as $key => $value) {\n    $letter = array_search($value, $alphabet);\n\
    \    $newArr[$key] = $letter + 2;\n  }\n  foreach ($newArr as $key => $value)\
    \ {\n    if ($value > 25) {\n      $result[$key] = $value - 26;\n    } else {\n\
    \      $result[$key] = $value;\n    }\n  }\n  foreach ($result as $key => $value)\
    \ {\n    $str .= $alphabet[$value];\n  }\n  return $str;\n}\n", "\t// Define the\
    \ alphabet to be rotated\n\t$alpha = \"abcdefghijklmnopqrstuvwxyz\";\n\t// Define\
    \ the position to rotate the alphabet\n\t$rotate = 4;\n\t// Define the rotated\
    \ alphabet\n\t$new_alpha = substr($alpha, $rotate).substr($alpha, 0, $rotate);\n\
    \t// Loop through the string\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t//\
    \ Define the current position\n\t\t$p = strpos($alpha, $s[$i]);\n\t\t// Define\
    \ the new position\n\t\t$new_p = $p + $rotate;\n\t\t// If the position exceeds\
    \ the length of the alphabet, loop back to the beginning\n\t\tif ($new_p >= strlen($alpha))\
    \ {\n\t\t\t$new_p = $new_p - strlen($alpha);\n\t\t}\n\t\t// Replace the char at\
    \ current position with the char at the new position\n\t\t$s[$i] = $new_alpha[$new_p];\n\
    \t}\n\t// Return the string\n\treturn $s;\n}\n", "    $s = strtolower($s);\n \
    \   $letters = 'abcdefghijklmnopqrstuvwxyz';\n    $letters_array = str_split($letters);\n\
    \    $s_array = str_split($s);\n    $encrypt_array = [];\n    foreach ($s_array\
    \ as $letter) {\n        $letter_index = array_search($letter, $letters_array);\n\
    \        $new_letter_index = $letter_index + 2 * 2;\n        if ($new_letter_index\
    \ > 25) {\n            $new_letter_index = $new_letter_index - 26;\n        }\n\
    \        $encrypt_array[] = $letters_array[$new_letter_index];\n    }\n    $encrypt_string\
    \ = implode('', $encrypt_array);\n    return $encrypt_string;\n}\necho encrypt('ABC');",
  "    $alp = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $res = \"\";\n    for ($i =\
    \ 0; $i < strlen($s); $i++) {\n        $pos = array_search($s[$i], $alp);\n  \
    \      if ($pos + 4 < 26) {\n            $res .= $alp[$pos + 4];\n        } else\
    \ {\n            $res .= $alp[$pos + 4 - 26];\n        }\n    }\n    return $res;\n\
    }\necho encrypt('hi');\necho \"\\n\";\necho encrypt('asdfghjkl');\necho \"\\n\"\
    ;\necho encrypt('gf');\necho \"\\n\";\necho encrypt('et');\necho \"\\n\";", " \
    \   $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $rotated = substr($alphabet,\
    \ 2, 25) . substr($alphabet, 0, 2);\n    $encoded = strtr($s, $alphabet, $rotated);\n\
    \    return $encoded;\n}", "    $result = \"\";\n    $newArr = array();\n    $newArr1\
    \ = array();\n    $arr1 = str_split($s);\n    foreach ($arr1 as $char) {\n   \
    \     $newArr[] = ord($char);\n    }\n    foreach ($newArr as $num) {\n      \
    \  $newArr1[] = chr($num + 2 * 2);\n    }\n    $result = implode(\"\", $newArr1);\n\
    \    return $result;\n}\necho encrypt('hi');", "\t$result = \"\";\n\tfor ($i =\
    \ 0; $i < strlen($s); $i++) {\n\t\t$c = ord($s[$i]) + 2 * 2;\n\t\t$result .= chr($c);\n\
    \t}\n\treturn $result;\n}\n", "    // your code goes here\n}", "   $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \   $newString = '';\n   for ($i = 0; $i < strlen($s); $i++) {\n      $currInd\
    \ = array_search($s[$i], $alphabet);\n      if ($currInd == 24) {\n         $newInd\
    \ = 1;\n      } else if ($currInd == 25) {\n         $newInd = 2;\n      } else\
    \ {\n         $newInd = $currInd + 2;\n      }\n      $newString .= $alphabet[$newInd];\n\
    \   }\n   return $newString;\n}\n", "    // TODO: Create a string that contains\
    \ each letter a-z.\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    // TODO:\
    \ Access the first letter of the given string.\n    $first = substr($s, 0, 1);\n\
    \    // TODO: Access the second letter of the given string.\n    $second = substr($s,\
    \ 1, 1);\n    // TODO: Find the indices of the first and second letters in the\
    \ alphabet string.\n    $firstIndex = strpos($alphabet, $first);\n    $secondIndex\
    \ = strpos($alphabet, $second);\n    // TODO: Add two to each index.\n    $firstIndex\
    \ += 2;\n    $secondIndex += 2;\n    // TODO: Use the modulo operator (%) to find\
    \ the reminder when each index is divided by 26.\n    $firstIndex %= 26;\n   \
    \ $secondIndex %= 26;\n    // TODO: Access the letters in the alphabet with the\
    \ new indices.\n    $newFirst = substr($alphabet, $firstIndex, 1);\n    $newSecond\
    \ = substr($alphabet, $secondIndex, 1);\n    // TODO: Concatenate the new letters\
    \ together and return the result.\n    return $newFirst . $newSecond;\n}\n", "}\n",
  "\t// $s=1;\n\treturn $s . \"2\";\n}\n", "\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$rotatedAlphabet = '';\n\tfor ($i = 0; $i < 26; $i++) {\n\t\t$alphabetIndex\
    \ = $i + 4;\n\t\tif ($alphabetIndex > 25) {\n\t\t\t$alphabetIndex = $alphabetIndex\
    \ - 26;\n\t\t}\n\t\t$rotatedAlphabet = $rotatedAlphabet . $alphabet[$alphabetIndex];\n\
    \t}\n\t$encryptedString = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\tfor\
    \ ($j = 0; $j < 26; $j++) {\n\t\t\tif ($s[$i] == $alphabet[$j]) {\n\t\t\t\t$encryptedString\
    \ = $encryptedString . $rotatedAlphabet[$j];\n\t\t\t}\n\t\t}\n\t}\n\treturn $encryptedString;\n\
    }\n\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho\
    \ encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\n", "    $al = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    $AL = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    $newS = \"\";\n    for ($i =\
    \ 0; $i < strlen($s); $i++) {\n        $index = strpos($al, $s[$i]);\n       \
    \ if ($index !== false) {\n            $index = ($index + 2) % 26;\n         \
    \   $newS .= $al[$index];\n        } else {\n            $index = strpos($AL,\
    \ $s[$i]);\n            if ($index !== false) {\n                $index = ($index\
    \ + 2) % 26;\n                $newS .= $AL[$index];\n            } else {\n  \
    \              $newS .= $s[$i];\n            }\n        }\n    }\n    return $newS;\n\
    }\n", "  // Insert code here\n}\n", "    return rotN(2*2, $s);\n}\n", "\t$alphabet\
    \ = str_split(\"abcdefghijklmnopqrstuvwxyz\");\n\t$encrypted = str_split($s);\n\
    \tfor ($i = 0; $i < strlen($s); $i++) {\n\t\tfor ($j = 0; $j < strlen($alphabet);\
    \ $j++) {\n\t\t\tif ($encrypted[$i] == $alphabet[$j]) {\n\t\t\t\t$encrypted[$i]\
    \ = $alphabet[($j + 4) % strlen($alphabet)];\n\t\t\t}\n\t\t}\n\t}\n\treturn implode(\"\
    \", $encrypted);\n}\n\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl')\
    \ . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";", "\t\
    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\t$letters = str_split($s);\n\
    \t$new_string = \"\";\n\tforeach ($letters as $letter) {\n\t\t$new_letter = ord($letter);\n\
    \t\t$new_letter += 2;\n\t\t$new_letter = chr($new_letter);\n\t\tif (in_array($new_letter,\
    \ $vowels)) {\n\t\t\t$new_letter = ord($new_letter);\n\t\t\t$new_letter += 2;\n\
    \t\t\t$new_letter = chr($new_letter);\n\t\t}\n\t\t$new_string .= $new_letter;\n\
    \t}\n\treturn $new_string;\n}\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl')\
    \ . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\n",
  "  $arr = str_split($s);\n  $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  $arrAlph\
    \ = str_split($alphabet);\n  $alph_len = count($arrAlph);\n  $arrAlph_rev = array_reverse($arrAlph);\n\
    \  $result = [];\n  foreach ($arr as $char) {\n    $index = array_search($char,\
    \ $arrAlph);\n    $index_rev = $alph_len - $index - 1;\n    array_push($result,\
    \ $arrAlph_rev[$index_rev]);\n  }\n  return implode(\"\", $result);\n}\n\necho\
    \ encrypt('hi');\necho encrypt('asdfghjkl');\necho encrypt('gf');\necho encrypt('et');\n",
  "  $a = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n  $newString =\
    \ '';\n  $s = strtolower($s);\n  for ($i = 0; $i < strlen($s); $i++) {\n    $letter\
    \ = $s[$i];\n    $newLetter = '';\n    if ($letter === 'z') {\n      $newLetter\
    \ = 'b';\n    } else if ($letter === 'y') {\n      $newLetter = 'a';\n    } else\
    \ {\n      for ($j = 0; $j < count($a); $j++) {\n        if ($letter === $a[$j])\
    \ {\n          $newLetter = $a[$j + 2];\n        }\n      }\n    }\n    $newString\
    \ .= $newLetter;\n  }\n  return $newString;\n}\necho encrypt('hi') . '<br>';\n\
    echo encrypt('asdfghjkl') . '<br>';\necho encrypt('gf') . '<br>';\necho encrypt('et')\
    \ . '<br>';", "    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $result =\
    \ \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $result .= substr($alphabet,\
    \ strpos($alphabet, $s[$i]) + 4, 1);\n    }\n    return $result;\n}", "}\n", " \
    \ $arr = str_split($s);\n  foreach ($arr as $key => $val) {\n    $arr[$key] =\
    \ chr(ord($val) + 4);\n  }\n  return implode($arr);\n}", "\t$l = strlen($s);\n\
    \t$result = \"\";\n\tfor ($i = 0; $i < $l; $i++) {\n\t\t$c = ord($s[$i]);\n\t\t\
    $c = $c + 2*2;\n\t\t$c = $c % 256;\n\t\t$result .= chr($c);\n\t}\n\treturn $result;\n\
    }\n", "    // declare a new string\n    $newString = \"\";\n    // loop through\
    \ string and get the charcode\n    for ($i = 0; $i < strlen($s); $i++) {\n   \
    \     $newVal = ord($s[$i]) + 4;\n        $newString .= chr($newVal);\n    }\n\
    \    return $newString;\n}\n$a = encrypt('hi');\necho $a;\necho \"<br>\";\n$b\
    \ = encrypt('asdfghjkl');\necho $b;\necho \"<br>\";\n$c = encrypt('gf');\necho\
    \ $c;\necho \"<br>\";\n$d = encrypt('et');\necho $d;\necho \"<br>\";", "\t$newString\
    \ = \"\";\n\t$original = \"abcdefghijklmnopqrstuvwxyz\";\n\t$originalArray = str_split($original);\n\
    \t$index = 0;\n\t$sArray = str_split($s);\n\tfor ($i = 0; $i < count($sArray);\
    \ $i++) {\n\t\tfor ($j = 0; $j < count($originalArray); $j++) {\n\t\t\tif ($sArray[$i]\
    \ == $originalArray[$j]) {\n\t\t\t\t$index = $j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\tif ($index < 24) {\n\t\t\t$newString .= $originalArray[$index + 2];\n\t\
    \t} else {\n\t\t\t$newString .= $originalArray[$index - 24];\n\t\t}\n\t}\n\treturn\
    \ $newString;\n}\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\
    \\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\n", "\t$s\
    \ = strtolower($s);\n\t$keys = range('a', 'z');\n\t$vals = range('c', 'z');\n\t\
    $vals[] = 'a';\n\t$vals[] = 'b';\n\t$map = array_combine($keys, $vals);\n\t$new\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$new .= $map[$s[$i]];\n\t\
    }\n\treturn $new;\n}", "    return '';\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
