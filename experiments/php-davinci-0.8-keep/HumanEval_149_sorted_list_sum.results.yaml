name: HumanEval_149_sorted_list_sum
language: php
results:
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $str = implode('', $lst);\n  $str_arr = str_split($str);\n  $sum = 0;\n\
    \  foreach ($str_arr as $value) {\n    $sum += (int)$value;\n  }\n  return $sum;\n\
    }\n\n$lst = [\"aaa\", \"aaa\", \"aa\"];\necho sorted_list_sum($lst);\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pbc6vzp.php:33\n\
    Stack trace:\n#0 /tmp/tmp2pbc6vzp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2pbc6vzp.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // $lst = array_flip($lst);\n    $uniq_lst = array_unique($lst);\n  \
    \  // var_dump($uniq_lst);\n    for ($i = 0; $i < count($uniq_lst); $i++) {\n\
    \        for ($j = $i + 1; $j < count($uniq_lst); $j++) {\n            if (strlen($uniq_lst[$i])\
    \ > strlen($uniq_lst[$j])) {\n                $tmp = $uniq_lst[$i];\n        \
    \        $uniq_lst[$i] = $uniq_lst[$j];\n                $uniq_lst[$j] = $tmp;\n\
    \            }\n        }\n    }\n    // var_dump($uniq_lst);\n    return $uniq_lst;\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1l7rmd7o.php:37\n\
    Stack trace:\n#0 /tmp/tmp1l7rmd7o.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1l7rmd7o.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $odd_len = [];\n    foreach ($lst as $idx => $item) {\n        if (strlen($item)\
    \ % 2 != 0) {\n            $odd_len[] = $item;\n        }\n    }\n    return $odd_len;\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9tf283s.php:30\n\
    Stack trace:\n#0 /tmp/tmpr9tf283s.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpr9tf283s.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $odds = array_filter($lst, function($item) {\n        return strlen($item)\
    \ % 2 === 1;\n    });\n    $evens = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 === 0;\n    });\n    $len_ordered = array_filter($lst,\
    \ function($item) {\n        return strlen($item) % 2 === 0;\n    });\n    sort($len_ordered);\n\
    \    return array_merge($len_ordered, $odds);\n}\n\n$test = [\"aa\", \"a\", \"\
    aaa\"];\n$test2 = [\"ab\", \"a\", \"aaa\", \"cd\"];\nvar_dump(sorted_list_sum($test));\n\
    var_dump(sorted_list_sum($test2));\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  string(2) \"aa\"\n  [1]=>\n  string(1) \"a\"\n \
    \ [2]=>\n  string(3) \"aaa\"\n}\narray(4) {\n  [0]=>\n  string(2) \"ab\"\n  [1]=>\n\
    \  string(2) \"cd\"\n  [2]=>\n  string(1) \"a\"\n  [3]=>\n  string(3) \"aaa\"\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpysg2gmsy.php:38\n\
    Stack trace:\n#0 /tmp/tmpysg2gmsy.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpysg2gmsy.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $len = count($lst);\n  for ($i = 0; $i < $len; $i++) {\n    for ($j = $i\
    \ + 1; $j < $len; $j++) {\n      if ($lst[$i] === $lst[$j]) {\n        $lst[$i]\
    \ = \"\";\n      }\n    }\n  }\n  $lst = array_filter($lst);\n  $lst = array_values($lst);\n\
    \  $ans = [];\n  foreach ($lst as $value) {\n    if (!empty($value)) {\n     \
    \ $ans[] = $value;\n    }\n  }\n  $len = count($ans);\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    for ($j = $i + 1; $j < $len; $j++) {\n      if (strlen($ans[$i])\
    \ > strlen($ans[$j])) {\n        $temp = $ans[$i];\n        $ans[$i] = $ans[$j];\n\
    \        $ans[$j] = $temp;\n      }\n    }\n  }\n  return $ans;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jz65_no.php:49\n\
    Stack trace:\n#0 /tmp/tmp5jz65_no.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp5jz65_no.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\n}\n\necho \"list_sort(['aa', 'a', 'aaa']) = \" . list_sort(['aa', 'a',\
    \ 'aaa']) . \"\\n\";\necho \"list_sort(['ab', 'a', 'aaa', 'cd']) = \" . list_sort(['ab',\
    \ 'a', 'aaa', 'cd']) . \"\\n\";\necho \"list_sort(['aa', 'a', 'aaa', 'aa', 'a',\
    \ 'aaa']) = \" . list_sort(['aa', 'a', 'aaa', 'aa', 'a', 'aaa']) . \"\\n\";\n\
    echo \"list_sort(['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'ab', 'a', 'aaa', 'cd'])\
    \ = \" . list_sort(['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'ab', 'a', 'aaa', 'cd'])\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function list_sort() in\
    \ /tmp/tmpq7yp7v1k.php:19\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpq7yp7v1k.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  // your code goes here\n}\n\nprint_r(sorted_list_sum([\"ab\", \"a\", \"\
    aaa\", \"cd\"]));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8lyrqxnn.php:25\n\
    Stack trace:\n#0 /tmp/tmp8lyrqxnn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8lyrqxnn.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $arrayLength = count($lst);\n    $lst = array_values($lst);\n    $temp\
    \ = array();\n    $retLst = array();\n    for ($i = 0; $i < $arrayLength; $i++)\
    \ {\n        if (strlen($lst[$i]) % 2 == 0) {\n            array_push($temp, $lst[$i]);\n\
    \        }\n    }\n    sort($temp);\n    $retLst = array_values($temp);\n    return\
    \ $retLst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4w7fn824.php:41\n\
    Stack trace:\n#0 /tmp/tmp4w7fn824.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4w7fn824.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $lst = array_values(array_filter($lst, function($x) { return strlen($x)\
    \ % 2 == 0; }));\n  sort($lst);\n  return $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5tswf4t9.php:32\n\
    Stack trace:\n#0 /tmp/tmp5tswf4t9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5tswf4t9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $sorted_lst = array();\n    $min_item = min($lst);\n    $lst_length =\
    \ count($lst);\n    while ($lst_length > 0) {\n        if (in_array($min_item,\
    \ $lst)) {\n            array_push($sorted_lst, $min_item);\n            unset($lst[array_search($min_item,\
    \ $lst)]);\n        }\n        $min_item += 1;\n        $lst_length -= 1;\n  \
    \  }\n    return $sorted_lst;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpruk8kt9n.php on line\
    \ 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpruk8kt9n.php:35\n\
    Stack trace:\n#0 /tmp/tmpruk8kt9n.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpruk8kt9n.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $odd = [];\n    foreach ($lst as $word) {\n        if (strlen($word)\
    \ % 2 == 1) {\n            $odd[] = $word;\n        }\n    }\n    $odd = implode(',',\
    \ $odd);\n    $odd = explode(',', $odd);\n    sort($odd);\n    return $odd;\n\
    }\nvar_dump(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nvar_dump(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(3) \"aaa\"\n\
    }\narray(2) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(3) \"aaa\"\n}\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpcdg3q2r8.php:35\nStack\
    \ trace:\n#0 /tmp/tmpcdg3q2r8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcdg3q2r8.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $pos = 0;\n    $length = count($lst);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $curr_value = $lst[$i];\n        for ($j = $i - 1; $j >= 0\
    \ && $lst[$j] > $curr_value; $j--) {\n            $lst[$j + 1] = $lst[$j];\n \
    \       }\n        $lst[$j + 1] = $curr_value;\n    }\n    return $lst;\n}\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgyrjvwt.php:33\n\
    Stack trace:\n#0 /tmp/tmppgyrjvwt.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppgyrjvwt.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst = array_diff($lst, array_filter($lst, function($val) {\n       \
    \ return strlen($val) % 2;\n    }));\n    asort($lst);\n    return $lst;\n}\n\n\
    $lst = [\"aa\", \"a\", \"aaa\"];\necho json_encode(sorted_list_sum($lst)) . \"\
    \\n\";\n\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\necho json_encode(sorted_list_sum($lst))\
    \ . \"\\n\";\n\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"def\", \"fg\"\
    , \"ad\", \"h\", \"dd\", \"d\", \"e\", \"f\", \"gh\", \"c\", \"i\", \"j\", \"\
    z\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    u\", \"v\", \"w\", \"x\", \"y\"];\necho json_encode(sorted_list_sum($lst)) . \"\
    \\n\";\n\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"def\", \"fg\", \"ad\"\
    , \"h\", \"dd\", \"d\", \"e\", \"f\", \"gh\", \"c\", \"i\", \"j\", \"z\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"qwerty\", \"asdfghjkl\", \"zxcvbnm\", \"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\"];\necho json_encode(sorted_list_sum($lst)) .\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9rsego_5.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $len_lst = count($lst);\n    $lst_even = array();\n    $lst_odd = array();\n\
    \    $lst_odd_2 = array();\n    $lst_odd_3 = array();\n    $len_lst_2 = 0;\n \
    \   $len_lst_3 = 0;\n    for ($i = 0; $i < $len_lst; $i++) {\n        $len_word\
    \ = strlen($lst[$i]);\n        if ($len_word % 2 == 0) {\n            $lst_even[]\
    \ = $lst[$i];\n        } else if ($len_word == 2) {\n            $lst_odd_2[]\
    \ = $lst[$i];\n        } else if ($len_word == 3) {\n            $lst_odd_3[]\
    \ = $lst[$i];\n        } else {\n            $lst_odd[] = $lst[$i];\n        }\n\
    \    }\n    sort($lst_odd);\n    sort($lst_odd_2);\n    sort($lst_odd_3);\n  \
    \  $len_lst_2 = count($lst_odd_2);\n    $len_lst_3 = count($lst_odd_3);\n    for\
    \ ($i = 0; $i < $len_lst_2; $i++) {\n        $lst_odd[] = $lst_odd_2[$i];\n  \
    \  }\n    for ($i = 0; $i < $len_lst_3; $i++) {\n        $lst_odd[] = $lst_odd_3[$i];\n\
    \    }\n    $lst_odd = array_merge($lst_odd, $lst_even);\n    return $lst_odd;\n\
    }\n$lst_odd = [\"aa\", \"a\", \"aaa\"];\n$lst_odd_3 = [\"ab\", \"a\", \"aaa\"\
    , \"cd\"];\n$lst_odd_2 = [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmyueew02.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    if ($lst == []) {\n        return $lst;\n    }\n    $odd_items = [];\n\
    \    foreach ($lst as $item) {\n        if (strlen($item) % 2 == 1) {\n      \
    \      $odd_items[] = $item;\n        }\n    }\n    return $odd_items;\n}\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6t8qtih.php:33\n\
    Stack trace:\n#0 /tmp/tmpf6t8qtih.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpf6t8qtih.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    return array_reduce($lst, function($x, $y) {\n        if (is_string($x)\
    \ && is_string($y)) {\n            return $x . $y;\n        } elseif (is_string($x))\
    \ {\n            return $x;\n        } elseif (is_string($y)) {\n            return\
    \ $y;\n        } else {\n            return $x + $y;\n        }\n    });\n}\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbrtrtg69.php:33\n\
    Stack trace:\n#0 /tmp/tmpbrtrtg69.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbrtrtg69.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst_sum = [];\n    $short = [];\n    $long = [];\n    $short_one = false;\n\
    \    foreach ($lst as $item) {\n        if ($short_one) {\n            $long[]\
    \ = $item;\n        } else {\n            $short[] = $item;\n        }\n     \
    \   $short_one = !$short_one;\n    }\n    $short = array_reverse($short);\n  \
    \  $lst_sum = array_merge($short, $long);\n    return $lst_sum;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmrqxv4hs.php:37\n\
    Stack trace:\n#0 /tmp/tmpmrqxv4hs.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmrqxv4hs.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst = array_map('strlen', $lst);\n    sort($lst);\n    $result = array_unique($lst);\n\
    \    print_r($result);\n}\nsorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]);\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [3] => 3\n)\nArray\n(\n    [0]\
    \ => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmptk21qfhk.php:27\nStack trace:\n#0 /tmp/tmptk21qfhk.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptk21qfhk.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $odd_length = function($str) {\n    return strlen($str) % 2;\n  };\n  $filtered_lst\
    \ = array_filter($lst, $odd_length);\n  $sorted_lst = array_unique($filtered_lst);\n\
    \  asort($sorted_lst);\n  return $sorted_lst;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwvt76kw.php:29\n\
    Stack trace:\n#0 /tmp/tmphwvt76kw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphwvt76kw.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\tif (empty($lst)) {\n\t\treturn $lst;\n\t} else {\n\t\t$even_lst = array();\n\
    \t\tforeach ($lst as $val) {\n\t\t\tif (strlen($val) % 2 == 0) {\n\t\t\t\tarray_push($even_lst,\
    \ $val);\n\t\t\t}\n\t\t}\n\t\tsort($even_lst);\n\t\treturn $even_lst;\n\t}\n}\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lz7dymp.php:41\n\
    Stack trace:\n#0 /tmp/tmp2lz7dymp.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2lz7dymp.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst = array_values(array_unique($lst));\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp812q7s_g.php:31\n\
    Stack trace:\n#0 /tmp/tmp812q7s_g.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp812q7s_g.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t// Initialize a new array for sorted strings\n\t$new_list = [];\n\t// Create\
    \ new array that holds only words with even length\n\tforeach ($lst as $key =>\
    \ $value) {\n\t\tif (strlen($value) % 2 == 0) {\n\t\t\t$new_list[] = $value;\n\
    \t\t}\n\t}\n\t// Sort array by length of each word\n\tusort($new_list, function($a,\
    \ $b) {\n\t\treturn strlen($a) - strlen($b);\n\t});\n\t// Sort list by alphabetical\
    \ order\n\tsort($new_list);\n\t// Return sorted list\n\treturn $new_list;\n}\n\
    \necho implode(\"<br>\", sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\necho \"\
    <br>\";\necho implode(\"<br>\", sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"\
    ]));\necho \"<br>\";\necho implode(\"<br>\", sorted_list_sum([\"ab\", \"a\", \"\
    aaa\", \"cd\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"aa\", \"aaaa\",\
    \ \"aaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaa\", \"aa\",\
    \ \"a\", \"aa\", \"aa\", \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\", \"a\", \"aaa\"\
    , \"aa\", \"a\", \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\"\
    , \"a\", \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\", \"a\"\
    , \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\", \"a\", \"aaa\"\
    , \"aa\", \"a\", \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\"\
    , \"a\", \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\", \"a\"\
    , \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\", \"a\", \"aaa\", \"aa\", \"a\", \"aaa\"\
    , \"aa\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq6059_e3.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $output = [];\n    foreach ($lst as $item) {\n        if (strlen($item)\
    \ % 2 == 0) {\n            $output[] = $item;\n        }\n    }\n    sort($output);\n\
    \    return $output;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3ucmzt2.php:37\n\
    Stack trace:\n#0 /tmp/tmpp3ucmzt2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpp3ucmzt2.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $evens = array_filter($lst, function($word) {\n        return strlen($word)\
    \ % 2 == 0;\n    });\n    usort($evens, function($a, $b) {\n        if (strlen($a)\
    \ == strlen($b)) {\n            return $a < $b ? -1 : 1;\n        }\n        return\
    \ strlen($a) < strlen($b) ? -1 : 1;\n    });\n    return $evens;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    sort($lst);\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i]%2\
    \ != 0) {\n            array_splice($lst, $i, 1);\n            $i--;\n       \
    \ }\n    }\n    return $lst;\n}\n\n$list = [5, 7, -3, 4, 9, 5, 1, 2, 0, 5, 4,\
    \ 2, 6, 5, -8, 3, 4, -3, 1, 6, 5, -1, 6, 7, 0, 1, 4, 1, 5, -1, 8, 5, 0, 5, -8,\
    \ 6, 7, 0, 5, 6, 4, 3, 4, -2, -5, -7, -4, 1, -7, -3, 8, -7, 3, 2, -8, -6, 2, -5,\
    \ 6, -8, 1, -1, 7, 5, -7, -6, -8, -3, 7, -3, -2, 7, -8, -2, -6, -5, 6, -8, -8,\
    \ -6, -5, -1, -1, 5, -2, -6, 5, 4, -5, 4, -6, -8, 0, -6, -1, -8, 1, -1, 4, -6,\
    \ -6, -8, -7, 7, -3, -2, 7, -8, -2, -6, -5, 6, -8, -8, -6, -5, -1, -1, 5, -2,\
    \ -6, 5, 4, -5, 4, -6, -8, 0, -6, -1, -8, 1, -1, 4, -6, -6, -8, -7, 7, -3, -2,\
    \ 7, -8, -2, -6, -5, 6, -8, -8, -6, -5, -1, -1, 5, -2, -6, 5, 4, -5, 4, -6, -8,\
    \ 0, -6, -1, -8, 1, -\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8evrvnyt.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $new_list = [];\n    $sorted_words = [];\n    $result = [];\n    // Your\
    \ code here\n    if (count($lst) == 0) {\n        return $result;\n    }\n   \
    \ foreach ($lst as $word) {\n        if (strlen($word) % 2 == 0) {\n         \
    \   $new_list[] = $word;\n        }\n    }\n    foreach ($new_list as $word) {\n\
    \        $sorted_words[strlen($word)][] = $word;\n    }\n    ksort($sorted_words);\n\
    \    foreach ($sorted_words as $len) {\n        sort($len);\n        foreach ($len\
    \ as $word) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n$test = [\"aa\", \"a\", \"aaa\"];\nvar_dump(sorted_list_sum($test));\n\n$test2\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\"];\nvar_dump(sorted_list_sum($test2));\n\n\
    $test3 = [\"abc\", \"ab\", \"a\", \"aaa\", \"cd\"];\nvar_dump(sorted_list_sum($test3));\n\
    \n$test4 = [\"abc\", \"ab\", \"a\", \"aa\", \"cd\"];\nvar_dump(sorted_list_sum($test4));\n\
    \n$test5 = [\"ab\", \"a\", \"ab\", \"cd\"];\nvar_dump(sorted_list_sum($test5));\n\
    \n$test6 = [\"ab\", \"a\", \"ab\", \"cd\", \"abc\"];\nvar_dump(sorted_list_sum($test6));\n\
    \n$test7 = [\"ab\", \"a\", \"ab\", \"cd\", \"abc\", \"abcd\"];\nvar_dump(sorted_list_sum($test7));\n\
    \n$test8 = [\"ab\", \"a\", \"ab\", \"cd\", \"abc\", \"abcd\", \"abcde\"];\nvar_dump(sorted_list_sum($test8));\n\
    \n$test9 = [\"ab\", \"a\", \"ab\", \"cd\", \"abc\", \"abcd\",\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf9t7h4zm.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoudm8qyf.php:24\n\
    Stack trace:\n#0 /tmp/tmpoudm8qyf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpoudm8qyf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $arr = array();\n    foreach ($lst as $item) {\n        if (is_string($item))\
    \ {\n            array_push($arr, $item);\n        }\n    }\n    $arr_len = array();\n\
    \    foreach ($arr as $item) {\n        array_push($arr_len, strlen($item));\n\
    \    }\n    sort($arr_len);\n    return $arr_len;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppu80_7v1.php:35\n\
    Stack trace:\n#0 /tmp/tmppu80_7v1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppu80_7v1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $odd_length_words = array_filter($lst, function($word) {\n        return\
    \ strlen($word) % 2 == 1;\n    });\n    asort($odd_length_words);\n    return\
    \ $odd_length_words;\n}\n\nvar_dump(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\n\
    var_dump(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [1]=>\n  string(1) \"a\"\n  [2]=>\n  string(3) \"aaa\"\n\
    }\narray(2) {\n  [1]=>\n  string(1) \"a\"\n  [2]=>\n  string(3) \"aaa\"\n}\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmppq9lf88k.php:30\nStack\
    \ trace:\n#0 /tmp/tmppq9lf88k.php(39): test()\n#1 {main}\n  thrown in /tmp/tmppq9lf88k.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // Your code here\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd38bxv85.php:23\n\
    Stack trace:\n#0 /tmp/tmpd38bxv85.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpd38bxv85.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    return implode(\",\", $lst);\n}\n\nfunction candidate(...$args) {\n \
    \   return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0jeauot5.php:24\n\
    Stack trace:\n#0 /tmp/tmp0jeauot5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0jeauot5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $ret = [];\n    foreach ($lst as $item) {\n        if (is_string($item))\
    \ {\n            $length = strlen($item);\n            if (!array_key_exists($length,\
    \ $ret)) {\n                $ret[$length] = [];\n            }\n            $ret[$length][]\
    \ = $item;\n        }\n    }\n    sort($ret);\n    $ret2 = [];\n    foreach ($ret\
    \ as $item) {\n        if (is_array($item)) {\n            sort($item);\n    \
    \        $ret2 = array_merge($ret2, $item);\n        }\n    }\n    return $ret2;\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm71m4omn.php:42\n\
    Stack trace:\n#0 /tmp/tmpm71m4omn.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpm71m4omn.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    if (empty($lst)) {\n        return array();\n    }\n    $idx = array_search(min($lst),\
    \ $lst);\n    $min = $lst[$idx];\n    $lst = array_filter($lst, function($el)\
    \ use ($min) {\n        return $el > $min;\n    });\n    $res = sorted_list_sum($lst);\n\
    \    array_unshift($res, $min);\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcia5mi_y.php:33\n\
    Stack trace:\n#0 /tmp/tmpcia5mi_y.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcia5mi_y.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // sort the array by length of each word\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return 0;\n    \
    \    }\n        return (strlen($a) < strlen($b)) ? -1 : 1;\n    });\n    // take\
    \ just the first element of the array\n    return array_slice($lst, 0, 1);\n}\n\
    $assert = 'assert';\n$test_array = [\"aa\", \"a\", \"aaa\"];\n$test_array2 = [\"\
    ab\", \"a\", \"aaa\", \"cd\"];\n$test_array3 = [\"aaa\", \"a\", \"aa\"];\necho\
    \ $assert(sorted_list_sum($test_array), [\"aa\"]) . PHP_EOL;\necho $assert(sorted_list_sum($test_array2),\
    \ [\"ab\", \"cd\"]) . PHP_EOL;\necho $assert(sorted_list_sum($test_array3), [\"\
    aa\"]) . PHP_EOL;\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdtciev0.php:38\n\
    Stack trace:\n#0 /tmp/tmpkdtciev0.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkdtciev0.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $arr = array();\n    foreach ($lst as $str) {\n        $arr[] = strlen($str);\n\
    \    }\n    sort($arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoapwcc_x.php:28\n\
    Stack trace:\n#0 /tmp/tmpoapwcc_x.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpoapwcc_x.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // your code here\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqttybzlh.php:23\n\
    Stack trace:\n#0 /tmp/tmpqttybzlh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpqttybzlh.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $ret = [];\n  foreach ($lst as $v) {\n    if ((strlen($v) % 2) == 0) {\n\
    \      $ret[] = $v;\n    }\n  }\n  sort($ret);\n  return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp55z7a6wb.php:36\n\
    Stack trace:\n#0 /tmp/tmp55z7a6wb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp55z7a6wb.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst = array_map('strlen', $lst);\n    rsort($lst);\n    $sum = 0;\n\
    \    foreach ($lst as $element) {\n        $sum += $element;\n    }\n    return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5t79tir.php:30\n\
    Stack trace:\n#0 /tmp/tmpn5t79tir.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpn5t79tir.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  if (count($lst) < 2) {\n    return $lst;\n  }\n  $left = array_slice($lst,\
    \ 0, count($lst) / 2);\n  $right = array_slice($lst, count($lst) / 2);\n  $left\
    \ = sorted_list_sum($left);\n  $right = sorted_list_sum($right);\n  return list_merge($left,\
    \ $right);\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function list_merge()\
    \ in /tmp/tmpywxutm0i.php:23\nStack trace:\n#0 /tmp/tmpywxutm0i.php(22): sorted_list_sum(Array)\n\
    #1 /tmp/tmpywxutm0i.php(27): sorted_list_sum(Array)\n#2 /tmp/tmpywxutm0i.php(31):\
    \ candidate(Array)\n#3 /tmp/tmpywxutm0i.php(40): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpywxutm0i.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$evenStrings = [];\n\t$oddStrings = [];\n\t$lstLen = count($lst);\n\tfor\
    \ ($i = 0; $i < $lstLen; $i++) {\n\t\tif (strlen($lst[$i]) % 2 == 0) {\n\t\t\t\
    array_push($evenStrings, $lst[$i]);\n\t\t} else {\n\t\t\tarray_push($oddStrings,\
    \ $lst[$i]);\n\t\t}\n\t}\n\tsort($evenStrings);\n\tsort($oddStrings);\n\treturn\
    \ array_merge($evenStrings, $oddStrings);\n}\n\n$lst = [\"aa\", \"a\", \"aaa\"\
    ];\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\necho \"<pre>\";\nprint_r(sorted_list_sum($lst));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y6cp8eu.php:41\n\
    Stack trace:\n#0 /tmp/tmp3y6cp8eu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp3y6cp8eu.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $newlst = [];\n  $res = [];\n  for ($i = 0; $i < count($lst); $i++) {\n\
    \    if (strlen($lst[$i]) % 2 === 0) {\n      array_push($newlst, $lst[$i]);\n\
    \    }\n  }\n  sort($newlst);\n  array_push($res, $newlst[0]);\n  for ($i = 1;\
    \ $i < count($newlst); $i++) {\n    if ($newlst[$i] !== $newlst[$i - 1]) {\n \
    \     array_push($res, $newlst[$i]);\n    }\n  }\n  return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz3h2djga.php:39\n\
    Stack trace:\n#0 /tmp/tmpz3h2djga.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpz3h2djga.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$sorted_lst = array();\n\tforeach ($lst as $wrd) {\n\t\tif (strlen($wrd)\
    \ % 2 == 0) {\n\t\t\tarray_push($sorted_lst, $wrd);\n\t\t}\n\t}\n\treturn sort($sorted_lst);\n\
    }\nprint_r(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\necho \"<br>\";\nprint_r(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3qd0sbt.php:33\n\
    Stack trace:\n#0 /tmp/tmpb3qd0sbt.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpb3qd0sbt.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $sorted_lst = array();\n    foreach ($lst as $word) {\n        if (strlen($word)\
    \ % 2 == 0) {\n            array_push($sorted_lst, $word);\n        }\n    }\n\
    \    sort($sorted_lst);\n    return $sorted_lst;\n}\n$list = [\"aa\", \"a\", \"\
    aaa\"];\nvar_dump(sorted_list_sum($list));\nfunction candidate(...$args) {\n \
    \   return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxib8ti28.php:38\nStack trace:\n#0 /tmp/tmpxib8ti28.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxib8ti28.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$res = [];\n\tforeach ($lst as $v) {\n\t\tif (strlen($v) % 2 == 0) {\n\t\
    \t\t$res[] = $v;\n\t\t}\n\t}\n\tsort($res);\n\treturn $res;\n}\n\necho '<pre>';\n\
    print_r(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nprint_r(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\nprint_r(sorted_list_sum([\"a\", \"ab\", \"a\"\
    , \"aaa\", \"cd\"]));\nprint_r(sorted_list_sum([\"a\", \"a\", \"a\", \"aaa\",\
    \ \"cd\"]));\nprint_r(sorted_list_sum([\"\", \"a\", \"a\", \"aaa\", \"cd\"]));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\nArray\n(\n    [0] => ab\n    [1] => cd\n)\nArray\n(\n    [0] => cd\n)\nArray\n\
    (\n    [0] => \n    [1] => cd\n)\n</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpm814o5q6.php:44\nStack trace:\n#0 /tmp/tmpm814o5q6.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpm814o5q6.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    for ($i = 0; $i < count($lst); $i++) {\n        if (strlen($lst[$i])\
    \ % 2 == 1) {\n            unset($lst[$i]);\n        }\n    }\n    sort($lst);\n\
    \    return $lst;\n}\n\n$res = sorted_list_sum([\"aa\", \"a\", \"aaa\"]);\nvar_dump($res);\n\
    echo \"<br>\";\n$res = sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]);\nvar_dump($res);\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  string(2) \"aa\"\n  [1]=>\n  string(3) \"aaa\"\n\
    }\n<br>array(2) {\n  [0]=>\n  string(2) \"ab\"\n  [1]=>\n  string(2) \"cd\"\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp79owy3dl.php:35\n\
    Stack trace:\n#0 /tmp/tmp79owy3dl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp79owy3dl.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // your code here\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33umocs7.php:23\n\
    Stack trace:\n#0 /tmp/tmp33umocs7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp33umocs7.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    $odds = array_filter($lst,\
    \ function ($number) {\n        return $number % 2;\n    });\n    $sorted_odds\
    \ = $odds;\n    sort($sorted_odds);\n    return $sorted_odds;\n}\n$lst = [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n    [3] => 7\n    [4]\
    \ => 9\n)\n\nWarning: A non-numeric value encountered in /tmp/tmpytttoip9.php\
    \ on line 20\n\nWarning: A non-numeric value encountered in /tmp/tmpytttoip9.php\
    \ on line 20\n\nWarning: A non-numeric value encountered in /tmp/tmpytttoip9.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytttoip9.php:33\n\
    Stack trace:\n#0 /tmp/tmpytttoip9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpytttoip9.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$result = [];\n\tforeach ($lst as $string) {\n\t\t$str_len = strlen($string);\n\
    \t\tif ($str_len % 2 == 0) {\n\t\t\t$result[] = $string;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\necho 'Sorted List - ';\nprint_r(sorted_list_sum(['aa', 'a',\
    \ 'aaa']));\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Sorted List - Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvx_8u9c5.php:40\nStack trace:\n#0 /tmp/tmpvx_8u9c5.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvx_8u9c5.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $result = [];\n    foreach ($lst as $item) {\n        if (strlen($item)\
    \ % 2 == 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = [\"aa\", \"a\", \"aaa\"];\n$result = sorted_list_sum($lst);\n\
    echo \"list_sort($lst) => $result\\n\";\n\n$lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\"];\n$result = sorted_list_sum($lst);\necho \"list_sort($lst) => $result\\\
    n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "list_sort(Array) => Array\nlist_sort(Array) => Array\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp8wiy_5dk.php:44\nStack trace:\n#0 /tmp/tmp8wiy_5dk.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8wiy_5dk.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $lst = array_unique($lst);\n  $lst = array_map('strlen', $lst);\n  $new_lst\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num % 2 == 0) {\n      $new_lst[]\
    \ = $num;\n    }\n  }\n  sort($new_lst);\n  return $new_lst;\n}\nprint_r(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp574t2om6.php:33\nStack trace:\n#0 /tmp/tmp574t2om6.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmp574t2om6.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // write the body of your function here\n    $lengths = [];\n    foreach\
    \ ($lst as $str) {\n        $lengths[] = strlen($str);\n    }\n    sort($lengths);\n\
    \    $ans = [];\n    $temp = [];\n    foreach ($lengths as $len) {\n        foreach\
    \ ($lst as $str) {\n            if (strlen($str) == $len) {\n                $temp[]\
    \ = $str;\n            }\n        }\n        sort($temp);\n        $ans = array_merge($ans,\
    \ $temp);\n        $temp = [];\n    }\n    return $ans;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpau93_0r6.php:42\n\
    Stack trace:\n#0 /tmp/tmpau93_0r6.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpau93_0r6.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$arr = array();\n\t$res = array();\n\tforeach ($lst as $key => $value)\
    \ {\n\t\tif (strlen($value) % 2 == 0) {\n\t\t\t$arr[] = $value;\n\t\t}\n\t}\n\t\
    // sort($arr);\n\tsort($arr, SORT_STRING);\n\treturn $arr;\n}\n\n$first_lst =\
    \ array(\"aa\", \"a\", \"aaa\");\necho implode(', ', sorted_list_sum($first_lst));\n\
    echo \"<br>\";\n$second_lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\necho implode(',\
    \ ', sorted_list_sum($second_lst));\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "aa<br>ab, cd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprawk8dj9.php:44\n\
    Stack trace:\n#0 /tmp/tmprawk8dj9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmprawk8dj9.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst = array_filter($lst, function($v) {\n        return is_string($v);\n\
    \    });\n    $lst = array_map(function($v) {\n        return strlen($v);\n  \
    \  }, $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n\
    \    sort($lst);\n    return $lst;\n}\nassert(sorted_list_sum([\"aa\", \"a\",\
    \ \"aaa\"]) == [\"aa\"]);\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"\
    cd\"]) == [\"ab\", \"cd\"]);\nassert(sorted_list_sum([\"\", \"a\", \"a\"]) ==\
    \ [\"\"]);\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(sorted_list_sum(['aa', 'a', 'aaa']) == ['aa'])\
    \ failed in /tmp/tmpr7lewvgm.php on line 27\n\nWarning: assert(): assert(sorted_list_sum(['ab',\
    \ 'a', 'aaa', 'cd']) == ['ab', 'cd']) failed in /tmp/tmpr7lewvgm.php on line 28\n\
    \nWarning: assert(): assert(sorted_list_sum(['', 'a', 'a']) == ['']) failed in\
    \ /tmp/tmpr7lewvgm.php on line 29\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpr7lewvgm.php:35\nStack trace:\n#0 /tmp/tmpr7lewvgm.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpr7lewvgm.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$tmp = array();\n\t$ret_val = array();\n\tforeach ($lst as $s) {\n\t\t\
    $len = strlen($s);\n\t\tif (!array_key_exists($len, $tmp)) {\n\t\t\t$tmp[$len]\
    \ = array();\n\t\t}\n\t\tarray_push($tmp[$len], $s);\n\t}\n\tksort($tmp);\n\t\
    foreach ($tmp as $v) {\n\t\tsort($v);\n\t\t$ret_val = array_merge($ret_val, $v);\n\
    \t}\n\treturn $ret_val;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps81jbfhj.php:38\n\
    Stack trace:\n#0 /tmp/tmps81jbfhj.php(47): test()\n#1 {main}\n  thrown in /tmp/tmps81jbfhj.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $result = array();\n  for ($i = 0; $i < count($lst); $i++) {\n    if (strlen($lst[$i])\
    \ % 2 == 0) {\n      array_push($result, $lst[$i]);\n    }\n  }\n  sort($result);\n\
    \  return $result;\n}\n\n$input = array(\"aa\", \"a\", \"aaa\");\n$output = sorted_list_sum($input);\n\
    var_dump($output);\n\n$input = array(\"ab\", \"a\", \"aaa\", \"cd\");\n$output\
    \ = sorted_list_sum($input);\nvar_dump($output);\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\narray(2) {\n  [0]=>\n  string(2)\
    \ \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpy0nvgykq.php:45\nStack trace:\n#0 /tmp/tmpy0nvgykq.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpy0nvgykq.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $lst = array_unique($lst);\n  sort($lst);\n  return $lst;\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbv9tqa3.php:25\n\
    Stack trace:\n#0 /tmp/tmphbv9tqa3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphbv9tqa3.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    $res = [];\n    foreach\
    \ ($lst as $val) {\n        if (strlen($val) % 2 == 0) {\n            $res[] =\
    \ $val;\n        }\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxp2ppzc.php:33\n\
    Stack trace:\n#0 /tmp/tmpnxp2ppzc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnxp2ppzc.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $length = count($lst);\n    $result = \"\";\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $result .= $lst[$i];\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhm32pts.php:28\n\
    Stack trace:\n#0 /tmp/tmplhm32pts.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplhm32pts.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $list = array_unique($lst);\n  $list = array_values($list);\n  $odds =\
    \ [];\n  for ($i = 0; $i < count($list); $i++) {\n    if (strlen($list[$i]) %\
    \ 2 !== 0) {\n      $odds[] = $list[$i];\n    }\n  }\n  $odds = array_values($odds);\n\
    \  for ($j = 0; $j < count($odds); $j++) {\n    $index = array_search($odds[$j],\
    \ $list);\n    unset($list[$index]);\n  }\n  sort($list);\n  return $list;\n}\n\
    echo '<pre>';\nvar_dump(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\necho '</pre>';\n\
    echo '<pre>';\nvar_dump(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\n</pre><pre>array(2) {\n\
    \  [0]=>\n  string(2) \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpdc5jgzak.php:49\nStack trace:\n\
    #0 /tmp/tmpdc5jgzak.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpdc5jgzak.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\t$chk_str = $lst[$i];\n\t\t\
    $str_len = strlen($chk_str);\n\t\tif ($str_len % 2 == 0) {\n\t\t\t$even_lst[]\
    \ = $chk_str;\n\t\t}\n\t}\n\tif (!empty($even_lst)) {\n\t\tasort($even_lst);\n\
    \t\treturn $even_lst;\n\t} else {\n\t\treturn $even_lst = array();\n\t}\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16r020k4.php:36\n\
    Stack trace:\n#0 /tmp/tmp16r020k4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp16r020k4.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $array_result = array();\n    $count = 0;\n    $first_word = \"\";\n\
    \    $last_word = \"\";\n    $first_word_count = 0;\n    $last_word_count = 0;\n\
    \    $last_word_last_char = \"\";\n    $temp_array = array();\n    $temp_last_word\
    \ = \"\";\n    $temp_array_index = 0;\n    $last_word_last_char_count = 0;\n \
    \   $append_char = \"\";\n    $last_word_last_char_position = 0;\n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n        if (strlen($lst[$i]) % 2 == 0) {\n \
    \           array_push($array_result, $lst[$i]);\n        }\n    }\n    $count\
    \ = count($array_result);\n    $first_word = $array_result[0];\n    $last_word\
    \ = $array_result[$count - 1];\n    $first_word_count = strlen($first_word);\n\
    \    $last_word_count = strlen($last_word);\n    $last_word_last_char = substr($last_word,\
    \ $last_word_count - 1, 1);\n    $last_word_last_char_count = $first_word_count\
    \ - 1;\n    $last_word_last_char_position = $last_word_count - 1;\n    if ($last_word_last_char_count\
    \ != 0) {\n        $temp_array[$temp_array_index] = substr($last_word, 0, $last_word_last_char_position);\n\
    \        for ($i = 0; $i < $last_word_last_char_count; $i++) {\n            $append_char\
    \ = $last_word_last_char . $last_word_last_char;\n            $temp_array[$temp_array_index]\
    \ = $temp_array[$temp_array_index] . $append_char;\n        }\n        array_push($array_result,\
    \ $temp_array[$temp_array_index]);\n    }\n   \nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr8vw768p.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  if (count($lst) == 0) {\n    return 0;\n  }\n  $sum = $lst[0];\n  if (count($lst)\
    \ > 1) {\n    $sum += sorted_list_sum(array_slice($lst, 1));\n  }\n  return $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp47s_2d3z.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmp47s_2d3z.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmp47s_2d3z.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47s_2d3z.php:31\n\
    Stack trace:\n#0 /tmp/tmp47s_2d3z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp47s_2d3z.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len; $i++) {\n  \
    \      for ($j = $i; $j < $lst_len; $j++) {\n            if (strlen($lst[$i])\
    \ < strlen($lst[$j])) {\n                $temp = $lst[$i];\n                $lst[$i]\
    \ = $lst[$j];\n                $lst[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4svfmryh.php:34\n\
    Stack trace:\n#0 /tmp/tmp4svfmryh.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp4svfmryh.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $even_lst = [];\n    foreach ($lst as $value) {\n        if (strlen($value)\
    \ % 2 == 0) {\n            $even_lst[] = $value;\n        }\n    }\n    $asc_even_lst\
    \ = sort_asc($even_lst);\n    return $asc_even_lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_asc() in\
    \ /tmp/tmp907e9jmj.php:22\nStack trace:\n#0 /tmp/tmp907e9jmj.php(27): sorted_list_sum(Array)\n\
    #1 /tmp/tmp907e9jmj.php(31): candidate(Array)\n#2 /tmp/tmp907e9jmj.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp907e9jmj.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example: print \"Hello world!\";\n    $res_arr = array();\n\
    \    $max_len = 0;\n    foreach ($lst as $word) {\n        $w_len = strlen($word);\n\
    \        if ($w_len % 2 == 0) {\n            if (!isset($res_arr[$w_len])) {\n\
    \                $res_arr[$w_len] = array();\n            }\n            $res_arr[$w_len][]\
    \ = $word;\n            if ($w_len > $max_len) {\n                $max_len = $w_len;\n\
    \            }\n        }\n    }\n    $res_str = '';\n    for ($i = 0; $i <= $max_len;\
    \ $i++) {\n        if (isset($res_arr[$i])) {\n            sort($res_arr[$i]);\n\
    \            $res_str .= implode('', $res_arr[$i]);\n        }\n    }\n    return\
    \ $res_str;\n}\necho sorted_list_sum([\"aa\", \"a\", \"aaa\"]);\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "aa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3tfurwb5.php:48\n\
    Stack trace:\n#0 /tmp/tmp3tfurwb5.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp3tfurwb5.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst_new = [];\n    foreach ($lst as $x) {\n        if (strlen($x) %\
    \ 2 == 0) {\n            $lst_new[] = $x;\n        }\n    }\n    sort($lst_new);\n\
    \    return $lst_new;\n}\necho implode(', ', sorted_list_sum([\"ab\", \"a\", \"\
    aaa\", \"cd\"]));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "ab, cd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppfxoch6s.php:37\n\
    Stack trace:\n#0 /tmp/tmppfxoch6s.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppfxoch6s.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $result = [];\n  foreach ($lst as $word) {\n    if (strlen($word) % 2 ===\
    \ 0) {\n      $result[] = $word;\n    }\n  }\n  usort($result, function($a, $b)\
    \ {\n    if (strlen($a) === strlen($b)) {\n      return strcmp($a, $b);\n    }\n\
    \    return strlen($a) - strlen($b);\n  });\n  return $result;\n}\nassert(list_sort([\"\
    aa\", \"a\", \"aaa\"]) === [\"aa\"]);\nassert(list_sort([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]) === [\"ab\", \"cd\"]);\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function list_sort() in\
    \ /tmp/tmpns2bo7nt.php:30\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpns2bo7nt.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $result = [];\n    foreach ($lst as $index => $value) {\n        if (strlen($value)\
    \ % 2 === 0) {\n            $result[] = $value;\n        }\n    }\n    // print_r($result);\n\
    \    return $result;\n}\n\n$value = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($value));\n\
    $value = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($value));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwqx4ihn.php:36\nStack\
    \ trace:\n#0 /tmp/tmpgwqx4ihn.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgwqx4ihn.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $arr = [];\n    $arr2 = [];\n    foreach ($lst as $key => $value) {\n\
    \        $len = strlen($value);\n        if ($len % 2 === 0) {\n            $arr[$len][]\
    \ = $value;\n        }\n    }\n    ksort($arr);\n    foreach ($arr as $key =>\
    \ $value) {\n        foreach ($value as $k => $v) {\n            $arr2[] = $v;\n\
    \        }\n    }\n    return $arr2;\n}\nassert(sorted_list_sum([\"aa\", \"a\"\
    , \"aaa\"]) === [\"aa\"]);\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"\
    cd\"]) === [\"ab\", \"cd\"]);\nassert(sorted_list_sum([\"bc\", \"ab\", \"abc\"\
    , \"c\"]) === [\"bc\", \"c\"]);\nassert(sorted_list_sum([\"x\", \"a\", \"az\"\
    , \"ab\", \"b\"]) === [\"x\", \"ab\", \"b\"]);\nassert(sorted_list_sum([\"x\"\
    , \"a\", \"a\", \"ab\", \"b\"]) === [\"x\", \"a\", \"a\", \"ab\", \"b\"]);\nassert(sorted_list_sum([\"\
    bc\", \"cd\", \"a\", \"abc\", \"c\"]) === [\"bc\", \"cd\", \"abc\", \"c\"]);\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(sorted_list_sum(['bc', 'ab', 'abc', 'c']) ===\
    \ ['bc', 'c']) failed in /tmp/tmpkifzb02h.php on line 34\n\nWarning: assert():\
    \ assert(sorted_list_sum(['x', 'a', 'az', 'ab', 'b']) === ['x', 'ab', 'b']) failed\
    \ in /tmp/tmpkifzb02h.php on line 35\n\nWarning: assert(): assert(sorted_list_sum(['x',\
    \ 'a', 'a', 'ab', 'b']) === ['x', 'a', 'a', 'ab', 'b']) failed in /tmp/tmpkifzb02h.php\
    \ on line 36\n\nWarning: assert(): assert(sorted_list_sum(['bc', 'cd', 'a', 'abc',\
    \ 'c']) === ['bc', 'cd', 'abc', 'c']) failed in /tmp/tmpkifzb02h.php on line 37\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkifzb02h.php:46\nStack\
    \ trace:\n#0 /tmp/tmpkifzb02h.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpkifzb02h.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $array = [];\n    foreach ($lst as $value) {\n        $array[] = strlen($value);\n\
    \    }\n    sort($array);\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9hu28bd.php:28\n\
    Stack trace:\n#0 /tmp/tmpd9hu28bd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpd9hu28bd.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $lst = array_unique($lst);\n  $new_list = [];\n  foreach ($lst as $string)\
    \ {\n    if (strlen($string) % 2 === 0) {\n      $new_list[] = $string;\n    }\n\
    \  }\n  sort($new_list);\n  return $new_list;\n}\n\nprint_r(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"])); // => [\"aa\"]\nprint_r(sorted_list_sum([\"ab\", \"a\"\
    , \"aaa\", \"cd\"])); // => [\"ab\", \"cd\"]\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo10bfs_3.php:40\nStack\
    \ trace:\n#0 /tmp/tmpo10bfs_3.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpo10bfs_3.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $res = [];\n    $odd_list = array_filter($lst, function($item) {\n  \
    \      return strlen($item) % 2 != 0;\n    });\n    foreach ($odd_list as $s)\
    \ {\n        if (in_array($s, $res)) {\n            continue;\n        }\n   \
    \     array_push($res, $s);\n    }\n    sort($res);\n    return $res;\n}\n\nassert\
    \ sorted_list_sum([\"aa\", \"a\", \"aaa\"]) === [\"aa\"];\nassert sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) === [\"ab\", \"cd\"];\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxoagpe07.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $length = count($lst);\n  $sorted_list = [];\n  $odd_list = [];\n  $even_list\
    \ = [];\n  for ($i = 0; $i < $length; $i++) {\n    if (strlen($lst[$i]) % 2 ==\
    \ 0) {\n      array_push($even_list, $lst[$i]);\n    } else {\n      array_push($odd_list,\
    \ $lst[$i]);\n    }\n  }\n  sort($even_list);\n  $sorted_list = array_merge($even_list,\
    \ $odd_list);\n  return $sorted_list;\n}\n$lst = [\"aa\", \"a\", \"aaa\"];\n$result\
    \ = sorted_list_sum($lst);\nprint_r($result);\necho \"\\n\";\n$lst = [\"ab\",\
    \ \"a\", \"aaa\", \"cd\"];\n$result = sorted_list_sum($lst);\nprint_r($result);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\n\nArray\n(\n\
    \    [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpis0kq0r0.php:44\nStack trace:\n\
    #0 /tmp/tmpis0kq0r0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpis0kq0r0.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $sort_lst = array_filter($lst, function($w) {\n        if (strlen($w)\
    \ % 2 == 0) return $w;\n    });\n    asort($sort_lst);\n    return $sort_lst;\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsf70sgt0.php:29\n\
    Stack trace:\n#0 /tmp/tmpsf70sgt0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsf70sgt0.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  return array_unique(\n    array_map(\n      function($x) { return $x['word'];\
    \ },\n      array_values(\n        array_filter(\n          array_map(\n     \
    \       function($x) {\n              return [\n                'word' => $x,\n\
    \                'len' => strlen($x)\n              ];\n            },\n     \
    \       $lst\n          ),\n          function($x) {\n            return $x['len']\
    \ % 2 == 0;\n          }\n        )\n      )\n    )\n  );\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0quppt94.php:45\n\
    Stack trace:\n#0 /tmp/tmp0quppt94.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0quppt94.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // sort the list by length, then alphabetically\n    // remove all the\
    \ odd lengths\n    $lst_out = array();\n    usort($lst, function($a, $b) {\n \
    \       $cmp = strcmp(strlen($a), strlen($b));\n        if ($cmp == 0) {\n   \
    \         $cmp = strcmp($a, $b);\n        }\n        return $cmp;\n    });\n \
    \   foreach ($lst as $l) {\n        if (strlen($l) % 2 == 0) {\n            $lst_out[]\
    \ = $l;\n        }\n    }\n    return $lst_out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $odds = [];\n    $evens = [];\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if (strlen($lst[$i]) % 2 == 0) {\n            array_push($evens,\
    \ $lst[$i]);\n        } else {\n            array_push($odds, $lst[$i]);\n   \
    \     }\n    }\n    sort($evens);\n    return $evens;\n}\n\nprint_r(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpw1ro_vxy.php:41\nStack trace:\n#0 /tmp/tmpw1ro_vxy.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw1ro_vxy.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$lst = array_values(array_unique($lst));\n\tsort($lst);\n\t$res = [];\n\
    \t$curr = $lst[0];\n\t$total = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\
    \tif ($lst[$i] == $curr) {\n\t\t\t$total += $lst[$i];\n\t\t} else {\n\t\t\t$res[]\
    \ = $total;\n\t\t\t$curr = $lst[$i];\n\t\t\t$total = $lst[$i];\n\t\t}\n\t}\n\t\
    $res[] = $total;\n\treturn $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpjx89nihf.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjx89nihf.php:39\n\
    Stack trace:\n#0 /tmp/tmpjx89nihf.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjx89nihf.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $result = [];\n    foreach ($lst as $value) {\n        if (strlen($value)\
    \ % 2 == 0) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgir7i23q.php:37\n\
    Stack trace:\n#0 /tmp/tmpgir7i23q.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgir7i23q.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $remove_value = array_filter($lst, function($val) {\n        if (strlen($val)\
    \ % 2 != 0) {\n            return $val;\n        }\n    });\n    sort($remove_value);\n\
    \    return $remove_value;\n}\n\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\n\nArray\n(\n    [0] => a\n \
    \   [1] => aaa\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5j6oc12.php:37\n\
    Stack trace:\n#0 /tmp/tmpn5j6oc12.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpn5j6oc12.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $lst_sum = 0;\n  $lst_count = count($lst);\n  for ($i = 0; $i < $lst_count;\
    \ $i++) {\n    $lst_sum += $lst[$i];\n  }\n  return $lst_sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpldqrplmy.php on line\
    \ 19\n\nWarning: A non-numeric value encountered in /tmp/tmpldqrplmy.php on line\
    \ 19\n\nWarning: A non-numeric value encountered in /tmp/tmpldqrplmy.php on line\
    \ 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpldqrplmy.php:29\n\
    Stack trace:\n#0 /tmp/tmpldqrplmy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpldqrplmy.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst = array_filter($lst, 'is_string');\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    usort($lst, function($str1, $str2) {\n  \
    \      if (strlen($str1) == strlen($str2)) {\n            return strcmp($str1,\
    \ $str2);\n        }\n        return strlen($str1) - strlen($str2);\n    });\n\
    \    return $lst;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pju3ygp.php:32\n\
    Stack trace:\n#0 /tmp/tmp2pju3ygp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp2pju3ygp.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst = array_count_values($lst);\n    $lst = array_flip($lst);\n    ksort($lst);\n\
    \    return array_flip($lst);\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphms2ur2w.php:26\n\
    Stack trace:\n#0 /tmp/tmphms2ur2w.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphms2ur2w.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $a = array_filter($lst, function($str) {\n        return strlen($str)\
    \ % 2 == 0;\n    });\n    // The keys will be lost\n    $a = array_values($a);\n\
    \    usort($a, function($l, $r) {\n        return strcmp($l, $r);\n    });\n \
    \   return $a;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvcel0gp8.php:38\n\
    Stack trace:\n#0 /tmp/tmpvcel0gp8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvcel0gp8.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $res_lst = [];\n    foreach ($lst as $el) {\n        if ((strlen($el)\
    \ % 2) == 0) {\n            $res_lst[] = $el;\n        }\n    }\n    sort($res_lst);\n\
    \    return $res_lst;\n}\necho sorted_list_sum([\"aa\", \"a\", \"aaa\"]);\necho\
    \ sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]);\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "ArrayArray\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzkszdhcv.php:38\n\
    Stack trace:\n#0 /tmp/tmpzkszdhcv.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzkszdhcv.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $result = [];\n    foreach ($lst as $l) {\n        if (strlen($l) % 2\
    \ == 0) {\n            $result[] = $l;\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $result;\n}\necho(implode(', ', sorted_list_sum([\"aa\", \"a\", \"aaa\"])));\n\
    echo('<br>');\necho(implode(', ', sorted_list_sum([\"ab\", \"a\", \"aaa\", \"\
    cd\"])));\necho('<br>');\necho(implode(', ', sorted_list_sum([\"ab\", \"ac\",\
    \ \"aaa\", \"acd\"])));\necho('<br>');\necho(implode(', ', sorted_list_sum([\"\
    ab\", \"ac\", \"a\", \"acd\"])));\necho('<br>');\necho(implode(', ', sorted_list_sum([\"\
    ab\", \"ac\", \"a\", \"acd\", \"abcd\"])));\necho('<br>');\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: aa<br>ab, cd<br>ab, ac<br>ab, ac<br>ab, ac, abcd<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst_lengths = array_map('strlen', $lst);\n    array_multisort($lst_lengths,\
    \ $lst);\n    return array_unique($lst);\n}\n\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphj2svpe2.php:26\n\
    Stack trace:\n#0 /tmp/tmphj2svpe2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphj2svpe2.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $evens = [];\n    foreach ($lst as $item) {\n        if (strlen($item)\
    \ % 2 == 0) {\n            $evens[] = $item;\n        }\n    }\n    sort($evens);\n\
    \    return $evens;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhnkyjvn.php:37\n\
    Stack trace:\n#0 /tmp/tmpyhnkyjvn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpyhnkyjvn.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $max_length = 0;\n    $max_length_lst = [];\n    $lst_length = count($lst);\n\
    \    $sorted_lst = [];\n    for ($i = 0; $i < $lst_length; $i++) {\n        $word_length\
    \ = strlen($lst[$i]);\n        if ($word_length % 2 === 0) {\n            if ($word_length\
    \ > $max_length) {\n                $max_length = $word_length;\n            \
    \    $max_length_lst = [$lst[$i]];\n            } elseif ($word_length === $max_length)\
    \ {\n                array_push($max_length_lst, $lst[$i]);\n            }\n \
    \       }\n    }\n    $lst_length = count($max_length_lst);\n    for ($i = 0;\
    \ $i < $lst_length; $i++) {\n        $word = $max_length_lst[$i];\n        $word_length\
    \ = strlen($word);\n        if (!array_key_exists($word_length, $sorted_lst))\
    \ {\n            $sorted_lst[$word_length] = [$word];\n        } else {\n    \
    \        array_push($sorted_lst[$word_length], $word);\n        }\n    }\n   \
    \ $ordered_sorted_lst = [];\n    $k_lst = array_keys($sorted_lst);\n    $k_lst_length\
    \ = count($k_lst);\n    for ($i = 0; $i < $k_lst_length; $i++) {\n        $k =\
    \ $k_lst[$i];\n        $ordered_sorted_lst[$k] = sort($sorted_lst[$k]);\n    }\n\
    \    return $ordered_sorted_lst;\n}\n\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"\
    ];\necho json_encode(sorted_list_sum($lst));\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "{\"2\":true}\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbqhvd0v.php:58\n\
    Stack trace:\n#0 /tmp/tmpbbqhvd0v.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpbbqhvd0v.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $res = array();\n    foreach ($lst as $item) {\n        $len = strlen($item);\n\
    \        if ($len % 2 === 0) {\n            if (!isset($res[$len])) $res[$len]\
    \ = array();\n            $res[$len][] = $item;\n        }\n    }\n    ksort($res);\n\
    \    $output = array();\n    foreach ($res as $arr) {\n        sort($arr);\n \
    \       $output = array_merge($output, $arr);\n    }\n    return $output;\n}\n\
    $tests = array(\"aa\", \"a\", \"aaa\");\nassert(sorted_list_sum($tests) === array(\"\
    aa\"));\n$tests = array(\"ab\", \"a\", \"aaa\", \"cd\");\nassert(sorted_list_sum($tests)\
    \ === array(\"ab\", \"cd\"));\n$tests = array(\"ab\", \"a\", \"aaa\", \"cd\",\
    \ \"ab\", \"a\", \"aaa\", \"cd\");\nassert(sorted_list_sum($tests) === array(\"\
    ab\", \"ab\", \"cd\", \"cd\"));\n$tests = array(\"ab\", \"a\", \"ab\", \"a\",\
    \ \"ab\", \"a\", \"ab\", \"a\");\nassert(sorted_list_sum($tests) === array(\"\
    ab\", \"ab\", \"ab\", \"ab\"));\n$tests = array(\"aa\", \"a\", \"aaa\", \"cda\"\
    , \"cd\", \"ab\", \"a\", \"ab\", \"a\", \"ab\", \"a\", \"ab\", \"a\");\nassert(sorted_list_sum($tests)\
    \ === array(\"aa\", \"cda\", \"ab\", \"ab\", \"ab\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(sorted_list_sum($tests) === ['aa', 'cda', 'ab',\
    \ 'ab', 'ab', 'ab']) failed in /tmp/tmp2snkv6g4.php on line 41\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t// $lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\n\t$max_len = strlen($lst[0]);\n\
    \tforeach ($lst as $val) {\n\t\tif (strlen($val) > $max_len) {\n\t\t\t$max_len\
    \ = strlen($val);\n\t\t}\n\t}\n\t$even_lst = [];\n\t$odd_lst = [];\n\tforeach\
    \ ($lst as $val) {\n\t\tif (strlen($val) % 2 == 0) {\n\t\t\tarray_push($even_lst,\
    \ $val);\n\t\t} else {\n\t\t\tarray_push($odd_lst, $val);\n\t\t}\n\t}\n\tsort($even_lst);\n\
    \treturn $even_lst;\n}\nprint_r(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"\
    ]));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpu35myv8d.php:47\nStack trace:\n#0 /tmp/tmpu35myv8d.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu35myv8d.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $result = [];\n    foreach ($lst as $word) {\n        if (strlen($word)\
    \ % 2 == 0) {\n            $result[] = $word;\n        }\n    }\n    //sort the\
    \ resulting array by length of the string\n    $result_len_sort = array_map('strlen',\
    \ $result);\n    array_multisort($result_len_sort, SORT_ASC, $result);\n    //if\
    \ a word has the same length as another, sort them alphabetically\n    $result_len_sort\
    \ = array_map('strlen', $result);\n    $result_counts = array_count_values($result_len_sort);\n\
    \    foreach ($result_counts as $len => $count) {\n        if ($count > 1) {\n\
    \            $words_with_same_len = [];\n            for ($i = 0; $i < $count;\
    \ $i++) {\n                $words_with_same_len[] = $result[$i];\n           \
    \ }\n            sort($words_with_same_len);\n            for ($i = 0; $i < $count;\
    \ $i++) {\n                $result[$i] = $words_with_same_len[$i];\n         \
    \   }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $lst2 = [];\n  foreach ($lst as $element) {\n    if (is_int($element))\
    \ {\n      array_push($lst2, $element);\n    }\n  }\n  sort($lst2);\n  $sum =\
    \ 0;\n  foreach ($lst2 as $element) {\n    $sum += $element;\n  }\n  return $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivb6tvz6.php:35\n\
    Stack trace:\n#0 /tmp/tmpivb6tvz6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpivb6tvz6.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$odd_length_strings = array();\n\tforeach ($lst as $i) {\n\t\tif (strlen($i)\
    \ % 2 == 1) {\n\t\t\tarray_push($odd_length_strings, $i);\n\t\t}\n\t}\n\tsort($odd_length_strings);\n\
    \treturn $odd_length_strings;\n}\n\n$a = [\"aa\", \"a\", \"aaa\"];\n$b = [\"ab\"\
    , \"a\", \"aaa\", \"cd\"];\nvar_dump(sorted_list_sum($a));\nvar_dump(sorted_list_sum($b));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(3) \"aaa\"\n\
    }\narray(2) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(3) \"aaa\"\n}\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpgly379ki.php:35\nStack\
    \ trace:\n#0 /tmp/tmpgly379ki.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgly379ki.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$odd_str_lst = [];\n\t$even_str_lst = [];\n\tforeach ($lst as $str) {\n\
    \t\tif (strlen($str) % 2 == 0) {\n\t\t\tarray_push($even_str_lst, $str);\n\t\t\
    } else {\n\t\t\tarray_push($odd_str_lst, $str);\n\t\t}\n\t}\n\treturn [$even_str_lst,\
    \ $odd_str_lst];\n}\n\n$lst = [\"a\", \"aa\", \"aaa\", \"aaaa\"];\nlist($even_str_lst,\
    \ $odd_str_lst) = sorted_list_sum($lst);\nsort($even_str_lst);\nsort($odd_str_lst);\n\
    echo \"<pre>\";\nprint_r($even_str_lst);\nprint_r($odd_str_lst);\necho \"</pre>\"\
    ;\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => aa\n    [1] => aaaa\n)\nArray\n(\n    [0] =>\
    \ a\n    [1] => aaa\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp36s_isfd.php:42\nStack trace:\n#0 /tmp/tmp36s_isfd.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmp36s_isfd.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $list_sum = [];\n    foreach ($lst as $item) {\n        if (count($item)\
    \ % 2 == 0) {\n            $list_sum[] = $item;\n        }\n    }\n    return\
    \ $list_sum;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpdvusnwmt.php on line 18\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpdvusnwmt.php\
    \ on line 18\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpdvusnwmt.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdvusnwmt.php:30\nStack trace:\n#0 /tmp/tmpdvusnwmt.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdvusnwmt.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst_new = array();\n    foreach ($lst as $key => $value) {\n       \
    \ if (strlen($value) % 2 == 0) {\n            $lst_new[] = $value;\n        }\n\
    \    }\n    sort($lst_new);\n    return $lst_new;\n}\n$lst = [\"aa\", \"a\", \"\
    aaa\"];\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args) {\n   \
    \ return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9y6pj05c.php:38\nStack trace:\n#0 /tmp/tmp9y6pj05c.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9y6pj05c.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $result = [];\n    foreach ($lst as $key => $value) {\n        if (strlen($value)\
    \ % 2 == 0) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkwto9ox.php:37\n\
    Stack trace:\n#0 /tmp/tmpnkwto9ox.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnkwto9ox.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $sorted_lst = [];\n    foreach ($lst as $item) {\n        if (strlen($item)\
    \ % 2 == 0) {\n            $sorted_lst[] = $item;\n        }\n    }\n    sort($sorted_lst);\n\
    \    return $sorted_lst;\n}\n$string = \"abcd\";\n$lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\"];\necho \"The string is: \" . $string . \"<br>\";\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "The string is: abcd<br>Array\n(\n    [0] => ab\n    [1] => cd\n)\n<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpsrwhogo2.php:42\nStack\
    \ trace:\n#0 /tmp/tmpsrwhogo2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsrwhogo2.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // sort the list by word length\n    usort($lst, function($a, $b) {\n\
    \        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    // check for\
    \ duplicates\n    $lst = array_unique($lst);\n    // create a new list that only\
    \ contains words of even length\n    $new_lst = [];\n    foreach ($lst as $word)\
    \ {\n        if (strlen($word) % 2 == 0) {\n            $new_lst[] = $word;\n\
    \        }\n    }\n    return $new_lst;\n}\n\n$test_list = [\"aa\", \"a\", \"\
    aaa\"];\n$test_list_2 = [\"ab\", \"a\", \"aaa\", \"cd\"];\necho \"list_sort([\\\
    \"aa\\\", \\\"a\\\", \\\"aaa\\\"]) => \";\nvar_dump(sorted_list_sum($test_list));\n\
    echo \"list_sort([\\\"ab\\\", \\\"a\\\", \\\"aaa\\\", \\\"cd\\\"]) => \";\nvar_dump(sorted_list_sum($test_list_2));\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "list_sort([\"aa\", \"a\", \"aaa\"]) => array(1) {\n  [0]=>\n  string(2)\
    \ \"aa\"\n}\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => array(2) {\n  [0]=>\n\
    \  string(2) \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$lst1 = array_filter($lst, function($w) { return strlen($w) % 2 == 0; });\n\
    \tsort($lst1);\n\treturn $lst1;\n}\necho '<pre>';\nprint_r(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nprint_r(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"\
    cd\"]));\necho '</pre>';\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp605x5het.php:35\n\
    Stack trace:\n#0 /tmp/tmp605x5het.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp605x5het.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $new_lst = [];\n  foreach ($lst as $word) {\n    if (strlen($word) % 2\
    \ === 0) {\n      $new_lst[] = $word;\n    }\n  }\n  usort($new_lst, function($a,\
    \ $b) {\n    if (strlen($a) === strlen($b)) {\n      return strcmp($a, $b);\n\
    \    }\n    return strlen($a) - strlen($b);\n  });\n  return $new_lst;\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $new_list = [];\n    foreach ($lst as $item) {\n        if (strlen($item)\
    \ % 2 == 0) {\n            $new_list[] = $item;\n        }\n    }\n    sort($new_list);\n\
    \    return $new_list;\n}\nprint_r(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpinkq04s4.php:37\nStack trace:\n#0 /tmp/tmpinkq04s4.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpinkq04s4.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $new_list = array();\n  $len_lst = count($lst);\n  $max_len = 0;\n  $i\
    \ = 0;\n  while ($i < $len_lst) {\n    $len = strlen($lst[$i]);\n    if ($len\
    \ % 2 == 0) {\n      array_push($new_list, $lst[$i]);\n    }\n    if ($len > $max_len)\
    \ {\n      $max_len = $len;\n    }\n    $i++;\n  }\n  $sorted_list = $new_list;\n\
    \  for ($i = 0; $i < $max_len; $i++) {\n    $add_lst = array();\n    for ($j =\
    \ 0; $j < count($sorted_list); $j++) {\n      if (strlen($sorted_list[$j]) ==\
    \ $i) {\n        array_push($add_lst, $sorted_list[$j]);\n      }\n    }\n   \
    \ sort($add_lst);\n    $sorted_list = array_merge($sorted_list, $add_lst);\n \
    \ }\n  return $sorted_list;\n}\nassert(sorted_list_sum([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) ==\
    \ [\"ab\", \"cd\"]);\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(sorted_list_sum(['aa', 'a', 'aaa']) == ['aa'])\
    \ failed in /tmp/tmpzei91yaq.php on line 43\n\nWarning: assert(): assert(sorted_list_sum(['ab',\
    \ 'a', 'aaa', 'cd']) == ['ab', 'cd']) failed in /tmp/tmpzei91yaq.php on line 44\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzei91yaq.php:51\nStack\
    \ trace:\n#0 /tmp/tmpzei91yaq.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpzei91yaq.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst_size = count($lst);\n    $i = 0;\n    while ($i < $lst_size) {\n\
    \        if (strlen($lst[$i]) % 2 == 1) {\n            array_splice($lst, $i,\
    \ 1);\n            $lst_size--;\n        } else {\n            $i++;\n       \
    \ }\n    }\n    usort($lst, function ($a, $b) {\n        $len_a = strlen($a);\n\
    \        $len_b = strlen($b);\n        if ($len_a == $len_b) {\n            return\
    \ $a <=> $b;\n        }\n        return $len_a <=> $len_b;\n    });\n    return\
    \ $lst;\n}\n\n$list = [\"ab\", \"a\", \"aaa\", \"cd\"];\necho \"unsorted: \" .\
    \ join(\", \", $list) . \"\\n\";\necho \"sorted: \" . join(\", \", sorted_list_sum($list))\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "unsorted: ab, a, aaa, cd\nsorted: ab, cd\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  // Your code here\n  $tosort = array();\n  foreach ($lst as $n) {\n   \
    \ if (strlen($n) % 2 == 0) {\n      $tosort[] = $n;\n    }\n  }\n  usort($tosort,\
    \ function($a, $b) {\n    $al = strlen($a);\n    $bl = strlen($b);\n    if ($al\
    \ == $bl) {\n      return strcmp($a, $b);\n    }\n    return ($al > $bl) ? +1\
    \ : -1;\n  });\n  return $tosort;\n}\n\n$tests = [\n  [\"aa\", \"a\", \"aaa\"\
    ],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"aa\", \"a\", \"aaa\", \"ab\", \"\
    cd\"],\n  [\"zebra\", \"apple\", \"blue\", \"b\", \"cd\"],\n  [\"zebra\", \"apple\"\
    , \"blue\", \"b\", \"cd\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"\
    b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"\
    b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"\
    b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"\
    b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"\
    b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"\
    b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"\
    b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"\
    b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\",\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj8ykej05.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    sort($lst);\n    for ($i = 0; $i < count($lst); $i++) {\n        if (strlen($lst[$i])\
    \ % 2 == 0) {\n            unset($lst[$i]);\n        }\n    }\n    return $lst;\n\
    }\n$my_list = array('a','ab','abcd','b','cd','f','fff','fgh','fg','fghij');\n\
    print_r(sorted_list_sum($my_list));\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => a\n    [3] => b\n    [5] => f\n    [6] => fff\n  \
    \  [7] => fg\n    [8] => fgh\n    [9] => fghij\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyt6r9m37.php:31\nStack trace:\n#0 /tmp/tmpyt6r9m37.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyt6r9m37.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $sum = 0;\n  sort($lst);\n  foreach ($lst as $value) {\n    $sum += $value;\n\
    \  }\n  return $sum;\n}\necho sorted_list_sum([2, 3, 5, 1, -4]);\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "7\nWarning: A non-numeric value encountered in /tmp/tmp7dyub4qj.php on\
    \ line 19\n\nWarning: A non-numeric value encountered in /tmp/tmp7dyub4qj.php\
    \ on line 19\n\nWarning: A non-numeric value encountered in /tmp/tmp7dyub4qj.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7dyub4qj.php:30\n\
    Stack trace:\n#0 /tmp/tmp7dyub4qj.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7dyub4qj.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$new_list = array();\n\t$sum = 0;\n\tforeach ($lst as $l) {\n\t\t$sum +=\
    \ $l;\n\t\t$new_list[] = $sum;\n\t}\n\treturn $new_list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp650y9s50.php on line\
    \ 19\n\nWarning: A non-numeric value encountered in /tmp/tmp650y9s50.php on line\
    \ 19\n\nWarning: A non-numeric value encountered in /tmp/tmp650y9s50.php on line\
    \ 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp650y9s50.php:30\n\
    Stack trace:\n#0 /tmp/tmp650y9s50.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp650y9s50.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $newlst = [];\n    foreach ($lst as $el) {\n        if (strlen($el) %\
    \ 2 == 0) {\n            $newlst[] = $el;\n        }\n    }\n    sort($newlst);\n\
    \    return $newlst;\n}\necho implode(sorted_list_sum([\"aa\", \"a\", \"aaa\"\
    ])) . \"\\n\";\necho implode(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))\
    \ . \"\\n\";\necho implode(sorted_list_sum([\"ab\", \"a\", \"cd\"])) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "aa\nabcd\nabcd\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1r6sacby.php:39\n\
    Stack trace:\n#0 /tmp/tmp1r6sacby.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1r6sacby.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $odd_length = array_filter($lst, function($val) {\n    return ((strlen($val)\
    \ % 2) == 1);\n  });\n  // var_dump($odd_length);\n  $odd_length = array_unique($odd_length);\n\
    \  sort($odd_length);\n  return $odd_length;\n}\n$list = [\"ab\", \"a\", \"aaa\"\
    , \"cd\"];\nprint_r(sorted_list_sum($list));\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgfbsa9e9.php:31\nStack trace:\n#0 /tmp/tmpgfbsa9e9.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgfbsa9e9.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $output = [];\n    foreach ($lst as $word) {\n        if (strlen($word)\
    \ % 2 === 0) {\n            $output[] = $word;\n        }\n    }\n    return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaw1b0j_s.php:31\n\
    Stack trace:\n#0 /tmp/tmpaw1b0j_s.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpaw1b0j_s.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $arr = [];\n    foreach ($lst as $val) {\n        $arr[$val] = $val;\n\
    \    }\n    ksort($arr);\n    return array_values($arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfsf91xs.php:29\n\
    Stack trace:\n#0 /tmp/tmpmfsf91xs.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmfsf91xs.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst = array_unique($lst);\n    $lst_lengths = array_map('strlen', $lst);\n\
    \    // print_r($lst_lengths);\n    array_multisort($lst_lengths, $lst);\n   \
    \ // print_r($lst);\n    $i = 0;\n    while($i < count($lst)) {\n        // echo\
    \ $lst[$i] . PHP_EOL;\n        if(strlen($lst[$i]) % 2 != 0) {\n            unset($lst[$i]);\n\
    \        }\n        $i++;\n    }\n    print_r($lst);\n}\nsorted_list_sum([\"a\"\
    , \"abc\", \"ab\", \"cd\", \"abcd\", \"abcde\", \"cde\", \"cd\"]);\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [1] => ab\n    [2] => cd\n    [5] => abcd\n    [6] => abcde\n\
    )\nArray\n(\n    [1] => aa\n    [2] => aaa\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1jxcmqv4.php:37\nStack trace:\n#0 /tmp/tmp1jxcmqv4.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1jxcmqv4.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $odd = [];\n    $even = [];\n    $result = [];\n    $sorted_result =\
    \ [];\n    foreach ($lst as $value) {\n        if (strlen($value) % 2 == 0) {\n\
    \            $even[] = $value;\n        } else {\n            $odd[] = $value;\n\
    \        }\n    }\n    $result = array_diff($lst, $odd);\n    sort($result);\n\
    \    return $result;\n}\n\nassert(sorted_list_sum([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"]);\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"\
    ab\", \"cd\"]);\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\", \"b\"\
    , \"c\", \"ac\", \"dd\"]) == [\"ab\", \"ac\", \"b\", \"c\", \"cd\", \"dd\"]);\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(sorted_list_sum(['ab', 'a', 'aaa', 'cd', 'b',\
    \ 'c', 'ac', 'dd']) == ['ab', 'ac', 'b', 'c', 'cd', 'dd']) failed in /tmp/tmpnn1z34qb.php\
    \ on line 34\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnn1z34qb.php:46\n\
    Stack trace:\n#0 /tmp/tmpnn1z34qb.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpnn1z34qb.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$lst = array_unique($lst);\n\t$lst = array_filter($lst, function($str)\
    \ {\n\t\treturn strlen($str) % 2 == 0;\n\t});\n\tsort($lst);\n\treturn $lst;\n\
    }\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpq3mgb9pd.php:36\nStack trace:\n#0 /tmp/tmpq3mgb9pd.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpq3mgb9pd.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // your code\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_jinbgx.php:24\n\
    Stack trace:\n#0 /tmp/tmpe_jinbgx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpe_jinbgx.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $count = count($lst);\n  $sorted_list = array();\n  for ($i = 0; $i < $count;\
    \ $i++) {\n    if (strlen($lst[$i]) % 2 == 0) {\n      array_push($sorted_list,\
    \ $lst[$i]);\n    }\n  }\n  asort($sorted_list);\n  return $sorted_list;\n}\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0m_u1p2.php:33\n\
    Stack trace:\n#0 /tmp/tmpf0m_u1p2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpf0m_u1p2.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $sorted_array = array();\n    foreach ($lst as $str) {\n        $sorted_array[strlen($str)]\
    \ = $str;\n    }\n    ksort($sorted_array);\n    return $sorted_array;\n}\n$test_list\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\"];\n$result = sorted_list_sum($test_list);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [1] => a\n    [2] => cd\n    [3] => aaa\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpbsq7a2zc.php:31\nStack trace:\n\
    #0 /tmp/tmpbsq7a2zc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbsq7a2zc.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst = array_unique($lst);\n    $lst_len = array_map('strlen', $lst);\n\
    \    array_multisort($lst_len, $lst);\n    return $lst;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hq9mzd8.php:26\n\
    Stack trace:\n#0 /tmp/tmp2hq9mzd8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2hq9mzd8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $odd_lst = array();\n    foreach ($lst as $key => $val) {\n        if\
    \ (strlen($val) % 2 == 0) {\n            $odd_lst[] = $val;\n        }\n    }\n\
    \    sort($odd_lst);\n    return $odd_lst;\n}\necho implode(\",\", sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\necho \"<br/>\";\necho implode(\",\", sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "aa<br/>ab,cd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpua5g92xx.php:39\n\
    Stack trace:\n#0 /tmp/tmpua5g92xx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpua5g92xx.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$strlen = [];\n\t$str = [];\n\tforeach ($lst as $word) {\n\t\tif (strlen($word)\
    \ % 2 == 0) {\n\t\t\tarray_push($strlen, strlen($word));\n\t\t\tarray_push($str,\
    \ $word);\n\t\t}\n\t}\n\tarray_multisort($strlen, $str);\n\treturn $str;\n}\n\n\
    $input = [\"aa\", \"a\", \"aaa\"];\n$output = [\"aa\"];\n\necho \"<pre>\";\necho\
    \ \"Input: \";\nprint_r($input);\necho \"Expected Output: \";\nprint_r($output);\n\
    echo \"Actual Output: \";\nprint_r(sorted_list_sum($input));\necho \"</pre>\"\
    ;\n\n$input = [\"ab\", \"a\", \"aaa\", \"cd\"];\n$output = [\"ab\", \"cd\"];\n\
    \necho \"<pre>\";\necho \"Input: \";\nprint_r($input);\necho \"Expected Output:\
    \ \";\nprint_r($output);\necho \"Actual Output: \";\nprint_r(sorted_list_sum($input));\n\
    echo \"</pre>\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Input: Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\n\
    Expected Output: Array\n(\n    [0] => aa\n)\nActual Output: Array\n(\n    [0]\
    \ => aa\n)\n</pre><pre>Input: Array\n(\n    [0] => ab\n    [1] => a\n    [2] =>\
    \ aaa\n    [3] => cd\n)\nExpected Output: Array\n(\n    [0] => ab\n    [1] =>\
    \ cd\n)\nActual Output: Array\n(\n    [0] => ab\n    [1] => cd\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $r = [];\n    foreach ($lst as $e) {\n        if (count($e) % 2 == 0)\
    \ {\n            $r[] = $e;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\nvar_dump(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nvar_dump(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpby47qg3_.php on line 18\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpby47qg3_.php\
    \ on line 18\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpby47qg3_.php on line 18\narray(0) {\n}\n\nWarning:\
    \ count(): Parameter must be an array or an object that implements Countable in\
    \ /tmp/tmpby47qg3_.php on line 18\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpby47qg3_.php on line 18\n\n\
    Warning: count(): Parameter must be an array or an object that implements Countable\
    \ in /tmp/tmpby47qg3_.php on line 18\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmpby47qg3_.php on line\
    \ 18\narray(0) {\n}\n\nWarning: count(): Parameter must be an array or an object\
    \ that implements Countable in /tmp/tmpby47qg3_.php on line 18\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpby47qg3_.php\
    \ on line 18\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpby47qg3_.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpby47qg3_.php:33\nStack trace:\n#0 /tmp/tmpby47qg3_.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpby47qg3_.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $new = [];\n    foreach ($lst as $elem) {\n        if (strlen($elem)\
    \ % 2 == 0) {\n            $new[] = $elem;\n        }\n    }\n    return $new;\n\
    }\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2it_3t6v.php:30\n\
    Stack trace:\n#0 /tmp/tmp2it_3t6v.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2it_3t6v.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $even_list = [];\n    foreach ($lst as $str) {\n        if (strlen($str)\
    \ % 2 == 0) {\n            $even_list[] = $str;\n        }\n    }\n    sort($even_list);\n\
    \    return $even_list;\n}\nassert(sorted_list_sum([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"]);\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"\
    ab\", \"cd\"]);\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcaexboi.php:38\n\
    Stack trace:\n#0 /tmp/tmpbcaexboi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpbcaexboi.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $str = '';\n  foreach ($lst as $item) {\n    $length = strlen($item);\n\
    \    if ($length % 2 == 0) {\n      $str .= $item . ' ';\n    }\n  }\n  $arr =\
    \ explode(' ', $str);\n  sort($arr);\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82vnrwm5.php:33\n\
    Stack trace:\n#0 /tmp/tmp82vnrwm5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp82vnrwm5.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $filtered = array_filter($lst, function($item) {\n        return strlen($item)\
    \ % 2 != 0;\n    });\n    sort($filtered);\n    return $filtered;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph6vu36in.php:28\n\
    Stack trace:\n#0 /tmp/tmph6vu36in.php(37): test()\n#1 {main}\n  thrown in /tmp/tmph6vu36in.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    for ($i = 0; $i < count($lst); $i++) {\n        if (strlen($lst[$i])\
    \ % 2 == 1) {\n            unset($lst[$i]);\n        }\n    }\n    return $lst;\n\
    }\n$list_of_strings = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($list_of_strings));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => ab\n    [3] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpbvl9dpff.php:30\nStack trace:\n#0 /tmp/tmpbvl9dpff.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbvl9dpff.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $result = [];\n    foreach ($lst as $key => $value) {\n        if (strlen($value)\
    \ % 2 == 0) {\n            $result[] = $value;\n        }\n    }\n    if (empty($result))\
    \ {\n        return $result;\n    }\n    else {\n        sort($result);\n    \
    \    return $result;\n    }\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpofaeff1i.php:41\n\
    Stack trace:\n#0 /tmp/tmpofaeff1i.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpofaeff1i.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    foreach ($lst as $key => $value) {\n        if (strlen($value) % 2 !=\
    \ 0) {\n            unset($lst[$key]);\n        }\n    }\n    return $lst;\n}\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9x31t7oz.php:30\n\
    Stack trace:\n#0 /tmp/tmp9x31t7oz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9x31t7oz.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // TODO: Task 1 - Remove words that have odd length from $lst and sort\n\
    \    //               the resulting list ascending by length. If two words\n \
    \   //               have the same length, sort the list alphabetically.\n   \
    \ return $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0a_4fzoy.php:27\n\
    Stack trace:\n#0 /tmp/tmp0a_4fzoy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0a_4fzoy.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$new_lst = [];\n\tforeach ($lst as $value) {\n\t\tif (strlen($value) %\
    \ 2 == 0) {\n\t\t\t$new_lst[] = $value;\n\t\t}\n\t}\n\tsort($new_lst);\n\treturn\
    \ $new_lst;\n}\n\n$list = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($list));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmptavt9c40.php:39\nStack trace:\n#0 /tmp/tmptavt9c40.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmptavt9c40.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\n}\n$test = [\"aa\", \"a\", \"aaa\"];\n$test2 = [\"ab\", \"a\", \"aaa\"\
    , \"cd\"];\nvar_dump(sorted_list_sum($test));\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "NULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoobd9hgn.php:26\n\
    Stack trace:\n#0 /tmp/tmpoobd9hgn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpoobd9hgn.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst = array_unique($lst);\n    $count = count($lst);\n    $i = 0;\n\
    \    $new_list = [];\n    while ($i < $count) {\n        $j = $i + 1;\n      \
    \  while ($j < $count) {\n            if (strlen($lst[$i]) < strlen($lst[$j]))\
    \ {\n                $tmp = $lst[$i];\n                $lst[$i] = $lst[$j];\n\
    \                $lst[$j] = $tmp;\n            }\n            if (strlen($lst[$i])\
    \ == strlen($lst[$j])) {\n                if ($lst[$i] > $lst[$j]) {\n       \
    \             $tmp = $lst[$i];\n                    $lst[$i] = $lst[$j];\n   \
    \                 $lst[$j] = $tmp;\n                }\n            }\n       \
    \     $j++;\n        }\n        $i++;\n    }\n    foreach ($lst as $item) {\n\
    \        if (strlen($item) % 2 == 0) {\n            $new_list[] = $item;\n   \
    \     }\n    }\n    return $new_list;\n}\necho \"<pre>\";\nprint_r(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => aa\n)\n</pre><pre>Array\n(\n    [0] => ab\n \
    \   [1] => cd\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw92vw08k.php:58\n\
    Stack trace:\n#0 /tmp/tmpw92vw08k.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpw92vw08k.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // $lst = array_filter($lst, function($n) {\n    //     return $n % 2\
    \ == 0;\n    // });\n    // $lst = array_values($lst);\n\n    $lst = array_filter($lst,\
    \ function($n) {\n        return $n % 2 == 0;\n    });\n    $lst = array_values($lst);\n\
    \n    // sort the list\n    sort($lst);\n\n    return $lst;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpmf8555ii.php on line\
    \ 22\n\nWarning: A non-numeric value encountered in /tmp/tmpmf8555ii.php on line\
    \ 22\n\nWarning: A non-numeric value encountered in /tmp/tmpmf8555ii.php on line\
    \ 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmf8555ii.php:36\n\
    Stack trace:\n#0 /tmp/tmpmf8555ii.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmf8555ii.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t// TODO: Implement me.\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprkg54f5m.php:23\n\
    Stack trace:\n#0 /tmp/tmprkg54f5m.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprkg54f5m.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tfor ($j = $i + 1; $j < count($lst);\
    \ $j++) {\n\t\t\tif ($lst[$i] % 2 == 0) {\n\t\t\t\t$tmp = $lst[$i];\n\t\t\t\t\
    $lst[$i] = $lst[$j];\n\t\t\t\t$lst[$j] = $tmp;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $lst;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpe4w0jco9.php on line\
    \ 18\n\nWarning: A non-numeric value encountered in /tmp/tmpe4w0jco9.php on line\
    \ 18\n\nWarning: A non-numeric value encountered in /tmp/tmpe4w0jco9.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4w0jco9.php:32\n\
    Stack trace:\n#0 /tmp/tmpe4w0jco9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpe4w0jco9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $arr = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($i % 2 ==\
    \ 0) {\n      array_push($arr, $lst[$i]);\n    }\n  }\n  sort($arr);\n  return\
    \ $arr;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst2 = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\");\necho \"<pre>\";\nvar_dump(sorted_list_sum($lst));\nvar_dump(sorted_list_sum($lst2));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(2) {\n  [0]=>\n  string(2) \"aa\"\n  [1]=>\n  string(3) \"aaa\"\
    \n}\narray(2) {\n  [0]=>\n  string(3) \"aaa\"\n  [1]=>\n  string(2) \"ab\"\n}\n\
    </pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1bs_zgu.php:36\n\
    Stack trace:\n#0 /tmp/tmpl1bs_zgu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpl1bs_zgu.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $lst1 = [];\n  foreach ($lst as $item) {\n    if (strlen($item) % 2 ==\
    \ 0) {\n      $lst1[] = $item;\n    }\n  }\n  sort($lst1);\n  return $lst1;\n\
    }\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rtjhnxq.php:36\n\
    Stack trace:\n#0 /tmp/tmp7rtjhnxq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7rtjhnxq.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $new_list = array();\n    foreach ($lst as $element) {\n        if (strlen($element)\
    \ % 2 == 0) {\n            array_push($new_list, $element);\n        }\n    }\n\
    \    sort($new_list);\n    return $new_list;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cmeze64.php:37\n\
    Stack trace:\n#0 /tmp/tmp4cmeze64.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4cmeze64.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\n}\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20oag1jm.php:25\n\
    Stack trace:\n#0 /tmp/tmp20oag1jm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp20oag1jm.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example: print \"Hello world!\";\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjwj5muc.php:25\n\
    Stack trace:\n#0 /tmp/tmpfjwj5muc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfjwj5muc.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // your code here\n    $array = $lst;\n    $odd = array();\n    $even\
    \ = array();\n    foreach ($array as $value) {\n        if(strlen($value) % 2\
    \ != 0) {\n            $odd[] = $value;\n        } else {\n            $even[]\
    \ = $value;\n        }\n    }\n    $even_sort = $even;\n    asort($even_sort);\n\
    \    return $even_sort;\n}\n\n$result = sorted_list_sum([\"aa\", \"a\", \"aaa\"\
    ]);\nprint_r($result);\necho \"<br>\";\n\n$result2 = sorted_list_sum([\"ab\",\
    \ \"a\", \"aaa\", \"cd\"]);\nprint_r($result2);\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiizglcg_.php:45\n\
    Stack trace:\n#0 /tmp/tmpiizglcg_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpiizglcg_.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $result = [];\n    $set = [];\n    foreach ($lst as $item) {\n      \
    \  if (strlen($item) % 2 === 0) {\n            $result[] = $item;\n        }\n\
    \    }\n    sort($result);\n    foreach ($result as $item) {\n        if (!in_array($item,\
    \ $set)) {\n            $set[] = $item;\n        }\n    }\n    return $set;\n\
    }\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjape7il.php:42\n\
    Stack trace:\n#0 /tmp/tmpfjape7il.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfjape7il.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $even_list = array();\n    $odd_list = array();\n    foreach ($lst as\
    \ $i) {\n        $length = strlen($i);\n        if ($length % 2 == 0) {\n    \
    \        array_push($even_list, $i);\n        } else {\n            array_push($odd_list,\
    \ $i);\n        }\n    }\n    sort($even_list);\n    sort($odd_list);\n    return\
    \ array_merge($even_list, $odd_list);\n}\n\n$lst = array('aa', 'a', 'aaa');\n\
    print_r(sorted_list_sum($lst));\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp2vnjhijp.php:39\nStack trace:\n\
    #0 /tmp/tmp2vnjhijp.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2vnjhijp.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $res = [];\n    foreach ($lst as $s) {\n        if (strlen($s) % 2 ==\
    \ 0) {\n            $res[] = $s;\n        }\n    }\n    $res = array_unique($res);\n\
    \    sort($res);\n    return $res;\n}\n\n$list1 = [\"aa\", \"a\", \"aaa\"];\n\
    $list2 = [\"ab\", \"a\", \"aaa\", \"cd\"];\n$list3 = [\"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"bc\", \"bb\", \"b\"];\n$list4 = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    bc\", \"bb\", \"b\", \"bcd\", \"aaa\", \"a\", \"aaa\"];\n\nassert(list_sort($list1)\
    \ == [\"aa\"]);\nassert(list_sort($list2) == [\"ab\", \"cd\"]);\nassert(list_sort($list3)\
    \ == [\"ab\", \"cd\", \"bc\"]);\nassert(list_sort($list4) == [\"ab\", \"cd\",\
    \ \"bc\"]);\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function list_sort() in\
    \ /tmp/tmpdqgg4whm.php:32\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpdqgg4whm.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $key) {\n    $result[] = $key;\n\
    \  }\n  return $result;\n}\n\nassert(sorted_list_sum([\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"]);\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"\
    ab\", \"cd\"]);\nassert(sorted_list_sum([\"ab\", \"ab\", \"a\", \"aaa\", \"cd\"\
    ]) == [\"ab\", \"ab\", \"cd\"]);\nassert(sorted_list_sum([\"b\", \"b\", \"b\"\
    , \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"\
    , \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"\
    , \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"\
    , \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"\
    , \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"\
    , \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"\
    , \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"\
    , \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"\
    , \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"\
    , \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"\
    , \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\",\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3ft99sqs.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $new_array = [];\n    foreach ($lst as $el) {\n        $len = strlen($el);\n\
    \        if (isset($new_array[$len])) {\n            $new_array[$len][] = $el;\n\
    \        } else {\n            $new_array[$len] = [$el];\n        }\n    }\n \
    \   return $new_array;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2c245usb.php:32\n\
    Stack trace:\n#0 /tmp/tmp2c245usb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp2c245usb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$odds = array();\n\t$evens = array();\n\tforeach ($lst as $elt) {\n\t\t\
    if (strlen($elt) % 2 == 0) {\n\t\t\tarray_push($evens, $elt);\n\t\t} else {\n\t\
    \t\tarray_push($odds, $elt);\n\t\t}\n\t}\n\treturn $evens;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd03pk5eh.php:33\n\
    Stack trace:\n#0 /tmp/tmpd03pk5eh.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpd03pk5eh.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $arr = [];\n    foreach ($lst as $item) {\n        if (strlen($item)\
    \ % 2 == 0) {\n            $arr[] = $item;\n        }\n    }\n    sort($arr);\n\
    \    return $arr;\n}\necho implode(\", \", sorted_list_sum([\"aa\", \"a\", \"\
    aaa\"]));\necho PHP_EOL;\necho implode(\", \", sorted_list_sum([\"ab\", \"a\"\
    , \"aaa\", \"cd\"]));\necho PHP_EOL;\necho implode(\", \", sorted_list_sum([\"\
    a\", \"a\", \"aaa\", \"ab\"]));\necho PHP_EOL;\necho implode(\", \", sorted_list_sum([\"\
    A\", \"a\", \"aaa\", \"ab\"]));\necho PHP_EOL;\necho implode(\", \", sorted_list_sum([\"\
    a\", \"a\", \"AAA\", \"ab\"]));\necho PHP_EOL;\necho implode(\", \", sorted_list_sum([\"\
    a\", \"a\", \"AAA\", \"ab\"]));\necho PHP_EOL;\necho implode(\", \", sorted_list_sum([\"\
    a\", \"b\", \"AAA\", \"ab\"]));\necho PHP_EOL;\necho implode(\", \", sorted_list_sum([\"\
    A\", \"b\", \"AAA\", \"ab\"]));\necho PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "aa\nab, cd\nab\nab\nab\nab\nab\nab\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpu21abj3x.php:52\nStack trace:\n#0 /tmp/tmpu21abj3x.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu21abj3x.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $new_list = array();\n    // Your code here\n    return $new_list;\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps403i62o.php:26\n\
    Stack trace:\n#0 /tmp/tmps403i62o.php(35): test()\n#1 {main}\n  thrown in /tmp/tmps403i62o.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $arr = [];\n    foreach ($lst as $i) {\n        if (strlen($i) % 2 ==\
    \ 0) {\n            $arr[] = $i;\n        }\n    }\n    usort($arr, 'sort_by_length');\n\
    \    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_by_length' not found or invalid function name in /tmp/tmpcsig3epn.php\
    \ on line 22\n\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'sort_by_length' not found or invalid function name in /tmp/tmpcsig3epn.php\
    \ on line 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsig3epn.php:32\n\
    Stack trace:\n#0 /tmp/tmpcsig3epn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpcsig3epn.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $even_length_list = array();\n    foreach ($lst as $str) {\n        if\
    \ (strlen($str) % 2 == 0) {\n            array_push($even_length_list, $str);\n\
    \        }\n    }\n    return $even_length_list;\n}\n\n$list = [\"aa\", \"a\"\
    , \"aaa\"];\n$list2 = [\"ab\", \"a\", \"aaa\", \"cd\"];\n$list3 = [\"aa\", \"\
    a\", \"aaa\", \"ab\", \"cd\"];\n$list4 = [\"aa\", \"a\", \"aaa\", \"ab\", \"cd\"\
    , \"ab\"];\n$list5 = [\"aa\", \"a\", \"aaa\", \"ab\", \"cd\", \"ab\", \"a\"];\n\
    assert(sorted_list_sum($list) == [\"aa\"]);\nassert(sorted_list_sum($list2) ==\
    \ [\"ab\", \"cd\"]);\nassert(sorted_list_sum($list3) == [\"aa\", \"cd\"]);\nassert(sorted_list_sum($list4)\
    \ == [\"aa\", \"ab\", \"cd\"]);\nassert(sorted_list_sum($list5) == [\"aa\", \"\
    ab\", \"cd\"]);\nprint \"Your function passed all assert statements\\n\";\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(sorted_list_sum($list3) == ['aa', 'cd']) failed\
    \ in /tmp/tmpcmi3inaf.php on line 32\n\nWarning: assert(): assert(sorted_list_sum($list4)\
    \ == ['aa', 'ab', 'cd']) failed in /tmp/tmpcmi3inaf.php on line 33\n\nWarning:\
    \ assert(): assert(sorted_list_sum($list5) == ['aa', 'ab', 'cd']) failed in /tmp/tmpcmi3inaf.php\
    \ on line 34\nYour function passed all assert statements\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcmi3inaf.php:42\nStack trace:\n#0 /tmp/tmpcmi3inaf.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcmi3inaf.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $sort = function($a, $b) {\n        if (strlen($a) == strlen($b)) {\n\
    \            return strnatcmp($a, $b);\n        }\n        return strlen($a) -\
    \ strlen($b);\n    };\n    usort($lst, $sort);\n    return $lst;\n}\n\necho \"\
    Basic tests\\n\";\n\n$a = [\"aa\", \"a\", \"aaa\"];\n$a1 = [\"aa\"];\n$a2 = sorted_list_sum($a);\n\
    $a3 = array_diff($a1, $a2);\nvar_dump($a3);\nassert(empty($a3));\n\n$b = [\"ab\"\
    , \"a\", \"aaa\", \"cd\"];\n$b1 = [\"ab\", \"cd\"];\n$b2 = sorted_list_sum($b);\n\
    $b3 = array_diff($b1, $b2);\nvar_dump($b3);\nassert(empty($b3));\n\n$c = [\"ab\"\
    , \"a\", \"a\", \"aaa\", \"cd\"];\n$c1 = [\"ab\", \"cd\"];\n$c2 = sorted_list_sum($c);\n\
    $c3 = array_diff($c1, $c2);\nvar_dump($c3);\nassert(empty($c3));\n\n$d = [\"ab\"\
    , \"a\", \"a\", \"aaa\", \"cd\", \"a\"];\n$d1 = [\"ab\", \"cd\"];\n$d2 = sorted_list_sum($d);\n\
    $d3 = array_diff($d1, $d2);\nvar_dump($d3);\nassert(empty($d3));\n\n$e = [\"ab\"\
    , \"a\", \"a\", \"aaa\", \"cd\", \"a\", \"a\"];\n$e1 = [\"ab\", \"cd\"];\n$e2\
    \ = sorted_list_sum($e);\n$e3 = array_diff($e1, $e2);\nvar_dump($e3);\nassert(empty($e3));\n\
    \n$f = [\"ab\", \"a\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"aaa\"];\n$f1 =\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpusdt8nc7.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $new_lst = array();\n    foreach ($lst as $el) {\n        if (strlen($el)\
    \ % 2 == 0) {\n            $new_lst[] = $el;\n        }\n    }\n    sort($new_lst);\n\
    \    return $new_lst;\n}\n\nprint_r(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_77bkjbz.php:38\nStack trace:\n#0 /tmp/tmp_77bkjbz.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_77bkjbz.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $new_lst = [];\n    foreach ($lst as $value) {\n        if (strlen($value)\
    \ % 2 == 0) {\n            $new_lst[] = $value;\n        }\n    }\n    sort($new_lst);\n\
    \    return $new_lst;\n}\n\necho \"list_sort([\\\"aa\\\", \\\"a\\\", \\\"aaa\\\
    \"]) => \\n\";\nvar_dump(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\necho \"\\\
    n\\n\";\n\necho \"list_sort([\\\"ab\\\", \\\"a\\\", \\\"aaa\\\", \\\"cd\\\"])\
    \ => \\n\";\nvar_dump(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));\necho\
    \ \"\\n\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "list_sort([\"aa\", \"a\", \"aaa\"]) => \narray(1) {\n  [0]=>\n  string(2)\
    \ \"aa\"\n}\n\n\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => \narray(2) {\n\
    \  [0]=>\n  string(2) \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpfyy5544z.php:44\nStack trace:\n\
    #0 /tmp/tmpfyy5544z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpfyy5544z.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst = array_unique($lst);\n    $length = count($lst);\n    $odd = [];\n\
    \    for ($i = 0; $i < $length; $i++) {\n        if (strlen($lst[$i]) % 2 ===\
    \ 1) {\n            $odd[] = $lst[$i];\n        }\n    }\n    return $odd;\n}\n\
    assert(sorted_list_sum([\"aa\", \"a\", \"aaa\"]) === [\"aa\"]);\nassert(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) === [\"ab\", \"cd\"]);\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(sorted_list_sum(['aa', 'a', 'aaa']) === ['aa'])\
    \ failed in /tmp/tmptkg8zhkl.php on line 26\n\nWarning: assert(): assert(sorted_list_sum(['ab',\
    \ 'a', 'aaa', 'cd']) === ['ab', 'cd']) failed in /tmp/tmptkg8zhkl.php on line\
    \ 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptkg8zhkl.php:34\n\
    Stack trace:\n#0 /tmp/tmptkg8zhkl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptkg8zhkl.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $ret = [];\n    foreach ($lst as $num) {\n        if (!$num % 2)\n  \
    \          $ret[] = $num;\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm07qhgdm.php:29\n\
    Stack trace:\n#0 /tmp/tmpm07qhgdm.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpm07qhgdm.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $sum = 0;\n    $array_size = count($lst);\n    for ($i = 0; $i < $array_size;\
    \ $i++) {\n        $sum += $lst[$i];\n    }\n    return $sum;\n}\n$lst = [1,2,3,4,5,6,7,8,9,10];\n\
    echo \"The sum of the list is: \".sorted_list_sum($lst);\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "The sum of the list is: 55\nWarning: A non-numeric value encountered in\
    \ /tmp/tmpvmcu0b_p.php on line 19\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpvmcu0b_p.php on line 19\n\nWarning: A non-numeric value encountered\
    \ in /tmp/tmpvmcu0b_p.php on line 19\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpvmcu0b_p.php:30\nStack trace:\n#0 /tmp/tmpvmcu0b_p.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvmcu0b_p.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    foreach ($lst as $k => $v) {\n        if (strlen($v) % 2 != 0) {\n  \
    \          unset($lst[$k]);\n        }\n    }\n    sort($lst);\n    $lst = array_values($lst);\n\
    \    return $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnbcyht_.php:37\n\
    Stack trace:\n#0 /tmp/tmpwnbcyht_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpwnbcyht_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $short_strings = array();\n    foreach ($lst as $item) {\n        if\
    \ (strlen($item) % 2 == 0) {\n            array_push($short_strings, $item);\n\
    \        }\n    }\n    sort($short_strings);\n    return $short_strings;\n}\n\n\
    assert(sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\nassert(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]);\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpre9vswzz.php:40\n\
    Stack trace:\n#0 /tmp/tmpre9vswzz.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpre9vswzz.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $sorted_lst = [];\n  $short_lst = [];\n  $a_lst = [];\n  $b_lst = [];\n\
    \  foreach ($lst as $i) {\n    if (strlen($i) === 1) {\n      $short_lst[] = $i;\n\
    \    } elseif (strlen($i) === 2) {\n      $a_lst[] = $i;\n    } else {\n     \
    \ $b_lst[] = $i;\n    }\n  }\n  sort($a_lst);\n  sort($b_lst);\n  $sorted_lst\
    \ = array_merge($short_lst, $a_lst, $b_lst);\n  return $sorted_lst;\n}\nassert(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"\
    ]));\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmblsu9qk.php:42\n\
    Stack trace:\n#0 /tmp/tmpmblsu9qk.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpmblsu9qk.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n\t$i = 0;\n\tforeach ($lst as $value) {\n\t\tif(strlen($value) % 2 == 0)\
    \ {\n\t\t\t$sorted_list[$i] = $value;\n\t\t\t$i++;\n\t\t}\n\t}\n\treturn $sorted_list;\n\
    }\n$lst = [\"aa\", \"a\", \"aaa\"];\necho \"Input: \";\nprint_r($lst);\necho \"\
    <br>Result: \";\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\"];\necho \"Input: \";\nprint_r($lst);\necho \"<br>Result:\
    \ \";\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Input: Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\n<br>Result:\
    \ Array\n(\n    [0] => aa\n)\n<br>Input: Array\n(\n    [0] => ab\n    [1] => a\n\
    \    [2] => aaa\n    [3] => cd\n)\n<br>Result: Array\n(\n    [0] => ab\n    [1]\
    \ => cd\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcp6in_0.php:43\n\
    Stack trace:\n#0 /tmp/tmpzcp6in_0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpzcp6in_0.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $lst_len = count($lst);\n  for ($i = 0; $i < $lst_len; $i++) {\n    if\
    \ (strlen($lst[$i]) % 2 == 1) {\n      array_splice($lst, $i, 1);\n      $lst_len--;\n\
    \      $i--;\n    }\n  }\n  $lst_len = count($lst);\n  for ($i = 0; $i < $lst_len;\
    \ $i++) {\n    for ($j = $i + 1; $j < $lst_len; $j++) {\n      if (strlen($lst[$i])\
    \ > strlen($lst[$j])) {\n        $temp = $lst[$i];\n        $lst[$i] = $lst[$j];\n\
    \        $lst[$j] = $temp;\n      }\n    }\n  }\n  return $lst;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsh5qakns.php:44\n\
    Stack trace:\n#0 /tmp/tmpsh5qakns.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpsh5qakns.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    return implode(\" \", array_unique(array_map(function($x) { return strlen($x);\
    \ }, $lst)));\n}\n\n$lst = [\"a\", \"aa\", \"aaa\", \"a\", \"b\", \"bb\", \"bbb\"\
    , \"b\", \"cd\", \"cd\", \"c\", \"c\"];\n\necho sorted_list_sum($lst) . \"\\n\"\
    ;\n\n$_SESSION['tests'][] = [\n    'function' => 'list_sort',\n    'expected'\
    \ => \"3 2 1\",\n    'args' => [$lst],\n];\n\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "1 2 3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvvosjuq.php:34\n\
    Stack trace:\n#0 /tmp/tmpcvvosjuq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpcvvosjuq.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $list = [];\n    $list_first = [];\n    $list_second = [];\n    $list_third\
    \ = [];\n    $result = [];\n    $list = explode(',', $lst);\n    $len_word = strlen($list[0]);\n\
    \    foreach ($list as $word) {\n        if (strlen($word) == $len_word) {\n \
    \           $list_first[] = $word;\n        } elseif (strlen($word) == $len_word\
    \ + 1) {\n            $list_second[] = $word;\n        } else {\n            $list_third[]\
    \ = $word;\n        }\n    }\n    sort($list_first);\n    sort($list_second);\n\
    \    sort($list_third);\n    $result = array_merge($list_first, $list_second,\
    \ $list_third);\n    return $result;\n}\n$list = \"aa,a,ab,aaa,ac,acd,aac\";\n\
    print_r(sorted_list_sum($list));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n    [1] => ab\n    [2] => ac\n    [3] => aaa\n\
    \    [4] => aac\n    [5] => acd\n    [6] => a\n)\n\nWarning: explode() expects\
    \ parameter 2 to be string, array given in /tmp/tmpdapl106v.php on line 21\n\n\
    Warning: Invalid argument supplied for foreach() in /tmp/tmpdapl106v.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdapl106v.php:45\n\
    Stack trace:\n#0 /tmp/tmpdapl106v.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdapl106v.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $lst_array = str_split($lst);\n  $num_array = [];\n  foreach ($lst_array\
    \ as $num) {\n    if (is_numeric($num)) {\n      $num_array[] = $num;\n    }\n\
    \  }\n  $sum = array_sum($num_array);\n  return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: str_split() expects parameter 1 to be string, array given in\
    \ /tmp/tmpvt8irg8p.php on line 16\n\nWarning: Invalid argument supplied for foreach()\
    \ in /tmp/tmpvt8irg8p.php on line 18\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpvt8irg8p.php:31\nStack trace:\n#0 /tmp/tmpvt8irg8p.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvt8irg8p.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $new_lst = array();\n    foreach ($lst as $item) {\n        if (strlen($item)\
    \ % 2 == 0) {\n            $new_lst[] = $item;\n        }\n    }\n    $new_lst\
    \ = array_unique($new_lst);\n    sort($new_lst);\n    return $new_lst;\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpislendqe.php:37\n\
    Stack trace:\n#0 /tmp/tmpislendqe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpislendqe.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    if(is_array($lst)){\n        $lst = array_filter($lst, function($v) {\n\
    \            return strlen($v) % 2 == 0;\n        });\n        return array_values(array_unique($lst));\n\
    \    }\n    return [];\n}\nprint_r(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\n\
    print_r(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));\nprint_r(sorted_list_sum([\"\
    abc\", \"a\", \"aa\", \"cd\"]));\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    Array\n(\n    [0] => aa\n    [1] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1g7m_0yi.php:34\nStack trace:\n#0 /tmp/tmp1g7m_0yi.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1g7m_0yi.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $count = 0;\n  for ($i = 0; $i < count($lst); $i++) {\n    $count += $lst[$i];\n\
    \  }\n  return $count;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpn1sh_x2v.php on line\
    \ 18\n\nWarning: A non-numeric value encountered in /tmp/tmpn1sh_x2v.php on line\
    \ 18\n\nWarning: A non-numeric value encountered in /tmp/tmpn1sh_x2v.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1sh_x2v.php:28\n\
    Stack trace:\n#0 /tmp/tmpn1sh_x2v.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpn1sh_x2v.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  // TODO: Please fill this in\n}\n\nfunction candidate(...$args) {\n   \
    \ return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6mjlb83.php:24\n\
    Stack trace:\n#0 /tmp/tmpq6mjlb83.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpq6mjlb83.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $len = count($lst);\n  if ($len == 0) {\n    return $lst;\n  }\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    for ($j = $i+1; $j < $len; $j++) {\n      if (strlen($lst[$i])\
    \ > strlen($lst[$j])) {\n        $tmp = $lst[$i];\n        $lst[$i] = $lst[$j];\n\
    \        $lst[$j] = $tmp;\n      }\n    }\n  }\n  return $lst;\n}\n\n$lst = [\"\
    a\", \"abc\", \"abcdefg\", \"abcdef\", \"abc\", \"abcdefg\", \"abc\", \"a\", \"\
    abcdefg\", \"abcdef\", \"abc\"];\n$lst = sorted_list_sum($lst);\nvar_dump($lst);\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(11) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(1) \"a\"\n \
    \ [2]=>\n  string(3) \"abc\"\n  [3]=>\n  string(3) \"abc\"\n  [4]=>\n  string(3)\
    \ \"abc\"\n  [5]=>\n  string(3) \"abc\"\n  [6]=>\n  string(6) \"abcdef\"\n  [7]=>\n\
    \  string(6) \"abcdef\"\n  [8]=>\n  string(7) \"abcdefg\"\n  [9]=>\n  string(7)\
    \ \"abcdefg\"\n  [10]=>\n  string(7) \"abcdefg\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpk_4tn6dn.php:40\nStack trace:\n#0 /tmp/tmpk_4tn6dn.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk_4tn6dn.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $result = [];\n    foreach ($lst as $val) {\n        if (strlen($val)\
    \ % 2 == 0) {\n            $result[] = $val;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_uuv991.php:31\n\
    Stack trace:\n#0 /tmp/tmpl_uuv991.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpl_uuv991.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $odds = array_filter($lst, function($x) {\n        return strlen($x)\
    \ % 2 != 0;\n    });\n    return array_values(array_unique($odds));\n}\n\n$input\
    \ = [\"a\", \"aa\", \"aaa\", \"b\", \"c\", \"bb\", \"cc\", \"dd\", \"d\"];\n$expected\
    \ = [\"a\", \"aa\", \"b\", \"c\", \"dd\"];\n\n$output = sorted_list_sum($input);\n\
    \nassert(json_encode($output) == json_encode($expected));\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(json_encode($output) == json_encode($expected))\
    \ failed in /tmp/tmp8itpzrqr.php on line 27\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8itpzrqr.php:34\nStack trace:\n#0 /tmp/tmp8itpzrqr.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8itpzrqr.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $evens = [];\n    foreach ($lst as $l) {\n        if (!(strlen($l) %\
    \ 2)) {\n            $evens[] = $l;\n        }\n    }\n    return $evens;\n}\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpru6g__di.php:31\n\
    Stack trace:\n#0 /tmp/tmpru6g__di.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpru6g__di.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $odd_lst = array();\n    $even_lst = array();\n    foreach ($lst as $word)\
    \ {\n        if (strlen($word) % 2 === 0) {\n            array_push($even_lst,\
    \ $word);\n        } else {\n            array_push($odd_lst, $word);\n      \
    \  }\n    }\n    sort($even_lst);\n    sort($odd_lst);\n    $lst = array_merge($even_lst,\
    \ $odd_lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpghw8ku65.php:36\n\
    Stack trace:\n#0 /tmp/tmpghw8ku65.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpghw8ku65.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $first_word = $lst[0];\n    $same_length = array_filter($lst, function($x)\
    \ use ($first_word) {\n        return strlen($x) == strlen($first_word);\n   \
    \ });\n    $sorted_lst = array_unique($same_length);\n    sort($sorted_lst);\n\
    \    return $sorted_lst;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpya844rd0.php:30\n\
    Stack trace:\n#0 /tmp/tmpya844rd0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpya844rd0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $sorted_list = array();\n\
    \    foreach ($lst as $key => $value) {\n        if (preg_match('/[aeiou]/', $value))\
    \ {\n            array_push($sorted_list, $value);\n        }\n    }\n    return\
    \ $sorted_list;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxjg8u4g.php:33\n\
    Stack trace:\n#0 /tmp/tmpcxjg8u4g.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcxjg8u4g.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $sorted_lst = [];\n    foreach ($lst as $word) {\n        if (strlen($word)\
    \ % 2 === 0) {\n            $sorted_lst[] = $word;\n        }\n    }\n    sort($sorted_lst);\n\
    \    return $sorted_lst;\n}\n$test1 = [\"aa\", \"a\", \"aaa\"];\n$result1 = sorted_list_sum($test1);\n\
    $test2 = [\"ab\", \"a\", \"aaa\", \"cd\"];\n$result2 = sorted_list_sum($test2);\n\
    echo \"test 1: \" . implode(\", \", $result1) . \"\\n\";\necho \"test 2: \" .\
    \ implode(\", \", $result2) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "test 1: aa\ntest 2: ab, cd\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp5obxogz5.php:42\nStack trace:\n#0 /tmp/tmp5obxogz5.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5obxogz5.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $even_lst = [];\n  $i = 0;\n  while ($i < count($lst)) {\n    if (strlen($lst[$i])\
    \ % 2 == 0) {\n      array_push($even_lst, $lst[$i]);\n    }\n    $i++;\n  }\n\
    \  sort($even_lst);\n  return $even_lst;\n}\n$lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\"];\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7e8fbuhk.php:39\n\
    Stack trace:\n#0 /tmp/tmp7e8fbuhk.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp7e8fbuhk.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $len = count($lst);\n    if ($len == 0) {\n        return array();\n\
    \    }\n    if ($len == 1) {\n        return $lst;\n    }\n    return sorted_list_sum(array_slice($lst,\
    \ 0, $len / 2)) + sorted_list_sum(array_slice($lst, $len / 2));\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbvz79lj.php:32\n\
    Stack trace:\n#0 /tmp/tmphbvz79lj.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphbvz79lj.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $lst = array_unique($lst);\n  $lst = array_values($lst);\n  $lst_length\
    \ = count($lst);\n  for ($i = 0; $i < $lst_length; $i++) {\n    for ($j = 0; $j\
    \ < $lst_length; $j++) {\n      if ($lst[$i] < $lst[$j]) {\n        $temp = $lst[$i];\n\
    \        $lst[$i] = $lst[$j];\n        $lst[$j] = $temp;\n      }\n    }\n  }\n\
    \  $sorted_lst = [];\n  foreach ($lst as $value) {\n    if (strlen($value) % 2\
    \ == 0) {\n      array_push($sorted_lst, $value);\n    }\n  }\n  return $sorted_lst;\n\
    }\necho implode(\", \", sorted_list_sum([\"aa\", \"a\", \"aaa\"])) . PHP_EOL;\n\
    echo implode(\", \", sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"])) . PHP_EOL;\n\
    echo implode(\", \", sorted_list_sum([\"aa\", \"a\", \"aaa\", \"cdd\", \"cd\"\
    ])) . PHP_EOL;\necho implode(\", \", sorted_list_sum([\"ab\", \"a\", \"aaa\",\
    \ \"cdd\", \"cd\"])) . PHP_EOL;\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "aa\nab, cd\naa, cd\nab, cd\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp6lyh0n6g.php:51\nStack trace:\n#0 /tmp/tmp6lyh0n6g.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6lyh0n6g.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $odd_words = [];\n    foreach ($lst as $word) {\n        if (strlen($word)\
    \ % 2 != 0) {\n            array_push($odd_words, $word);\n        }\n    }\n\
    \    $odd_words = array_unique($odd_words);\n    sort($odd_words);\n    return\
    \ $odd_words;\n}\n\n$list = [\"aa\", \"a\", \"aaa\"];\n$list2 = [\"ab\", \"a\"\
    , \"aaa\", \"cd\"];\n\nprint_r(sorted_list_sum($list2));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3_aful_i.php:36\nStack trace:\n#0 /tmp/tmp3_aful_i.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3_aful_i.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $lst_lengths = array_map('strlen', $lst);\n    array_multisort($lst_lengths,\
    \ $lst);\n    $lst_lengths = array_unique($lst_lengths);\n    $lst_lengths = array_filter($lst_lengths,\
    \ function($n) {\n        return $n % 2 === 0;\n    });\n    $lst_lengths = array_values($lst_lengths);\n\
    \    $result = array();\n    foreach ($lst as $elem) {\n        if (in_array(strlen($elem),\
    \ $lst_lengths)) {\n            $result[] = $elem;\n        }\n    }\n    return\
    \ $result;\n}\n\n$lst = ['aa', 'a', 'aaa'];\nprint_r(sorted_list_sum($lst));\n\
    echo '<br>';\n$lst = ['ab', 'a', 'aaa', 'cd'];\nprint_r(sorted_list_sum($lst));\n\
    echo '<br>';\n$lst = ['a', 'aa', 'aaa', 'cd', 'bb'];\nprint_r(sorted_list_sum($lst));\n\
    echo '<br>';\n$lst = ['a', 'aa', 'aaa', 'cd', 'bb', 'aa'];\nprint_r(sorted_list_sum($lst));\n\
    echo '<br>';\n$lst = ['a', 'aa', 'aaa', 'cd', 'bb', 'aa', 'ad', 'ab'];\nprint_r(sorted_list_sum($lst));\n\
    echo '<br>';\n$lst = ['a', 'aa', 'aaa', 'cd', 'bb', 'aa', 'ad', 'ab', 'cde'];\n\
    print_r(sorted_list_sum($lst));\necho '<br>';\n$lst = ['a', 'aa', 'aaa', 'cd',\
    \ 'bb', 'aa', 'ad', 'ab', 'cde', 'cdf'];\nprint_r(sorted_list_sum($lst));\necho\
    \ '<br\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7rr9h_l5.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $new_lst = [];\n    foreach ($lst as $elem) {\n        if (strlen($elem)\
    \ % 2 == 0) {\n            $new_lst[] = $elem;\n        }\n    }\n    sort($new_lst);\n\
    \    return $new_lst;\n}\n$list = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($list));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpxm721yx9.php:38\nStack trace:\n#0 /tmp/tmpxm721yx9.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpxm721yx9.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $values = array_count_values($lst);\n    $new_array = array();\n    foreach\
    \ ($values as $key => $value) {\n        if ($value > 1) {\n            $new_array[]\
    \ = $key;\n        }\n    }\n    return $new_array;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98g0yt9b.php:30\n\
    Stack trace:\n#0 /tmp/tmp98g0yt9b.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp98g0yt9b.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $s) {\n    if (strlen($s) % 2 ==\
    \ 0) {\n      $result[] = $s;\n    }\n  }\n  sort($result);\n  return $result;\n\
    }\n\nassert(sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\nassert(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]);\nassert(sorted_list_sum([\"\
    zz\", \"z\", \"zzz\"]) == [\"zz\"]);\nassert(sorted_list_sum([\"aa\", \"a\", \"\
    aaa\", \"cd\", \"z\", \"zz\", \"zzz\"]) == [\"aa\", \"cd\", \"zz\"]);\nassert(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\", \"z\", \"zz\", \"zzz\"]) == [\"ab\", \"cd\", \"\
    zz\"]);\n\necho \"OK\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "OK\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm54uiiqc.php:44\n\
    Stack trace:\n#0 /tmp/tmpm54uiiqc.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpm54uiiqc.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  // Write your code here\n  $result = array();\n  $odd = array();\n  $even\
    \ = array();\n  $even_sorted = array();\n  $odd_sorted = array();\n  foreach ($lst\
    \ as $string) {\n    if (strlen($string) % 2 == 0) {\n      array_push($even,\
    \ $string);\n    } else {\n      array_push($odd, $string);\n    }\n  }\n  sort($even);\n\
    \  sort($odd);\n  if (sizeof($even) != 0) {\n    $even_sorted = $even;\n  }\n\
    \  if (sizeof($odd) != 0) {\n    $odd_sorted = $odd;\n  }\n  foreach ($even_sorted\
    \ as $word) {\n    array_push($result, $word);\n  }\n  foreach ($odd_sorted as\
    \ $word) {\n    array_push($result, $word);\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp09v_lkj4.php:51\n\
    Stack trace:\n#0 /tmp/tmp09v_lkj4.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp09v_lkj4.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $newlst = [];\n  foreach ($lst as $elem) {\n    if (strlen($elem) % 2 ===\
    \ 0) {\n      $newlst[] = $elem;\n    }\n  }\n  sort($newlst);\n  return $newlst;\n\
    }\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84ebpr0n.php:42\n\
    Stack trace:\n#0 /tmp/tmp84ebpr0n.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp84ebpr0n.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $ret = [];\n  foreach ($lst as $string) {\n    if (strlen($string) % 2\
    \ == 0) {\n      $ret[] = $string;\n    }\n  }\n  sort($ret);\n  return $ret;\n\
    }\n\n$check1 = [\"aa\", \"a\", \"aaa\"];\n$check2 = [\"ab\", \"a\", \"aaa\", \"\
    cd\"];\n$check3 = [\"ab\", \"a\", \"aaa\", \"cd\", \"cde\"];\n$check4 = [\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"cde\", \"cdef\"];\n$check5 = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"cde\", \"cdef\", \"cdefg\"];\n\n$check1 = sorted_list_sum($check1);\n\
    $check2 = sorted_list_sum($check2);\n$check3 = sorted_list_sum($check3);\n$check4\
    \ = sorted_list_sum($check4);\n$check5 = sorted_list_sum($check5);\n\nif ($check1\
    \ != [\"aa\"]) {\n  echo \"test 1 failed!\\n\";\n}\nif ($check2 != [\"ab\", \"\
    cd\"]) {\n  echo \"test 2 failed!\\n\";\n}\nif ($check3 != [\"ab\", \"cd\", \"\
    cde\"]) {\n  echo \"test 3 failed!\\n\";\n}\nif ($check4 != [\"ab\", \"cd\", \"\
    cde\", \"cdef\"]) {\n  echo \"test 4 failed!\\n\";\n}\nif ($check5 != [\"ab\"\
    , \"cd\", \"cde\", \"cdef\", \"cdefg\"]) {\n  echo \"test 5 failed!\\n\";\n}\n\
    \n$total = 0;\n$i = 0;\nwhile ($i < 10) {\n  $start = microtime(true);\n  sorted_list_sum(str_split(\"\
    abcdefghijklmnopqrstuvwxyz0123456789\"));\n  $end = microtime(true);\n  $total\
    \ += $end - $start;\n  $i++;\n}\necho \"average time: \" . ($total / $i) . \"\\\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0oltkku2.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    // your code here\n    $sum = 0;\n    sort($lst);\n    foreach ($lst\
    \ as $item) {\n        $sum += $item;\n    }\n    return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpbtvotzsn.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmpbtvotzsn.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmpbtvotzsn.php on line\
    \ 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtvotzsn.php:29\n\
    Stack trace:\n#0 /tmp/tmpbtvotzsn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbtvotzsn.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $odd_lst = [];\n    foreach ($lst as $val) {\n        if (strlen($val)\
    \ % 2 == 0) {\n            $odd_lst[] = $val;\n        }\n    }\n    sort($odd_lst);\n\
    \    return $odd_lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgs7zgpoc.php:37\n\
    Stack trace:\n#0 /tmp/tmpgs7zgpoc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgs7zgpoc.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $new_array = [];\n    $result = [];\n    $count = 0;\n    foreach ($lst\
    \ as $word) {\n        $new_array[$count] = strlen($word);\n        $count++;\n\
    \    }\n    asort($new_array);\n    foreach ($new_array as $word) {\n        $result[]\
    \ = $word;\n    }\n    return $result;\n}\n\n$lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\"];\necho sorted_list_sum($lst);\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12s72luo.php:37\n\
    Stack trace:\n#0 /tmp/tmp12s72luo.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp12s72luo.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    foreach ($lst as $key => $value) {\n        $length[$key] = strlen($value);\n\
    \    }\n    array_multisort($length, SORT_ASC, $lst);\n    return $lst;\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxx3uaono.php:27\n\
    Stack trace:\n#0 /tmp/tmpxx3uaono.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxx3uaono.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $odd_words = array_filter($lst, function($str) {\n        return strlen($str)\
    \ % 2 == 0;\n    });\n    usort($odd_words, function($a, $b) {\n        if (strlen($a)\
    \ == strlen($b)) {\n            return $a > $b;\n        }\n        return strlen($a)\
    \ > strlen($b);\n    });\n    return $odd_words;\n}\n\n$lst = [\"aa\", \"a\",\
    \ \"aaa\"];\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\necho \"sorted_list_sum(\"\
    .json_encode($lst).\"): \".json_encode(sorted_list_sum($lst));\necho \"\\n\\n\"\
    ;\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "sorted_list_sum([\"ab\",\"a\",\"aaa\",\"cd\"]): [\"ab\",\"cd\"]\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    $sorted_list = $lst;\n    sort($sorted_list);\n    return $sorted_list;\n\
    }\nassert(sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\nassert(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]);\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(sorted_list_sum(['aa', 'a', 'aaa']) == ['aa'])\
    \ failed in /tmp/tmp6zi5cmmw.php on line 20\n\nWarning: assert(): assert(sorted_list_sum(['ab',\
    \ 'a', 'aaa', 'cd']) == ['ab', 'cd']) failed in /tmp/tmp6zi5cmmw.php on line 21\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6zi5cmmw.php:27\nStack\
    \ trace:\n#0 /tmp/tmp6zi5cmmw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6zi5cmmw.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n    if (empty($lst)) {\n        return '';\n    }\n    $odd = '';\n    foreach\
    \ ($lst as $x) {\n        if (strlen($x) % 2 != 0) {\n            $odd .= $x;\n\
    \        }\n    }\n    sort($lst);\n    return $odd;\n}\n$lst = [\"aa\", \"a\"\
    , \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "aaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmfi5avs.php:36\n\
    Stack trace:\n#0 /tmp/tmpkmfi5avs.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkmfi5avs.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $lst_of_words = [];\n  $clean_lst = [];\n  $sorted_lst = [];\n  $sorted_lst_of_words\
    \ = [];\n  $clean_lst_of_words = [];\n  $output = \"\";\n  foreach ($lst as $word)\
    \ {\n    if (strlen($word) % 2 == 0) {\n      array_push($lst_of_words, $word);\n\
    \    }\n  }\n  $clean_lst = array_unique($lst_of_words);\n  $sorted_lst = array_values($clean_lst);\n\
    \  for ($i = 0; $i < count($sorted_lst); $i++) {\n    for ($j = $i; $j < count($sorted_lst);\
    \ $j++) {\n      if (strlen($sorted_lst[$i]) < strlen($sorted_lst[$j])) {\n  \
    \      $temp = $sorted_lst[$i];\n        $sorted_lst[$i] = $sorted_lst[$j];\n\
    \        $sorted_lst[$j] = $temp;\n      }\n    }\n  }\n  foreach ($sorted_lst\
    \ as $word) {\n    array_push($sorted_lst_of_words, $word);\n  }\n  $clean_lst_of_words\
    \ = array_unique($sorted_lst_of_words);\n  $sorted_lst_of_words = array_values($clean_lst_of_words);\n\
    \  for ($i = 0; $i < count($sorted_lst_of_words); $i++) {\n    for ($j = $i; $j\
    \ < count($sorted_lst_of_words); $j++) {\n      if (strlen($sorted_lst_of_words[$i])\
    \ == strlen($sorted_lst_of_words[$j])) {\n        if ($sorted_lst_of_words[$i]\
    \ > $sorted_lst_of_words[$j]) {\n          $temp =\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz7vnbx3x.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $size = sizeof($lst);\n  $c = array();\n  for ($i = 0; $i < $size; $i++)\
    \ {\n    $c[$i] = strlen($lst[$i]);\n  }\n  $min = min($c);\n  $res = array();\n\
    \  for ($i = 0; $i < $size; $i++) {\n    if ($c[$i] == $min) {\n      $res[] =\
    \ $lst[$i];\n    }\n  }\n  sort($res);\n  return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2umckkl4.php:36\n\
    Stack trace:\n#0 /tmp/tmp2umckkl4.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2umckkl4.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that accepts a list of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum($lst)\
    \ {\n  $sorted_list = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    if (strlen($lst[$i])\
    \ % 2 == 0) {\n      array_push($sorted_list, $lst[$i]);\n    }\n  }\n  $sorted_list\
    \ = array_map('strlen', $sorted_list);\n  asort($sorted_list);\n  return array_keys($sorted_list);\n\
    }\n$a = [\"aa\", \"a\", \"aaa\"];\n$b = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($a));\n\
    print_r(sorted_list_sum($b));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpprb_q9no.php:35\nStack\
    \ trace:\n#0 /tmp/tmpprb_q9no.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpprb_q9no.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
