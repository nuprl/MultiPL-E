name: HumanEval_130_tri
language: php
prompt: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n\
  // tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) =\
  \ 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given\
  \ a non-negative integer number n, you have to a return a list of the \n// first\
  \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2,\
  \ 8]\nfunction tri($n) {\n"
tests: "function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
  \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3,\
  \ 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(1,\
  \ 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
  \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i %\
    \ 2 == 0)\n\t\t\t$arr[] = 1 + ($i / 2);\n\t\telse\n\t\t\t$arr[] = $arr[$i - 1]\
    \ + $arr[$i - 2] + $arr[$i + 1];\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", " \
    \ return sequence($n, 3, 1, [1, 3, 2]);\n}\n", "  return $n > 1 ? array_merge([1,\
    \ 3, 2], tri($n - 1)) : [1, 3, 2];\n}\n", "\t$n = $n + 1;\n\t$array = array();\n\
    \tfor ($i = 1; $i < $n; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$array[] = 3;\n\t\t\
    } elseif ($i == 2) {\n\t\t\t$array[] = 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$array[]\
    \ = 8;\n\t\t} elseif ($i == 4) {\n\t\t\t$array[] = 5;\n\t\t} elseif ($i == 5)\
    \ {\n\t\t\t$array[] = 16;\n\t\t} elseif ($i == 6) {\n\t\t\t$array[] = 11;\n\t\t\
    } elseif ($i == 7) {\n\t\t\t$array[] = 18;\n\t\t} elseif ($i == 8) {\n\t\t\t$array[]\
    \ = 15;\n\t\t} elseif ($i == 9) {\n\t\t\t$array[] = 23;\n\t\t} elseif ($i == 10)\
    \ {\n\t\t\t$array[] = 27;\n\t\t} elseif ($i == 11) {\n\t\t\t$array[] = 24;\n\t\
    \t} elseif ($i == 12) {\n\t\t\t$array[] = 31;\n\t\t} elseif ($i == 13) {\n\t\t\
    \t$array[] = 41;\n\t\t} elseif ($i == 14) {\n\t\t\t$array[] = 36;\n\t\t} elseif\
    \ ($i == 15) {\n\t\t\t$array[] = 47;\n\t\t} elseif ($i == 16) {\n\t\t\t$array[]\
    \ = 48;\n\t\t} elseif ($i == 17) {\n\t\t\t$array[] = 59;\n\t\t} elseif ($i ==\
    \ 18) {\n\t\t\t$array[] = 58;\n\t\t} elseif ($i == 19) {\n\t\t\t$array[] = 69;\n\
    \t\t} elseif ($i == 20) {\n\t\t\t$array[] = 75;\n\t\t} elseif ($i == 21) {\n\t\
    \t\t$array[] = 81;\n\t\t} elseif ($i == 22) {\n\t\t\t$", "  $tri = [1, 3, 2];\n\
    \  if ($n <= 0) {\n    return [];\n  }\n  if ($n === 1) {\n    return [1];\n \
    \ }\n  if ($n === 2) {\n    return [1, 3];\n  }\n  if ($n === 3) {\n    return\
    \ [1, 3, 2];\n  }\n  for ($i = 4; $i <= $n; $i++) {\n    if ($i % 2 === 0) {\n\
    \      $tri[] = 1 + ($i / 2);\n    } else {\n      $tri[] = $tri[$i - 2] + $tri[$i\
    \ - 3] + $tri[$i - 1];\n    }\n  }\n  return $tri;\n}\n\necho json_encode(tri(3)),\
    \ \"\\n\";\necho json_encode(tri(4)), \"\\n\";\necho json_encode(tri(5)), \"\\\
    n\";\necho json_encode(tri(6)), \"\\n\";\necho json_encode(tri(7)), \"\\n\";\n\
    echo json_encode(tri(8)), \"\\n\";\necho json_encode(tri(9)), \"\\n\";\necho json_encode(tri(10)),\
    \ \"\\n\";\necho json_encode(tri(11)), \"\\n\";\necho json_encode(tri(12)), \"\
    \\n\";\necho json_encode(tri(13)), \"\\n\";\necho json_encode(tri(14)), \"\\n\"\
    ;\necho json_encode(tri(15)), \"\\n\";\necho json_encode(tri(16)), \"\\n\";\n\
    echo json_encode(tri(17)), \"\\n\";\necho json_encode(tri(18)), \"\\n\";\necho\
    \ json_encode(tri(19)), \"\\n\";\necho json_encode(tri(20)), \"\\n\";\necho json_encode(tri(21)),\
    \ \"\\n\";\necho json_encode(tri(22)), \"\\n\";\necho json_encode(tri(23)), \"\
    \\n\";\necho json_encode(tri(24)), \"\\n\";\necho json_encode(tri(25)), \"\\n\"\
    ;\necho json_encode(tri", "\t$arr = [1, 3, 2];\n\t$tri = 0;\n\tif ($n <= 3) {\n\
    \t\treturn $arr;\n\t}\n\twhile ($n > 3) {\n\t\t$tri = $arr[0] + $arr[1] + $arr[2];\n\
    \t\t$arr[0] = $arr[1];\n\t\t$arr[1] = $arr[2];\n\t\t$arr[2] = $tri;\n\t\t$n--;\n\
    \t}\n\treturn $arr;\n}\nprint_r(tri(3));\nprint_r(tri(10));", "    $arr = [3,\
    \ 1, 2];\n    $arr = array_pad($arr, $n+1, 0);\n    for ($i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2) {\n            $arr[$i] = $arr[$i-1] + $arr[$i-2] + $arr[$i+1];\n\
    \        } else {\n            $arr[$i] = 1 + $i / 2;\n        }\n    }\n    return\
    \ $arr;\n}\nvar_dump(tri(3));", "    $output = [];\n    $output[0] = 3;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        if ($i === 1) {\n            $output[$i]\
    \ = 1;\n        } elseif ($i % 2 === 0) {\n            $output[$i] = 1 + $i /\
    \ 2;\n        } else {\n            $output[$i] = $output[$i - 1] + $output[$i\
    \ - 2] + $output[$i + 1];\n        }\n    }\n    return $output;\n}\nprint_r(tri(3));",
  "  $tribonacci = [1, 3, 2];\n  for ($i = 3; $i <= $n; $i++) {\n    if ($i % 2 ==\
    \ 0) {\n      $tribonacci[] = 1 + $i / 2;\n    } else {\n      $tribonacci[] =\
    \ $tribonacci[$i - 1] + $tribonacci[$i - 2] + $tribonacci[$i + 1];\n    }\n  }\n\
    \  return $tribonacci;\n}\n\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\"\
    ;", "    if ($n == 0) {\n        return [1];\n    }\n    if ($n == 1) {\n    \
    \    return [1, 3];\n    }\n    if ($n == 2) {\n        return [1, 3, 2];\n  \
    \  }\n    $tri = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $tri[] = 1 + $i / 2;\n        } else {\n          \
    \  $tri[] = $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n  \
    \  return $tri;\n}\nprint_r(tri(3));", "    $x = 0;\n    $arr = [];\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $x = $i / 2;\n\
    \        } else {\n            $x = tri($i - 1) + tri($i - 2) + tri($i + 1);\n\
    \        }\n        $arr[] = $x;\n    }\n    return $arr;\n}", "  if($n === 0)\
    \ {\n    return [1];\n  }\n  $arr = tri($n - 1);\n  $new = end($arr);\n  if($n\
    \ % 2 === 0) {\n    $new = 1 + $n / 2;\n  } else {\n    $new = $arr[$n - 1] +\
    \ $arr[$n - 2] + $arr[$n + 1];\n  }\n  $arr[] = $new;\n  return $arr;\n}\n", " \
    \ $arr = [];\n  for ($i = 0; $i <= $n; $i++) {\n    if ($i == 0) {\n      $arr[]\
    \ = 0;\n    } else if ($i == 1) {\n      $arr[] = 1;\n    } else if ($i == 2)\
    \ {\n      $arr[] = 3;\n    } else if ($i % 2 == 0) {\n      $arr[] = ($i / 2)\
    \ + 1;\n    } else {\n      $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \    }\n  }\n  return $arr;\n}", "  $tri = [];\n  for ($i = 0; $i <= $n; $i++)\
    \ {\n    $tri[$i] = $i % 2 == 0 ? 1 + $i / 2 : $tri[$i - 1] + $tri[$i - 2] + $tri[$i\
    \ + 1];\n  }\n  return $tri;\n}\n\nprint_r(tri(10));", "// Write your code here\n\
    }\n", "\t$array = [];\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\tif ($i == 1) {\n\t\
    \t\t$array[] = 3;\n\t\t} elseif ($i == 2) {\n\t\t\t$array[] = 2;\n\t\t} elseif\
    \ ($i == 3) {\n\t\t\t$array[] = 8;\n\t\t} elseif ($i % 2 == 0) {\n\t\t\t$array[]\
    \ = $i / 2;\n\t\t} else {\n\t\t\t$array[] = ($array[$i - 2] + $array[$i - 1] +\
    \ $array[$i - 3]);\n\t\t}\n\t}\n\treturn $array;\n}\nprint_r(tri(4));", "  $arr\
    \ = [];\n  for ($i = 0; $i <= $n; $i++) {\n    if ($i <= 1) {\n      $arr[] =\
    \ 1;\n    } else if ($i % 2 === 0) {\n      $arr[] = 1 + $i / 2;\n    } else {\n\
    \      $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n    }\n  }\n  return\
    \ $arr;\n}\n", "  $result = [];\n  for ($i = 0; $i <= $n; $i++) {\n    $result[]\
    \ = tri_recursion($i);\n  }\n  return $result;\n}\n", "  $tri = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    if ($i == 1) {\n      $tri[] = 3;\n    } else\
    \ if ($i % 2 == 0) {\n      $tri[] = (1 + $i / 2);\n    } else {\n      $tri[]\
    \ = $tri[$i - 2] + $tri[$i - 1] + $tri[$i];\n    }\n  }\n  return $tri;\n}", " \
    \   $arr = [];\n    for ($i = 0; $i <= $n; $i++) {\n        if ($i == 0) {\n \
    \           $arr[] = 1;\n        } elseif ($i == 1) {\n            $arr[] = 3;\n\
    \        } elseif ($i == 2) {\n            $arr[] = 2;\n        } elseif ($i %\
    \ 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n", "    $arr[0] = 1;\n    $arr[1] = 3;\n    $arr[2] = 2;\n    for\
    \ ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[$i]\
    \ = 1 + $i / 2;\n        } else {\n            $arr[$i] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\nprint_r(tri(3));\n\
    print_r(tri(4));\nprint_r(tri(5));", "  if($n === 0) { return []; }\n  if($n ===\
    \ 1) { return [1]; }\n  if($n === 2) { return [1, 3]; }\n  if($n === 3) { return\
    \ [1, 3, 2]; }\n  $arr = [1, 3, 2];\n  for($i = 4; $i <= $n; $i++) {\n    if($i\
    \ % 2 === 0) {\n      $arr[] = 1 + ($i / 2);\n    } else {\n      $arr[] = array_sum(array_slice($arr,\
    \ -3));\n    }\n  }\n  return $arr;\n}", "  $arr = [];\n  $tri = 1;\n  for ($i\
    \ = 0; $i <= $n; $i++) {\n    if ($i == 0) {\n      $arr[] = $tri;\n    } else\
    \ if ($i == 1) {\n      $arr[] = $tri;\n    } else if ($i == 2) {\n      $arr[]\
    \ = $tri;\n    } else if ($i == 3) {\n      $arr[] = $tri;\n    } else if ($i\
    \ % 2 == 0) {\n      $arr[] = ($i / 2) + 1;\n    } else {\n      $arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i - 3];\n    }\n  }\n  return $arr;\n}\necho(implode(\"\
    , \", tri(3)));", "  $n < 1 ? $arr = [1] : $arr = [1, 3, 2];\n  for ($i = 3; $i\
    \ <= $n; $i++) {\n    $i % 2 == 0 ? $arr[] = 1 + $i / 2 : $arr[] = $arr[$i - 1]\
    \ + $arr[$i - 2] + $arr[$i + 1];\n  }\n  return $arr;\n}", "    $arr = [1, 3,\
    \ 2];\n    if ($n > 2) {\n        for ($i = 3; $i <= $n; $i++) {\n           \
    \ if ($i % 2 == 0) {\n                $arr[] = 1 + $i / 2;\n            } else\
    \ {\n                $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n  \
    \          }\n        }\n    }\n    return $arr;\n}\n", "    if ($n == 0) {\n\
    \        return [];\n    }\n    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n;\
    \ $i++) {\n        if ($i % 2) {\n            $arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i - 3];\n        } else {\n            $arr[] = 1 + $i / 2;\n \
    \       }\n    }\n    return $arr;\n}", "    if ($n == 0) return [1];\n    if\
    \ ($n == 1) return [1, 3];\n    if ($n == 2) return [1, 3, 2];\n    $arr = [1,\
    \ 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\n     \
    \       $arr[] = 1 + $i / 2;\n        else \n            $arr[] = $arr[$i - 1]\
    \ + $arr[$i - 2] + $arr[$i + 1];\n    }\n    return $arr;\n}\n\nprint_r(tri(4));\n\
    print_r(tri(5));\nprint_r(tri(6));", "    \n}", "    if($n == 0) {\n        return\
    \ [];\n    }\n    if($n == 1) {\n        return [1];\n    }\n    if($n == 2) {\n\
    \        return [1, 1];\n    }\n    $tri = [1, 1, 1];\n    for($i = 3; $i <= $n;\
    \ $i++) {\n        $tri[$i] = $tri[$i - 1] + $tri[$i - 2] + $tri[$i - 3];\n  \
    \  }\n    return $tri;\n}\n", "  if ($n == 0) {\n    return [];\n  }\n  if ($n\
    \ == 1) {\n    return [1];\n  }\n  if ($n == 2) {\n    return [1, 3];\n  }\n \
    \ $seq = [1, 3, 2];\n  for ($i = 3; $i <= $n; $i++) {\n    if ($i % 2 == 0) {\n\
    \      $seq[] = 1 + $i / 2;\n    } else {\n      $seq[] = $seq[$i - 1] + $seq[$i\
    \ - 2] + $seq[$i + 1];\n    }\n  }\n  return $seq;\n}\nprint_r(tri(3));", "  \
    \  if ($n === 0) {\n        return [1];\n    }\n    if ($n === 1) {\n        return\
    \ [1, 3];\n    }\n    if ($n === 2) {\n        return [1, 3, 2];\n    }\n    $arr\
    \ = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 === 0)\
    \ {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] =\
    \ $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n\
    }", "    $seq = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        $seq[]\
    \ = $i % 2 === 0 ? 1 + ($i / 2) : $seq[$i - 1] + $seq[$i - 2] + $seq[$i + 1];\n\
    \    }\n    return $seq;\n}\n\nprint_r(tri(3));\n", "    $ret = [1, 3, 2];\n \
    \   for ($i = 2; $i < $n; $i++) {\n        $ret[] = ($i % 2) ? $ret[$i - 1] +\
    \ $ret[$i - 2] + $ret[$i + 1] : 1 + $i / 2;\n    }\n    return $ret;\n}\n", " \
    \ if ($n <= 1) {\n    return [1,3];\n  }\n  if ($n <= 2) {\n    return [1,3,2];\n\
    \  }\n  $num1 = 1;\n  $num2 = 3;\n  $num3 = 2;\n  $triArr = [1,3,2];\n  $i = 0;\n\
    \  while ($i < $n) {\n    $num1 = $num2;\n    $num2 = $num3;\n    $num3 = $num1\
    \ + $num2 + $triArr[$i];\n    $triArr[] = $num3;\n    $i++;\n  }\n  return $triArr;\n\
    }\nprint_r(tri(3));", "    $a = 1;\n    $b = 3;\n    $c = 2;\n    $arr = [1, 3,\
    \ 2];\n    for ($i = 0; $i < $n; $i++) {\n        $d = $a + $b + $c;\n       \
    \ $a = $b;\n        $b = $c;\n        $c = $d;\n        $arr[] = $d;\n    }\n\
    \    return $arr;\n}\nprint_r(tri(3));", "    if ($n === 0) {\n        return\
    \ [];\n    } else if ($n === 1) {\n        return [1];\n    } else if ($n ===\
    \ 2) {\n        return [1, 1];\n    } else if ($n === 3) {\n        return [1,\
    \ 1, 1];\n    }\n    $tri = [1, 1, 1];\n    for ($i = 3; $i <= $n; $i++) {\n \
    \       if ($i % 2 == 0) {\n            $tri[] = 1 + $i / 2;\n        } else {\n\
    \            $tri[] = $tri[$i - 1] + $tri[$i - 2] + $tri[$i - 3];\n        }\n\
    \    }\n    return $tri;\n}", "  $result = [];\n  $i = 1;\n  while ($i <= $n +\
    \ 1) {\n    if ($i === 1) {\n      $result[] = 3;\n    } elseif ($i === 2) {\n\
    \      $result[] = 1;\n    } elseif ($i === 3) {\n      $result[] = 2;\n    }\
    \ elseif ($i % 2 === 0) {\n      $result[] = $i / 2;\n    } else {\n      $result[]\
    \ = $result[$i - 2] + $result[$i - 3] + $result[$i - 1];\n    }\n    $i++;\n \
    \ }\n  return $result;\n}\nprint_r(tri(3));\n", "    if ($n == 0) {\n        return\
    \ [];\n    }\n    $result = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n \
    \       if ($i % 2 == 0) {\n            $result[] = 1 + $i / 2;\n        } else\
    \ {\n            $result[] = $result[$i - 1] + $result[$i - 2] + $result[$i +\
    \ 1];\n        }\n    }\n    return $result;\n}\necho '<pre>';\nprint_r(tri(3));\n\
    echo '</pre>';", "    $a = [1, 3, 2];\n    $res = [];\n    for ($i = 0; $i <=\
    \ $n; $i++) {\n        if ($i < 3) {\n            $res[] = $a[$i];\n        }\
    \ else {\n            $res[] = $res[$i - 1] + $res[$i - 2] + $res[$i - 3];\n \
    \       }\n    }\n    return $res;\n}\n", "  $sequence = [1, 3, 2];\n  if ($n\
    \ == 0) return [];\n  if ($n < 3) return array_slice($sequence, 0, $n + 1);\n\
    \  for ($i = 3; $i <= $n; $i++) {\n    $sequence[] = $i % 2 == 0 ? 1 + $i / 2\
    \ : $sequence[$i - 1] + $sequence[$i - 2] + $sequence[$i + 1];\n  }\n  return\
    \ $sequence;\n}\n", "    $n = $n + 1;\n    $i = 1;\n    $output = [];\n    while\
    \ ($i <= $n) {\n        if ($i == 1) {\n            $output[] = 1;\n        }\
    \ elseif ($i == 2) {\n            $output[] = 3;\n        } elseif ($i == 3) {\n\
    \            $output[] = 2;\n        } elseif ($i == 4) {\n            $output[]\
    \ = 8;\n        } else {\n            $output[] = ($output[$i - 4] + $output[$i\
    \ - 3] + $output[$i - 2]);\n        }\n        $i++;\n    }\n    return $output;\n\
    }\nprint_r(tri(4));", "  $array[0] = 1;\n  $array[1] = 3;\n  $array[2] = 2;\n\
    \  for ($i = 3; $i <= $n; $i++) {\n    if ($i % 2 == 0) {\n      $array[$i] =\
    \ 1 + $i / 2;\n    } else {\n      $array[$i] = $array[$i - 1] + $array[$i - 2]\
    \ + $array[$i + 1];\n    }\n  }\n  return $array;\n}\n\nvar_dump(tri(1));\nvar_dump(tri(3));\n\
    var_dump(tri(4));\nvar_dump(tri(5));\nvar_dump(tri(6));", "   $c = [1, 3, 2];\n\
    \   for ($i = 3; $i <= $n; $i++) {\n      $c[$i] = $c[$i - 1] + $c[$i - 2] + $c[$i\
    \ - 3];\n   }\n   return $c;\n}\n", "  $array = [1, 3, 2];\n  $int = 8;\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    if ($i < 2) {\n      $array[] = $array[$i];\n\
    \    } else {\n      $array[] = $array[$i - 1] + $array[$i - 2] + $int;\n    \
    \  $int = $array[$i - 1] + $array[$i - 2] + $array[$i];\n    }\n  }\n  return\
    \ $array;\n}\n", "    // ...your code here\n}\n", "  $return = [1, 3, 2];\n  for\
    \ ($i = 3; $i <= $n; $i++) {\n    if ($i % 2 == 0) {\n      $return[] = 1 + $i\
    \ / 2;\n    } else {\n      $return[] = $return[$i - 1] + $return[$i - 2] + $return[$i\
    \ + 1];\n    }\n  }\n  return $return;\n}", "    $array = [1, 3, 2];\n    if ($n\
    \ == 0) {\n        return [1];\n    } else if ($n == 1) {\n        return [1,\
    \ 3];\n    } else if ($n == 2) {\n        return [1, 3, 2];\n    } else {\n  \
    \      for ($i = 3; $i <= $n; $i++) {\n            if ($i % 2 == 0) {\n      \
    \          $array[] = 1 + $i / 2;\n            } else {\n                $array[]\
    \ = $array[$i - 1] + $array[$i - 2] + $array[$i + 1];\n            }\n       \
    \ }\n    }\n    return $array;\n}", "  if($n === 0) {\n    return [1];\n  } else\
    \ if($n === 1) {\n    return [1,3];\n  } else if($n === 2) {\n    return [1,3,2];\n\
    \  } else {\n    $result = [1,3,2];\n    for($i = 3; $i <= $n; $i++) {\n     \
    \ if($i % 2 === 0) {\n        $result[] = 1 + $i / 2;\n      } else {\n      \
    \  $result[] = $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n      }\n\
    \    }\n    return $result;\n  }\n}\necho '<pre>'; print_r(tri(3)); echo '</pre>';",
  "  if ($n == 0) {\n    return [];\n  }\n  if ($n == 1) {\n    return [1];\n  }\n\
    \  if ($n == 2) {\n    return [1, 3];\n  }\n  $list = [1, 3, 2];\n  for ($i =\
    \ 3; $i <= $n; $i++) {\n    if ($i % 2) {\n      $list[] = $list[$i - 1] + $list[$i\
    \ - 2] + $list[$i - 3];\n    } else {\n      $list[] = 1 + ($i / 2);\n    }\n\
    \  }\n  return $list;\n}\n\necho \"tri(0) is empty: \" . (tri(0) == [] ? \"ok\"\
    \ : \"fail\") . \"\\n\";\necho \"tri(1) = [1]: \" . (tri(1) == [1] ? \"ok\" :\
    \ \"fail\") . \"\\n\";\necho \"tri(2) = [1, 3]: \" . (tri(2) == [1, 3] ? \"ok\"\
    \ : \"fail\") . \"\\n\";\necho \"tri(3) = [1, 3, 2, 8]: \" . (tri(3) == [1, 3,\
    \ 2, 8] ? \"ok\" : \"fail\") . \"\\n\";\necho \"tri(4) = [1, 3, 2, 8, 4, 16]:\
    \ \" . (tri(4) == [1, 3, 2, 8, 4, 16] ? \"ok\" : \"fail\") . \"\\n\";\necho \"\
    tri(5) = [1, 3, 2, 8, 4, 16, 5, 32]: \" . (tri(5) == [1, 3, 2, 8, 4, 16, 5, 32]\
    \ ? \"ok\" : \"fail\") . \"\\n\";\necho \"tri(6) = [1, 3, 2, 8, 4, 16, 5, 32,\
    \ 6, 64]: \" . (tri(6) == [1, 3, 2, 8, 4, 16, 5, 32, 6, 64] ? \"ok\" : \"fail\"\
    ) . \"\\n\";", "    $arr = [1, 3, 2];\n    if ($n == 0) {\n        return [];\n\
    \    }\n    if ($n == 1) {\n        return [1];\n    }\n    if ($n == 2) {\n \
    \       return [1, 3];\n    }\n    for ($i = 3; $i <= $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            $arr[] = 1 + ($i / 2);\n        } else {\n    \
    \        $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n   \
    \ }\n    return $arr;\n}\necho '<pre>';\nprint_r(tri(3));\necho '</pre>';", " \
    \ $len = $n + 1;\n  $arr = [];\n  for ($i = 0; $i < $len; $i++) {\n    $arr[]\
    \ = triRecur($i);\n  }\n  return $arr;\n}\n", "  $seq = [];\n  if($n == 0) {\n\
    \    return $seq;\n  }\n  $seq[0] = 1;\n  if($n > 0) {\n    $seq[1] = 3;\n  }\n\
    \  if($n > 1) {\n    $seq[2] = 2;\n  }\n  if($n > 2) {\n    for($i = 3; $i <=\
    \ $n; $i++) {\n      if($i % 2 == 0) {\n        $seq[$i] = 1 + ($i / 2);\n   \
    \   } else {\n        $seq[$i] = $seq[$i - 1] + $seq[$i - 2] + $seq[$i + 1];\n\
    \      }\n    }\n  }\n  return $seq;\n}\n\nprint_r(tri(3));", "  if($n === 0)\
    \ return [];\n  $sequence = [1, 3, 2];\n  for($i = 3; $i <= $n; $i++) {\n    $sequence[]\
    \ = ($i % 2 === 0) ?\n      1 + $i / 2 :\n      $sequence[$i - 1] + $sequence[$i\
    \ - 2] + $sequence[$i + 1];\n  }\n  return $sequence;\n}\n\necho \"<pre>\";\n\
    print_r(tri(3));\nprint_r(tri(7));\necho \"</pre>\";", "  if ($n <= 0) return\
    \ [0];\n  $ret = [1, 3, 2];\n  if ($n <= 3) return array_slice($ret, 0, $n);\n\
    \  for ($i = 3; $i < $n; $i++) {\n    $a = $ret[$i - 1];\n    $b = $ret[$i - 2];\n\
    \    $c = $ret[$i - 3];\n    $ret[] = $a + $b + $c;\n  }\n  return $ret;\n}\n\n\
    echo implode(', ', tri(3)), \"\\n\";\necho implode(', ', tri(6)), \"\\n\";\necho\
    \ implode(', ', tri(10)), \"\\n\";\n", "    $l = [1, 3, 2];\n    if($n < 3) {\n\
    \        return array_slice($l, 0, $n + 1);\n    }\n    for($i = 3; $i <= $n;\
    \ $i++) {\n        $l[] = ($i % 2 == 0) ? 1 + $i / 2 : $l[$i - 1] + $l[$i - 2]\
    \ + $l[$i + 1];\n    }\n    return $l;\n}\n", "\tif ($n == 0) return [];\n\tif\
    \ ($n == 1) return [1];\n\tif ($n == 2) return [1, 3];\n\tif ($n == 3) return\
    \ [1, 3, 2, 8];\n\t$list = [1, 3, 2, 8];\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t\
    if ($list[$i] % 2 == 0) {\n\t\t\t$list[] = 1 + $list[$i] / 2;\n\t\t} else {\n\t\
    \t\t$list[] = $list[$i - 1] + $list[$i - 2] + $list[$i + 1];\n\t\t}\n\t}\n\treturn\
    \ $list;\n}\n", "\t$result = [1, 3, 2];\n\t\n\tfor ($i = 3; $i <= $n; $i++) {\n\
    \t\t$result[] = $i % 2 ? $result[$i - 1] + $result[$i - 2] + $result[$i + 1] :\
    \ 1 + ($i / 2);\n\t}\n\t\n\treturn $result;\n}\n\necho '<pre>tri(3)\n';\nvar_dump(tri(3));\n\
    echo '</pre>';", "    $result = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        $result[] = ($i & 1) ? ($result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1]) : (1 + $i / 2);\n    }\n    return $result;\n}\necho \"<pre>\";\nprint_r(tri(4));\n\
    echo \"</pre>\";", "    if($n == 0) {\n        return [];\n    }\n    if($n ==\
    \ 1) {\n        return [1];\n    }\n    if($n == 2) {\n        return [1, 3];\n\
    \    }\n    if($n == 3) {\n        return [1, 3, 2];\n    }\n    $a = 1;\n   \
    \ $b = 3;\n    $c = 2;\n    $result = [1, 3, 2];\n    for($i = 4; $i <= $n; $i++)\
    \ {\n        if($i % 2 == 0) {\n            $d = 1 + $i / 2;\n        } else {\n\
    \            $d = $a + $b + $c;\n        }\n        $result[] = $d;\n        $a\
    \ = $b;\n        $b = $c;\n        $c = $d;\n    }\n    return $result;\n}", " \
    \   // Write your code here\n    $result = [];\n    $result[0] = 0;\n    $result[1]\
    \ = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    for ($i = 4; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $result[$i] = 1 + $i / 2;\n     \
    \   } else {\n            $result[$i] = $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return $result;\n}", "  $result = [];\n  if ($n\
    \ === 0) {\n    return $result;\n  }\n  $result[0] = 1;\n  if ($n > 0) {\n   \
    \ $result[1] = 3;\n  }\n  if ($n > 1) {\n    $result[2] = 2;\n  }\n  for ($i =\
    \ 3; $i <= $n; $i++) {\n    if ($i % 2 === 0) {\n      $result[$i] = 1 + $i /\
    \ 2;\n    } else {\n      $result[$i] = $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n    }\n  }\n  return $result;\n}\n\necho tri(3);", "  $result = [];\n\
    \  if($n === 0) {\n    return $result;\n  }\n  array_push($result, 1);\n  if($n\
    \ === 1) {\n    return $result;\n  }\n  array_push($result, 3);\n  if($n === 2)\
    \ {\n    return $result;\n  }\n  array_push($result, 2);\n  if($n === 3) {\n \
    \   return $result;\n  }\n  for($i = 3; $i < $n; $i++) {\n    $num = 0;\n    if($i\
    \ % 2 === 0) {\n      $num = 1 + $i / 2;\n    } else {\n      $num = $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n    }\n    array_push($result, $num);\n\
    \  }\n  return $result;\n}\nprint_r(tri(3));\nprint_r(tri(7));", "  if ($n ==\
    \ 0) return [];\n  $result = [1, 3, 2];\n  for ($i = 3; $i <= $n; $i++) {\n  \
    \  $result[] = $i % 2 == 0 ? 1 + $i / 2 : $result[$i - 1] + $result[$i - 2] +\
    \ $result[$i + 1];\n  }\n  return $result;\n}", "    if ($n <= 0) return 0;\n\
    \    $trib = [1, 3, 2];\n    if ($n < 3) return $trib[$n];\n    while (count($trib)\
    \ < $n + 1) {\n        $next = count($trib) % 2 ?\n            $trib[count($trib)\
    \ - 1] + $trib[count($trib) - 2] + $trib[count($trib) - 3] :\n            1 +\
    \ count($trib) / 2;\n        $trib[] = $next;\n    }\n    return $trib;\n}\n$trib\
    \ = tri(3);\necho array_sum($trib) . \"\\n\";", "    if ($n < 0) {\n        throw\
    \ new \\InvalidArgumentException();\n    }\n\n    $result = [];\n    for ($i =\
    \ 0; $i <= $n; $i++) {\n        if ($i == 0) {\n            $result[] = 1;\n \
    \       } else if ($i == 1) {\n            $result[] = 3;\n        } else if ($i\
    \ == 2) {\n            $result[] = 2;\n        } else if ($i % 2 == 0) {\n   \
    \         $result[] = 1 + $i / 2;\n        } else {\n            $result[] = $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n\n    return $result;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i <= $n; $i++) {\n        if ($i ==\
    \ 0) {\n            $result[] = 1;\n        } elseif ($i % 2 == 0) {\n       \
    \     $result[] = 1 + $i / 2;\n        } else {\n            $result[] = $result[$i\
    \ - 3] + $result[$i - 2] + $result[$i - 1];\n        }\n    }\n    return $result;\n\
    }\n\n$test = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$expect = array(1, 1, 2,\
    \ 3, 3, 6, 7, 13, 15, 25, 30);\n", "  return $n == 0 ? [] : array_merge([1], tri(--$n));\n\
    }", "  $tri = [1, 3, 2];\n  $i = 3;\n  while ($i < $n) {\n    if ($i % 2 == 0)\
    \ {\n      $tri[] = 1 + $i / 2;\n    } else {\n      $tri[] = $tri[$i - 1] + $tri[$i\
    \ - 2] + $tri[$i + 1];\n    }\n    $i++;\n  }\n  return $tri;\n}\n\nprint_r(tri(3));",
  "  return array_map(function($item) {\n    return $item * 2;\n  }, range(1, $n));\n\
    }", "    if($n == 0) {\n        return [0];\n    }\n    if($n == 1) {\n      \
    \  return [1, 3];\n    }\n    if($n == 2) {\n        return [1, 3, 2];\n    }\n\
    \    return [1, 3, 2] + tri($n - 1);\n}", "    if($n < 2) {\n        return [1,\
    \ 3];\n    }\n    $result = [1, 3, 2];\n    for($i = 2; $i < $n; $i++) {\n   \
    \     if($i % 2 == 0) {\n            $result[] = 1 + $i / 2;\n        } else {\n\
    \            $result[] = $result[$i] + $result[$i - 1] + $result[$i + 1];\n  \
    \      }\n    }\n    return $result;\n}\n\necho \"<pre>\";\nprint_r(tri(5));\n\
    echo \"</pre>\";", "    $arr[0] = 1;\n    $arr[1] = 3;\n    $arr[2] = 2;\n   \
    \ if ($n == 0) {\n        $arr = [1];\n    } elseif ($n == 1) {\n        $arr\
    \ = [1, 3];\n    } elseif ($n == 2) {\n        $arr = [1, 3, 2];\n    } else {\n\
    \        for ($i = 3; $i <= $n; $i++) {\n            if ($i % 2 == 0) {\n    \
    \            $arr[$i] = 1 + ($i / 2);\n            } else {\n                $arr[$i]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n            }\n        }\n  \
    \  }\n    return $arr;\n}\nprint_r(tri(3));", "    //base\n    if($n == 1) return\
    \ array(1, 3);\n    if($n == 2) return array(1, 3, 2);\n    //recursion\n    $a\
    \ = tri($n - 1);\n    $a[] = $a[$n - 1] + $a[$n - 2] + $a[$n - 3];\n    return\
    \ $a;\n}", "  if ($n < 0) {\n    return null;\n  }\n  if ($n === 0) {\n    return\
    \ [];\n  }\n  if ($n === 1) {\n    return [1];\n  }\n  if ($n === 2) {\n    return\
    \ [1, 3];\n  }\n  $a = 1;\n  $b = 3;\n  $c = 2;\n  $trib = [];\n  $trib[] = $a;\n\
    \  $trib[] = $b;\n  $trib[] = $c;\n  for ($i = 0; $i < $n - 2; $i++) {\n    $d\
    \ = 0;\n    if ($a % 2 === 0) {\n      $d = 1 + $a / 2;\n    } else {\n      $d\
    \ = $b + $c + $a;\n    }\n    $trib[] = $d;\n    $a = $b;\n    $b = $c;\n    $c\
    \ = $d;\n  }\n  return $trib;\n}\n\necho implode('; ', tri(3));", "  $res = [];\n\
    \  for ($i = 0; $i <= $n; $i++) {\n    if ($i == 0) {\n      $res[] = 1;\n   \
    \ } elseif ($i == 1) {\n      $res[] = 3;\n    } elseif ($i == 2) {\n      $res[]\
    \ = 2;\n    } elseif ($i % 2 == 0) {\n      $res[] = 1 + $i / 2;\n    } else {\n\
    \      $res[] = $res[$i - 1] + $res[$i - 2] + $res[$i + 1];\n    }\n  }\n  return\
    \ $res;\n}\nprint_r(tri(3));", "    // your code goes here\n    $res = [];\n \
    \   for ($i = 0; $i <= $n; $i++) {\n        $res[] = tri_recursion($i);\n    }\n\
    \    return $res;\n}\n", "  $array = [1, 3, 2];\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    if ($i % 2 == 0) {\n      $array[] = 1 + ($i / 2);\n    } else {\n  \
    \    $array[] = $array[$i - 1] + $array[$i - 2] + $array[$i + 1];\n    }\n  }\n\
    \  return $array;\n}\n", "\t$result = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\t$result[] = 1 + $i / 2;\n\t\t} else {\n\t\t\
    \t$result[] = $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\t\t}\n\t\
    }\n\treturn $result;\n}", "\t$arr = [1, 3, 2];\n  if ($n <= 3) {\n  \tarray_splice($arr,\
    \ $n + 1);\n    return $arr;\n  }\n  $next = $arr[2] + $arr[1] + $arr[0];\n  $arr[]\
    \ = $next;\n  array_shift($arr);\n  return tri($n - 1);\n}", "  if ($n === 0)\
    \ {\n    return [];\n  } else if ($n === 1) {\n    return [1];\n  } else if ($n\
    \ === 2) {\n    return [1, 3];\n  } else if ($n === 3) {\n    return [1, 3, 2];\n\
    \  } else {\n    $tribonacci = tri($n - 1);\n    $even = $n % 2 === 0;\n    $last\
    \ = $tribonacci[count($tribonacci) - 1];\n    $secondLast = $tribonacci[count($tribonacci)\
    \ - 2];\n    $thirdLast = $tribonacci[count($tribonacci) - 3];\n    if ($even)\
    \ {\n      $tribonacci[] = 1 + ($n / 2);\n    } else {\n      $tribonacci[] =\
    \ $last + $secondLast + $thirdLast;\n    }\n    return $tribonacci;\n  }\n}\n\n\
    var_dump(tri(3));", "    $result = [1, 3, 2];\n    if ($n <= 2) return $result;\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $result[] = ($i % 2) ? $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1] : 1 + $i / 2;\n    }\n    return $result;\n\
    }\necho implode(', ', tri(3)) . PHP_EOL;\n", "    if($n == 0) return [1];\n  \
    \  if($n == 1) return [1, 3];\n    if($n == 2) return [1, 3, 2];\n    $seq = [1,\
    \ 3, 2];\n    for($i = 3; $i <= $n; $i++) {\n        if($i % 2 == 0) $seq[] =\
    \ 1 + $i / 2;\n        else $seq[] = $seq[$i - 1] + $seq[$i - 2] + $seq[$i + 1];\n\
    \    }\n    return $seq;\n}\n", "  if ($n == 0) {\n    return [1];\n  } elseif\
    \ ($n == 1) {\n    return [1, 3];\n  } elseif ($n == 2) {\n    return [1, 3, 2];\n\
    \  } else {\n    $n = $n + 1;\n    $seq = [1, 3, 2];\n    for ($i = 3; $i < $n;\
    \ $i++) {\n      if ($i % 2 == 0) {\n        $seq[] = 1 + $i / 2;\n      } else\
    \ {\n        $seq[] = $seq[$i - 1] + $seq[$i - 2] + $seq[$i + 1];\n      }\n \
    \   }\n    return $seq;\n  }\n}", "  $n--;\n  $a = 1;\n  $b = 3;\n  $c = 2;\n\
    \  $result = [1, 3, 2];\n  for ($i = 0; $i < $n; $i++) {\n    $t = $a + $b + $c;\n\
    \    $a = $b;\n    $b = $c;\n    $c = $t;\n    $result[] = $t;\n  }\n  return\
    \ $result;\n}\n\necho \"The Tribonacci sequence from 1 to 3 is:\";\nprint_r(tri(3));\n\
    echo \"\\n\";\n\necho \"The Tribonacci sequence from 1 to 5 is:\";\nprint_r(tri(5));\n\
    echo \"\\n\";\n\necho \"The Tribonacci sequence from 1 to 10 is:\";\nprint_r(tri(10));\n\
    echo \"\\n\";\n\necho \"The Tribonacci sequence from 1 to 30 is:\";\nprint_r(tri(30));\n\
    echo \"\\n\";\n\necho \"The Tribonacci sequence from 1 to 50 is:\";\nprint_r(tri(50));\n\
    echo \"\\n\";\n\necho \"The Tribonacci sequence from 1 to 100 is:\";\nprint_r(tri(100));\n\
    echo \"\\n\";", "  if($n == 0) {\n    return [];\n  } elseif($n == 1) {\n    return\
    \ [1];\n  } elseif($n == 2) {\n    return [1, 3];\n  } elseif($n == 3) {\n   \
    \ return [1, 3, 2];\n  } else {\n    $list = [1, 3, 2];\n    $n -= 3;\n    while($n--)\
    \ {\n      $list[] = $list[count($list) - 1] + $list[count($list) - 2] + $list[count($list)\
    \ - 3];\n    }\n    return $list;\n  }\n}\n", "    if ($n == 0) {\n        return\
    \ [1];\n    } else if ($n == 1) {\n        return [1, 3];\n    } else if ($n ==\
    \ 2) {\n        return [1, 3, 2];\n    } else {\n        $result = [1, 3, 2];\n\
    \        for ($i = 3; $i <= $n; $i++) {\n            if ($i % 2 == 0) {\n    \
    \            $result[] = 1 + ($i / 2);\n            } else {\n               \
    \ $result[] = $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n         \
    \   }\n        }\n        return $result;\n    }\n}\n", "  \n  if ($n === 0) {\n\
    \    return [1];\n  }\n  \n  if ($n === 1) {\n    return [1, 3];\n  }\n  \n  if\
    \ ($n === 2) {\n    return [1, 3, 2];\n  }\n  \n  $arr = [1, 3, 2];\n  \n  for\
    \ ($i = 3; $i <= $n; $i++) {\n    if ($i % 2 === 0) {\n      $arr[] = 1 + ($i\
    \ / 2);\n    } else {\n      $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i +\
    \ 1];\n    }\n  }\n  \n  return $arr;\n}\n\necho tri(3) . \"\\n\"; // [1, 3, 2,\
    \ 8]\necho tri(4) . \"\\n\"; // [1, 3, 2, 8, 10]\necho tri(5) . \"\\n\"; // [1,\
    \ 3, 2, 8, 10, 14]\necho tri(6) . \"\\n\"; // [1, 3, 2, 8, 10, 14, 21]\necho tri(7)\
    \ . \"\\n\"; // [1, 3, 2, 8, 10, 14, 21, 28]\necho tri(8) . \"\\n\"; // [1, 3,\
    \ 2, 8, 10, 14, 21, 28, 37]\necho tri(9) . \"\\n\"; // [1, 3, 2, 8, 10, 14, 21,\
    \ 28, 37, 48]\necho tri(10) . \"\\n\"; // [1, 3, 2, 8, 10, 14, 21, 28, 37, 48,\
    \ 61]\necho tri(11) . \"\\n\"; // [1, 3, 2, 8, 10, 14, 21, 28, 37, 48, 61, 77]\n\
    echo tri(12) . \"\\n\"; // [1, 3, 2, 8, 10, 14, 21, 28, 37, 48, 61, 77, 96]\n\
    echo tri(13) . \"\\n\"; // [1, 3, 2, 8, 10, 14, 21, 28, 37, 48, 61, 77, 96, 117]\n\
    echo tri(", "  if ($n <= 0) {\n    return [1];\n  }\n  $tri = [1, 3, 2];\n  while\
    \ ($n > 0) {\n    if ($n % 2 === 0) {\n      $tri[] = 1 + $n / 2;\n    } else\
    \ {\n      $tri[] = $tri[count($tri) - 1] + $tri[count($tri) - 2] + $tri[count($tri)\
    \ - 3];\n    }\n    $n--;\n  }\n  return $tri;\n}\nprint_r(tri(3));", "    $list\
    \ = [];\n    $list[] = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i\
    \ % 2) {\n            $tri = $list[$i - 1] + $list[$i - 2] + $list[$i];\n    \
    \    } else {\n            $tri = 1 + $i / 2;\n        }\n        $list[] = $tri;\n\
    \    }\n    return $list;\n}\necho json_encode(tri(3)) . PHP_EOL;", "    $result\
    \ = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $result[] = 1 + ($i / 2);\n        } else {\n            $result[]\
    \ = $result[$i - 2] + $result[$i - 1] + $result[$i + 1];\n        }\n    }\n \
    \   return $result;\n}\nprint_r(tri(3));", "    $tri = [1, 3, 2];\n    for ($i\
    \ = 3; $i <= $n; $i++) {\n        $tri[$i] = $i % 2 == 0 ? 1 + $i / 2 : $tri[$i\
    \ - 1] + $tri[$i - 2] + $tri[$i + 1];\n    }\n    return $tri;\n}", "  $r = [];\n\
    \  if ($n == 0) {\n    return $r;\n  }\n  $r[] = 1;\n  if ($n == 1) {\n    return\
    \ $r;\n  }\n  $r[] = 3;\n  if ($n == 2) {\n    return $r;\n  }\n  $r[] = 2;\n\
    \  if ($n == 3) {\n    return $r;\n  }\n  $r[] = 8;\n  for ($i = 4; $i <= $n;\
    \ $i++) {\n    $sum = 0;\n    if ($i % 2 == 0) {\n      $sum = 1 + $i / 2;\n \
    \   } else {\n      $sum = $r[$i - 1] + $r[$i - 2] + $r[$i + 1];\n    }\n    $r[]\
    \ = $sum;\n  }\n  return $r;\n}\n\n$tri = tri(7);\nprint_r($tri);", "    // if\
    \ n is even\n    if($n % 2 == 0) {\n        $arr = [1];\n        $tri = 1 + ($n\
    \ / 2);\n        for($i = 1; $i <= $n; $i++) {\n            $arr[] = $tri;\n \
    \       }\n        return $arr;\n    } else {\n        $arr = [1, 3];\n      \
    \  for($i = 2; $i <= $n; $i++) {\n            $arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n        }\n        return $arr;\n    }\n}\n\n$n = 3;\n\
    print_r(tri($n));", "    $res = [];\n    for ($i = 0; $i <= $n; $i++) {\n    \
    \    if ($i == 0) {\n            $res[] = 0;\n        } elseif ($i == 1) {\n \
    \           $res[] = 1;\n        } elseif ($i == 2) {\n            $res[] = 3;\n\
    \        } elseif ($i % 2 == 0) {\n            $res[] = 1 + $i / 2;\n        }\
    \ else {\n            $res[] = $res[$i - 1] + $res[$i - 2] + $res[$i + 1];\n \
    \       }\n    }\n    return $res;\n}", "    return $n == 0 ? [] : [1, 3, 2, 8];\n\
    }\n", "  if($n == 0) return [0];\n  $arr = [];\n  for($i = 1; $i <= $n + 1; $i++)\
    \ {\n    if($i == 1) $arr[] = 1;\n    else if($i == 2) $arr[] = 3;\n    else if($i\
    \ == 3) $arr[] = 2;\n    else if($i % 2 == 0) $arr[] = 1 + ($i / 2);\n    else\
    \ $arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n  }\n  return $arr;\n\
    }\n", "    $arr = [];\n    $arr[0] = 1;\n    $arr[1] = 3;\n    $arr[2] = 2;\n\
    \    if ($n < 3) {\n        $arr = array_slice($arr, 0, $n + 1);\n        return\
    \ $arr;\n    }\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $arr[$i] = 1 + floor($i / 2);\n        } else {\n            $arr[$i]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n$test = tri(3);\nprint_r($test);", "    $output = [1, 3, 2];\n   \
    \ if ($n == 0) {\n        return [1];\n    } elseif ($n == 1) {\n        return\
    \ [1, 3];\n    } elseif ($n == 2) {\n        return [1, 3, 2];\n    } else {\n\
    \        for ($i = 3; $i <= $n; $i++) {\n            if ($i % 2 == 0) {\n    \
    \            $output[] = 1 + $i / 2;\n            } else {\n                $output[]\
    \ = $output[$i - 1] + $output[$i - 2] + $output[$i + 1];\n            }\n    \
    \    }\n    }\n    return $output;\n}\nprint_r(tri(4));", "    // your code here\n\
    \    if ($n == 1) {\n        return [1, 3];\n    } elseif ($n == 2) {\n      \
    \  return [1, 3, 2];\n    } else {\n        $arr = [1, 3, 2];\n        for ($i\
    \ = 3; $i <= $n; $i++) {\n            if ($i % 2 == 0) {\n                $arr[]\
    \ = 1 + $i / 2;\n            } else {\n                $arr[] = $arr[$i - 1] +\
    \ $arr[$i - 2] + $arr[$i + 1];\n            }\n        }\n        return $arr;\n\
    \    }\n}", "   if ($n == 0) {\n      return [1];\n   }\n   $tri = [1, 3, 2];\n\
    \   for ($i = 3; $i <= $n; $i++) {\n      if ($i % 2 == 0) {\n         $tri[]\
    \ = 1 + $i / 2;\n      } else {\n         $tri[] = $tri[$i - 1] + $tri[$i - 2]\
    \ + $tri[$i + 1];\n      }\n   }\n   return $tri;\n}\n", "  if ($n <= 0) return\
    \ [1];\n  $nums = array_fill(0, $n, 0);\n  $nums[0] = 1;\n  $nums[1] = 3;\n  $nums[2]\
    \ = 2;\n  for ($i = 3; $i < $n; $i++) {\n    if ($i % 2 == 0) {\n      $nums[$i]\
    \ = 1 + $i / 2;\n    } else {\n      $nums[$i] = $nums[$i - 1] + $nums[$i - 2]\
    \ + $nums[$i + 1];\n    }\n  }\n  return $nums;\n}\nprint_r(tri(5));", "    if($n\
    \ <= 2) {\n        return [1, 3, 2];\n    }\n    $i = 3;\n    $arr = [1, 3, 2];\n\
    \    while($i <= $n) {\n        if($i % 2 == 0) {\n            $arr[] = 1 + ($i\
    \ / 2);\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] +\
    \ $arr[$i + 1];\n        }\n        $i++;\n    }\n    return $arr;\n}\necho \"\
    <pre>\";\nprint_r(tri(3));\necho \"</pre>\";", "    // Start - My Code\n    $tri\
    \ = [1, 3, 2];\n    $x = 3;\n    $n = $n + 1;\n    while ($x < $n) {\n       \
    \ $var = (($x % 2) == 0) ? ($x / 2) : (($tri[$x - 1] + $tri[$x - 2] + $tri[$x\
    \ + 1]));\n        array_push($tri, $var);\n        $x++;\n    }\n    return $tri;\n\
    \    // End - My Code\n}\n\n$n = 20;\nprint_r(tri($n));", "\t$ret = array();\n\
    \t$ret[0] = 1;\n\t$ret[1] = 3;\n\t$ret[2] = 2;\n\tif ($n == 0) {\n\t\treturn $ret;\n\
    \t}\n\telse if ($n == 1) {\n\t\treturn array_slice($ret, 0, 2);\n\t}\n\telse if\
    \ ($n == 2) {\n\t\treturn array_slice($ret, 0, 3);\n\t}\n\telse {\n\t\tfor ($i\
    \ = 3; $i <= $n; $i++) {\n\t\t\tif ($i % 2 == 0) {\n\t\t\t\t$ret[$i] = 1 + ($i\
    \ / 2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$ret[$i] = $ret[$i - 1] + $ret[$i - 2]\
    \ + $ret[$i + 1];\n\t\t\t}\n\t\t}\n\t\treturn $ret;\n\t}\n}\n", "\tif($n == 0)\
    \ {\n\t\treturn [];\n\t}\n\tif($n == 1) {\n\t\treturn [1];\n\t}\n\tif($n == 2)\
    \ {\n\t\treturn [1, 3];\n\t}\n\tif($n == 3) {\n\t\treturn [1, 3, 2];\n\t}\n\t\
    $t = 1;\n\t$one = 1;\n\t$two = 3;\n\t$three = 2;\n\t$result = [1, 3, 2];\n\twhile($t\
    \ < $n) {\n\t\t$current = $one + $two + $three;\n\t\t$result[] = $current;\n\t\
    \t$one = $two;\n\t\t$two = $three;\n\t\t$three = $current;\n\t\t$t++;\n\t}\n\t\
    return $result;\n}\nprint_r(tri(4));", "    if($n <= 1) {\n        return [1,\
    \ 3];\n    }\n    $tri = [1, 3, 2];\n    for($i = 0; $i < $n - 1; $i++) {\n  \
    \      if($i % 2 == 0) {\n            $tri[] = $tri[$i] + $tri[$i + 1] + $tri[$i\
    \ + 2];\n        } else {\n            $tri[] = 1 + $i / 2;\n        }\n    }\n\
    \    return $tri;\n}", "  $res = [];\n  for ($i = 0; $i <= $n; $i++) {\n    if\
    \ ($i < 3) {\n      $res[] = $i + 1;\n    } else {\n      $res[] = $res[$i - 1]\
    \ + $res[$i - 2] + $res[$i - 3];\n    }\n  }\n  return $res;\n}\nvar_dump(tri(3));\n\
    var_dump(tri(5));\nvar_dump(tri(7));\n", "    $result = [1, 3, 2];\n    $tri =\
    \ function($n) use (&$result, &$tri) {\n        if ($n === 1) {\n            return\
    \ $result[1];\n        }\n        $length = count($result);\n        return ($n\
    \ % 2 === 0) ? 1 + $n / 2 : $tri($n - 1) + $tri($n - 2) + $tri($n + 1);\n    };\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $result[] = $tri($i);\n    }\n  \
    \  return $result;\n}\n", "    if ($n == 0) return [];\n    if ($n == 1) return\
    \ [1];\n    if ($n == 2) return [1, 3];\n    $res = [1, 3, 2];\n    for ($i =\
    \ 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $res[] = 1 + $i\
    \ / 2;\n        } else {\n            $res[] = $res[$i - 1] + $res[$i - 2] + $res[$i\
    \ + 1];\n        }\n    }\n    return $res;\n}\necho '<pre>';\nprint_r(tri(3));\n\
    echo '</pre>';", "    $arr = [];\n    for ($i = 0; $i <= $n; $i++) {\n       \
    \ if ($i === 0) {\n            $arr[] = 0;\n        } elseif ($i === 1) {\n  \
    \          $arr[] = 1;\n        } elseif ($i === 2) {\n            $arr[] = 3;\n\
    \        } elseif ($i % 2 === 0) {\n            $arr[] = $i / 2;\n        } else\
    \ {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n      \
    \  }\n    }\n    return $arr;\n}\necho tri(3);", "    $result = [];\n    for ($i\
    \ = 0; $i <= $n; $i++) {\n        $result[] = tri_recursive($i);\n    }\n    return\
    \ $result;\n}\n", "  $result = [1, 3, 2];\n  for ($i = 3; $i <= $n; $i++) {\n\
    \    if ($i % 2 === 0) {\n      $result[] = $i / 2 + 1;\n    } else {\n      $result[]\
    \ = $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n    }\n  }\n  return\
    \ $result;\n}", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n \
    \       if ($i % 2 == 0) {\n            $arr[] = 1 + ($i / 2);\n        } else\
    \ {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n      \
    \  }\n    }\n    return $arr;\n}\nprint_r(tri(3));", "    $result = [1, 3, 2];\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = 1 + $i / 2;\n        } else {\n            $result[] = $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return $result;\n}\n", "    if($n\
    \ == 0) {\n        return [];\n    }\n    $sequence = [1, 3, 2];\n    for($i =\
    \ 3; $i <= $n; $i++) {\n        if($i % 2 == 0) {\n            $sequence[] = 1\
    \ + $i / 2;\n        } else {\n            $sequence[] = $sequence[$i - 1] + $sequence[$i\
    \ - 2] + $sequence[$i + 1];\n        }\n    }\n    return $sequence;\n}\n\necho\
    \ implode(', ', tri(3)) . PHP_EOL;", "    $result = [];\n    for ($i = 0; $i <=\
    \ $n; $i++) {\n        if ($i == 0) {\n            $result[] = 1;\n        } else\
    \ if ($i == 1) {\n            $result[] = 3;\n        } else if ($i == 2) {\n\
    \            $result[] = 2;\n        } else if ($i % 2 == 0) {\n            $result[]\
    \ = (1 + $i / 2);\n        } else {\n            $result[] = ($result[$i - 1]\
    \ + $result[$i - 2] + $result[$i + 1]);\n        }\n    }\n    return $result;\n\
    }", "    $list = [1, 3, 2];\n    if ($n == 0) {\n        return [];\n    }\n \
    \   if ($n == 1) {\n        return [1];\n    }\n    if ($n == 2) {\n        return\
    \ [1, 3];\n    }\n    if ($n == 3) {\n        return [1, 3, 2];\n    }\n    for\
    \ ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $list[]\
    \ = 1 + $i / 2;\n        } else {\n            $list[] = $list[$i - 1] + $list[$i\
    \ - 2] + $list[$i + 1];\n        }\n    }\n    return $list;\n}\nprint_r(tri(4));",
  "  $arr = [1, 3, 2];\n  for ($i = 3; $i <= $n; $i++) {\n    if ($i % 2 == 0) {\n\
    \      $arr[] = 1 + $i / 2;\n    } else {\n      $arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n    }\n  }\n  return $arr;\n}\n\n$cases = [\n  [\"input\"\
    \ => 3, \"expect\" => [1, 3, 2, 8]],\n  [\"input\" => 4, \"expect\" => [1, 3,\
    \ 2, 8, 4]],\n  [\"input\" => 5, \"expect\" => [1, 3, 2, 8, 4, 10]],\n  [\"input\"\
    \ => 6, \"expect\" => [1, 3, 2, 8, 4, 10, 7]],\n  [\"input\" => 7, \"expect\"\
    \ => [1, 3, 2, 8, 4, 10, 7, 9]],\n  [\"input\" => 8, \"expect\" => [1, 3, 2, 8,\
    \ 4, 10, 7, 9, 11]],\n  [\"input\" => 9, \"expect\" => [1, 3, 2, 8, 4, 10, 7,\
    \ 9, 11, 16]],\n  [\"input\" => 10, \"expect\" => [1, 3, 2, 8, 4, 10, 7, 9, 11,\
    \ 16, 12]],\n  [\"input\" => 11, \"expect\" => [1, 3, 2, 8, 4, 10, 7, 9, 11, 16,\
    \ 12, 18]],\n  [\"input\" => 12, \"expect\" => [1, 3, 2, 8, 4, 10, 7, 9, 11, 16,\
    \ 12, 18, 14]],\n  [\"input\" => 13, \"expect\" => [1, 3, 2, 8, 4, 10, 7, 9, 11,\
    \ 16, 12, 18, 14, 20]],\n  [\"input\" => 14, \"expect\" => [1, 3, 2, 8, 4, 10,\
    \ 7, 9, 11, 16, 12, 18,", "\t$result = [1, 3, 2];\n\tif($n == 0) return $result;\n\
    \tfor($i = 3; $i <= $n; $i++) {\n\t\tif($i % 2 == 0) $result[] = 1 + $i / 2;\n\
    \t\telse $result[] = $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\t\
    }\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(tri(3));", "    $result =\
    \ [];\n    for ($i = 0; $i <= $n; $i++) {\n        $result[] = $i % 2 == 0 ? 1\
    \ + $i / 2 : 0;\n    }\n    for ($i = 3; $i <= $n; $i++) {\n        $result[$i]\
    \ = $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n    }\n    return $result;\n\
    }\n$a = tri(4);\nvar_dump($a);", "    if ($n === 0) {\n        return [];\n  \
    \  }\n    if ($n === 1) {\n        return [1];\n    }\n    if ($n === 2) {\n \
    \       return [1, 3];\n    }\n    $result = [1, 3, 2];\n    for ($i = 3; $i <=\
    \ $n; $i++) {\n        if ($i % 2 === 0) {\n            $result[] = 1 + $i / 2;\n\
    \        } else {\n            $result[] = $result[$i - 1] + $result[$i - 2] +\
    \ $result[$i + 1];\n        }\n    }\n    return $result;\n}\n\n$tests = [\n \
    \   [0, []],\n    [1, [1]],\n    [2, [1, 3]],\n    [3, [1, 3, 2, 8]],\n    [4,\
    \ [1, 3, 2, 8, 4, 21, 5, 13, 34, 9, 55, 89, 14, 233, 21, 34, 144, 377, 55, 610,\
    \ 987, 89, 1597, 2584, 377, 6765, 4181, 17711, 28657, 4181, 75025, 121393, 196418,\
    \ 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352,\
    \ 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733,\
    \ 1134903170, 1836311903]],\n];\n\nforeach ($tests as $test) {\n    if (tri($test[0])\
    \ === $test[1]) {\n        echo 'passed';\n    } else {\n        echo 'failed';\n\
    \    }\n    echo \"\\n\";\n}", "\t$result = [];\n\t$cache = [];\n\tfor ($i = 1;\
    \ $i <= $n + 1; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$result[] = 1;\n\t\t\t$cache[$i]\
    \ = 1;\n\t\t} else if ($i == 2) {\n\t\t\t$result[] = 3;\n\t\t\t$cache[$i] = 3;\n\
    \t\t} else if ($i == 3) {\n\t\t\t$result[] = 2;\n\t\t\t$cache[$i] = 2;\n\t\t}\
    \ else {\n\t\t\tif ($i % 2 === 0) {\n\t\t\t\t$result[] = 1 + ($i / 2);\n\t\t\t\
    \t$cache[$i] = 1 + ($i / 2);\n\t\t\t} else {\n\t\t\t\t$result[] = $cache[$i -\
    \ 1] + $cache[$i - 2] + $cache[$i + 1];\n\t\t\t\t$cache[$i] = $cache[$i - 1] +\
    \ $cache[$i - 2] + $cache[$i + 1];\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\
    echo \"tri(3) = \" . json_encode(tri(3)) . \"\\n\";\necho \"tri(5) = \" . json_encode(tri(5))\
    \ . \"\\n\";\necho \"tri(0) = \" . json_encode(tri(0)) . \"\\n\";\necho \"tri(1)\
    \ = \" . json_encode(tri(1)) . \"\\n\";\necho \"tri(2) = \" . json_encode(tri(2))\
    \ . \"\\n\";\necho \"tri(4) = \" . json_encode(tri(4)) . \"\\n\";\n", "    $arr\
    \ = [1, 3, 2];\n    for ($i = 2; $i < $n; $i++) {\n        if ($i % 2) {\n   \
    \         $arr[] = $arr[$i] + $arr[$i - 1] + $arr[$i + 1];\n        } else {\n\
    \            $arr[] = 1 + $i / 2;\n        }\n    }\n    return $arr;\n}\nprint_r(tri(4));",
  "    $totalArr = [1, 3, 2];\n    if ($n == 0) {\n        return [1];\n    }\n  \
    \  for ($i = 0; $i < $n - 2; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ $totalArr[] = 1 + ($i + 3) / 2;\n        } else {\n            $totalArr[] =\
    \ $totalArr[$i] + $totalArr[$i - 1] + $totalArr[$i + 1];\n        }\n    }\n \
    \   return $totalArr;\n}\n", "\t$result = [1, 3, 2];\n\t$t = 1;\n\t$i = 2;\n\t\
    $j = 3;\n\t$k = 0;\n\t$r = 0;\n\twhile($r <= $n) {\n\t\t$i = 1 + $r / 2;\n\t\t\
    $j = $k + $i + $t;\n\t\t$k = $i;\n\t\t$i = $t;\n\t\t$t = $j;\n\t\t$r += 1;\n\t\
    \t$result[] = $j;\n\t}\n\treturn $result;\n}\n\nvar_dump(tri(10));", "    if ($n\
    \ === 0) {\n        return [1];\n    }\n    if ($n === 1) {\n        return [1,\
    \ 3];\n    }\n    if ($n === 2) {\n        return [1, 3, 2];\n    }\n    $tribonacci\
    \ = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 === 0)\
    \ {\n            $tribonacci[] = 1 + $i / 2;\n        } else {\n            $tribonacci[]\
    \ = $tribonacci[$i - 1] + $tribonacci[$i - 2] + $tribonacci[$i + 1];\n       \
    \ }\n    }\n    return $tribonacci;\n}", "    $i = $n + 1;\n    $arr = [];\n \
    \   for ($j = 1; $j < $i; $j++) {\n        if ($j == 1) {\n            $arr[]\
    \ = 3;\n        } else if ($j % 2 == 0) {\n            $arr[] = 1 + $j / 2;\n\
    \        } else {\n            $arr[] = $arr[$j - 1] + $arr[$j - 2] + $arr[$j\
    \ + 1];\n        }\n    }\n    return $arr;\n}", "    // your code...\n}", "\t\
    if($n == 0) return [];\n\tif($n == 1) return [1];\n\tif($n == 2) return [1, 3];\n\
    \t$result = [1, 3, 2];\n\tfor($i = 3; $i <= $n; $i++) {\n\t\tif($i % 2 == 0) {\n\
    \t\t\t$result[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$result[] = $result[$i - 1]\
    \ + $result[$i - 2] + $result[$i + 1];\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(tri(4));",
  "  if($n == 0) return [];\n  $arr = [1, 3, 2];\n  for($i = 3; $i <= $n; $i++) {\n\
    \    if($i % 2 == 0) {\n      $arr[] = 1 + $i / 2;\n    } else {\n      $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n    }\n  }\n  return $arr;\n\
    }\n", "// code here\n}", "  $result = [];\n  if ($n == 0) {\n    return $result;\n\
    \  }\n  if ($n >= 1) {\n    $result[] = 1;\n  }\n  if ($n >= 2) {\n    $result[]\
    \ = 3;\n  }\n  if ($n >= 3) {\n    $result[] = 2;\n  }\n  for ($i = 4; $i <= $n;\
    \ $i++) {\n    if ($i % 2 == 0) {\n      $res = 1 + $i / 2;\n    } else {\n  \
    \    $res = $result[$i - 1] + $result[$i - 2] + $result[$i - 3];\n    }\n    $result[]\
    \ = $res;\n  }\n  return $result;\n}\n", "  $tri = [];\n  for ($i = 0; $i <= $n;\
    \ $i++) {\n    $tri[$i] = $i % 2 === 0 ? 1 + $i / 2 : tri($i - 1) + tri($i - 2)\
    \ + tri($i + 1);\n  }\n  return $tri;\n}\nprint_r(tri(3));", "    $my_array =\
    \ array();\n    if ($n == 0) {\n        $my_array[] = 0;\n    }\n    else {\n\
    \        $my_array[] = 1;\n        $my_array[] = 3;\n        $my_array[] = 2;\n\
    \        for ($i = 3; $i <= $n; $i++) {\n            if ($i % 2 == 0) {\n    \
    \            $my_array[] = 1 + ($i / 2);\n            }\n            else {\n\
    \                $my_array[] = $my_array[$i - 1] + $my_array[$i - 2] + $my_array[$i\
    \ + 1];\n            }\n        }\n    }\n    return $my_array;\n}\nprint_r(tri(4));",
  "    if ($n <= 2) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ 1 + ($n / 2);\n    }\n    return tri($n - 1) + tri($n - 2) + tri($n + 1);\n\
    }\n\n$n = 6;\n$result = [];\nfor ($i = 0; $i <= $n; $i++) {\n    $result[] = tri($i);\n\
    }\nprint_r($result);", "  if($n == 0) {\n    return [];\n  }\n  if($n == 1) {\n\
    \    return [1];\n  }\n  if($n == 2) {\n    return [1, 3];\n  }\n  if($n == 3)\
    \ {\n    return [1, 3, 2];\n  }\n  $ret = [1, 3, 2];\n  for($i = 3; $i < $n; $i++)\
    \ {\n    if($i % 2 == 0) {\n      $ret[] = 1 + $i / 2;\n    } else {\n      $ret[]\
    \ = $ret[$i - 1] + $ret[$i - 2] + $ret[$i + 1];\n    }\n  }\n  return $ret;\n\
    }\n", "  $array = [1, 3, 2];\n  for ($i = 0; $i < $n; $i++) {\n    $array[] =\
    \ $array[$i] + $array[$i + 1] + $array[$i + 2];\n  }\n  return $array;\n}\necho\
    \ json_encode(tri(5)) . PHP_EOL;", "    if($n == 0) return [1];\n    if($n ==\
    \ 1) return [1, 3];\n    if($n == 2) return [1, 3, 2];\n    if($n % 2 == 0) return\
    \ array_merge(tri($n - 1), [1 + ($n / 2)]);\n    return array_merge(tri($n - 1),\
    \ [tri($n - 1)[count(tri($n - 1)) - 1] + tri($n - 1)[count(tri($n - 1)) - 2] +\
    \ tri($n - 1)[count(tri($n - 1)) - 3]]);\n}\nprint_r(tri(3));", "    $tri = [];\n\
    \    for ($i = 0; $i <= $n; $i++) {\n        if ($i == 0) {\n            $tri[$i]\
    \ = 1;\n        } else if ($i == 1) {\n            $tri[$i] = 3;\n        } else\
    \ if ($i == 2) {\n            $tri[$i] = 2;\n        } else if ($i % 2 == 0) {\n\
    \            $tri[$i] = 1 + ($i / 2);\n        } else {\n            $tri[$i]\
    \ = $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return\
    \ $tri;\n}", "    $n--;\n    $memoize = [3, 1, 2];\n    for ($i = 3; $i <= $n;\
    \ $i++) {\n        $memoize[$i] = $memoize[$i - 3] + $memoize[$i - 2] + $memoize[$i\
    \ - 1];\n    }\n    return $memoize;\n}\n\necho tri(3);", "    if ($n == 0) {\n\
    \        return [1];\n    }\n    if ($n == 1) {\n        return [1, 3];\n    }\n\
    \    if ($n == 2) {\n        return [1, 3, 2];\n    }\n    $result = [1, 3, 2];\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = 1 + $i / 2;\n        } else {\n            $result[] = $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return $result;\n}", "  $result\
    \ = [1, 3, 2];\n  for ($i = 3; $i <= $n; $i++) {\n    if ($i % 2 == 0) {\n   \
    \   $result[] = 1 + $i / 2;\n    } else {\n      $result[] = $result[$i - 1] +\
    \ $result[$i - 2] + $result[$i + 1];\n    }\n  }\n  return $result;\n}\nprint_r(tri(3));\n",
  "    $a = [];\n    for ($i = 0; $i <= $n; $i++) {\n        $a[] = $i % 2 == 0 ?\
    \ $i / 2 : tri($i - 1) + tri($i - 2) + tri($i + 1);\n    }\n    return $a;\n}\n",
  "    $arr = [1, 3, 2];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + ($i / 2);\n        } else {\n            $arr[]\
    \ = $arr[$i] + $arr[$i - 1] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i <= $n; $i++) {\n        $result[]\
    \ = ($i & 1)\n            ? $result[$i - 1] + $result[$i - 2] + $result[$i + 1]\n\
    \            : 1 + $i / 2;\n    }\n    return $result;\n}\n\nvar_dump(tri(3));",
  "  $arr = [1, 3, 2];\n  if ($n == 0) {\n    return [];\n  }\n  if ($n == 1) {\n\
    \    return [1];\n  }\n  if ($n == 2) {\n    return [1, 3];\n  }\n  if ($n ==\
    \ 3) {\n    return [1, 3, 2];\n  }\n  for ($i = 4; $i <= $n; $i++) {\n    if ($i\
    \ % 2 == 0) {\n      $arr[] = (1 + $i / 2);\n    } else {\n      $arr[] = ($arr[count($arr)\
    \ - 1] + $arr[count($arr) - 2] + $arr[count($arr) - 3]);\n    }\n  }\n  return\
    \ $arr;\n}\n", "  if ($n < 1) {\n    return [];\n  }\n  if ($n === 1) {\n    return\
    \ [1, 3];\n  }\n  if ($n === 2) {\n    return [1, 3, 2];\n  }\n  $i = 3;\n  $result\
    \ = [1, 3, 2];\n  while ($i <= $n) {\n    if ($i % 2 == 0) {\n      $trib = 1\
    \ + $i / 2;\n    } else {\n      $trib = $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n    }\n    $result[] = $trib;\n    $i++;\n  }\n  return $result;\n}",
  "    if($n == 0) {\n        return [];\n    }\n    if($n == 1) {\n        return\
    \ [1];\n    }\n    if($n == 2) {\n        return [1, 3];\n    }\n    if($n ==\
    \ 3) {\n        return [1, 3, 2];\n    }\n    $array[0] = 1;\n    $array[1] =\
    \ 3;\n    $array[2] = 2;\n    for($i = 3; $i <= $n; $i++) {\n        if($i % 2\
    \ == 0) {\n            $array[$i] = 1 + ($i / 2);\n        } else {\n        \
    \    $array[$i] = $array[$i - 1] + $array[$i - 2] + $array[$i + 1];\n        }\n\
    \    }\n    return $array;\n}\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        $number = $arr[count($arr) - 1] + $arr[count($arr)\
    \ - 2] + $arr[count($arr) - 3];\n        array_push($arr, $number);\n    }\n \
    \   return $arr;\n}\n\nprint_r(tri(3));", "    $arr = [];\n    $arr[0] = 3;\n\
    \    $arr[1] = 2;\n    $arr[2] = 1;\n    for ($i = 3; $i <= $n; $i++) {\n    \
    \    if ($i % 2 == 0) {\n            $arr[$i] = 1 + ($i / 2);\n        } else\
    \ {\n            $arr[$i] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n    \
    \    }\n    }\n    return $arr;\n}\n$n = 3;\nprint_r(tri($n));", "\tif($n <= 0)\
    \ {\n\t\treturn [];\n\t}\n\t$result = [1, 3, 2];\n\tfor($i = 3; $i <= $n; $i++)\
    \ {\n\t\tif($i % 2 == 0) {\n\t\t\t$result[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t\
    $result[] = $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\t\t}\n\t}\n\
    \treturn $result;\n}", "\t$result = [];\n\tif ($n == 1) {\n\t\t$result = [1, 3];\n\
    \t} else if ($n == 2) {\n\t\t$result = [1, 3, 2];\n\t} else {\n\t\t$result = [1,\
    \ 3, 2];\n\t\tfor ($i = 3; $i <= $n; $i++) {\n\t\t\tif ($i % 2 == 0) {\n\t\t\t\
    \t$result[] = 1 + ($i / 2);\n\t\t\t} else {\n\t\t\t\t$result[] = $result[$i -\
    \ 1] + $result[$i - 2] + $result[$i + 1];\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n\
    }\n", "    $r = [];\n    if($n < 1) {\n        return $r;\n    }\n    $r[] = 1;\n\
    \    if($n < 2) {\n        return $r;\n    }\n    $r[] = 3;\n    if($n < 3) {\n\
    \        return $r;\n    }\n    $r[] = 2;\n    for($i = 3; $i < $n; $i++) {\n\
    \        if($i % 2 == 0) {\n            $r[] = 1 + $i / 2;\n        } else {\n\
    \            $r[] = $r[$i - 1] + $r[$i - 2] + $r[$i + 1];\n        }\n    }\n\
    \    return $r;\n}\n\necho \"tri(3) = \";\nprint_r(tri(3));\necho \"tri(4) = \"\
    ;\nprint_r(tri(4));", "\t$tribonacci = [3, 2, 1];\n\tfor ($i = 3; $i <= $n; $i++)\
    \ {\n\t\t$tribonacci[$i] = $tribonacci[$i - 3] + $tribonacci[$i - 2] + $tribonacci[$i\
    \ - 1];\n\t}\n\treturn $tribonacci;\n}\nprint_r(tri(4));", "  if($n < 1) return\
    \ [];\n  $fib = [1, 3, 2];\n  for($i = 3; $i <= $n; $i++)\n    $fib[] = $i % 2\
    \ ? $fib[$i - 1] + $fib[$i - 2] + $fib[$i + 1] : 1 + $i / 2;\n  return $fib;\n\
    }\n", "    $a = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        $s = $a[$i\
    \ - 1] + $a[$i - 2] + $a[$i - 3];\n        $a[] = $s;\n    }\n    return $a;\n\
    }\n\n$res = tri(5);\nvar_dump($res);", "    $arr = [];\n    for ($i = 0; $i <=\
    \ $n; $i++) {\n        if ($i <= 1) {\n            $arr[] = 1;\n        } else\
    \ {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n      \
    \  }\n    }\n    return $arr;\n}\n\nprint_r(tri(3));", "    if ($n === 0) {\n\
    \        return [];\n    }\n    $arr = [1, 3, 2];\n    $num = 1;\n    while ($num\
    \ < $n) {\n        if ($num % 2 == 0) {\n            $arr[] = 1 + $num / 2;\n\
    \        } else {\n            $arr[] = $arr[$num - 1] + $arr[$num - 2] + $arr[$num\
    \ + 1];\n        }\n        $num++;\n    }\n    return $arr;\n}\n", "  // Create\
    \ an array to hold the Tri-bonacci numbers\n  $tri = [];\n  // Create a loop that\
    \ starts at the first number and goes to \n  // the last number\n  for ($i = 1;\
    \ $i <= $n; $i++) {\n    // Test to see if the number is odd or even\n    if ($i\
    \ % 2 == 0) {\n      // If even, set the number to $i divided by 2\n      $tri[]\
    \ = $i / 2;\n    } else {\n      // If odd, set the number to the previous number\
    \ plus the second \n      // previous number plus the next number\n      $tri[]\
    \ = $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n    }\n  }\n  // Return the array\n\
    \  return $tri;\n}", "  $a = 0;\n  $b = 0;\n  $c = 1;\n  $sequence = [];\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    $d = $a + $b + $c;\n    array_push($sequence,\
    \ $d);\n    $a = $b;\n    $b = $c;\n    $c = $d;\n  }\n  return $sequence;\n}\n\
    \n$test1 = tri(4);\nprint_r($test1);", "    $result = [];\n    for ($i = 0; $i\
    \ <= $n; $i++) {\n        if ($i == 0) {\n            $result[] = 1;\n       \
    \ } elseif ($i == 1) {\n            $result[] = 3;\n        } elseif ($i == 2)\
    \ {\n            $result[] = 2;\n        } elseif ($i % 2 == 0) {\n          \
    \  $result[] = 1 + ($i / 2);\n        } else {\n            $result[] = $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return $result;\n\
    }", "    if($n == 0) {\n        return [];\n    }\n    if($n == 1) {\n       \
    \ return [1];\n    }\n    if($n == 2) {\n        return [1, 3];\n    }\n    $res\
    \ = [1, 3, 2];\n    for($i = 3; $i <= $n; $i++) {\n        if($i % 2 == 0) {\n\
    \            $res[] = 1 + $i / 2;\n        } else {\n            $res[] = $res[$i\
    \ - 1] + $res[$i - 2] + $res[$i + 1];\n        }\n    }\n    return $res;\n}",
  "    $seq = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        $seq[] = $i\
    \ % 2 ? $seq[$i - 1] + $seq[$i - 2] + $seq[$i + 1] : 1 + $i / 2;\n    }\n    return\
    \ $seq;\n}\n", "    $tribonacci = array(3, 1, 2);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $tribonacci[] = $tribonacci[$i] -\
    \ (1 + $i/2);\n        } else {\n            $a = $tribonacci[$i - 1];\n     \
    \       $b = $tribonacci[$i - 2];\n            $c = $tribonacci[$i + 1];\n   \
    \         $tribonacci[] = $a + $b + $c;\n        }\n    }\n    array_shift($tribonacci);\n\
    \    return $tribonacci;\n}\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\"\
    ;", "  $ret = [];\n  if($n < 2) return [1, 3];\n  else $ret = [1, 3, 2];\n  for($i\
    \ = 3; $i <= $n; $i++) {\n    if($i % 2 == 0) $ret[] = 1 + $i / 2;\n    else $ret[]\
    \ = $ret[$i - 1] + $ret[$i - 2] + $ret[$i + 1];\n  }\n  return $ret;\n}\n\nvar_dump(tri(3));\
    \ // [1, 3, 2, 8]\nvar_dump(tri(4)); // [1, 3, 2, 8, 5]", "  $result = [];\n \
    \ for ($i = 0; $i <= $n; $i++) {\n    if ($i == 0) {\n      $result[] = 1;\n \
    \   } elseif ($i == 1) {\n      $result[] = 3;\n    } elseif ($i == 2) {\n   \
    \   $result[] = 2;\n    } elseif ($i % 2 == 0) {\n      $result[] = 1 + ($i /\
    \ 2);\n    } else {\n      $result[] = $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n    }\n  }\n  return $result;\n}\nprint_r(tri(3));", "  $result = [];\n\
    \  for ($i = 0; $i <= $n; $i++) {\n    if ($i < 3) {\n      $result[] = 1;\n \
    \   } else {\n      $result[] = $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ - 3];\n    }\n  }\n  return $result;\n}", "  $arr = [];\n  for ($i = 0; $i <=\
    \ $n; $i++) {\n    if ($i == 0) {\n      $arr[] = 1;\n    } elseif ($i == 1) {\n\
    \      $arr[] = 3;\n    } elseif ($i == 2) {\n      $arr[] = 2;\n    } elseif\
    \ ($i % 2 == 0) {\n      $arr[] = 1 + ($i / 2);\n    } else {\n      $arr[] =\
    \ $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n    }\n  }\n  return $arr;\n}\n\
    \nprint_r(tri(0)); // => [1, 3, 2, 8]\nprint_r(tri(4)); // => [1, 3, 2, 8, 7,\
    \ 23, 35, 79, 136, \nprint_r(tri(10)); // => [1, 3, 2, 8, 7, 23, 35, 79, 136,\
    \ \n", "  $arr = [];\n  for ($i = 0; $i <= $n; $i++) {\n    if ($i == 0) {\n \
    \     $arr[] = 1;\n    } elseif ($i == 1) {\n      $arr[] = 3;\n    } elseif ($i\
    \ == 2) {\n      $arr[] = 2;\n    } elseif ($i % 2 == 0) {\n      $arr[] = 1 +\
    \ $i / 2;\n    } else {\n      $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n    }\n  }\n  return $arr;\n}\n\necho '<pre>';\nprint_r(tri(3));\necho\
    \ '</pre>';\n", "    $prev = [1,3,2];\n    for ($i = 0; $i < $n; $i++) {\n   \
    \     $length = count($prev);\n        $next = ($length % 2 == 0) ? \n       \
    \     $prev[$length - 1] + $prev[$length - 2] + ($length + 1) / 2\n          \
    \  : $prev[$length - 1] + $prev[$length - 2] + $prev[$length - 3];\n        $prev[]\
    \ = $next;\n    }\n    return $prev;\n}", "  if ($n == 0) {\n    return [1];\n\
    \  }\n  $result = [1, 3, 2];\n  for ($i = 0; $i < $n; $i++) {\n    if ($i % 2\
    \ == 0) {\n      $result[] = 1 + $i / 2;\n    } else {\n      $result[] = $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n    }\n  }\n  return $result;\n}\n\
    print_r(tri(3));\nprint_r(tri(6));", "    if ($n < 1) return [];\n    $result\
    \ = [1, 3, 2];\n    while ($n-- > 1) {\n        $result[] = array_sum(array_slice($result,\
    \ -3));\n    }\n    return $result;\n}\necho implode(\", \", tri(3));", "  \n}",
  "    if($n == 0) {\n        return [];\n    }\n    if($n == 1) {\n        return\
    \ [1];\n    }\n    if($n == 2) {\n        return [1, 1];\n    }\n    if($n ==\
    \ 3) {\n        return [1, 1, 1];\n    }\n    $result = [1, 1, 1];\n    for($i\
    \ = 3; $i <= $n; $i++) {\n        if($i % 2 == 0) {\n            $nxt = 1 + $i\
    \ / 2;\n        } else {\n            $nxt = $result[$i - 1] + $result[$i - 2]\
    \ + $result[$i - 3];\n        }\n        $result[] = $nxt;\n    }\n    return\
    \ $result;\n}\n", "\tfor ($i = 1; $i <= $n; $i++) {\n\t\tif ($i === 1) {\n\t\t\
    \t$tri[] = 1;\n\t\t} else if ($i === 2) {\n\t\t\t$tri[] = 3;\n\t\t} else if ($i\
    \ === 3) {\n\t\t\t$tri[] = 2;\n\t\t} else if ($i % 2 === 0) {\n\t\t\t$tri[] =\
    \ 1 + ($i / 2);\n\t\t} else {\n\t\t\t$last = count($tri) - 1;\n\t\t\t$tri[] =\
    \ $tri[$last] + $tri[$last - 1] + $tri[$last - 2];\n\t\t}\n\t}\n\treturn $tri;\n\
    }\nprint_r(tri(7));", "    $arr = [1, 3, 2];\n    if ($n <= 0) {\n        return\
    \ $arr;\n    }\n    if ($n <= 3) {\n        return array_slice($arr, 0, $n + 1);\n\
    \    }\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 === 0) {\n    \
    \        $arr[] = floor(1 + $i / 2);\n        } else {\n            $arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\
    print_r(tri(3));", "    $result = [];\n    for ($i = 0; $i <= $n; $i++) {\n  \
    \      if ($i == 0) {\n            $result[] = 0;\n        } elseif ($i == 1)\
    \ {\n            $result[] = 1;\n        } elseif ($i == 2) {\n            $result[]\
    \ = 1;\n        } else {\n            $result[] = $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i - 3];\n        }\n    }\n    return $result;\n}\necho \"<pre>\"\
    ;\nprint_r(tri(7));\necho \"</pre>\";", "\t$f[0] = 1;\n\t$f[1] = 3;\n\t$f[2] =\
    \ 2;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$f[$i] =\
    \ 1 + $i / 2;\n\t\t} else {\n\t\t\t$f[$i] = $f[$i - 1] + $f[$i - 2] + $f[$i +\
    \ 1];\n\t\t}\n\t}\n\treturn $f;\n}\n$n = 3;\necho \"<pre>\";\nprint_r(tri($n));\n\
    echo \"</pre>\";", "  $res = [1, 3, 2];\n  for ($i = 3; $i <= $n; $i++) {\n  \
    \  $isEven = $i % 2 === 0;\n    if ($isEven) {\n      $res[] = 1 + $i / 2;\n \
    \   } else {\n      $res[] = $res[$i - 1] + $res[$i - 2] + $res[$i + 1];\n   \
    \ }\n  }\n  return $res;\n}\n\nprint_r(tri(3));\nprint_r(tri(5));\nprint_r(tri(6));",
  "    $res = [1, 3, 2];\n    if ($n == 0) {\n        return [1];\n    }\n    if ($n\
    \ == 1) {\n        return [1, 3];\n    }\n    if ($n == 2) {\n        return [1,\
    \ 3, 2];\n    }\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            $res[] = floor(1 + $i / 2);\n        } else {\n            $res[]\
    \ = $res[$i - 1] + $res[$i - 2] + $res[$i + 1];\n        }\n    }\n    return\
    \ $res;\n}", "    $result = [];\n    for ($i = 0; $i <= $n; $i++) {\n        $result[]\
    \ = tri_sequence($i);\n    }\n    return $result;\n}\n", "    $tribonacci = [1,\
    \ 3, 2];\n    for ($i = 0; $i < $n; $i++) {\n        $tribonacci[] = $tribonacci[$i]\
    \ + $tribonacci[$i + 1] + $tribonacci[$i + 2];\n    }\n    return $tribonacci;\n\
    }\n", "  $result = [];\n  $fib = [0, 0, 1];\n  for ($i = 0; $i <= $n; $i++) {\n\
    \    if ($i === 0) {\n      $result[] = $fib[2];\n    } else {\n      $fib[0]\
    \ = $fib[1];\n      $fib[1] = $fib[2];\n      $fib[2] = $fib[0] + $fib[1];\n \
    \     $result[] = $fib[2];\n    }\n  }\n  return $result;\n}\n\necho json_encode(tri(3))\
    \ . PHP_EOL;", "    if ($n == 0) return [];\n    if ($n == 1) return [1];\n  \
    \  $result = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i %\
    \ 2 == 0) {\n            $result[] = 1 + $i / 2;\n        } else {\n         \
    \   $result[] = $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n       \
    \ }\n    }\n    return $result;\n}", "  $res = [1, 3, 2];\n  $i = 2;\n  while($i\
    \ < $n) {\n    $i++;\n    if($i % 2 == 0) {\n      $res[] = 1 + $i / 2;\n    }\
    \ else {\n      $res[] = $res[$i - 1] + $res[$i - 2] + $res[$i + 1];\n    }\n\
    \  }\n  return $res;\n}\n\necho \"<pre>\";\nprint_r(tri(7));\necho \"</pre>\";",
  "  if ($n <= 0) return [];\n  $res = [1, 3, 2];\n  while (count($res) <= $n) {\n\
    \    $res[] = $res[count($res) - 1] + $res[count($res) - 2] + $res[count($res)\
    \ - 3];\n  }\n  return $res;\n}\nprint_r(tri(3));", "    $triArray = [];\n   \
    \ for ($i = 0; $i <= $n; $i++) {\n        if ($i == 0) {\n            $triArray[]\
    \ = 1;\n        } elseif ($i == 1) {\n            $triArray[] = 3;\n        }\
    \ elseif ($i == 2) {\n            $triArray[] = 2;\n        } elseif ($i % 2 ==\
    \ 0) {\n            $triArray[] = 1 + ($i / 2);\n        } else {\n          \
    \  $triArray[] = $triArray[$i - 1] + $triArray[$i - 2] + $triArray[$i + 1];\n\
    \        }\n    }\n    return $triArray;\n}\nprint_r(tri(0));\nprint_r(tri(1));\n\
    print_r(tri(2));\nprint_r(tri(3));\nprint_r(tri(4));\nprint_r(tri(5));\nprint_r(tri(6));\n\
    print_r(tri(7));\nprint_r(tri(8));\nprint_r(tri(9));\nprint_r(tri(10));", "  \
    \  if ($n == 0) {\n        return [];\n    }\n    $result = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        if ($i == 1) {\n            $result[] = 3;\n \
    \       } elseif ($i % 2 == 0) {\n            $result[] = 1 + $i / 2;\n      \
    \  } else {\n            $result[] = $result[$i - 2] + $result[$i - 3] + $result[$i\
    \ - 1];\n        }\n    }\n    return $result;\n}\necho \"<pre>\";\nprint_r(tri(2));\n\
    echo \"</pre>\";", "    $result = [];\n    for ($i = 0; $i <= $n; $i++) {\n  \
    \      if ($i == 0) {\n            $result[] = 1;\n        } elseif ($i == 1)\
    \ {\n            $result[] = 3;\n        } elseif ($i == 2) {\n            $result[]\
    \ = 2;\n        } elseif ($i % 2 == 0) {\n            $result[] = (1 + $i / 2);\n\
    \        } else {\n            $result[] = ($result[$i - 1] + $result[$i - 2]\
    \ + $result[$i + 1]);\n        }\n    }\n    return $result;\n}", "  $result =\
    \ [];\n  for ($i = 0; $i <= $n; $i++) {\n    $result[] = tribonacci($i);\n  }\n\
    \  return $result;\n}\n", "    if($n === 0) return [];\n    $res = [1, 3, 2];\n\
    \    for($i = 3; $i <= $n; $i++) {\n        $res[] = $i % 2 == 0 ? 1 + $i / 2\
    \ : $res[$i - 1] + $res[$i - 2] + $res[$i + 1];\n    }\n    return $res;\n}\n\n\
    print_r(tri(5));", "  if ($n == 0) {\n    return [1];\n  } else if ($n == 1) {\n\
    \    return [1, 3];\n  } else if ($n == 2) {\n    return [1, 3, 2];\n  } else\
    \ {\n    $array = tri($n - 1);\n    if ($n % 2 == 0) {\n      array_push($array,\
    \ 1 + $n / 2);\n    } else {\n      array_push($array, $array[$n - 1] + $array[$n\
    \ - 2] + $array[$n + 1]);\n    }\n    return $array;\n  }\n}", "    if($n==1)\
    \ return [1,3];\n    if($n==2) return [1,3,2];\n    $result = [1,3,2];\n    $prev0\
    \ = 1;\n    $prev1 = 3;\n    $prev2 = 2;\n    for($i=3;$i<=$n;$i++){\n       \
    \ $curr = $prev0 + $prev1 + $prev2;\n        $result[] = $curr;\n        $prev0\
    \ = $prev1;\n        $prev1 = $prev2;\n        $prev2 = $curr;\n    }\n    return\
    \ $result;\n}\nprint_r(tri(4));", "    $result = [];\n    $i = 1;\n    while($i\
    \ <= $n) {\n        if ($i == 1) {\n            $result[] = 3;\n        } elseif\
    \ ($i == 2) {\n            $result[] = 2;\n        } elseif ($i == 3) {\n    \
    \        $result[] = 8;\n        } else {\n            $result[] = $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i - 3];\n        }\n        $i++;\n    }\n\
    \    return $result;\n}", "    $fibonacci = array(1, 3, 2);\n    for ($i = 3;\
    \ $i <= $n; $i++) {\n        $fibonacci[$i] = $fibonacci[$i - 1] + $fibonacci[$i\
    \ - 2] + $fibonacci[$i - 3];\n    }\n    return $fibonacci;\n}\n\necho \"<pre>\"\
    ;\nvar_dump(tri(3));", "    if($n == 0) return [1];\n    if($n == 1) return [1,\
    \ 3];\n    if($n == 2) return [1, 3, 2];\n    return array_merge([1, 3, 2], tri_rec($n,\
    \ 3, 2, 1));\n}\n", "  $result = [1, 3, 2];\n  if ($n <= 3) {\n    return array_slice($result,\
    \ 0, $n + 1);\n  }\n  for ($i = 3; $i <= $n; $i++) {\n    if ($i % 2 === 0) {\n\
    \      $result[] = floor(1 + $i / 2);\n    } else {\n      $result[] = $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n    }\n  }\n  return $result;\n}\n\
    print_r(tri(3));", "    if ($n === 0) return [1];\n    $res = [];\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        if ($i % 2 === 0) $res[] = 1 + $i / 2;\n   \
    \     else $res[] = $res[$i - 2] + $res[$i - 1] + $res[$i];\n    }\n    return\
    \ $res;\n}\n", "    $seq = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n  \
    \      $seq[] = $i % 2 == 0 ? 1 + $i / 2 : $seq[$i - 1] + $seq[$i - 2] + $seq[$i\
    \ + 1];\n    }\n    return $seq;\n}\n", "  $arr = [];\n  for ($i = 0; $i <= $n;\
    \ $i++) {\n    if ($i == 0) {\n      $arr[] = 1;\n    } elseif ($i == 1) {\n \
    \     $arr[] = 3;\n    } elseif ($i == 2) {\n      $arr[] = 2;\n    } elseif ($i\
    \ % 2 == 0) {\n      $arr[] = 1 + $i / 2;\n    } else {\n      $arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n    }\n  }\n  return $arr;\n}\nprint_r(tri(3));\n\
    print_r(tri(5));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
