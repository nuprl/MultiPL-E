name: HumanEval_132_is_nested
language: php
prompt: "<?php\n// Create a function that takes a string as input which contains only\
  \ square brackets.\n// The function should return True if and only if there is a\
  \ valid subsequence of brackets \n// where at least one bracket in the subsequence\
  \ is nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
  \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n//\
  \ is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
  \ is_nested($string) {\n"
tests: "function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\")\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[[[[[\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"]]]]]]]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $stack = new SplStack();\n  $len = strlen($string);\n  for ($i =\
    \ 0; $i < $len; $i++) {\n    $top = $stack->isEmpty() ? null : $stack->top();\n\
    \    $cur = $string[$i];\n    if ($cur === '[' && $top === '[') {\n      $stack->push($cur);\n\
    \    } else if ($cur === ']' && $top === '[') {\n      $stack->pop();\n    } else\
    \ if ($cur === ']') {\n      return false;\n    }\n  }\n  return true;\n}\necho\
    \ is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t$par1=substr_count($string,\"\
    [\");\n\t$par2=substr_count($string,\"]\");\n\t$par3=substr_count($string,\"][\"\
    );\n\tif( $par1 > $par2 || $par3 > 0){\n\t\treturn false;\n\t}\n\treturn true;\n\
    }\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\n\
    echo is_nested('[]');\necho is_nested('[[][]]');\necho is_nested('[[]][[');",
  "\t\n}", "\tif (count(explode('[[', $string)) != count(explode(']]', $string)))\
    \ {\n\t\treturn false;\n\t}\n\t$str = str_replace(['[[', ']]'], '', $string);\n\
    \tif (strlen($str) == 0) {\n\t\treturn true;\n\t}\n\t$bracket = ['[', ']'];\n\t\
    $i = 0;\n\t$k = 0;\n\t$count = count($str);\n\t$open = [];\n\twhile($i < $count){\n\
    \t\tif ($str[$i] == $bracket[0]) {\n\t\t\t$open[] = $i;\n\t\t}\n\t\tif ($str[$i]\
    \ == $bracket[1]) {\n\t\t\tif (isset($open[$k])) {\n\t\t\t\tunset($open[$k]);\n\
    \t\t\t\t$k--;\n\t\t\t}\n\t\t}\n\t\t$i++;\n\t\t$k++;\n\t}\n\tif (count($open) ==\
    \ 0) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho is_nested('[[]]') ? 'True'\
    \ : 'False';\necho '<br>';\necho is_nested('[]]]]]]][[[[[]') ? 'True' : 'False';\n\
    echo '<br>';\necho is_nested('[][]') ? 'True' : 'False';\necho '<br>';\necho is_nested('[]')\
    \ ? 'True' : 'False';\necho '<br>';\necho is_nested('[[][]]') ? 'True' : 'False';\n\
    echo '<br>';\necho is_nested('[[]][[') ? 'True' : 'False';\necho '<br>';\necho\
    \ is_nested('[]]]]]]]][[[[[[][[[[[[[[][][][]][][][][][]]]]]]]]]]') ? 'True' :\
    \ 'False';\necho '<br>';\necho is_nested('[]]]]]]]][[[[[[][[[[[[[[][][][]][][][][]]]]]]]]",
  "\tif (preg_match('/\\[\\]/', $string)) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }", "\t$count = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count += 1;\n\t\t} elseif ($string[$i] == ']') {\n\t\t\t$count\
    \ -= 1;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $count > 0 ? false : true;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho\
    \ is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\necho\
    \ \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\necho \"<br>\";\necho is_nested('[]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[[]][[]]]');", "    if (strlen($string) == 0 ||\
    \ strlen($string) == 1) {\n        return false;\n    }\n    $stack = [];\n  \
    \  $open = false;\n    $close = false;\n    $count = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n            $open = true;\n        } else if ($string[$i] ==\
    \ ']') {\n            array_pop($stack);\n            $close = true;\n       \
    \ }\n        if ($open == true && $close == true) {\n            $count++;\n \
    \           $open = false;\n            $close = false;\n        }\n    }\n  \
    \  if ($count > 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n$string = \"[[]]\";\necho is_nested($string) . PHP_EOL;\n$string =\
    \ \"[]]]]]]][[[[[]\";\necho is_nested($string) . PHP_EOL;\n$string = \"[][]\"\
    ;\necho is_nested($string) . PHP_EOL;\n$string = \"[]\";\necho is_nested($string)\
    \ . PHP_EOL;\n$string = \"[[][]]\";\necho is_nested($string) . PHP_EOL;\n$string\
    \ = \"[[]][[\";\necho is_nested($string) . PHP_EOL;\n", "    $brackets = str_split($string);\n\
    \    $count = 0;\n    foreach($brackets as $bracket) {\n        if($bracket ==\
    \ '[') {\n            $count++;\n        } else {\n            $count--;\n   \
    \     }\n        if($count < 0) {\n            return false;\n        }\n    }\n\
    \    return $count != 0 ? false : true;\n}\necho is_nested('[[]]') ? 'true' :\
    \ 'false';\necho '<br>';\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\n\
    echo '<br>';\necho is_nested('[][]') ? 'true' : 'false';\necho '<br>';\necho is_nested('[]')\
    \ ? 'true' : 'false';\necho '<br>';\necho is_nested('[[][]]') ? 'true' : 'false';\n\
    echo '<br>';\necho is_nested('[[]][[') ? 'true' : 'false';\necho '<br>';\necho\
    \ is_nested('[[]]') ? 'true' : 'false';\necho '<br>';\necho is_nested('[]]]]]]][[[[[]')\
    \ ? 'true' : 'false';\necho '<br>';\necho is_nested('[][]') ? 'true' : 'false';\n\
    echo '<br>';\necho is_nested('[]') ? 'true' : 'false';\necho '<br>';\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho '<br>';\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo '<br>';\necho is_nested('[[]]') ? 'true' : 'false';\necho '<br>';\necho is_nested('[]]]]]]][[[[[]')\
    \ ? 'true' : 'false';\necho '<br>';\necho is_nested('[][]') ? 'true' : 'false';\n\
    echo '<br>';\necho is_nested('[]') ? 'true' : 'false';", "\t//create counter that\
    \ will increase when a [ is found\n\t//if a ] is found, decrease the counter\n\
    \t//if the counter is ever negative, return false\n\t//if the counter is ever\
    \ greater than 0, return true\n\t$counter = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$counter++;\n\t\t} else {\n\t\
    \t\t$counter--;\n\t\t}\n\t\tif ($counter < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($counter > 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\necho is_nested('[][]');\necho is_nested('[[][]]');\necho is_nested('[[]][[');\n\
    echo is_nested('[]]]]]]][[[[[]');\necho is_nested('[[]]');", "\t$arr = str_split($string);\n\
    \t$left_brackets = array_filter($arr, function($bracket) {\n\t\treturn $bracket\
    \ === \"[\";\n\t});\n\t$right_brackets = array_filter($arr, function($bracket)\
    \ {\n\t\treturn $bracket === \"]\";\n\t});\n\treturn count($left_brackets) > 0\
    \ && count($left_brackets) > count($right_brackets);\n}\n\necho is_nested('[[]]')\
    \ ? \"True\\n\" : \"False\\n\";\necho is_nested('[]]]]]]][[[[[]') ? \"True\\n\"\
    \ : \"False\\n\";\necho is_nested('[][]') ? \"True\\n\" : \"False\\n\";\necho\
    \ is_nested('[]') ? \"True\\n\" : \"False\\n\";\necho is_nested('[[][]]') ? \"\
    True\\n\" : \"False\\n\";\necho is_nested('[[]][[') ? \"True\\n\" : \"False\\\
    n\";", "\treturn preg_match('/\\[\\]/', $string);\n}\necho is_nested('[[][]]');",
  "    if (preg_match('/\\[{2,}/', $string) || preg_match('/\\]{2,}/', $string)) {\n\
    \        return false;\n    } else {\n        return true;\n    }\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "  for ($i=0; $i < strlen($string);\
    \ $i++) { \n    if ($string[$i] == \"[\") {\n      if ($string[$i + 1] == \"]\"\
    ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\necho is_nested('[[]]')\
    \ ? \"True\\n\" : \"False\\n\";\necho is_nested('[]]]]]]][[[[[]') ? \"True\\n\"\
    \ : \"False\\n\";\necho is_nested('[][]') ? \"True\\n\" : \"False\\n\";\necho\
    \ is_nested('[]') ? \"True\\n\" : \"False\\n\";\necho is_nested('[[][]]') ? \"\
    True\\n\" : \"False\\n\";\necho is_nested('[[]][[') ? \"True\\n\" : \"False\\\
    n\";\n", "\t$string = str_split($string);\n\t$brackets = [\n\t\t'[[' => ']]',\n\
    \t\t'[' => ']',\n\t\t'{' => '}',\n\t\t'(' => ')'\n\t];\n\t$output = [];\n\tforeach\
    \ ($string as $v) {\n\t\tif(array_key_exists($v, $brackets)) {\n\t\t\t$output[]\
    \ = $v;\n\t\t} else {\n\t\t\t$last_key = end($output);\n\t\t\tif ($brackets[$last_key]\
    \ == $v) {\n\t\t\t\tarray_pop($output);\n\t\t\t} else {\n\t\t\t\t$output[] = $v;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn empty($output);\n}\n\necho is_nested('[[]]') . '<br>';\n\
    echo is_nested('[]]]]]]][[[[[]') . '<br>';\necho is_nested('[][]') . '<br>';\n\
    echo is_nested('[]') . '<br>';\necho is_nested('[[][]]') . '<br>';\necho is_nested('[[]][[')\
    \ . '<br>';", "    //subsequence:a string formed from another string by deleting\
    \ some characters \n    //without changing the order of the remaining characters.\n\
    \    //subsequence: a part of a string that can be obtained by deleting some characters\
    \ from the string\n\t//without changing the relative order of the remaining characters.\
    \ \n    if(strlen($string) == 0) return False;\n    // if the string only has\
    \ one type of bracket, return False.\n    if(substr_count($string, \"[\") == strlen($string)\
    \ || substr_count($string, \"]\") == strlen($string)) return False;\n    // if\
    \ there are no brackets, return False.\n    if(strpos($string, \"[\") === False\
    \ && strpos($string, \"]\") === False) return False;\n    // set an empty array\
    \ to store all the brackets that have been checked.\n    $checked = [];\n    //\
    \ set an empty array to store all the brackets in the string.\n    $brackets =\
    \ [];\n    for($i = 0; $i < strlen($string); $i++) {\n        // if the current\
    \ character is a bracket, push it into the $brackets array.\n        if($string[$i]\
    \ == \"[\" || $string[$i] == \"]\") {\n            array_push($brackets, $string[$i]);\n\
    \        }\n    }\n    // if the number of left brackets is not equal to the number\
    \ of right brackets, return False.\n    if(substr_count($string, \"[\") != substr_count($string,\
    \ \"]\")) return False;\n    // if the number of left brackets is larger than\
    \ that of right brackets, return False.\n    if(substr_count($string, \"[\") >\
    \ substr_count($string, \"]\")) return False;\n    // if the number of left brackets\
    \ is smaller than that of right brackets, return False.\n    if(substr_count($string,\
    \ \"[\") < substr_count($string, \"]\")) return False;\n    for($i = 0; $i < count($brackets);\
    \ $i++) {\n        // if the current bracket is \"]\",\n        if($brackets[$i]\
    \ == \"]\") {\n            // if there are brackets in the $checked array,\n \
    \           if(count($checked)", "  $string = str_split($string);\n  $left = 0;\n\
    \  $right = 0;\n  foreach($string as $char) {\n    if($char == '[') {\n      $left++;\n\
    \    } else {\n      $right++;\n    }\n  }\n  if($left >= $right) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\necho is_nested('[[][]]') ? 'true'\
    \ : 'false';\necho \"<br>\";\necho is_nested('[[]][[') ? 'true' : 'false';\necho\
    \ \"<br>\";\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\necho \"<br>\"\
    ;\necho is_nested('[][]') ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[]')\
    \ ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[]]') ? 'true' : 'false';\n\
    echo \"<br>\";\necho is_nested('[[[]][[]]]') ? 'true' : 'false';\necho \"<br>\"\
    ;\necho is_nested('[[[][]]]') ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[[][]][]]')\
    \ ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[]][[]]') ? 'true' : 'false';\n\
    echo \"<br>\";\necho is_nested('[][[][][]]') ? 'true' : 'false';\necho \"<br>\"\
    ;\necho is_nested('[[[][][]]]') ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[[]][[]]]')\
    \ ? 'true' : 'false';\necho \"<br>\";\necho is_nested('[[[[[][]]]]]') ? 'true'\
    \ : 'false';\necho \"<br>\";\necho is_nested('[][][][]') ? 'true' : 'false';\n\
    echo \"<br>\";\necho is_nested('[[]][[]][[]", "\t$replaced = str_replace(['[[]]',\
    \ '[[][]]'], '', $string);\n\treturn ($replaced != $string);\n}\necho is_nested('[[[]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\necho is_nested('[[][]]') .\
    \ PHP_EOL;\necho is_nested('[[]]') . PHP_EOL;\n", "\t$length = strlen($string);\n\
    \tfor ($i=0; $i < $length; $i++) { \n\t\tif($string[$i] == \"[\") {\n\t\t\tfor\
    \ ($j=$i+1; $j < $length; $j++) { \n\t\t\t\tif($string[$j] == \"]\"){\n\t\t\t\t\
    \treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "    if (substr_count($string, \"\
    []\") > 0) {\n        return true;\n    }\n    else {\n        return false;\n\
    \    }\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\t$counter = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ === \"[\") {\n\t\t\t$counter++;\n\t\t} else {\n\t\t\t$counter--;\n\t\t}\n\t\t\
    if ($counter < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho\
    \ is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho\
    \ \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == '[') {\n            $open++;\n        } else if ($string[$i]\
    \ == ']') {\n            $close++;\n        }\n    }\n    return $open > 1 ||\
    \ $close > 1 ? true : false;\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t\
    $l = substr_count($string, '[');\n\t$r = substr_count($string, ']');\n\tif( $l\
    \ > $r ) return true;\n\treturn false;\n}\necho is_nested('[[]]') ? 'true<br>'\
    \ : 'false<br>';\necho is_nested('[]]]]]]][[[[[]') ? 'true<br>' : 'false<br>';\n\
    echo is_nested('[][]') ? 'true<br>' : 'false<br>';\necho is_nested('[]') ? 'true<br>'\
    \ : 'false<br>';\necho is_nested('[[][]]') ? 'true<br>' : 'false<br>';\necho is_nested('[[]][[')\
    \ ? 'true<br>' : 'false<br>';", "\t$left = 0;\n\t$right = 0;\n\tfor ($i=0; $i\
    \ < strlen($string); $i++) { \n\t\tif($string[$i] == '[') {\n\t\t\t$left++;\n\t\
    \t}\n\t\tif($string[$i] == ']') {\n\t\t\t$right++;\n\t\t}\n\t}\n\tif($left ==\
    \ $right) {\n\t\treturn false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]').\"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]').\"\\n\";\necho is_nested('[][]').\"\\\
    n\";\necho is_nested('[]').\"\\n\";\necho is_nested('[[][]]').\"\\n\";\necho is_nested('[[]][[').\"\
    \\n\";", "\t$brackets = [\"[[\", \"]]\"];\n\t$rBrackets = array_reverse($brackets);\n\
    \t$str = str_replace($brackets, \"\", $string);\n\t$str = str_replace($rBrackets,\
    \ \"\", $str);\n\tif ($str !== \"\") {\n\t\treturn false;\n\t}\n\treturn true;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$regex\
    \ = \"/[[[\\]]{2,}+$|[\\]]+$|[\\[]{2,}+$/\";\n\tif (preg_match($regex, $string))\
    \ {\n\t\techo \"False\";\n\t} else {\n\t\techo \"True\";\n\t}\n}\nis_nested('[][]');",
  "  return preg_match('/\\[{2,}/', $string) ? true : false;\n}", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else if ($string[$i]\
    \ == ']') {\n            if (count($stack) == 0) {\n                return false;\n\
    \            } else {\n                $item = array_pop($stack);\n          \
    \  }\n        }\n    }\n    return count($stack) > 0 ? false : true;\n}\n", "\t\
    return preg_match('/\\[+\\]/', $string);\n}\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";", "\t$cnt = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif($string[$i]\
    \ == '['){\n\t\t\t$cnt++;\n\t\t}else{\n\t\t\t$cnt--;\n\t\t}\n\t\tif($cnt < 0){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn $cnt > 0 ? true : false;\n}\necho is_nested('[[]]');\n\
    echo is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\necho is_nested('[]');\n\
    echo is_nested('[[][]]');\necho is_nested('[[]][[');", "  if(preg_match('/(\\\
    [\\[.+\\]\\])/', $string) || preg_match('/(\\[\\].+\\[\\])/', $string)){\n   \
    \ return \"True\";\n  } else {\n    return \"False\";\n  }\n}\necho is_nested('[[]]')\
    \ . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]')\
    \ . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"\
    <br>\";\necho is_nested('[[]][[') . \"<br>\";", "\t$stack = [];\n\tforeach (str_split($string)\
    \ as $char) {\n\t\tif ($char === '[') {\n\t\t\tarray_push($stack, $char);\n\t\t\
    } else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\
    \t\t}\n\t}\n\treturn count($stack) === 0;\n}", "    $count = 0;\n    foreach (str_split($string)\
    \ as $char) {\n        if ($char == \"[\") {\n            $count++;\n        }\
    \ else {\n            $count--;\n        }\n        if ($count < 0) {\n      \
    \      return false;\n        }\n    }\n    return $count == 0;\n}\n\necho is_nested('[[]]')\
    \ ? \"True\" : \"False\";\necho is_nested('[]]]]]]][[[[[]') ? \"True\" : \"False\"\
    ;\necho is_nested('[][]') ? \"True\" : \"False\";\necho is_nested('[]') ? \"True\"\
    \ : \"False\";\necho is_nested('[[][]]') ? \"True\" : \"False\";\necho is_nested('[[]][[')\
    \ ? \"True\" : \"False\";", "\t// count opening and closing brackets\n\t$open\
    \ = str_replace(']', '', $string);\n\t$close = str_replace('[', '', $string);\n\
    \t$open = strlen($open);\n\t$close = strlen($close);\n\t// if brackets balance\
    \ out return false\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\
    \treturn true;\n\t}\n}", "\treturn $string;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "\t//returns true if $string is nested\n\t//returns false if $string\
    \ is not nested\n\t$stack = array();\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t}\n\t\telse {\n\t\t\tif(!empty($stack)) {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(empty($stack))\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]');\n\
    echo \"\\n\";\necho is_nested('[]]]]]]][[[[[]');\necho \"\\n\";\necho is_nested('[][]');\n\
    echo \"\\n\";\necho is_nested('[]');\necho \"\\n\";\necho is_nested('[[][]]');\n\
    echo \"\\n\";\necho is_nested('[[]][[');\necho \"\\n\";", "\t// Create an array\
    \ to add in brackets\n\t$arr = [];\n\t// For each character in the string\n\t\
    for ($i = 0; $i < strlen($string); $i++) {\n\t\t// If it is an opening bracket,\
    \ push it in the array\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($arr,\
    \ $string[$i]);\n\t\t} else if ($string[$i] == ']') {\n\t\t\t// Else if it is\
    \ a closing bracket, pop from the array\n\t\t\tarray_pop($arr);\n\t\t}\n\t}\n\t\
    // If the array is empty or the first bracket is closing, return True\n\tif (empty($arr)\
    \ || $arr[0] == ']') {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n\
    }\n", "\tpreg_match('/\\[{2,}/', $string, $matches);\n\tif (empty($matches)) {\n\
    \t\treturn false;\n\t}\n\treturn true;\n}\necho is_nested('[[]]');\necho \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]');\necho \"\\n\";\necho is_nested('[][]');\n\
    echo \"\\n\";\necho is_nested('[]');\necho \"\\n\";\necho is_nested('[[][]]');\n\
    echo \"\\n\";\necho is_nested('[[]][[');\necho \"\\n\";", "  $brackets = 0;\n\
    \  for ($i = 0; $i < strlen($string); $i++) {\n    if ($string[$i] == '[') {\n\
    \      $brackets += 1;\n    } else if ($string[$i] == ']') {\n      $brackets\
    \ -= 1;\n    }\n    if ($brackets < 0) {\n      return false;\n    }\n  }\n  return\
    \ $brackets == 0;\n}\necho is_nested('[[]]') ? 'True' : 'False';\necho \"<br>\"\
    ;\necho is_nested('[]]]]]]][[[[[]') ? 'True' : 'False';\necho \"<br>\";\necho\
    \ is_nested('[][]') ? 'True' : 'False';\necho \"<br>\";\necho is_nested('[]')\
    \ ? 'True' : 'False';\necho \"<br>\";\necho is_nested('[[][]]') ? 'True' : 'False';\n\
    echo \"<br>\";\necho is_nested('[[]][[') ? 'True' : 'False';\necho \"<br>\";\n\
    echo is_nested('[[[]]]') ? 'True' : 'False';\necho \"<br>\";\necho is_nested('[[[[[]]]]]')\
    \ ? 'True' : 'False';\necho \"<br>\";\necho is_nested('[[[[]]]]') ? 'True' : 'False';\n\
    echo \"<br>\";\necho is_nested('[][][][][]') ? 'True' : 'False';\necho \"<br>\"\
    ;\necho is_nested('[]][[') ? 'True' : 'False';\necho \"<br>\";\necho is_nested('[[[]]][]')\
    \ ? 'True' : 'False';\necho \"<br>\";\necho is_nested('[]][') ? 'True' : 'False';\n\
    echo \"<br>\";\necho is_nested('[][][]') ? 'True' : 'False';\necho \"<br>\";\n\
    echo is_nested('[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]') ? 'True' : 'False';\necho \"\
    <br>\";\necho is", "\t$open=0;\n\t$close=0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i]=='[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]==']')\
    \ {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open>$close) {\n\t\treturn true;\n\t\
    }\n\telse{\n\t\treturn false;\n\t}\n}", "\t$left = 0;\n\t$right = 0;\n\t$newArr\
    \ = str_split($string);\n\tfor ($i=0; $i < count($newArr); $i++) { \n\t\tif ($newArr[$i]\
    \ === \"[\") {\n\t\t\t$left++;\n\t\t}\n\t\tif ($newArr[$i] === \"]\") {\n\t\t\t\
    $right++;\n\t\t}\n\t}\n\tif ($left == $right) {\n\t\t$left = 0;\n\t\t$right =\
    \ 0;\n\t\tfor ($i=0; $i < count($newArr); $i++) { \n\t\t\tif ($newArr[$i] ===\
    \ \"[\") {\n\t\t\t\t$left++;\n\t\t\t}\n\t\t\tif ($newArr[$i] === \"]\") {\n\t\t\
    \t\t$right++;\n\t\t\t}\n\t\t\tif ($right > $left) {\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "$str = str_split($string);\n\
    $left = 0;\n$right = 0;\n    for ($i=0; $i < sizeof($str); $i++) { \n        if($str[$i]\
    \ == '['){\n            $left++;\n        }elseif($str[$i] == ']'){\n        \
    \    $right++;\n        }\n    }\n    if($left == $right){\n        echo \"False\"\
    ;\n    }else{\n        echo \"True\";\n    }\n}\nis_nested('[][]');", "  $result\
    \ = False;\n  if(strlen($string) < 2){\n    return False;\n  }\n  for($i = 0;\
    \ $i < strlen($string); $i++){\n    if($string[$i] == \"[\"){\n      for($j =\
    \ $i + 1; $j < strlen($string); $j++){\n        if($string[$j] == \"]\"){\n  \
    \        $result = True;\n          return $result;\n        }\n      }\n    }\n\
    \  }\n  return $result;\n}\necho is_nested('[[][]]');", "\treturn $string ===\
    \ str_replace
  "   for ($i = 0; $i < strlen($string); $i++) {\n      if (preg_match('/\\[\\]/',\
    \ $string)) {\n         $string = preg_replace('/\\[\\]/', '', $string);\n   \
    \   }\n   }\n   if (empty($string)) {\n      return true;\n   } else {\n     \
    \ return false;\n   }\n}\n\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\n\
    echo is_nested('[][]');\necho is_nested('[]');\necho is_nested('[[][]]');\necho\
    \ is_nested('[[]][[');", "    //create an array of each character of the string\n\
    \    $string = str_split($string);\n    //store the left bracket count\n    $left_count\
    \ = 0;\n    //store the right bracket count\n    $right_count = 0;\n    //loop\
    \ through each character\n    foreach($string as $char) {\n        //if the character\
    \ is a left bracket\n        if($char == '[') {\n            //if there is a right\
    \ bracket before this left bracket\n            if($right_count > 0) {\n     \
    \           //there is a nested bracket\n                return true;\n      \
    \      }\n            //increment the left bracket count\n            $left_count++;\n\
    \        }\n        //if the character is a right bracket\n        if($char ==\
    \ ']') {\n            //if there is a left bracket before this right bracket\n\
    \            if($left_count > 0) {\n                //there is a nested bracket\n\
    \                return true;\n            }\n            //increment the right\
    \ bracket count\n            $right_count++;\n        }\n    }\n    //if there\
    \ are no nested brackets\n    return false;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "\t$bracket_count = 0;\n\t$double_bracket_count = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] === '[') {\n\t\t\t$bracket_count++;\n\
    \t\t} else {\n\t\t\t$bracket_count--;\n\t\t}\n\t\tif ($bracket_count === 2) {\n\
    \t\t\t$double_bracket_count++;\n\t\t}\n\t}\n\treturn $double_bracket_count > 0;\n\
    }", "    $countOpen = 0;\n    $countClose = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == \"[\") {\n            $countOpen++;\n  \
    \      } else if ($string[$i] == \"]\") {\n            $countClose++;\n      \
    \  }\n    }\n    return $countOpen == $countClose ? false : true;\n}\necho is_nested('[[]]')\
    \ ? \"True\" : \"False\";\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]') ?\
    \ \"True\" : \"False\";\necho \"<br>\";\necho is_nested('[][]') ? \"True\" : \"\
    False\";\necho \"<br>\";\necho is_nested('[]') ? \"True\" : \"False\";\necho \"\
    <br>\";\necho is_nested('[[][]]') ? \"True\" : \"False\";\necho \"<br>\";\necho\
    \ is_nested('[[]][[') ? \"True\" : \"False\";", "    $r = 0;\n    $l = 0;\n  \
    \  $prev = '';\n    $nested = 0;\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $current = $string[$i];\n        if ($current\
    \ === '[') {\n            $l++;\n        } elseif ($current === ']') {\n     \
    \       $r++;\n        }\n        if ($l > 0 && $r > 0) {\n            if ($current\
    \ === ']' && $prev === '[') {\n                $nested++;\n            }\n   \
    \     }\n        $prev = $current;\n    }\n    return $l === $r && $nested > 0;\n\
    }\necho is_nested('[[]]') ? 'true' : 'false';\necho '<br>';\necho is_nested('[]]]]]]][[[[[]')\
    \ ? 'true' : 'false';\necho '<br>';\necho is_nested('[][]') ? 'true' : 'false';\n\
    echo '<br>';\necho is_nested('[]') ? 'true' : 'false';\necho '<br>';\necho is_nested('[[][]]')\
    \ ? 'true' : 'false';\necho '<br>';\necho is_nested('[[]][[') ? 'true' : 'false';\n\
    echo '<br>';\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\necho '<br>';\n\
    echo is_nested('[[][[]]][]') ? 'true' : 'false';\necho '<br>';\necho is_nested('[[[[][]]]]')\
    \ ? 'true' : 'false';\necho '<br>';\necho is_nested('[]]]]]]][[[[[]') ? 'true'\
    \ : 'false';\necho '<br>';\necho is_nested('[[][[]]][]') ? 'true' : 'false';\n\
    echo '<br>';\necho is_nested('[[[[][]]]]') ? 'true' : 'false';\necho '<br>';\n\
    echo is_nested", "\t$str = preg_replace('/^\\[\\]/', '', $string);\n\treturn $str\
    \ == '';\n}", "    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == '[') {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count != 0 ? false : true;\n}\necho is_nested('[[]]')\
    \ ? 'True' : 'False';\necho '<br>';\necho is_nested('[]]]]]]][[[[[]') ? 'True'\
    \ : 'False';\necho '<br>';\necho is_nested('[][]') ? 'True' : 'False';\necho '<br>';\n\
    echo is_nested('[]') ? 'True' : 'False';\necho '<br>';\necho is_nested('[[][]]')\
    \ ? 'True' : 'False';\necho '<br>';\necho is_nested('[[]][[') ? 'True' : 'False';\n\
    echo '<br>';\necho is_nested('[[]]') ? 'True' : 'False';\necho '<br>';\necho is_nested('[]]]]]]][[[[[]')\
    \ ? 'True' : 'False';\necho '<br>';\necho is_nested('[][]') ? 'True' : 'False';\n\
    echo '<br>';\necho is_nested('[]') ? 'True' : 'False';\necho '<br>';\necho is_nested('[[][]]')\
    \ ? 'True' : 'False';\necho '<br>';\necho is_nested('[[]][[') ? 'True' : 'False';\n\
    echo '<br>';\necho is_nested('[[]]') ? 'True' : 'False';\necho '<br>';\necho is_nested('[]]]]]]][[[[[]')\
    \ ? 'True' : 'False';\necho '<br>';\necho is_nested('[][]') ? 'True' : 'False';\n\
    echo '<br>';\necho is_nested('[]') ? 'True' : 'False';\necho", "\t$result = true;\n\
    \t$str = str_split($string);\n\t$arr = [];\n\tfor ($i=0; $i < count($str); $i++)\
    \ { \n\t\tif ($str[$i] === '[') {\n\t\t\tarray_push($arr, $str[$i]);\n\t\t}\n\t\
    \tif ($str[$i] === ']') {\n\t\t\tarray_pop($arr);\n\t\t}\n\t}\n\tif (!empty($arr))\
    \ {\n\t\t$result = false;\n\t}\n\treturn $result;\n}\necho is_nested('[[]]') .\
    \ \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "  // check if the first and last\
    \ are equal, if not return false\n  if($string[0] != $string[strlen($string) -\
    \ 1]) {\n    return false;\n  }\n  // check if a string is enclosed within brackets\n\
    \  if(preg_match(\"/\\[\\w+\\]/\", $string)) {\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\n",
  "    $stack = new SplStack();\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == \"[\") {\n            $stack->push($string[$i]);\n\
    \        } else {\n            if ($stack->isEmpty()) {\n                return\
    \ false;\n            } else {\n                $stack->pop();\n            }\n\
    \        }\n    }\n    return true;\n}\necho is_nested('[[]]') . \"<br>\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]') . \"<br>\";\n\
    echo is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[')\
    \ . \"<br>\";", "    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            $count++;\n        } else\
    \ if ($string[$i] == ']') {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return False;\n        }\n    }\n    return $count > 0 ?\
    \ False : True;\n}\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\n\
    echo is_nested('[][]');\necho is_nested('[]');\necho is_nested('[[][]]');\necho\
    \ is_nested('[[]][[');", "    $chars = str_split($string);\n    $length = count($chars);\n\
    \    $opening = [];\n    $closing = [];\n    $nested = false;\n    if ($length%2\
    \ != 0) {\n        return false;\n    }\n    foreach ($chars as $key => $char)\
    \ {\n        if ($char == '[') {\n            array_push($opening, $key);\n  \
    \      } else {\n            array_push($closing, $key);\n        }\n    }\n \
    \   foreach ($closing as $c) {\n        foreach ($opening as $o) {\n         \
    \   if ($c > $o) {\n                $nested = true;\n                break;\n\
    \            }\n        }\n    }\n    return $nested;\n}\necho is_nested('[[]]');\n\
    echo \"\\n\";\necho is_nested('[]]]]]]][[[[[]');\necho \"\\n\";\necho is_nested('[][]');\n\
    echo \"\\n\";\necho is_nested('[]');\necho \"\\n\";\necho is_nested('[[][]]');\n\
    echo \"\\n\";\necho is_nested('[[]][[');", "\t$opening = ['[', '{', '('];\n\t\
    $closing = [']', '}', ')'];\n\t$stack = [];\n\tforeach (str_split($string) as\
    \ $char) {\n\t\tif (in_array($char, $opening)) {\n\t\t\tarray_push($stack, $char);\n\
    \t\t} elseif (in_array($char, $closing)) {\n\t\t\tif (count($stack) === 0) {\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($closing[array_search($stack[count($stack)\
    \ - 1], $opening)] === $char) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\
    \t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn (count($stack) === 0) ? true\
    \ : false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$open = 0;\n\t$closed = 0;\n\tforeach(str_split($string) as $bracket) {\n\t\t\
    $bracket === '[' ? $open++ : $closed++;\n\t\tif($closed > $open) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $open > $closed;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "\t$str = str_split($string);\n\tfor ($i=0; $i < sizeof($str);\
    \ $i++) { \n\t\tif ($str[$i] === \"[\") {\n\t\t\tfor ($j=$i+1; $j < sizeof($str);\
    \ $j++) { \n\t\t\t\tif ($str[$j] === \"]\") {\n\t\t\t\t\treturn true;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\necho is_nested('[[]]') . \"\\n\";\n\
    echo is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\"\
    ;\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho\
    \ is_nested('[[]][[') . \"\\n\";", "\treturn preg_match('/\\[[^\\[\\]]*\\]/',\
    \ $string);\n}\necho is_nested('[[]]').\"\\n\";\necho is_nested('[]]]]]]][[[[[]').\"\
    \\n\";\necho is_nested('[][]').\"\\n\";\necho is_nested('[]').\"\\n\";\necho is_nested('[[][]]').\"\
    \\n\";\necho is_nested('[[]][[').\"\\n\";", "    return substr_count($string,\
    \ \"[\") == substr_count($string, \"]\");\n}\necho is_nested('[[]]');\necho \"\
    <br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\necho \"<br>\";\n", "\treturn preg_match(\"\
    /\\[\\]/\", $string);\n}\necho is_nested('[[]][[') . PHP_EOL;", "    $length =\
    \ strlen($string);\n    $i = 0;\n    $count = 0;\n    while($i < $length) {\n\
    \        if($string[$i] == '[') {\n            $count++;\n        } else if($string[$i]\
    \ == ']') {\n            $count--;\n        }\n        if($count < 0) {\n    \
    \        return false;\n        }\n        $i++;\n    }\n    return $count > 0\
    \ ? false : true;\n}", "\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i]\
    \ === \"[\") {\n\t\t\tfor ($j=strlen($string)-1; $j > $i; $j--) { \n\t\t\t\tif\
    \ ($string[$j] === \"]\") {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn false;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "    $string = str_split($string);\n    $currentLeft = 0;\n    $maxLeft = 0;\n \
    \   $currentRight = 0;\n    $maxRight = 0;\n    foreach ($string as $char) {\n\
    \        if ($char == '[') {\n            $currentLeft++;\n            if ($currentLeft\
    \ > $maxLeft) {\n                $maxLeft = $currentLeft;\n            }\n   \
    \     } else {\n            $currentRight++;\n            if ($currentRight >\
    \ $maxRight) {\n                $maxRight = $currentRight;\n            }\n  \
    \      }\n    }\n    if ($maxLeft > $maxRight) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\necho is_nested('[[]]');\necho \"<br>\"\
    ;\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\necho \"<br>\";\necho is_nested('][');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[][][]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[][[]]');\n\
    echo \"<br>\";\necho is_nested('[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]');\n\
    echo \"<br>\";\necho is_nested('[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[",
  "\t$count = 0;\n\tforeach (str_split($string) as $index => $bracket) {\n\t\tif ($bracket\
    \ === \"[\") {\n\t\t\t$count++;\n\t\t} elseif ($bracket === \"]\") {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$last_open\
    \ = '';\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[')\
    \ {\n\t\t\t$last_open = $i;\n\t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\tif ($last_open\
    \ != '') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\necho\
    \ is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\n\
    echo is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]')\
    \ . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "    $stringsArr = str_split($string);\n\
    \    $isValid = false;\n    $leftBrackets = [];\n    foreach ($stringsArr as $key\
    \ => $value) {\n        if ($value === '[') {\n            array_push($leftBrackets,\
    \ $key);\n        } else {\n            if (count($leftBrackets) > 0) {\n    \
    \            array_pop($leftBrackets);\n                $isValid = true;\n   \
    \         }\n        }\n    }\n    return $isValid;\n}\necho is_nested('[[]]')\
    \ ? 'True' : 'False';\necho '<br>';\necho is_nested('[]]]]]]][[[[[]') ? 'True'\
    \ : 'False';\necho '<br>';\necho is_nested('[][]') ? 'True' : 'False';\necho '<br>';\n\
    echo is_nested('[]') ? 'True' : 'False';\necho '<br>';\necho is_nested('[[][]]')\
    \ ? 'True' : 'False';\necho '<br>';\necho is_nested('[[]][[') ? 'True' : 'False';",
  "    $arr = str_split($string);\n    for ($i = 0; $i < sizeof($arr); $i++) {\n \
    \       if ($arr[$i] == \"[\") {\n            for ($j = $i + 1; $j < sizeof($arr);\
    \ $j++) {\n                if ($arr[$j] == \"]\") {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "    if\
    \ (preg_match(\"/\\[\\]/\", $string)) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$open = 0;\n\t$closed = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open += 1;\n\t\t} elseif ($string[$i] == ']')\
    \ {\n\t\t\t$closed += 1;\n\t\t}\n\t}\n\tif ($open > $closed && $closed > 0) {\n\
    \t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$stack = [];\n\t$openings = ['[',\
    \ '{', '('];\n\t$closings = [']', '}', ')'];\n\t$pairs = array_combine($openings,\
    \ $closings);\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif (in_array($string[$i],\
    \ $openings)) {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} elseif (in_array($string[$i],\
    \ $closings)) {\n\t\t\t$bracket = array_pop($stack);\n\t\t\tif ($pairs[$bracket]\
    \ != $string[$i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n\
    }\necho is_nested('[[]]');", "    $string = str_split($string);\n    $stack =\
    \ [];\n    foreach ($string as $value) {\n        if($value == '[') array_push($stack,\
    \ $value);\n        else {\n            if(!empty($stack)){\n                array_pop($stack);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return (empty($stack)) ? true : false;\n}\necho \"true \" . is_nested('[[]]')\
    \ . \"<br>\";\necho \"false \" . is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho\
    \ \"false \" . is_nested('[][]') . \"<br>\";\necho \"false \" . is_nested('[]')\
    \ . \"<br>\";\necho \"true \" . is_nested('[[][]]') . \"<br>\";\necho \"true \"\
    \ . is_nested('[[]][[') . \"<br>\";", "  $length = strlen($string);\n  $string\
    \ = str_split($string);\n  for ($i = 0; $i < $length; $i++) {\n    if ($string[$i]\
    \ == '[') {\n      for ($x = $i; $x < $length; $x++) {\n        if ($string[$x]\
    \ == ']') {\n          return true;\n        }\n      }\n    }\n  }\n  return\
    \ false;\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";",
  "\t$chars = str_split($string);\n\t$openBracket = '';\n\t$closeBracket = '';\n\t\
    $totalOpenBracket = 0;\n\t$totalCloseBracket = 0;\n\tforeach ($chars as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\t$openBracket .= '+';\n\t\t\t$totalOpenBracket\
    \ += 1;\n\t\t} else {\n\t\t\t$closeBracket .= '+';\n\t\t\t$totalCloseBracket +=\
    \ 1;\n\t\t}\n\t}\n\tif ($totalOpenBracket > $totalCloseBracket) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n", "\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif (substr_count($string, ']') < substr_count($string, '[')) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\tif (substr_count($string, ']') == substr_count($string,\
    \ '[')) {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t\
    $counter=0;\n\tfor($i=0;$i<strlen($string);$i++){\n\t\tif($string[$i]==\"[\"){\n\
    \t\t\t$counter++;\n\t\t}elseif($string[$i]==\"]\"){\n\t\t\t$counter--;\n\t\t}\n\
    \t\tif($counter<0){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif($counter==0){\n\t\t\
    return true;\n\t}else{\n\t\treturn false;\n\t}\n}\necho is_nested('[][]');\necho\
    \ is_nested('[]');\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\n\
    echo is_nested('[[]][[');\necho is_nested('[[][]]');", "\t$open = 0;\n\t$count\
    \ = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif($string[$i] == '['){\n\
    \t\t\t$open++;\n\t\t}elseif($string[$i] == ']'){\n\t\t\t$open--;\n\t\t}\n\t\t\
    if($open < 0){\n\t\t\t$count++;\n\t\t}\n\t}\n\tif($count > 0){\n\t\treturn false;\n\
    \t}else{\n\t\treturn true;\n\t}\n}\n", "    $left = 0;\n    $right = 0;\n    $breakPoint\
    \ = false;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if($string[$i]\
    \ == \"[\") {\n            $left++;\n        } else {\n            $right++;\n\
    \        }\n        if($right > $left) {\n            $breakPoint = true;\n  \
    \          break;\n        }\n    }\n    if($left == $right && $breakPoint ==\
    \ false) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\necho is_nested('[[]]') ? \"true\\n\" : \"false\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ ? \"true\\n\" : \"false\\n\";\necho is_nested('[][]') ? \"true\\n\" : \"false\\\
    n\";\necho is_nested('[]') ? \"true\\n\" : \"false\\n\";\necho is_nested('[[][]]')\
    \ ? \"true\\n\" : \"false\\n\";\necho is_nested('[[]][[') ? \"true\\n\" : \"false\\\
    n\";", "\tif(strlen($string) == 2) return true;\n\telse if(strlen($string) < 2)\
    \ return false;\n\telse {\n\t\tfor($i = 1; $i < strlen($string) - 1; $i++) {\n\
    \t\t\t$temp = substr($string, 0, $i) . substr($string, $i + 1);\n\t\t\tif(is_nested($temp))\
    \ return true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\necho is_nested('[[]]') . \"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') .\
    \ \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\"\
    ;\necho is_nested('[[]][[') . \"\\n\";", "\t$str = str_split($string);\n\t$str\
    \ = array_count_values($str);\n\t$str = array_filter($str);\n\treturn in_array(1,\
    \ $str);\n}\necho is_nested('[[][]]');", "    $bracket_open = 0;\n    $bracket_close\
    \ = 0;\n    $substring = \"\";\n    $sub_substring = \"\";\n    $substring_array\
    \ = [];\n    $sub_substring_array = [];\n    $empty_substring = 0;\n    $empty_sub_substring\
    \ = 0;\n    $how_many_substrings = 0;\n    $how_many_sub_substrings = 0;\n   \
    \ $sub_sub_substring = \"\";\n    $sub_sub_substring_array = [];\n    $sub_sub_substring_array_\
    \ = [];\n    $empty_sub_sub_substring = 0;\n    $sub_sub_substring_array_count\
    \ = 0;\n    $sub_sub_substring_array_count_ = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            $bracket_open++;\n \
    \       } else if ($string[$i] == ']') {\n            $bracket_close++;\n    \
    \    }\n    }\n    if ($bracket_open != $bracket_close) {\n        return false;\n\
    \    }\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            $substring .= $string[$i];\n        } else if ($string[$i]\
    \ == ']') {\n            $substring .= $string[$i];\n            array_push($substring_array,\
    \ $substring);\n            $substring = \"\";\n        }\n    }\n    $substring_array_count\
    \ = count($substring_array);\n    for ($i = 0; $i < $substring_array_count; $i++)\
    \ {\n        $sub_substring = \"\";\n        for ($j = 0; $j < strlen($substring_array[$i]);\
    \ $j++) {\n            if ($substring_array[$i][$j] == '[') {\n              \
    \  $sub_substring .= $substring_array[$i][$j];\n            } else if", "    $square\
    \ = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (strpos($string,\
    \ \"[\") !== false) {\n            $square = $square + 1;\n        }\n       \
    \ if (strpos($string, \"]\") !== false) {\n            $square = $square - 1;\n\
    \        }\n        if ($square < 0) {\n            return false;\n        }\n\
    \    }\n    if ($square === 0) {\n        return true;\n    } else {\n       \
    \ return false;\n    }\n    return $string;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[' && $string[$i + 1] == ']') {\n            return false;\n        }\n\
    \    }\n    return true;\n}\necho is_nested('[[]]') ? 'True' : 'False';\necho\
    \ '<br>';\necho is_nested('[]]]]]]][[[[[]') ? 'True' : 'False';\necho '<br>';\n\
    echo is_nested('[][]') ? 'True' : 'False';\necho '<br>';\necho is_nested('[]')\
    \ ? 'True' : 'False';\necho '<br>';\necho is_nested('[[][]]') ? 'True' : 'False';\n\
    echo '<br>';\necho is_nested('[[]][[') ? 'True' : 'False';\necho '<br>';\necho\
    \ is_nested('[[[]]]') ? 'True' : 'False';\necho '<br>';\necho is_nested('[[[[[[[[[[[[]]]]]]]]]]]]')\
    \ ? 'True' : 'False';\necho '<br>';", "\t\n}", "    $count = 0;\n    for ($i =\
    \ 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n      \
    \      $count++;\n        } else {\n            $count--;\n        }\n       \
    \ if ($count < 0) {\n            return false;\n        }\n    }\n    return $count\
    \ > 0 ? false : true;\n}\necho is_nested('[[]]') ? 'True' : 'False';\necho \"\
    <br>\";\necho is_nested('[]]]]]]][[[[[]') ? 'True' : 'False';\necho \"<br>\";\n\
    echo is_nested('[][]') ? 'True' : 'False';\necho \"<br>\";\necho is_nested('[]')\
    \ ? 'True' : 'False';\necho \"<br>\";\necho is_nested('[[][]]') ? 'True' : 'False';\n\
    echo \"<br>\";\necho is_nested('[[]][[') ? 'True' : 'False';\necho \"<br>\";\n",
  "\t$arr = str_split($string);\n\t$countOpen = 0;\n\t$countClose = 0;\n\tforeach\
    \ ($arr as $i) {\n\t\tif ($i == '[') {\n\t\t\t$countOpen++;\n\t\t} elseif ($i\
    \ == ']') {\n\t\t\t$countClose++;\n\t\t}\n\t}\n\tif ($countOpen > $countClose)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n$str = '[[][]]';\n\
    echo is_nested($str);", "\t$arr = str_split($string);\n\t$array = [];\n\t$match\
    \ = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t\
    array_push($array, $value);\n\t\t} else {\n\t\t\tif ($value == ']') {\n\t\t\t\t\
    array_pop($array);\n\t\t\t\t$match += 1;\n\t\t\t}\n\t\t}\n\t}\n\tif ($match >\
    \ 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "    $count\
    \ = 0;\n    $isValid = true;\n    for($i = 0; $i < strlen($string); $i++) {\n\
    \        if($string[$i] == '[') {\n            $count++;\n        }\n        if($string[$i]\
    \ == ']') {\n            $count--;\n        }\n        if($count < 0) {\n    \
    \        $isValid = false;\n        }\n    }\n    if($count == 0 && $isValid)\
    \ {\n        return true;\n    }\n    return false;\n}\necho is_nested('[[]]');\n\
    echo \"\\n\";\necho is_nested('[]]]]]]][[[[[]');\necho \"\\n\";\necho is_nested('[][]');\n\
    echo \"\\n\";\necho is_nested('[]');\necho \"\\n\";\necho is_nested('[[][]]');\n\
    echo \"\\n\";\necho is_nested('[[]][[');\necho \"\\n\";", "    $balanced = true;\n\
    \    $stack = array();\n    $idx = 0;\n    while ($balanced && $idx < strlen($string))\
    \ {\n        $char = $string[$idx];\n        if ($char == \"[\") {\n         \
    \   array_push($stack, $char);\n        } else {\n            if (empty($stack))\
    \ {\n                $balanced = false;\n            } else {\n              \
    \  array_pop($stack);\n            }\n        }\n        $idx++;\n    }\n    return\
    \ $balanced && empty($stack);\n}\n", "\t$chars = str_split($string);\n\t$stack\
    \ = [];\n\tforeach ($chars as $char) {\n\t\tif ($char === '[') {\n\t\t\tarray_push($stack,\
    \ $char);\n\t\t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t\tarray_pop($stack);\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn\
    \ true;\n\t}\n\treturn false;\n}\necho is_nested('[[]]') ? 'True' : 'False';\n\
    echo \"\\n\";\necho is_nested('[]]]]]]][[[[[]') ? 'True' : 'False';\necho \"\\\
    n\";\necho is_nested('[][]') ? 'True' : 'False';\necho \"\\n\";\necho is_nested('[]')\
    \ ? 'True' : 'False';\necho \"\\n\";\necho is_nested('[[][]]') ? 'True' : 'False';\n\
    echo \"\\n\";\necho is_nested('[[]][[') ? 'True' : 'False';\necho \"\\n\";\necho\
    \ is_nested('[]]') ? 'True' : 'False';\necho \"\\n\";\necho is_nested('[]][[]')\
    \ ? 'True' : 'False';\necho \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\t$char =\
    \ str_split($string);\n\tfor ($i=0; $i < count($char); $i++) { \n\t\tif ($char[$i]\
    \ == \"[\") {\n\t\t\t$open++;\n\t\t} elseif ($char[$i] == \"]\") {\n\t\t\t$close++;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn False;\n\t} else {\n\t\treturn\
    \ True;\n\t}\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\n\
    echo is_nested('[][]') . \"<br>\";\necho is_nested('[') . \"<br>\";\necho is_nested('[')\
    \ . \"<br>\";\necho is_nested('[') . \"<br>\";\necho is_nested('[') . \"<br>\"\
    ;", "\t$result = \"\";\n\tif(preg_match('/\\[\\]/', $string)){\n\t\t$result =\
    \ preg_replace('/\\[\\]/', '', $string);\n\t\treturn is_nested($result);\n\t}else{\n\
    \t\treturn (strlen($string) > 0) ? false : true;\n\t}\n}\necho is_nested('[[]]');\n\
    echo \"\\n\";\necho is_nested('[]]]]]]][[[[[]');\necho \"\\n\";\necho is_nested('[][]');\n\
    echo \"\\n\";\necho is_nested('[]');\necho \"\\n\";\necho is_nested('[[][]]');\n\
    echo \"\\n\";\necho is_nested('[[]][[');\necho \"\\n\";", "\t$arr = str_split($string);\n\
    \t$count = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif($value == '['){\n\t\
    \t\t$count++;\n\t\t}else{\n\t\t\t$count--;\n\t\t}\n\t\tif($count < 0){\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested('[][]');",
  "    $brackets=[];\n    $lastIndex=0;\n    foreach(str_split($string) as $letter){\n\
    \        if($letter==\"[\"){\n            $brackets[]=$letter;\n            $lastIndex++;\n\
    \        }\n        elseif($letter==\"]\"){\n            if($brackets[$lastIndex-1]==\"\
    [\"){\n                unset($brackets[$lastIndex-1]);\n                $lastIndex--;\n\
    \            }\n            else{\n                $brackets[]=$letter;\n    \
    \            $lastIndex++;\n            }\n        }\n    }\n    if(count($brackets)==0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\necho\
    \ is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho\
    \ \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');",
  "\treturn preg_match('/\\[\\]/', $string);\n}\necho is_nested('[[]]');\necho \"\
    <br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "    $stack = [];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        $bracket = $string[$i];\n        if ($bracket\
    \ == '[') {\n            array_push($stack, $bracket);\n        } else {\n   \
    \         if (empty($stack)) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return !empty($stack);\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";\n",
  "\t$string = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\tforeach ($string\
    \ as $key => $value) {\n\t\tif ($value == '[') {\n\t\t\t$open++;\n\t\t}\n\t\t\
    if ($value == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close && $open\
    \ != 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\necho \"<br>\";\necho is_nested('[[]][[]');\n\
    echo \"<br>\";\necho is_nested('[][][]');\necho \"<br>\";\necho is_nested('[]]');\n\
    echo \"<br>\";\necho is_nested('[[[]');\necho \"<br>\";\necho is_nested('[]][[]');\n\
    echo \"<br>\";\necho is_nested('[[]]]');\necho \"<br>\";\necho is_nested('[][[]');\n\
    echo \"<br>\";\necho is_nested('[]][[]]');\necho \"<br>\";\necho is_nested('[][]][');\n\
    echo \"<br>\";\necho is_nested('[[]][[]]');\necho \"<br>\";\necho is_nested('[[]][[]][]');\n\
    echo \"<br>\";\necho is_nested('[[[][]]');\necho \"<br>\";\necho is_nested('[]][[][[]]');\n\
    echo \"<br>\";\necho is_nested('[]][[[]]');\necho \"<br>\";\necho is_nested('[[[][]]][]');\n\
    echo \"<br>\";\necho is_nested('[][][[]]');\necho", "\tif ($string == '[]') {\n\
    \t\treturn false;\n\t} elseif ($string == '[[]]') {\n\t\treturn true;\n\t} elseif\
    \ ($string == '[[][]]') {\n\t\treturn true;\n\t} elseif ($string == '[][]') {\n\
    \t\treturn false;\n\t} elseif ($string == '[[]][[') {\n\t\treturn true;\n\t} elseif\
    \ ($string == '[]]]]]]][[[[[]') {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    echo \"<br>\";\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    echo \"<br>\";\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    echo \"<br>\";\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]",
  "\t// $first_bracket = $string[0];\n\t// $last_bracket = $string[strlen($string)\
    \ - 1];\n\t$first_bracket = $string[0];\n\tfor ($i = 1; $i < strlen($string);\
    \ $i++) {\n\t\tif ($string[$i] === ']') {\n\t\t\treturn True;\n\t\t}\n\t}\n\t\
    return False;\n}\necho is_nested('[[]]');", "    $openBrackets = 0;\n    $closedBrackets\
    \ = 0;\n    $stringLength = strlen($string);\n    for ($i = 0; $i < $stringLength;\
    \ $i++) {\n        if ($string[$i] === '[') {\n            $openBrackets++;\n\
    \        } else if ($string[$i] === ']') {\n            $closedBrackets++;\n \
    \       }\n    }\n    if ($openBrackets === $closedBrackets) {\n        return\
    \ False;\n    } else {\n        return True;\n    }\n}\necho is_nested('[[]]');\n\
    echo is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\necho is_nested('[]');\n\
    echo is_nested('[[][]]');\necho is_nested('[[]][[');", "  $open_square = 0;\n\
    \  $open_curly = 0;\n  $open_round = 0;\n  $open_angle = 0;\n  $is_nested = False;\n\
    \  $i = 0;\n  while($i < strlen($string)) {\n    if($string[$i] == '[') {\n  \
    \    $open_square += 1;\n    } elseif($string[$i] == ']') {\n      $open_square\
    \ -= 1;\n    } elseif($string[$i] == '{') {\n      $open_curly += 1;\n    } elseif($string[$i]\
    \ == '}') {\n      $open_curly -= 1;\n    } elseif($string[$i] == '(') {\n   \
    \   $open_round += 1;\n    } elseif($string[$i] == ')') {\n      $open_round -=\
    \ 1;\n    } elseif($string[$i] == '<') {\n      $open_angle += 1;\n    } elseif($string[$i]\
    \ == '>') {\n      $open_angle -= 1;\n    }\n    if($open_square < 0 || $open_curly\
    \ < 0 || $open_round < 0 || $open_angle < 0) {\n      $is_nested = True;\n   \
    \ }\n    $i += 1;\n  }\n  return $is_nested;\n}\necho is_nested('[[]]') . \"\\\
    n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\
    \\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\n\
    echo is_nested('[[]][[') . \"\\n\";\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('", "    $nested = false;\n\
    \    $openingCount = 0;\n    $closingCount = 0;\n    foreach (str_split($string)\
    \ as $char) {\n        if ($char === '[') {\n            $openingCount++;\n  \
    \      } elseif ($char === ']') {\n            $closingCount++;\n        }\n \
    \   }\n    if ($openingCount > $closingCount) {\n        $nested = true;\n   \
    \ }\n    return $nested;\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return $stack == [];\n}\necho is_nested('[[]]') . \"\\n\"\
    ;\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\\
    n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho\
    \ is_nested('[[]][[') . \"\\n\";", "    $string = str_split($string);\n    $flag\
    \ = True;\n    for ($i=0; $i < sizeof($string); $i++) { \n        $len = sizeof($string);\n\
    \        if ( $string[$i] == '[' && $string[$len - ($i + 1)] == ']' ) {\n    \
    \        unset($string[$i]);\n            unset($string[$len - ($i + 1)]);\n \
    \           $string = array_values($string);\n            $i--;\n        } else\
    \ {\n            $flag = False;\n        }\n    }\n    return $flag;\n}\necho\
    \ is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\n\
    echo is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]')\
    \ . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t\n}\necho is_nested('[[]]');\n\
    echo is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\necho is_nested('[]');\n\
    echo is_nested('[[][]]');\necho is_nested('[[]][[');", "    $length = strlen($string);\n\
    \    $opened = 0;\n    $closed = 0;\n    for ($i = 0; $i < $length; $i++) {\n\
    \        if ($string[$i] == '[') {\n            $opened++;\n        } else if\
    \ ($string[$i] == ']') {\n            $closed++;\n        }\n    }\n    if ($opened\
    \ == $closed && $opened != 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";",
  "  $open = 0;\n  $close = 0;\n  for ($i=0; $i < strlen($string); $i++) { \n    if\
    \ ($string[$i] == \"[\") {\n      $open++;\n    } elseif ($string[$i] == \"]\"\
    ) {\n      $close++;\n    }\n  }\n  if ($open == $close) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\necho is_nested('[[]]') . PHP_EOL;\necho\
    \ is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;\necho is_nested('[[]]') . PHP_EOL;", "    if (substr_count($string,\
    \ '[]') == 0) {\n        return false;\n    } else {\n        $string = str_replace(['[',\
    \ ']'], '', $string);\n        if ($string == '') {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    }\n}", "    $lefts\
    \ = $rights = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char\
    \ = $string[$i];\n        if ($char == '[') $lefts++;\n        if ($char == ']')\
    \ $rights++;\n        if ($rights > $lefts) return false;\n    }\n    return $lefts\
    \ == $rights;\n}\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;", "    $open = 0;\n    $close = 0;\n    $len =\
    \ strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            $open++;\n        } else if ($string[$i] == ']') {\n\
    \            $close++;\n        }\n    }\n    return $open == $close ? false :\
    \ true;\n}\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\n\
    echo is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;\n", "\t\
    //Write code here\n}\n\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\n\
    echo is_nested('[][]');\necho is_nested('[]');\necho is_nested('[[][]]');\necho\
    \ is_nested('[[]][[');", "\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif($string[$i]=='['){\n\
    \t\t\tif(strpos($string, ']', $i)===false){\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn true;\n}\necho is_nested('[[][]]').\"\\n\";\necho is_nested('[[]][[').\"\
    \\n\";", "  $stringArray = str_split($string);\n  $stringLength = count($stringArray);\n\
    \  $openBrackets = 0;\n  $closeBrackets = 0;\n  $isNested = 0;\n  $isValid = 0;\n\
    \  for ($i = 0; $i < $stringLength; $i++) {\n    if ($stringArray[$i] == \"[\"\
    ) {\n      $openBrackets++;\n    } elseif ($stringArray[$i] == \"]\") {\n    \
    \  $closeBrackets++;\n    }\n  }\n  if ($openBrackets != $closeBrackets) {\n \
    \   $isValid = 1;\n  }\n  for ($i = 0; $i < $stringLength; $i++) {\n    if ($stringArray[$i]\
    \ == \"[\") {\n      $isNested++;\n    } elseif ($stringArray[$i] == \"]\") {\n\
    \      $isNested--;\n    }\n    if ($isNested == 0 && $isValid == 0) {\n     \
    \ return true;\n    }\n  }\n  return false;\n}\necho is_nested('[[]]') . \"<br>\"\
    ;\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]') . \"<br>\"\
    ;\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"<br>\";\necho\
    \ is_nested('[[]][[') . \"<br>\";", "\t$count = 0;\n\t$count2 = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$count\
    \ += 1;\n\t\t} elseif ($string[$i] == ']') {\n\t\t\t$count2 += 1;\n\t\t}\n\t}\n\
    \treturn ($count == $count2) ? false : true;\n}\necho is_nested('[[][]]');", " \
    \   $arr_open = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if\
    \ ($string[$i] == '[') {\n            array_push($arr_open, $string[$i]);\n  \
    \      }\n        if ($string[$i] == ']') {\n            if (empty($arr_open))\
    \ {\n                return false;\n            } else {\n                array_pop($arr_open);\n\
    \            }\n        }\n    }\n    if (!empty($arr_open)) {\n        return\
    \ false;\n    }\n    return true;\n}\necho is_nested('[[]]') . '<br>';\necho is_nested('[]]]]]]][[[[[]')\
    \ . '<br>';\necho is_nested('[][]') . '<br>';\necho is_nested('[]') . '<br>';\n\
    echo is_nested('[[][]]') . '<br>';\necho is_nested('[[]][[') . '<br>';\necho is_nested('[[][[')\
    \ . '<br>';", "    $n = substr_count($string, \"[\");\n    $m = substr_count($string,\
    \ \"]\");\n    $arr = str_split($string);\n    if ($n == $m) {\n        for ($i\
    \ = 0; $i < count($arr); $i++) {\n            if ($arr[$i] == \"[\") {\n     \
    \           for ($j = $i + 1; $j < count($arr); $j++) {\n                    if\
    \ ($arr[$j] == \"]\") {\n                        unset($arr[$i]);\n          \
    \              unset($arr[$j]);\n                        $i = $j;\n          \
    \              break;\n                    }\n                }\n            }\n\
    \        }\n        $arr = array_values($arr);\n        if (count($arr) == 0)\
    \ {\n            return True;\n        } else {\n            return False;\n \
    \       }\n    } else {\n        return False;\n    }\n}\necho is_nested('[[][]]');",
  "  $strToArray = str_split($string);\n  $strToArray = array_filter($strToArray,\
    \ function($v){\n    return $v === '[' || $v === ']';\n  });\n  if (count($strToArray)\
    \ % 2 !== 0) {\n    return false;\n  } else {\n    $result = [];\n    foreach\
    \ ($strToArray as $v) {\n      if ($v === '[') {\n        array_push($result,\
    \ $v);\n      } else {\n        if (count($result) === 0) {\n          return\
    \ false;\n        } else {\n          array_pop($result);\n        }\n      }\n\
    \    }\n    return count($result) === 0;\n  }\n}\necho is_nested('[[]]') ? 'true'\
    \ : 'false';\necho '<br>';\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\n\
    echo '<br>';\necho is_nested('[][]') ? 'true' : 'false';\necho '<br>';\necho is_nested('[]')\
    \ ? 'true' : 'false';\necho '<br>';\necho is_nested('[[][]]') ? 'true' : 'false';\n\
    echo '<br>';\necho is_nested('[[]][[') ? 'true' : 'false';\necho '<br>';\necho\
    \ is_nested('[]][') ? 'true' : 'false';\necho '<br>';\necho is_nested('[[][[]]')\
    \ ? 'true' : 'false';\necho '<br>';\necho is_nested('[[[[[[[[[]]]]]]]]]') ? 'true'\
    \ : 'false';\necho '<br>';\necho is_nested('[[[[[[[[[[]]]]]]]]]]') ? 'true' :\
    \ 'false';\necho '<br>';\necho is_nested('[[[[[[[[[]]]]]]]]]]') ? 'true' : 'false';\n\
    echo '<br>';\necho is_nested('[[[[[[[[[]]]]]]]]]]') ? 'true' : 'false';\n", " \
    \   if (strlen($string) % 2 !== 0) {\n        return false;\n    }\n    if (strpos($string,\
    \ '[]') === false) {\n        return false;\n    }\n    if (strpos($string, '[]')\
    \ !== false) {\n        return true;\n    }\n}", "\tif (strlen($string) == 0)\
    \ {\n\t\treturn false;\n\t}\n\tif (strlen($string) == 1) {\n\t\treturn false;\n\
    \t}\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == \"[\"\
    ) {\n\t\t\t$arr[] = $string[$i];\n\t\t}\n\t\tif ($string[$i] == \"]\") {\n\t\t\
    \t$arr[] = $string[$i];\n\t\t}\n\t}\n\tif (count($arr) % 2 != 0) {\n\t\treturn\
    \ false;\n\t}\n\t$res = [];\n\t$count = 0;\n\tfor ($i=0; $i < count($arr); $i++)\
    \ { \n\t\tif ($arr[$i] == \"[\") {\n\t\t\t$res[] = $arr[$i];\n\t\t\t$count++;\n\
    \t\t}\n\t\tif ($arr[$i] == \"]\") {\n\t\t\tif ($count != 0) {\n\t\t\t\t$res[]\
    \ = $arr[$i];\n\t\t\t\t$count--;\n\t\t\t}\n\t\t}\n\t}\n\treturn $res;\n}\n\n$string\
    \ = \"[]\";\nprint_r(is_nested($string));\necho \"\\n\";\n$string = \"[[]]\";\n\
    print_r(is_nested($string));\necho \"\\n\";\n$string = \"[[][]]\";\nprint_r(is_nested($string));\n\
    echo \"\\n\";\n$string = \"[[][\";\nprint_r(is_nested($string));\necho \"\\n\"\
    ;\n$string = \"[]]]]]]][[[[[]\";\nprint_r(is_nested($string));\necho \"\\n\";",
  "    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] === '[')\
    \ {\n            for ($j = $i + 1; $j < strlen($string); $j++) {\n           \
    \     if ($string[$j] === ']') {\n                    return true;\n         \
    \       }\n            }\n        }\n    }\n    return false;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$open_brackets = 0;\n\t$nested\
    \ = false;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] ==\
    \ \"[\") {\n\t\t\t$open_brackets++;\n\t\t}\n\t\tif ($string[$i] == \"]\") {\n\t\
    \t\t$open_brackets--;\n\t\t}\n\t\tif ($open_brackets > 1) {\n\t\t\t$nested = true;\n\
    \t\t}\n\t}\n\treturn $nested;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho\
    \ is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\necho\
    \ \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');\necho \"<br>\";", "    $str = str_split($string);\n\
    \    $count = 0;\n    for ($i=0; $i < strlen($string); $i++) { \n        if($str[$i]\
    \ == '[') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if($count < 0) {\n            return false;\n        }\n \
    \   }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]');\necho\
    \ is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\necho is_nested('[]');\n\
    echo is_nested('[[][]]');\necho is_nested('[[]][[');", "\t$matchingBracket = ['['\
    \ => ']'];\n\t$bracketStack = [];\n\t$arr = str_split($string);\n\tforeach ($arr\
    \ as $char) {\n\t\tif (array_key_exists($char, $matchingBracket)) {\n\t\t\tarray_push($bracketStack,\
    \ $char);\n\t\t} else {\n\t\t\tif (empty($bracketStack)) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tif ($matchingBracket[array_pop($bracketStack)] !== $char) {\n\t\
    \t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($bracketStack);\n}\n\
    var_dump(is_nested('[[]]'));\nvar_dump(is_nested('[]]]]]]][[[[[]'));\nvar_dump(is_nested('[][]'));\n\
    var_dump(is_nested('[]'));\nvar_dump(is_nested('[[][]]'));\nvar_dump(is_nested('[[]][['));",
  "\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t$string = str_replace('[]', '',\
    \ $string);\n\t}\n\treturn $string == \"\";\n}\n\necho is_nested('[[]]') . \"\
    <br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]')\
    \ . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"\
    <br>\";\necho is_nested('[[]][[') . \"<br>\";\n", "\t// return true if contains\
    \ valid subsequence\n\t// subsequence of brackets \n\t// subsequence is any string\
    \ made up of characters from other string\n\t// but in any order.\n\t// if subsequence\
    \ has at least one pair of nested brackets\n\t// [] has two subsequences \n\t\
    $left = 0; // count number of nested left brackets\n\t$right = 0; // count number\
    \ of nested right brackets\n\tfor ($i=0; $i < strlen($string); $i++) {\n\t\tif\
    \ ($string[$i] == '[') {\n\t\t\t$left++;\n\t\t} elseif ($string[$i] == ']') {\n\
    \t\t\t$right++;\n\t\t}\n\t}\n\tif ($left > $right) {\n\t\treturn false;\n\t} else\
    \ {\n\t\treturn true;\n\t}\n}", "\treturn strpos($string, '][') === false && strpos($string,\
    \ '][') === false && strpos($string, '][') === false && strpos($string, '][')\
    \ === false;\n}\necho is_nested('[[][]]') . PHP_EOL;", "    // get all the starting\
    \ and ending bracket\n    $start = [];\n    $end = [];\n    for($i = 0; $i < strlen($string);\
    \ $i++) {\n        if($string[$i] == \"[\") {\n            array_push($start,\
    \ $i);\n        } else if($string[$i] == \"]\") {\n            array_push($end,\
    \ $i);\n        }\n    }\n    // if end has more or same number of bracket then\
    \ there won't be valid subsequence of brackets\n    if(count($end) >= count($start))\
    \ {\n        return false;\n    }\n    // check whether the start and end bracket\
    \ are nested or not.\n    $check = true;\n    for($i = 0; $i < count($start);\
    \ $i++) {\n        if($start[$i] > $end[$i]) {\n            $check = false;\n\
    \            break;\n        }\n    }\n    return $check;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "\t$count = 0;\n\tfor ($i=0; $i <\
    \ strlen($string); $i++) { \n\t\tif ($string[$i] == \"[\") {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count != 0 ? false : true;\n}\necho is_nested('[[]]') .\
    \ \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\necho is_nested('[[]]') . \"\\n\";\n\
    echo is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\"\
    ;\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho\
    \ is_nested('[[]][[') . \"\\n\";", "    $count = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            $count++;\n        }\
    \ else {\n            $count--;\n        }\n        if ($count < 0) {\n      \
    \      return false;\n        }\n    }\n    return $count == 0;\n}\n\necho is_nested('[[]]')\
    \ . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;", "\treturn preg_match('/\\[\\]/', $string);\n\
    }\necho is_nested('[[]][[') . PHP_EOL;", "\treturn preg_match(\"/(\\[\\[|\\]\\\
    ])+/\", $string);\n}\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\n\
    echo is_nested('[][]');\necho is_nested('[]');\necho is_nested('[[][]]');\necho\
    \ is_nested('[[]][[');", "    if ($string[0] == ']' || $string[strlen($string)\
    \ - 1] == '[') {\n        return false;\n    }\n    $arr = [];\n    $open = 0;\n\
    \    $close = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            $open++;\n            array_push($arr, $string[$i]);\n\
    \        } else {\n            if (count($arr) != 0) {\n                array_pop($arr);\n\
    \                $close++;\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    if (count($arr) != 0) {\n        return\
    \ false;\n    }\n    if ($open >= $close) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\necho is_nested('[[]]') . \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\n\
    echo is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[')\
    \ . \"\\n\";\necho is_nested('[]][[[]') . \"\\n\";\necho is_nested('[[[[[[') .\
    \ \"\\n\";\necho is_nested(']]]]]]') . \"\\n\";\necho is_nested('[][') . \"\\\
    n\";\necho is_nested('][][') . \"\\n\";\necho is_nested('][][') . \"\\n\";\necho\
    \ is_nested('][][') . \"\\n\";\necho is_nested('[[]][][') . \"\\n\";\necho is_nested('[]][[[]')\
    \ . \"\\n\";\necho is_nested('[[]][][') . \"\\n\";\necho is_nested('][][') . \"\
    \\n\";\necho is_nested('[[]][][') . \"\\n\";\necho is_nested('[[]][][') . \"\\\
    n\";\necho is_nested('[]][[[]') . \"\\n\";", "    $a = array();\n    $b = array();\n\
    \    $c = 0;\n    $d = 0;\n    for($i = 0; $i < strlen($string); $i++){\n    \
    \    if($string[$i] == '['){\n            $a[] = $i;\n            $c++;\n    \
    \    }\n        if($string[$i] == ']'){\n            $b[] = $i;\n            $d++;\n\
    \        }\n    }\n    $e = array_merge($a, $b);\n    $f = array_unique($e);\n\
    \    if(strlen($string) == count($f)){\n        return false;\n    }else{\n  \
    \      return true;\n    }\n}\necho is_nested('[][]');", "\t$bracketsArray = str_split($string);\n\
    \t$openBrackets = [];\n\t$closeBrackets = [];\n\tforeach ($bracketsArray as $key\
    \ => $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\tarray_push($openBrackets,\
    \ $bracket);\n\t\t}\n\t\tif ($bracket == ']') {\n\t\t\tarray_push($closeBrackets,\
    \ $bracket);\n\t\t}\n\t}\n\tif (sizeof($openBrackets) < sizeof($closeBrackets))\
    \ {\n\t\treturn false;\n\t}\n\tif (sizeof($openBrackets) > sizeof($closeBrackets))\
    \ {\n\t\treturn false;\n\t}\n\tif (sizeof($openBrackets) == sizeof($closeBrackets))\
    \ {\n\t\treturn true;\n\t}\n}\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\n\
    echo is_nested('[][]');\necho is_nested('[]');\necho is_nested('[[][]]');\necho\
    \ is_nested('[[]][[');", "\t$pattern = \"/\\[\\]/\";\n\t$match = preg_match($pattern,\
    \ $string);\n\t$true = \"true\";\n\t$false = \"false\";\n\tif ($match) {\n\t\t\
    return $true;\n\t}\n\telse {\n\t\treturn $false;\n\t}\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "    $opening = substr_count($string,\
    \ '[');\n    $closing = substr_count($string, ']');\n    if($opening == $closing){\n\
    \        return false;\n    }\n    return true;\n}\necho is_nested('[[]]');\n\
    echo \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\necho \"<br>\";\necho is_nested('[][]');\n\
    echo \"<br>\";\necho is_nested('[]');\necho \"<br>\";\necho is_nested('[[][]]');\n\
    echo \"<br>\";\necho is_nested('[[]][[');", "    $left = $right = 0;\n    $string\
    \ = str_split($string);\n    foreach($string as $value) {\n        if($value ==\
    \ '['){\n            $left++;\n        }\n        if($value == ']'){\n       \
    \     $right++;\n        }\n        if($right > $left){\n            return false;\n\
    \        }\n    }\n    if($left == $right){\n        return true;\n    }\n   \
    \ return false;\n}\necho is_nested('[[]][[')\n", "    return strpos($string, '[]')\
    \ !== false;\n}\necho is_nested('[[]]');", "\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\t$string = str_replace('[]', '', $string);\n\t}\n\tif (strlen($string)\
    \ == 0) {\n\t\treturn 'True';\n\t}\n\treturn 'False';\n}\necho is_nested('[[]]');\n\
    echo '<br>';\necho is_nested('[]]]]]]][[[[[]');\necho '<br>';\necho is_nested('[][]');\n\
    echo '<br>';\necho is_nested('[]');\necho '<br>';\necho is_nested('[[][]]');\n\
    echo '<br>';\necho is_nested('[[]][[');\necho '<br>';", "  $stack = array();\n\
    \  $open = array(\"[\", \"{\");\n  $close = array(\"]\", \"}\");\n  $result =\
    \ array();\n  $len = strlen($string);\n  for($i = 0; $i < $len; $i++) {\n    $char\
    \ = $string[$i];\n    if(in_array($char, $open)) {\n      array_push($stack, $char);\n\
    \    } else if(in_array($char, $close)) {\n      if(count($stack) == 0) {\n  \
    \      array_push($result, 0);\n      } else {\n        $popped = array_pop($stack);\n\
    \        if($char == \"]\" && $popped == \"[\") {\n          array_push($result,\
    \ 1);\n        } else if($char == \"}\" && $popped == \"{\") {\n          array_push($result,\
    \ 1);\n        } else {\n          array_push($result, 0);\n        }\n      }\n\
    \    }\n  }\n  if(count($stack) > 0) {\n    array_push($result, 0);\n  }\n  if(in_array(1,\
    \ $result)) {\n    return true;\n  } else {\n    return false;\n  }\n}", "   \
    \ $arr = str_split($string);\n    $count = 0;\n    foreach($arr as $char) {\n\
    \        if($char == '[') $count++;\n        if($char == ']') $count--;\n    \
    \    if($count == -1) return false;\n    }\n    return $count == 0;\n}\n", "\t\
    $map = [\n\t\t'[' => ']',\n\t\t'{' => '}',\n\t\t'(' => ')'\n\t];\n\t$brackets\
    \ = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\t$char = $string[$i];\n\
    \t\tif (isset($map[$char])) {\n\t\t\t$brackets[] = $char;\n\t\t} else {\n\t\t\t\
    if (end($brackets) === $map[$char]) {\n\t\t\t\tarray_pop($brackets);\n\t\t\t}\
    \ else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\necho\
    \ is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t$opening = substr_count($string,\
    \ '[');\n\t$closing = substr_count($string, ']');\n\treturn ($opening > $closing);\n\
    }\necho is_nested('[[]][[') . \"\\n\";\necho is_nested('[[]]') . \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\n\
    echo is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";", "  return\
    \ preg_match('/\\[\\]/', $string);\n}\necho is_nested('[[]]') . PHP_EOL;\necho\
    \ is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;", "\t$len = strlen($string);\n\tif ($len%2 == 1) {\n\t\treturn false;\n\
    \t}\n\tfor ($i=0; $i < $len; $i+=2) { \n\t\tif ($string[$i] == $string[$i+1])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_nested('[][]');",
  "    $string = preg_replace('/[^\\[\\]]/', '', $string);\n    $count = 0;\n    $prev_opening\
    \ = false;\n    $prev_closing = false;\n    foreach (str_split($string) as $symbol)\
    \ {\n        if ($symbol == '[') {\n            $count++;\n            $prev_opening\
    \ = true;\n            $prev_closing = false;\n        } else {\n            $count--;\n\
    \            $prev_opening = false;\n            $prev_closing = true;\n     \
    \   }\n        if ($count < 0 || ($prev_opening && $prev_closing)) {\n       \
    \     return false;\n        }\n    }\n    return $count > 0 ? false : true;\n\
    }\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\necho is_nested('[][]');\n\
    echo is_nested('[]');\necho is_nested('[[][]]');\necho is_nested('[[]][[');",
  "    $arr = str_split($string);\n    $opened = [];\n    foreach ($arr as $char)\
    \ {\n        $last_char = end($opened);\n        if ($char == '[' && $last_char\
    \ == '[') {\n            return true;\n        } else if ($char == ']') {\n  \
    \          array_pop($opened);\n        } else {\n            $opened[] = $char;\n\
    \        }\n    }\n    return false;\n}\necho is_nested('[[]]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\necho \"\\\
    n\";\necho is_nested('[][]') ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[]')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_nested('[[][]]') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_nested('[[]][[') ? 'true' : 'false';\necho \"\\n\";\n",
  "    $leftBracketCount = 0;\n    $rightBracketCount = 0;\n    for ($i = 0; $i <\
    \ strlen($string); $i++) {\n        if ($string[$i] == \"[\") {\n            $leftBracketCount++;\n\
    \        } else {\n            $rightBracketCount++;\n        }\n        if ($rightBracketCount\
    \ > $leftBracketCount) {\n            return false;\n        }\n    }\n    return\
    \ $leftBracketCount == $rightBracketCount ? false : true;\n}\n", "\t$close=array();\n\
    \tfor($i=0;$i<strlen($string);$i++){\n\t\tif($string[$i]=='['){\n\t\t\tarray_push($close,1);\n\
    \t\t}\n\t\telseif($string[$i]==']'){\n\t\t\tif(!empty($close)){\n\t\t\t\tarray_pop($close);\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(empty($close)){\n\
    \t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]').\"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]').\"\\n\";\necho is_nested('[][]').\"\\\
    n\";\necho is_nested('[]').\"\\n\";\necho is_nested('[[][]]').\"\\n\";\necho is_nested('[[]][[').\"\
    \\n\";", "    $opener = strpos($string, \"[\");\n    $closer = strpos($string,\
    \ \"]\");\n    return $opener < $closer ? true : false;\n  }\n  echo is_nested('[[]]');",
  "    $len = strlen($string);\n    $count = 0;\n    $nested = false;\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        if ($string[$i] == '[') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count == 2)\
    \ {\n            $nested = true;\n        }\n    }\n    return $nested;\n}\necho\
    \ is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t$flag = 0;\n\t$arr = str_split($string);\n\
    \tforeach ($arr as $i) {\n\t\tif ($i == '[') {\n\t\t\t$flag++;\n\t\t} else {\n\
    \t\t\t$flag--;\n\t\t}\n\t\tif ($flag < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn $flag == 0;\n}\necho is_nested('[[]]');\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]');\n\
    echo \"<br>\";\necho is_nested('[][]');\necho \"<br>\";\necho is_nested('[]');\n\
    echo \"<br>\";\necho is_nested('[[][]]');\necho \"<br>\";\necho is_nested('[[]][[');\n\
    echo \"<br>\";\necho is_nested('[]]]');", "\treturn preg_match(\"/\\[{2,}/\",\
    \ $string) ? false : true;\n}\necho is_nested('[][]');", "    $leftBracket = substr_count($string,\
    \ '[');\n    $rightBracket = substr_count($string, ']');\n    $firstBracket =\
    \ substr($string, 0, 1);\n    $lastBracket = substr($string, -1);\n    if ($leftBracket\
    \ == $rightBracket) {\n        if ($firstBracket == '[' && $lastBracket == ']')\
    \ {\n            return true;\n        } else {\n            return false;\n \
    \       }\n    } else {\n        return false;\n    }\n}\n$string = '[[]]';\n\
    echo is_nested($string);\necho \"<br>\";\n$string = '[]]]]]]][[[[[]';\necho is_nested($string);\n\
    echo \"<br>\";\n$string = '[][]';\necho is_nested($string);\necho \"<br>\";\n\
    $string = '[]';\necho is_nested($string);\necho \"<br>\";\n$string = '[[][]]';\n\
    echo is_nested($string);\necho \"<br>\";\n$string = '[[]][[';\necho is_nested($string);",
  "    $arr = str_split($string);\n    $temp = [];\n    for ($i=0; $i < count($arr);\
    \ $i++) { \n        if($arr[$i] == '[') {\n            array_push($temp,$arr[$i]);\n\
    \        } else if($arr[$i] == ']') {\n            array_pop($temp);\n       \
    \ }\n    }\n    return count($temp) == 0;\n}\necho is_nested('[[]]') . PHP_EOL;\n\
    echo is_nested('[]]]]]]][[[[[]') . PHP_EOL;\necho is_nested('[][]') . PHP_EOL;\n\
    echo is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\necho is_nested('[[]][[')\
    \ . PHP_EOL;\n", "  $count = 0;\n  for ($i=0; $i < strlen($string); $i++) { \n\
    \    if ($string[$i] == '[') {\n      $count++;\n    }\n    if ($string[$i] ==\
    \ ']') {\n      $count--;\n    }\n    if ($count < 0) {\n      return false;\n\
    \    }\n  }\n  return $count == 0;\n}", "\t$stack = new SplStack();\n\tforeach\
    \ (str_split($string) as $s) {\n\t\tif ($s == \"[\") {\n\t\t\t$stack->push($s);\n\
    \t\t} else {\n\t\t\tif ($stack->isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\t$stack->pop();\n\t\t}\n\t}\n\treturn $stack->isEmpty();\n}\nvar_dump(is_nested('[[]]'));\n\
    var_dump(is_nested('[]]]]]]][[[[[]'));\nvar_dump(is_nested('[][]'));\nvar_dump(is_nested('[]'));\n\
    var_dump(is_nested('[[][]]'));\nvar_dump(is_nested('[[]][['));", "    $split =\
    \ str_split($string);\n    $end = end($split);\n    $start = reset($split);\n\
    \    $open = 0;\n    $close = 0;\n    foreach($split as $char) {\n        if($char\
    \ == \"[\") {\n            $open++;\n        } elseif($char == \"]\") {\n    \
    \        $close++;\n        }\n    }\n    if($open > $close) {\n        if($end\
    \ == \"]\") {\n            return true;\n        } else {\n            return\
    \ false;\n        }\n    } elseif($open < $close) {\n        if($start == \"[\"\
    ) {\n            return true;\n        } else {\n            return false;\n \
    \       }\n    } else {\n        return false;\n    }\n}", "    $validBrakets\
    \ = ['[]'];\n    $strlen = strlen($string);\n    for ($i = 0; $i < $strlen; $i++)\
    \ {\n        if ($string[$i] === '[') {\n            $bracketCounter = 0;\n  \
    \          for ($j = $i + 1; $j < $strlen; $j++) {\n                if ($string[$j]\
    \ === '[') {\n                    $bracketCounter++;\n                } else if\
    \ ($string[$j] === ']') {\n                    if ($bracketCounter > 0) {\n  \
    \                      $bracketCounter--;\n                    } else {\n    \
    \                    array_push($validBrakets, substr($string, $i, $j - $i + 1));\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return count($validBrakets) > 1;\n}\necho\
    \ is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "\t$split = str_split($string);\n\
    \t$open = [];\n\tforeach ($split as $s) {\n\t\tif ($s == '[') {\n\t\t\tarray_push($open,\
    \ $s);\n\t\t} else {\n\t\t\tarray_pop($open);\n\t\t}\n\t}\n\tif (count($open)\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "    $number = 0;\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n         \
    \   $number++;\n        } else {\n            $number--;\n        }\n        if\
    \ ($number < 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\necho is_nested('[[]]');\necho '<br>';\necho is_nested('[]]]]]]][[[[[]');\n\
    echo '<br>';\necho is_nested('[][]');\necho '<br>';\necho is_nested('[]');\necho\
    \ '<br>';\necho is_nested('[[][]]');\necho '<br>';\necho is_nested('[[]][[');",
  "    $count = 0;\n    $string = str_split($string);\n    foreach($string as $value)\
    \ {\n        if($value == '[') {\n            $count++;\n        }\n        if($value\
    \ == ']') {\n            $count--;\n        }\n        if($count < 0) {\n    \
    \        return false;\n        }\n    }\n    return $count == 0;\n}\nprint_r(is_nested('[[]]'));\n\
    print_r(is_nested('[]]]]]]][[[[[]'));\nprint_r(is_nested('[][]'));\nprint_r(is_nested('[]'));\n\
    print_r(is_nested('[[][]]'));\nprint_r(is_nested('[[]][['));", "\t$open_square_bracket\
    \ = substr_count($string, '[');\n\t$close_square_bracket = substr_count($string,\
    \ ']');\n\tif ($open_square_bracket == $close_square_bracket) {\n\t\treturn false;\n\
    \t}\n\t$explode_array = explode('[', $string);\n\t$number_of_elements = count($explode_array);\n\
    \tif ($number_of_elements > 1) {\n\t\tfor ($i=1; $i < $number_of_elements; $i++)\
    \ { \n\t\t\t$number_of_elements_in_each_key = strlen($explode_array[$i]);\n\t\t\
    \tif (strpos($explode_array[$i], ']') === false) {\n\t\t\t\t$sum = $sum + 1;\n\
    \t\t\t}\n\t\t}\n\t\tif ($sum == 0) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\
    \t}\n\treturn false;\n}", "\t$count = 0;\n\t$flag = false;\n\tfor ($i=0; $i <\
    \ strlen($string); $i++) { \n\t\tif($string[$i] == '[') {\n\t\t\t$count++;\n\t\
    \t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif($count == 0) {\n\t\t\t$flag = true;\n\
    \t\t}\n\t}\n\treturn $flag;\n}", "\t$string = preg_replace(\"/[^\\[\\]]/\", \"\
    \", $string);\n\t$string = str_replace(\"][\", \"\", $string);\n\t$string = str_replace(\"\
    []\", \"\", $string);\n\t$string = str_replace(\"[[\", \"\", $string);\n\treturn\
    \ $string === \"\";\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "\t$open = 0;\n\t$close = 0;\n\t$length = strlen($string);\n\tfor ($i=0; $i < $length;\
    \ $i++) { \n\t\tif ($string[$i] === \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ === \"]\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif (($open === 0) || ($close ===\
    \ 0)) {\n\t\treturn False;\n\t} else {\n\t\treturn True;\n\t}\n}\necho is_nested('[[]]')\
    \ . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]')\
    \ . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"\
    <br>\";\necho is_nested('[[]][[') . \"<br>\";", "\t$str = str_split($string);\n\
    \t$count1 = 0;\n\t$count2 = 0;\n\t$count3 = 0;\n\t$count4 = 0;\n\tforeach ($str\
    \ as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count1++;\n\t\t}\n\t\tif ($value\
    \ == ']') {\n\t\t\t$count2++;\n\t\t}\n\t\tif ($value == '[' && $count1 > $count2)\
    \ {\n\t\t\t$count3++;\n\t\t}\n\t\tif ($value == ']' && $count2 > $count1) {\n\t\
    \t\t$count4++;\n\t\t}\n\t}\n\tif ($count1 == $count2 && $count3 > 0 && $count4\
    \ > 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]')\
    \ . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]')\
    \ . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"\
    <br>\";\necho is_nested('[[]][[') . \"<br>\";", "\treturn (substr_count($string,\
    \ '[') === substr_count($string, ']')) ? false : true;\n}\necho is_nested('[[]]').\"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]').\"\\n\";\necho is_nested('[][]').\"\\\
    n\";\necho is_nested('[]').\"\\n\";\necho is_nested('[[][]]').\"\\n\";\necho is_nested('[[]][[').\"\
    \\n\";", "\t$type2 = 0;\n\t$type1 = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$type1++;\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\t$type2++;\n\t\t}\n\t}\n\tif ($type1 == $type2 && $type1 > 1)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]')\
    \ . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]')\
    \ . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"\
    <br>\";\necho is_nested('[[]][[') . \"<br>\";", "\t$string = str_split($string);\n\
    \t$open = 0;\n\t$close = 0;\n\tforeach ($string as $s) {\n\t\tif ($s == '[') {\n\
    \t\t\t$open++;\n\t\t}\n\t\tif ($s == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif\
    \ ($open == 0 || $close == 0) {\n\t\treturn false;\n\t}\n\treturn $open == $close;\n\
    }\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\\
    n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho\
    \ is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "  $left\
    \ = 0;\n  $right = 0;\n  for ($i=0; $i < strlen($string); $i++) { \n    if($string[$i]\
    \ == '[') {\n      $left++;\n    } else if($string[$i] == ']') {\n      $right++;\n\
    \    }\n  }\n  if($left == $right) {\n    return false;\n  } else {\n    return\
    \ true;\n  }\n}\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[][]')\
    \ . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";", "\t// $bracket_array = str_split($string);\n\
    \t// $bracket_count = count($bracket_array);\n\t// $array_length = count($bracket_array);\n\
    \t// $backwards_array = array_reverse($bracket_array);\n\t// // echo $bracket_count;\n\
    \t// // print_r($bracket_array);\n\t// // print_r($backwards_array);\n\t// if\
    \ ($bracket_count % 2 !== 0) {\n\t// \treturn False;\n\t// }\n\t// elseif ($bracket_count\
    \ == 0) {\n\t// \treturn False;\n\t// }\n\t// for ($i = 0; $i < $array_length;\
    \ $i++) {\n\t// \t// $first_character = $bracket_array[$i];\n\t// \t// $last_character\
    \ = $backwards_array[$i];\n\t// \t$first_character = $bracket_array[$i];\n\t//\
    \ \t$last_character = $backwards_array[$i];\n\t// \tif ($first_character == \"\
    [\" && $last_character == \"]\") {\n\t// \t\treturn True;\n\t// \t}\n\t// \telse\
    \ {\n\t// \t\treturn False;\n\t// \t}\n\t// }\n\t$opening = substr_count($string,\
    \ '[');\n\t$closing = substr_count($string, ']');\n\t// $string_length = strlen($string);\n\
    \t// if (($opening == 0) && ($closing == 0)) {\n\t// \treturn False;\n\t// }\n\
    \t// elseif (($opening == 0) && ($closing > 0)) {\n\t// \treturn False;\n\t//\
    \ }\n\t// elseif (($opening > 0) && ($closing == 0)) {\n\t// \treturn False;\n\
    \t// }\n\t// elseif (($opening > 0) && ($closing > 0)) {\n\t// \tif ($opening\
    \ == $closing) {\n\t// \t\treturn True;\n\t// \t}\n\t// \telse {\n\t// \t", "\t\
    $strArr = str_split($string);\n\t$strLength = count($strArr);\n\tfor ($i=0; $i\
    \ < $strLength; $i++) { \n\t\tif ($strArr[$i] == '[') {\n\t\t\tfor ($j=$i+1; $j\
    \ < $strLength; $j++) { \n\t\t\t\tif ($strArr[$j] == ']') {\n\t\t\t\t\treturn\
    \ true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\necho is_nested('[[][]]');\n",
  "\t$string = str_split($string);\n\tif($string == null){\n\t\treturn false;\n\t\
    }\n\t$stack = [];\n\tforeach($string as $value){\n\t\tif($value == '['){\n\t\t\
    \tarray_push($stack,$value);\n\t\t}\n\t\tif($value == ']'){\n\t\t\tif(empty($stack)){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\t\t}\n\t}\n\tif(empty($stack)){\n\
    \t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]').\"\
    \\n\";\necho is_nested('[]]]]]]][[[[[]').\"\\n\";\necho is_nested('[][]').\"\\\
    n\";\necho is_nested('[]').\"\\n\";\necho is_nested('[[][]]').\"\\n\";\necho is_nested('[[]][[').\"\
    \\n\";\n", "\t$i = 0;\n\t$len = strlen($string);\n\twhile($i < $len) {\n\t\tif($string[$i]\
    \ == '[' && $string[$i+1] == ']' && $i < $len-1) {\n\t\t\treturn true;\n\t\t}\n\
    \t\t$i++;\n\t}\n\treturn false;\n}\necho is_nested('[[]]') . \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"<br>\";\necho is_nested('[][]') . \"<br>\";\necho is_nested('[]') . \"<br>\"\
    ;\necho is_nested('[[][]]') . \"<br>\";\necho is_nested('[[]][[') . \"<br>\";",
  "\t$allowed = [\"[\",\"]\"];\n\t$arr = str_split($string);\n\t$countOpen = $countClose\
    \ = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif(!in_array($value, $allowed))\
    \ return false;\n\t\tif($value == \"[\") $countOpen++;\n\t\tif($value == \"]\"\
    ) $countClose++;\n\t}\n\tif($countOpen != $countClose) return false;\n\t\n\t$arr\
    \ = str_split($string);\n\t$regex = \"\";\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif($value == \"[\") {\n\t\t\tif(isset($arr[$key+1]) && $arr[$key+1] ==\
    \ \"]\") {\n\t\t\t\t$regex .= \"]\";\n\t\t\t\tunset($arr[$key+1]);\n\t\t\t}\n\t\
    \t}\n\t}\n\tif(empty($regex)) return false;\n\tif(preg_match(\"/^\".$regex.\"\
    +$/\", $string)) return true;\n\treturn false;\n}\necho is_nested('[[]]') ? \"\
    True\\n\" : \"False\\n\";\necho is_nested('[]]]]]]][[[[[]') ? \"True\\n\" : \"\
    False\\n\";\necho is_nested('[][]') ? \"True\\n\" : \"False\\n\";\necho is_nested('[]')\
    \ ? \"True\\n\" : \"False\\n\";\necho is_nested('[[][]]') ? \"True\\n\" : \"False\\\
    n\";\necho is_nested('[[]][[') ? \"True\\n\" : \"False\\n\";", "\t$opened = 0;\n\
    \t$closed = 0;\n\tforeach (str_split($string) as $char) {\n\t\tif ($char === '[')\
    \ {\n\t\t\t$opened++;\n\t\t} elseif ($char === ']') {\n\t\t\t$closed++;\n\t\t\
    }\n\t}\n\treturn $opened === $closed;\n}\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\n\
    echo is_nested('[][]');\necho is_nested('[]');\necho is_nested('[[][]]');\necho\
    \ is_nested('[[]][[');", "\t$left = $right = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] === \"[\") {\n\t\t\t$left++;\n\t\t} else {\n\t\
    \t\t$right++;\n\t\t}\n\t\tif ($right > $left) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";",
  "    if(strlen($string) < 2) {\n        return false;\n    }\n    $check = false;\n\
    \    $open = 0;\n    $close = 0;\n    for($i = 0; $i < strlen($string); $i++)\
    \ {\n        if($string[$i] == \"[\") {\n            $open++;\n        }\n   \
    \     if($string[$i] == \"]\") {\n            $close++;\n        }\n        if($close\
    \ > $open) {\n            $check = true;\n        }\n    }\n    if($check) {\n\
    \        return false;\n    }\n    return true;\n}\n\necho is_nested('[[]]') ?\
    \ \"True\\n\" : \"False\\n\";\necho is_nested('[]]]]]]][[[[[]') ? \"True\\n\"\
    \ : \"False\\n\";\necho is_nested('[][]') ? \"True\\n\" : \"False\\n\";\necho\
    \ is_nested('[]') ? \"True\\n\" : \"False\\n\";\necho is_nested('[[][]]') ? \"\
    True\\n\" : \"False\\n\";\necho is_nested('[[]][[') ? \"True\\n\" : \"False\\\
    n\";", "    return preg_match('/\\[\\]/', $string);\n}\n\necho is_nested('[[]]')\
    \ . \"<br>\";\necho is_nested('[]]]]]]][[[[[]') . \"<br>\";\necho is_nested('[][]')\
    \ . \"<br>\";\necho is_nested('[]') . \"<br>\";\necho is_nested('[[][]]') . \"\
    <br>\";\necho is_nested('[[]][[') . \"<br>\";", "\t$first_arr = array();\n\t$second_arr\
    \ = array();\n\t$new_arr = array();\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($first_arr, $string[$i]);\n\
    \t\t} elseif ($string[$i] == ']') {\n\t\t\tarray_push($second_arr, $string[$i]);\n\
    \t\t}\n\t}\n\tif (count($first_arr) == count($second_arr)) {\n\t\t$new_arr = array_diff($first_arr,\
    \ $second_arr);\n\t\tif (count($new_arr) <= 0) {\n\t\t\treturn false;\n\t\t} else\
    \ {\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[]]');\n\
    echo \"\\n\";\necho is_nested('[]]]]]]][[[[[]');\necho \"\\n\";\necho is_nested('[][]');\n\
    echo \"\\n\";\necho is_nested('[]');\necho \"\\n\";\necho is_nested('[[][]]');\n\
    echo \"\\n\";\necho is_nested('[[]][[');", "  $count = 0;\n  for ($i=0; $i < strlen($string);\
    \ $i++) { \n    if ($string[$i] == '[') {\n      $count++;\n    }\n    if ($string[$i]\
    \ == ']') {\n      $count--;\n    }\n    if ($count < 0) {\n      return false;\n\
    \    }\n  }\n  return $count == 0;\n}\necho is_nested('[[]]') . \"\\n\";\necho\
    \ is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]') . \"\\n\";\n\
    echo is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[')\
    \ . \"\\n\";", "\tif(substr_count($string, \"[\") != substr_count($string, \"\
    ]\")) {\n\t\treturn false;\n\t}\n\t$open = 0;\n\t$close = 0;\n\tfor($i = 0; $i\
    \ < strlen($string); $i++) {\n\t\tif($string[$i] == \"[\") {\n\t\t\t$open++;\n\
    \t\t} else if($string[$i] == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif($close >\
    \ $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "\t$str = str_split($string);\n\t\
    $flag = true;\n\tfor ($i=0; $i < count($str); $i++) { \n\t\tif ($str[$i] == '['\
    \ && $str[$i+1] == ']') {\n\t\t\t$flag = false;\n\t\t}\n\t}\n\treturn $flag;\n\
    }\necho is_nested('[[][]]');", "\tif (preg_match('/[\\[\\]]/', $string) === 0)\
    \ {\n\t\treturn false;\n\t}\n\tif (preg_match('/\\[\\]/', $string) === 0) {\n\t\
    \treturn false;\n\t}\n\tif (preg_match('/\\[\\]/', $string) === 1) {\n\t\treturn\
    \ true;\n\t}\n\tif (preg_match('/\\[\\]/', $string) === 2) {\n\t\treturn true;\n\
    \t}\n\tif (preg_match('/\\[\\]/', $string) === 3) {\n\t\treturn true;\n\t}\n\t\
    if (preg_match('/\\[\\]/', $string) === 4) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\necho\
    \ is_nested('[][]');\necho is_nested('[]');\necho is_nested('[[][]]');\necho is_nested('[[]][[');",
  "\t$string = str_split($string);\n\t$left = 0;\n\t$right = 0;\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\t$left++;\n\t\t}\n\t\tif ($char ==\
    \ ']') {\n\t\t\t$right++;\n\t\t}\n\t}\n\tif ($left > $right) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}", "    $leftBrackets = array();\n    $rightBrackets\
    \ = array();\n    foreach (str_split($string) as $bracket) {\n        if ($bracket\
    \ == '[') {\n            array_push($leftBrackets, $bracket);\n        } else\
    \ {\n            array_push($rightBrackets, $bracket);\n        }\n    }\n   \
    \ return count($leftBrackets) > 0 && count($rightBrackets) > 0 && count($leftBrackets)\
    \ > count($rightBrackets);\n}\necho is_nested('[[]]') ? 'true' : 'false';\necho\
    \ '<br>';\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\necho '<br>';\n\
    echo is_nested('[][]') ? 'true' : 'false';\necho '<br>';\necho is_nested('[]')\
    \ ? 'true' : 'false';\necho '<br>';\necho is_nested('[[][]]') ? 'true' : 'false';\n\
    echo '<br>';\necho is_nested('[[]][[') ? 'true' : 'false';\necho '<br>';", " \
    \   for ($i = 0; $i < strlen($string); $i++) {\n        if (substr_count($string,\
    \ \"[]\") > 0) {\n            $string = str_replace(\"[]\", \"\", $string);\n\
    \        }\n    }\n    if (strlen($string) > 0) {\n        return false;\n   \
    \ } else {\n        return true;\n    }\n}\necho is_nested('[[]][[') . \"<br>\"\
    ;", "    if ($string == '[]') return false;\n    $string = str_replace(array('][',\
    \ ']]', '[['), '', $string);\n    $string = str_replace(array(']', '['), ' ',\
    \ $string);\n    $array = explode(' ', $string);\n    $open_count = 0;\n    $close_count\
    \ = 0;\n    foreach ($array as $item) {\n        if ($item == '[' && $open_count\
    \ == 0) {\n            $open_count++;\n        } else if ($item == ']' && $close_count\
    \ == 0) {\n            $close_count++;\n        } else if ($item == '[' && $open_count\
    \ != 0) {\n            $open_count++;\n        } else if ($item == ']' && $close_count\
    \ != 0) {\n            $close_count++;\n        }\n    }\n    return ($open_count\
    \ == 1 && $close_count == 1) ? true : false;\n}", "    $stringArr = str_split($string);\n\
    \    $count = 0;\n    foreach($stringArr as $key => $val) {\n        if($val ==\
    \ \"[\") {\n            $count += 1;\n        } else {\n            $count -=\
    \ 1;\n        }\n        if($count < 0) {\n            return false;\n       \
    \ }\n    }\n    return $count > 0 ? true : false;\n}\necho is_nested('[[]]') .\
    \ \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";\n", "  $arr = str_split($string);\n\
    \  $open = 0;\n  $close = 0;\n  $prevOpen = 0;\n  $prevClose = 0;\n  foreach($arr\
    \ as $val) {\n    if($val == '[') {\n      $open++;\n      $prevOpen++;\n    }\
    \ else {\n      $close++;\n      $prevClose++;\n    }\n    if($close > $open)\
    \ {\n      return false;\n    }\n    if($prevClose == $prevOpen) {\n      $prevOpen\
    \ = 0;\n      $prevClose = 0;\n    }\n  }\n  if($close != $open) {\n    return\
    \ false;\n  }\n  return true;\n}\necho is_nested('[[]]');\necho is_nested('[]]]]]]][[[[[]');\n\
    echo is_nested('[][]');\necho is_nested('[]');\necho is_nested('[[][]]');\necho\
    \ is_nested('[[]][[');", "\t$str = str_split($string);\n\t$length = count($str);\n\
    \tfor ($i=0; $i < $length; $i++) { \n\t\t$first = $str[$i];\n\t\t$second = $str[$i+1];\n\
    \t\tif($first != $second){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n\
    }\necho is_nested('[[]]') ? 'true':'false';\necho \"<br>\";\necho is_nested('[]]]]]]][[[[[]')\
    \ ? 'true':'false';\necho \"<br>\";\necho is_nested('[][]') ? 'true':'false';\n\
    echo \"<br>\";\necho is_nested('[]') ? 'true':'false';\necho \"<br>\";\necho is_nested('[[][]]')\
    \ ? 'true':'false';\necho \"<br>\";\necho is_nested('[[]][[') ? 'true':'false';\n\
    echo \"<br>\";", "  if (strpos($string, '[[') !== false || strpos($string, '][')\
    \ !== false || substr_count($string, '[') - substr_count($string, ']') !== 0)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\necho is_nested('[][]')\
    \ . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]') . PHP_EOL;\n\
    echo is_nested('[[]][[') . PHP_EOL;\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]')\
    \ . PHP_EOL;", "\t$bracketCount = array(\n\t\t'[' => 0,\n\t\t']' => 0\n\t);\n\t\
    foreach(str_split($string) as $bracket) {\n\t\tif ($bracket === '[' && $bracketCount['[']\
    \ < $bracketCount[']']) {\n\t\t\treturn false;\n\t\t}\n\t\t$bracketCount[$bracket]++;\n\
    \t}\n\treturn $bracketCount['['] === $bracketCount[']'];\n}\necho is_nested('[[]]')\
    \ ? 'true' : 'false';\necho is_nested('[]]]]]]][[[[[]') ? 'true' : 'false';\n\
    echo is_nested('[][]') ? 'true' : 'false';\necho is_nested('[]') ? 'true' : 'false';\n\
    echo is_nested('[[][]]') ? 'true' : 'false';\necho is_nested('[[]][[') ? 'true'\
    \ : 'false';", "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string\
    \ as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t\
    $count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $count > 0 ? true : false;\n}\n\necho is_nested('[[]]');\necho '<br>';\necho\
    \ is_nested('[]]]]]]][[[[[]');\necho '<br>';\necho is_nested('[][]');\necho '<br>';\n\
    echo is_nested('[]');\necho '<br>';\necho is_nested('[[][]]');\necho '<br>';\n\
    echo is_nested('[[]][[');\necho '<br>';\n", "\t$first = str_split($string);\n\t\
    $second = array_reverse($first);\n\t$first = implode(\"\", $first);\n\t$second\
    \ = implode(\"\", $second);\n\tif($first !== $second){\n\t\treturn true;\n\t}\
    \ else {\n\t\treturn false;\n\t}\n}\necho is_nested('[[][]]');", "    $s = str_split($string);\n\
    \    for ($i = 0; $i < count($s); $i++) {\n        $left = 0;\n        $right\
    \ = 0;\n        for ($j = $i; $j < count($s); $j++) {\n            if ($s[$j]\
    \ == '[') {\n                $left++;\n            } else if ($s[$j] == ']') {\n\
    \                $right++;\n            }\n            if ($left == $right) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\necho is_nested('[[]]') . PHP_EOL;\necho is_nested('[]]]]]]][[[[[]') . PHP_EOL;\n\
    echo is_nested('[][]') . PHP_EOL;\necho is_nested('[]') . PHP_EOL;\necho is_nested('[[][]]')\
    \ . PHP_EOL;\necho is_nested('[[]][[') . PHP_EOL;", "    $stack = [];\n    $chars\
    \ = str_split($string);\n    foreach ($chars as $char) {\n        if (in_array($char,\
    \ ['[', ']'])) {\n            if ($char === '[') {\n                array_push($stack,\
    \ $char);\n            } else {\n                if (count($stack) === 0) {\n\
    \                    return false;\n                }\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) !== 0;\n}\necho is_nested('[[]]')\
    \ . \"\\n\";\necho is_nested('[]]]]]]][[[[[]') . \"\\n\";\necho is_nested('[][]')\
    \ . \"\\n\";\necho is_nested('[]') . \"\\n\";\necho is_nested('[[][]]') . \"\\\
    n\";\necho is_nested('[[]][[') . \"\\n\";", "    $num_squares = substr_count($string,\
    \ '[]');\n    $num_brackets = substr_count($string, '[]');\n    if($num_squares\
    \ > 0 && $num_brackets > 0){\n        return \"True\";\n    }\n    elseif($num_squares\
    \ === 0 && $num_brackets === 0){\n        return \"False\";\n    }\n    elseif($num_squares\
    \ > 0 && $num_brackets === 0){\n        return \"False\";\n    }\n    elseif($num_squares\
    \ === 0 && $num_brackets > 0){\n        return \"True\";\n    }\n    else{\n \
    \       return \"True\";\n    }\n}\necho is_nested('[[]]') . \"\\n\";\necho is_nested('[]]]]]]][[[[[]')\
    \ . \"\\n\";\necho is_nested('[][]') . \"\\n\";\necho is_nested('[]') . \"\\n\"\
    ;\necho is_nested('[[][]]') . \"\\n\";\necho is_nested('[[]][[') . \"\\n\";\n\
    echo is_nested('[][]') . \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
