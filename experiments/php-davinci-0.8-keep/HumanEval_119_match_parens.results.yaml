name: HumanEval_119_match_parens
language: php
results:
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $len1 = strlen($str1);\n\
    \    $len2 = strlen($str2);\n    $i = 0;\n    $j = 0;\n    $stack = [];\n    $open\
    \ = 0;\n    $close = 0;\n    while($i < $len1) {\n        if ($str1[$i] == '(')\
    \ {\n            $open++;\n            $stack[] = $str1[$i];\n        } else {\n\
    \            if (count($stack) > 0) {\n                $stack[] = $str1[$i];\n\
    \                $close++;\n            } else {\n                $stack[] = $str1[$i];\n\
    \            }\n        }\n        $i++;\n    }\n    while($j < $len2) {\n   \
    \     if ($str2[$j] == '(') {\n            $open++;\n            $stack[] = $str2[$j];\n\
    \        } else {\n            if (count($stack) > 0) {\n                $stack[]\
    \ = $str2[$j];\n                $close++;\n            } else {\n            \
    \    $stack[] = $str2[$j];\n            }\n        }\n        $j++;\n    }\n \
    \   if ($open == $close) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\necho match_parens(['()', '()']).PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa70yowm9.php:66\n\
    Stack trace:\n#0 /tmp/tmpa70yowm9.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpa70yowm9.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s = $s1 . $s2;\n    $cnt = 0;\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == '(') {\n   \
    \         $cnt++;\n        } else {\n            $cnt--;\n        }\n        if\
    \ ($cnt < 0) {\n            return 'No';\n        }\n    }\n    if ($cnt == 0)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\necho\
    \ match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')', ')']) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_avypj7.php:45\n\
    Stack trace:\n#0 /tmp/tmpo_avypj7.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpo_avypj7.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $open = 0;\n  $close = 0;\n  foreach ($lst as $str) {\n    for ($i = 0;\
    \ $i < strlen($str); $i++) {\n      if ($str[$i] == '(') {\n        $open++;\n\
    \      } else {\n        $close++;\n      }\n    }\n  }\n  return ($open == $close)\
    \ ? 'Yes' : 'No';\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1lh5u0pp.php:41\n\
    Stack trace:\n#0 /tmp/tmp1lh5u0pp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1lh5u0pp.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $pairs = [];\n  $opens = [];\n  $queue = [];\n  $ok = true;\n  foreach\
    \ ($lst as $str) {\n    $count = 0;\n    for ($i = 0; $i < strlen($str); $i++)\
    \ {\n      if ($str[$i] == '(') {\n        $count++;\n        array_push($opens,\
    \ ['idx' => $i, 'parent' => count($pairs)]);\n      } else {\n        if (count($opens)\
    \ == 0) {\n          $ok = false;\n          break;\n        }\n        $prev\
    \ = array_pop($opens);\n        array_push($pairs, ['start' => $prev['idx'], 'end'\
    \ => $i, 'parent' => $prev['parent']]);\n      }\n    }\n    if (!$ok) break;\n\
    \    if (count($opens) == 0) {\n      array_push($queue, $pairs);\n      $pairs\
    \ = [];\n    }\n  }\n  $idx = 0;\n  $parent = [];\n  $i = 0;\n  foreach ($queue\
    \ as $q) {\n    foreach ($q as $p) {\n      if ($p['parent'] != -1) {\n      \
    \  $parent[$i] = $p['parent'] + $idx;\n      } else {\n        $parent[$i] = -1;\n\
    \      }\n      $i++;\n    }\n    $idx += count($q);\n  }\n  while (count($parent)\
    \ > 1) {\n    $parent = array_values(array_filter($parent, function($v) { return\
    \ $v != -1; }));\n  }\n  return ($ok && $parent[0] == -1) ? 'Yes' : 'No';\n}\n\
    $lst = ['()(', ')'];\necho match_parens($lst) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $result = '';\n    $close = 0;\n    $open = 0;\n    $first = $lst[0];\n\
    \    $second = $lst[1];\n    for ($i = 0; $i < strlen($first); $i++) {\n     \
    \   if ($first[$i] == '(') {\n            $open++;\n        } else {\n       \
    \     $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($second); $i++)\
    \ {\n        if ($second[$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    if ($open == $close) {\n       \
    \ return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u6g3t7.php:53\n\
    Stack trace:\n#0 /tmp/tmpn3u6g3t7.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpn3u6g3t7.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $lst[0] = str_split($lst[0]);\n  $lst[1] = str_split($lst[1]);\n  $r =\
    \ parens_from_left($lst[0], $lst[1]);\n  if ($r === true) return 'Yes';\n  $r\
    \ = parens_from_left($lst[1], $lst[0]);\n  if ($r === true) return 'Yes';\n  return\
    \ 'No';\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parens_from_left()\
    \ in /tmp/tmpsqu1d4lu.php:16\nStack trace:\n#0 /tmp/tmpsqu1d4lu.php(23): match_parens(Array)\n\
    #1 /tmp/tmpsqu1d4lu.php(27): candidate(Array)\n#2 /tmp/tmpsqu1d4lu.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsqu1d4lu.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $remainder = 0;\n  foreach ($lst as $str) {\n    foreach (str_split($str)\
    \ as $ch) {\n      if ($ch == '(') {\n        $remainder++;\n      } else {\n\
    \        $remainder--;\n      }\n      if ($remainder < 0) {\n        return 'No';\n\
    \      }\n    }\n  }\n  return $remainder == 0 ? 'Yes' : 'No';\n}\n\n$cases =\
    \ [\n  [['()(', ')'], 'Yes'],\n  [[')', ')'], 'No'],\n  [[')(', ')('], 'No'],\n\
    \  [[')(', ')(', ')('], 'No'],\n  [['()', ')'], 'No'],\n  [['(()(', ')()('], 'Yes'],\n\
    \  [['(()', ')'], 'Yes'],\n  [['(()(', ')()'], 'Yes'],\n  [['(()(', ')'], 'No'],\n\
    \  [['(()(', ')()('], 'Yes'],\n  [['(()((', ')()()('], 'Yes'],\n  [['(()', '))'],\
    \ 'No'],\n  [['(()))', '))(((('], 'No'],\n  [['((()', '))'], 'Yes'],\n  [['(()',\
    \ '()'], 'Yes'],\n  [['((((', ')))))'], 'Yes'],\n  [['(()', ')('], 'No'],\n  [['(((()',\
    \ '()(((('], 'Yes'],\n  [['((((', '))))()'], 'Yes'],\n  [['(()', '))(((('], 'No'],\n\
    \  [['(()', ')))('], 'No'],\n  [['((()', ')))'], 'No'],\n  [['(())', ')()()'],\
    \ 'Yes'],\n  [['((((', ')))))()'], 'Yes'],\n  [['(((()', '))))'], '\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkp4we8h7.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gjot2a7.php:22\n\
    Stack trace:\n#0 /tmp/tmp1gjot2a7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1gjot2a7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    if (valid_parens($str1) &&\
    \ valid_parens($str2)) {\n        return 'Yes';\n    } elseif (valid_parens($str1\
    \ . $str2)) {\n        return 'Yes';\n    } elseif (valid_parens($str2 . $str1))\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function valid_parens()\
    \ in /tmp/tmpp1y9el4p.php:16\nStack trace:\n#0 /tmp/tmpp1y9el4p.php(28): match_parens(Array)\n\
    #1 /tmp/tmpp1y9el4p.php(32): candidate(Array)\n#2 /tmp/tmpp1y9el4p.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp1y9el4p.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$left = 0;\n\t$right = 0;\n\tforeach ($lst as $str) {\n\t\tfor ($i = 0;\
    \ $i < strlen($str); $i++) {\n\t\t\tif ($str[$i] == '(') {\n\t\t\t\t$left++;\n\
    \t\t\t} else if ($str[$i] == ')') {\n\t\t\t\t$right++;\n\t\t\t}\n\t\t}\n\t}\n\t\
    $diff = $left - $right;\n\tif ($diff > 0) {\n\t\tif (strpos($lst[0], '(') !==\
    \ false) {\n\t\t\treturn 'Yes';\n\t\t} else {\n\t\t\treturn 'No';\n\t\t}\n\t}\
    \ else if ($diff < 0) {\n\t\tif (strpos($lst[1], '(') !== false) {\n\t\t\treturn\
    \ 'Yes';\n\t\t} else {\n\t\t\treturn 'No';\n\t\t}\n\t} else {\n\t\treturn 'Yes';\n\
    \t}\n}\n$d = [\n\t['()(', ')'],\n\t[')', ')'],\n\t['()', '()'],\n\t['(', ')'],\n\
    \t['(', ')'],\n\t['()', '()()'],\n\t['(((', '(((('],\n\t['(()', ')'],\n\t['(())',\
    \ '()'],\n\t['()()()', '((()))'],\n\t['(((())))', '(((((()'],\n\t[')((((', '))))'],\n\
    \t['((()(((', '())))()'],\n\t['(((())))', '(((((()'],\n\t['(()()(((', '()))))()'],\n\
    \t['()', ')))))))))'],\n\t['()', '(((((()))))))'],\n\t['(((((((', ')))))))))'],\n\
    \t['(((())))(', '))((()))))'],\n\t[')(())(', '((())))()'],\n\t['(((((((((', '())))))))))'],\n\
    \t['((((((\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplj24peu2.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = array_map(function($x) { return str_split($x); }, $lst);\n   \
    \ $s = implode('', $lst[0]) . implode('', $lst[1]);\n    $s = str_split($s);\n\
    \    $n = count($s);\n    $open = 0;\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    if ($s[$i] == '(') $open++;\n        else $open--;\n        if ($open < 0)\
    \ return 'No';\n    }\n    return $open == 0 ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9b1djadl.php:35\n\
    Stack trace:\n#0 /tmp/tmp9b1djadl.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp9b1djadl.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s = array_reduce($lst, 'str_concat', '');\n    return balance_parens($s)\
    \ ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_reduce() expects parameter 2 to be a valid callback, function\
    \ 'str_concat' not found or invalid function name in /tmp/tmp55ili40e.php on line\
    \ 14\n\nFatal error: Uncaught Error: Call to undefined function balance_parens()\
    \ in /tmp/tmp55ili40e.php:15\nStack trace:\n#0 /tmp/tmp55ili40e.php(19): match_parens(Array)\n\
    #1 /tmp/tmp55ili40e.php(23): candidate(Array)\n#2 /tmp/tmp55ili40e.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp55ili40e.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str = implode('', $lst);\n  if (is_matched($str)) {\n    return 'Yes';\n\
    \  } else {\n    return 'No';\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_matched()\
    \ in /tmp/tmp44zo_1ha.php:15\nStack trace:\n#0 /tmp/tmp44zo_1ha.php(23): match_parens(Array)\n\
    #1 /tmp/tmp44zo_1ha.php(27): candidate(Array)\n#2 /tmp/tmp44zo_1ha.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp44zo_1ha.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  $len = strlen($s1);\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    $s = substr($s1, 0, $i) . $s2 . substr($s1, $i);\n \
    \   if (parens_balanced($s)) {\n      return 'Yes';\n    }\n  }\n  return 'No';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parens_balanced()\
    \ in /tmp/tmp9esam62b.php:19\nStack trace:\n#0 /tmp/tmp9esam62b.php(27): match_parens(Array)\n\
    #1 /tmp/tmp9esam62b.php(31): candidate(Array)\n#2 /tmp/tmp9esam62b.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9esam62b.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    return $lst[0][strlen($lst[0]) - 1] == '(' ? 'Yes' : 'No';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv4c05nz0.php:25\n\
    Stack trace:\n#0 /tmp/tmpv4c05nz0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpv4c05nz0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    if (count($lst) != 2) return 'No';\n    $lst = array_map(function($str)\
    \ {\n        return str_split($str);\n    }, $lst);\n    $valid = true;\n    $str1\
    \ = join(\"\", $lst[0]);\n    $str2 = join(\"\", $lst[1]);\n    $str = $str1 .\
    \ $str2;\n    $len = strlen($str);\n    $counter = 0;\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($str[$i] == '(') {\n            $counter++;\n        }\
    \ else {\n            $counter--;\n        }\n        if ($counter < 0) {\n  \
    \          $valid = false;\n            break;\n        }\n    }\n    if ($counter\
    \ == 0 && $valid) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckc1so95.php:49\n\
    Stack trace:\n#0 /tmp/tmpckc1so95.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpckc1so95.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $strs = [$str1 . $str2, $str2\
    \ . $str1];\n    foreach ($strs as $str) {\n        $stack = [];\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            $char = $str[$i];\n       \
    \     if ($char == '(') {\n                array_push($stack, $char);\n      \
    \      } else {\n                if (empty($stack)) {\n                    return\
    \ 'No';\n                } else {\n                    array_pop($stack);\n  \
    \              }\n            }\n        }\n        if (empty($stack)) {\n   \
    \         return 'Yes';\n        }\n    }\n    return 'No';\n}\n\necho(match_parens(['()(',\
    \ ')']) . \"\\n\");\necho(match_parens([')', ')']) . \"\\n\");\necho(match_parens(['()(()',\
    \ '()']) . \"\\n\");\necho(match_parens(['()()', '()()']) . \"\\n\");\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\nNo\nYes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckd4sivh.php:50\n\
    Stack trace:\n#0 /tmp/tmpckd4sivh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpckd4sivh.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    if(count($lst) != 2) return 'No';\n    if($lst[0] == '(' && $lst[1] ==\
    \ ')') return 'Yes';\n    if($lst[0] == ')' && $lst[1] == '(') return 'Yes';\n\
    \    if($lst[0] == ')' && $lst[1] == ')') return 'No';\n    if($lst[0] == '('\
    \ && $lst[1] == '(') return 'No';\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4k9cfqk1.php:26\n\
    Stack trace:\n#0 /tmp/tmp4k9cfqk1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4k9cfqk1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $res = check_balance($str1.$str2);\n\
    \  return $res ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_balance()\
    \ in /tmp/tmpqz01n3_1.php:16\nStack trace:\n#0 /tmp/tmpqz01n3_1.php(21): match_parens(Array)\n\
    #1 /tmp/tmpqz01n3_1.php(25): candidate(Array)\n#2 /tmp/tmpqz01n3_1.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqz01n3_1.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach($lst as $str) {\n        for($i\
    \ = 0; $i < strlen($str); $i++) {\n            if($str[$i] == '(') $open++;\n\
    \            elseif($str[$i] == ')') $close++;\n            if($close > $open)\
    \ return 'No';\n        }\n    }\n    return $open == $close ? 'Yes' : 'No';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1itmk5r.php:34\n\
    Stack trace:\n#0 /tmp/tmpg1itmk5r.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpg1itmk5r.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $first = array_shift($lst);\n  $second = array_shift($lst);\n  $firstArray\
    \ = str_split($first);\n  $secondArray = str_split($second);\n  $temp1 = 0;\n\
    \  $temp2 = 0;\n  foreach ($firstArray as $ele) {\n    if ($ele == '(') {\n  \
    \    $temp1 += 1;\n    } else {\n      $temp1 -= 1;\n    }\n  }\n  foreach ($secondArray\
    \ as $ele) {\n    if ($ele == '(') {\n      $temp2 += 1;\n    } else {\n     \
    \ $temp2 -= 1;\n    }\n  }\n  if ($temp1 == 0 && $temp2 == 0) {\n    return 'Yes';\n\
    \  } else if ($temp1 == 0 && $temp2 > 0) {\n    return 'No';\n  } else if ($temp1\
    \ > 0 && $temp2 == 0) {\n    return 'No';\n  } else if ($temp1 < 0 && $temp2 ==\
    \ 0) {\n    return 'No';\n  } else if ($temp1 == 0 && $temp2 < 0) {\n    return\
    \ 'No';\n  } else if ($temp1 < 0 && $temp2 < 0) {\n    return 'No';\n  } else\
    \ if ($temp1 > 0 && $temp2 > 0) {\n    return 'No';\n  } else if ($temp1 > 0 &&\
    \ $temp2 < 0) {\n    return 'Yes';\n  } else if ($temp1 < 0 && $temp2 > 0) {\n\
    \    return 'Yes';\n  }\n}\n$lst = ['(())', ')'];\nvar_dump(match_parens($lst));\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "string(2) \"No\"\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1zh0xg3e.php:63\n\
    Stack trace:\n#0 /tmp/tmp1zh0xg3e.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp1zh0xg3e.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    if ($lst[0] === '') {\n        return 'No';\n    }\n\n    $stack = [];\n\
    \    $q = [];\n    $q[] = $lst[0];\n    while (count($q) > 0) {\n        $str\
    \ = array_shift($q);\n        $last_i = strlen($str) - 1;\n        $last_char\
    \ = $str[$last_i];\n        if ($last_char === '(') {\n            array_push($stack,\
    \ $str);\n        } else {\n            $stack_top = count($stack) - 1;\n    \
    \        if ($stack_top < 0) {\n                return 'No';\n            }\n\
    \            $s = array_pop($stack);\n            $q[] = $s . $str;\n        }\n\
    \    }\n\n    $stack_top = count($stack) - 1;\n    if ($stack_top < 0) {\n   \
    \     return 'No';\n    }\n\n    return 'Yes';\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7v7c899.php:52\n\
    Stack trace:\n#0 /tmp/tmpf7v7c899.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpf7v7c899.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $a = $lst[0];\n    $b = $lst[1];\n    $a_len = strlen($a);\n    $b_len\
    \ = strlen($b);\n    $max_len = max($a_len, $b_len);\n    for ($i = 0; $i < $max_len;\
    \ $i++) {\n        $a_c = $i < $a_len ? $a[$i] : \"\";\n        $b_c = $i < $b_len\
    \ ? $b[$i] : \"\";\n        if ($a_c == \"(\" || $b_c == \"(\") {\n          \
    \  if ($a_c == \")\") {\n                $a = substr($a, 0, $i) . substr($a, $i\
    \ + 1);\n                $i--;\n                $a_len--;\n            } else\
    \ if ($b_c == \")\") {\n                $b = substr($b, 0, $i) . substr($b, $i\
    \ + 1);\n                $i--;\n                $b_len--;\n            }\n   \
    \     } else {\n            $a_c = $a_len - $i - 1 >= 0 ? $a[$a_len - $i - 1]\
    \ : \"\";\n            $b_c = $b_len - $i - 1 >= 0 ? $b[$b_len - $i - 1] : \"\"\
    ;\n            if ($a_c == \")\" || $b_c == \")\") {\n                if ($a_c\
    \ == \"(\") {\n                    $a = substr($a, 0, $a_len - $i - 1) . substr($a,\
    \ $a_len - $i);\n                    $i--;\n                    $a_len--;\n  \
    \              } else if ($b_c == \"(\") {\n                    $b = substr($b,\
    \ 0, $b_len - $i - 1) . substr($b, $b_len - $i);\n                    $i--;\n\
    \                    $b_len--;\n                }\n            }\n        }\n\
    \    }\n    return has_balanced_parens($a . $b) ? \"Yes\" : \"No\";\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function has_balanced_parens()\
    \ in /tmp/tmpiuy6057g.php:48\nStack trace:\n#0 /tmp/tmpiuy6057g.php(51): match_parens(Array)\n\
    #1 /tmp/tmpiuy6057g.php(55): candidate(Array)\n#2 /tmp/tmpiuy6057g.php(69): test()\n\
    #3 {main}\n  thrown in /tmp/tmpiuy6057g.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $chars = str_split(implode($lst));\n  $stack = [];\n  foreach ($chars as\
    \ $char) {\n    if ($char == '(') {\n      array_push($stack, $char);\n    } else\
    \ {\n      if (count($stack) > 0) {\n        array_pop($stack);\n      } else\
    \ {\n        return 'No';\n      }\n    }\n  }\n  return count($stack) == 0 ?\
    \ 'Yes' : 'No';\n}\necho match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')',\
    \ ')']) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92g6qmxh.php:39\n\
    Stack trace:\n#0 /tmp/tmp92g6qmxh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp92g6qmxh.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  list($s1, $s2) = $lst;\n  $b1 = balance($s1);\n  $b2 = balance($s2);\n\
    \  if ($b1 && $b2) {\n    return 'Yes';\n  } elseif (($b1 === false && $b2 ===\
    \ 0) || ($b2 === false && $b1 === 0)) {\n    return 'Yes';\n  } else {\n    return\
    \ 'No';\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function balance() in\
    \ /tmp/tmpebfyo_79.php:15\nStack trace:\n#0 /tmp/tmpebfyo_79.php(27): match_parens(Array)\n\
    #1 /tmp/tmpebfyo_79.php(31): candidate(Array)\n#2 /tmp/tmpebfyo_79.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpebfyo_79.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $open_count = 0;\n  $closed_count = 0;\n  $open_count += substr_count($lst[0],\
    \ '(');\n  $closed_count += substr_count($lst[0], ')');\n  $open_count += substr_count($lst[1],\
    \ '(');\n  $closed_count += substr_count($lst[1], ')');\n  return $open_count\
    \ == $closed_count ? 'Yes' : 'No';\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzuwdy1m.php:36\n\
    Stack trace:\n#0 /tmp/tmpkzuwdy1m.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkzuwdy1m.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $left_parens = 0;\n  foreach ($lst as $str) {\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n      if ($str[$i] == '(') {\n        $left_parens++;\n      } else\
    \ if ($str[$i] == ')') {\n        $left_parens--;\n      }\n      if ($left_parens\
    \ < 0) {\n        return 'No';\n      }\n    }\n  }\n  return $left_parens ==\
    \ 0 ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprl6c_8qd.php:38\n\
    Stack trace:\n#0 /tmp/tmprl6c_8qd.php(49): test()\n#1 {main}\n  thrown in /tmp/tmprl6c_8qd.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $map = [')' => '(', '(' => false];\n  $left = [];\n  $right = [];\n  foreach\
    \ ($lst as $str) {\n    foreach (str_split($str) as $char) {\n      if ($char\
    \ === '(') {\n        $left[] = $char;\n      } elseif ($char === ')') {\n   \
    \     $right[] = $char;\n      }\n    }\n  }\n  for ($i = 0; $i < count($right);\
    \ $i++) {\n    if (count($left) === 0) {\n      return 'No';\n    }\n    $popped\
    \ = array_pop($left);\n    if ($map[$right[$i]] !== $popped) {\n      return 'No';\n\
    \    }\n  }\n  return 'Yes';\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi4kmm5k7.php:50\n\
    Stack trace:\n#0 /tmp/tmpi4kmm5k7.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpi4kmm5k7.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example: print \"Hello world!\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfeoskolc.php:23\n\
    Stack trace:\n#0 /tmp/tmpfeoskolc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfeoskolc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $x = $lst[0];\n  $y = $lst[1];\n  $a = $x . $y;\n  $b = $y . $x;\n  $parens\
    \ = ['(', ')'];\n  $c = 0;\n  $d = 0;\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    if ($a[$i] == $parens[0]) {\n      $c++;\n    } elseif ($a[$i] == $parens[1])\
    \ {\n      $c--;\n    }\n    if ($c < 0) {\n      return 'No';\n    }\n  }\n \
    \ for ($i = 0; $i < strlen($b); $i++) {\n    if ($b[$i] == $parens[0]) {\n   \
    \   $d++;\n    } elseif ($b[$i] == $parens[1]) {\n      $d--;\n    }\n    if ($d\
    \ < 0) {\n      return 'No';\n    }\n  }\n  return 'Yes';\n}\n\nprint_r(match_parens(['()(',\
    \ ')']));\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rmlw4ky.php:50\n\
    Stack trace:\n#0 /tmp/tmp3rmlw4ky.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp3rmlw4ky.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  // Your code here\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpce80zrue.php:21\n\
    Stack trace:\n#0 /tmp/tmpce80zrue.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpce80zrue.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $left++;\n            } else {\n                $right++;\n   \
    \         }\n        }\n    }\n    if ($left < $right) {\n        return 'No';\n\
    \    }\n    $result = '';\n    $left = 0;\n    $right = 0;\n    for ($i = 0; $i\
    \ < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(') {\n            $left++;\n\
    \        } else {\n            $right++;\n        }\n        if ($left == $right)\
    \ {\n            $result .= $lst[0][$i];\n        }\n    }\n    if ($left == $right)\
    \ {\n        for ($i = 0; $i < strlen($lst[1]); $i++) {\n            if ($lst[1][$i]\
    \ == '(') {\n                $left++;\n            } else {\n                $right++;\n\
    \            }\n            if ($left == $right) {\n                $result .=\
    \ $lst[1][$i];\n            }\n        }\n    }\n    if ($left == $right) {\n\
    \        return 'Yes';\n    }\n    return 'No';\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpze8yp8i5.php:63\n\
    Stack trace:\n#0 /tmp/tmpze8yp8i5.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpze8yp8i5.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    // check str1 first, if balanced,\
    \ check str2, if balanced, return 'Yes'\n    if (check_parens($str1) === false)\
    \ {\n        if (check_parens($str2) === false) {\n            return 'Yes';\n\
    \        }\n    }\n    // check str2 first, if balanced, check str1, if balanced,\
    \ return 'Yes'\n    if (check_parens($str2) === false) {\n        if (check_parens($str1)\
    \ === false) {\n            return 'Yes';\n        }\n    }\n    return 'No';\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_parens()\
    \ in /tmp/tmppfzhxhgi.php:17\nStack trace:\n#0 /tmp/tmppfzhxhgi.php(31): match_parens(Array)\n\
    #1 /tmp/tmppfzhxhgi.php(35): candidate(Array)\n#2 /tmp/tmppfzhxhgi.php(49): test()\n\
    #3 {main}\n  thrown in /tmp/tmppfzhxhgi.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    // your code here\n    $result = \"Yes\";\n    $array = array();\n  \
    \  foreach($lst as $word){\n        foreach(str_split($word) as $char){\n    \
    \        if($char == \"(\"){\n                array_push($array,$char);\n    \
    \        }\n            elseif($char == \")\"){\n                if(!empty($array)){\n\
    \                    array_pop($array);\n                }\n                else{\n\
    \                    $result = \"No\";\n                }\n            }\n   \
    \     }\n    }\n    if(!empty($array)){\n        $result = \"No\";\n    }\n  \
    \  return $result;\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgyibehn.php:45\n\
    Stack trace:\n#0 /tmp/tmpdgyibehn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdgyibehn.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    list($s1, $s2) = $lst;\n    $good_string = FALSE;\n    $good_string =\
    \ $good_string || make_good_string($s1, $s2);\n    $good_string = $good_string\
    \ || make_good_string($s2, $s1);\n    return $good_string ? 'Yes' : 'No';\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function make_good_string()\
    \ in /tmp/tmpwa60gpna.php:16\nStack trace:\n#0 /tmp/tmpwa60gpna.php(22): match_parens(Array)\n\
    #1 /tmp/tmpwa60gpna.php(26): candidate(Array)\n#2 /tmp/tmpwa60gpna.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwa60gpna.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $l = $str1 . $str2;\n   \
    \ $r = $str2 . $str1;\n    $l_balanced = balanced($l);\n    $r_balanced = balanced($r);\n\
    \    return $l_balanced === 'Yes' || $r_balanced === 'Yes' ? 'Yes' : 'No';\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function balanced() in\
    \ /tmp/tmpri0zlhpc.php:18\nStack trace:\n#0 /tmp/tmpri0zlhpc.php(24): match_parens(Array)\n\
    #1 /tmp/tmpri0zlhpc.php(28): candidate(Array)\n#2 /tmp/tmpri0zlhpc.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpri0zlhpc.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left_parens = 0;\n    $right_parens = 0;\n    foreach ($lst as $str)\
    \ {\n        for ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i]\
    \ == '(') {\n                $left_parens++;\n            } else {\n         \
    \       $right_parens++;\n            }\n        }\n    }\n    if ($left_parens\
    \ == $right_parens) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt89ho0_n.php:45\n\
    Stack trace:\n#0 /tmp/tmpt89ho0_n.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpt89ho0_n.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $lhs = $lst[0];\n  $rhs = $lst[1];\n  $lhs = preg_replace('/\\)/', '',\
    \ $lhs);\n  $rhs = preg_replace('/\\(/', '', $rhs);\n  if(strlen($lhs) + strlen($rhs)\
    \ > 0) {\n    return 'No';\n  }\n  return 'Yes';\n}\necho match_parens(['()(',\
    \ ')']) . \"\\n\";\necho match_parens([')', ')']) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6yxknq34.php:30\n\
    Stack trace:\n#0 /tmp/tmp6yxknq34.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6yxknq34.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $l1 = $lst[0];\n  $l2 = $lst[1];\n  $r1 = strrev($l1);\n  $r2 = strrev($l2);\n\
    \  $r1 = preg_replace('/\\(/', '_', $r1);\n  $r1 = preg_replace('/\\)/', '(',\
    \ $r1);\n  $r1 = preg_replace('/_/', ')', $r1);\n  $r2 = preg_replace('/\\(/',\
    \ '_', $r2);\n  $r2 = preg_replace('/\\)/', '(', $r2);\n  $r2 = preg_replace('/_/',\
    \ ')', $r2);\n  $r3 = preg_replace('/\\(/', '_', $l1);\n  $r3 = preg_replace('/\\\
    )/', '(', $r3);\n  $r3 = preg_replace('/_/', ')', $r3);\n  $r4 = preg_replace('/\\\
    (/', '_', $l2);\n  $r4 = preg_replace('/\\)/', '(', $r4);\n  $r4 = preg_replace('/_/',\
    \ ')', $r4);\n  $res = array($l1 . $l2, $l1 . $r2, $r1 . $l2, $r1 . $r2, $l1 .\
    \ $r4, $r1 . $r4, $r3 . $l2, $r3 . $r2);\n  for ($i = 0; $i < count($res); $i++)\
    \ {\n    if (balance($res[$i])) {\n      return 'Yes';\n    }\n  }\n  return 'No';\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function balance() in\
    \ /tmp/tmpj9n6hucn.php:32\nStack trace:\n#0 /tmp/tmpj9n6hucn.php(39): match_parens(Array)\n\
    #1 /tmp/tmpj9n6hucn.php(43): candidate(Array)\n#2 /tmp/tmpj9n6hucn.php(57): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj9n6hucn.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $v = array_map(function($s) {\n        return strlen(preg_replace('/[^(]/',\
    \ '', $s)) - strlen(preg_replace('/[^)]/', '', $s));\n    }, $lst);\n    return\
    \ $v[0] + $v[1] == 0 ? 'Yes' : 'No';\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2hri21b.php:33\n\
    Stack trace:\n#0 /tmp/tmpm2hri21b.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpm2hri21b.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = str_split(implode('', $lst));\n    $open = 0;\n    $close = 0;\n\
    \    foreach ($lst as $char) {\n        if ($char == '(') {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n        if ($close > $open)\
    \ {\n            return 'No';\n        }\n    }\n    return $open == $close ?\
    \ 'Yes' : 'No';\n}\necho match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')',\
    \ ')']) . \"\\n\";\necho match_parens(['()', '))']) . \"\\n\";\necho match_parens(['(()',\
    \ '))']) . \"\\n\";\necho match_parens(['(()', ')']) . \"\\n\";\necho match_parens(['()',\
    \ ')']) . \"\\n\";\necho match_parens(['()', '(()']) . \"\\n\";\necho match_parens(['))',\
    \ '(((']) . \"\\n\";\necho match_parens(['(()', '(((']) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\nNo\nNo\nYes\nNo\nNo\nNo\nNo\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmhr68d97.php:46\nStack trace:\n#0 /tmp/tmpmhr68d97.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmhr68d97.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  // we can use two counters; one to keep track of the open parentheses and\n\
    \  // another to keep track of the number of closed parentheses we find.\n  //\
    \ if the second counter ever exceeds the first counter, there is no way\n  //\
    \ to match the parentheses, so we return false.\n  // at the end of the two strings,\
    \ we just make sure the two counters are equal.\n  $opens = 0;\n  $closes = 0;\n\
    \  for ($i = 0; $i < strlen($lst[0]); $i++) {\n    if ($lst[0][$i] == '(') {\n\
    \      $opens++;\n    } else {\n      $closes++;\n    }\n    if ($closes > $opens)\
    \ {\n      return 'No';\n    }\n  }\n  for ($i = 0; $i < strlen($lst[1]); $i++)\
    \ {\n    if ($lst[1][$i] == '(') {\n      $opens++;\n    } else {\n      $closes++;\n\
    \    }\n    if ($closes > $opens) {\n      return 'No';\n    }\n  }\n  if ($opens\
    \ == $closes) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\necho\
    \ match_parens(['()(', ')']) . PHP_EOL;\necho match_parens([')', ')']) . PHP_EOL;\n\
    echo match_parens(['()(()', ')']) . PHP_EOL;\necho match_parens(['(()(', '))'])\
    \ . PHP_EOL;\necho match_parens(['(()(()(', ')))))']) . PHP_EOL;\necho match_parens(['(((',\
    \ ')))']) . PHP_EOL;\necho match_parens(['(((', '))))']) . PHP_EOL;\necho match_parens(['((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprbod5jji.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $a = new SplStack();\n  $b = new SplStack();\n  foreach ($lst[0] as $i)\
    \ {\n    if ($i == '(') $a->push($i);\n    elseif ($i == ')') {\n      if ($a->isEmpty())\
    \ return 'No';\n      else $a->pop();\n    }\n  }\n  foreach ($lst[1] as $i) {\n\
    \    if ($i == '(') $b->push($i);\n    elseif ($i == ')') {\n      if ($b->isEmpty())\
    \ return 'No';\n      else $b->pop();\n    }\n  }\n  if ($a->isEmpty() && $b->isEmpty())\
    \ return 'Yes';\n  return 'No';\n}\n\n$tests = [\n  [['()(', ')'], 'Yes'],\n \
    \ [[')', ')'], 'No'],\n  [['()(', '()'], 'Yes'],\n  [['(()(', '())'], 'Yes'],\n\
    \  [['))(', '('], 'No'],\n  [['(()(', '))(('], 'No'],\n  [['(()((()', ')))'],\
    \ 'No'],\n  [['(((((', '))(((((((((('], 'No'],\n  [['', ')'], 'No'],\n  [['(',\
    \ ')'], 'Yes'],\n  [['(((((((((', '(((((((((('], 'No'],\nn\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpey_cqs__.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $left = array_map(function($x) { return str_replace(')', '', $x); }, $lst);\n\
    \  $right = array_map(function($x) { return str_replace('(', '', $x); }, $lst);\n\
    \  return (count($left) === count($right)) ? 'Yes' : 'No';\n}\n$inputs = [\n \
    \ ['()(', ')'],\n  [')', ')'],\n  ['()', '()'],\n  ['(()', ')'],\n  ['())(()',\
    \ ')'],\n  ['())(()))(()', ')'],\n  ['())(())))((()', ')'],\n  ['())(())))(()',\
    \ ')'],\n  ['())(())))(()', ')('],\n  ['())(())))(()', '((()'],\n  ['())(())))(()',\
    \ '((()'],\n  ['())(())))(()', '((()))()'],\n  ['())(())))(()', '((()))())(()'],\n\
    \  ['())(())))(()', '((()))())(())(()'],\n  ['())(())))(()', '((()))())(())(())(()'],\n\
    \  ['())(())))(()', '((()))())(())(())(())(()'],\n  ['())(())))(()', '((()))())(())(())(())(())(()'],\n\
    \  ['())(())))(()', '((()))())(())(())(())(())(())(()'],\n  ['())(())))(()', '((()))())(())(())(())(())(())(())(()'],\n\
    \  ['())(())))(()', '((()))())(())(())(())(())(())(())(())(()'],\n  ['())(())))(()',\
    \ '((()))())(())(())(())(())(())(())(())(())(()'],\n  ['())(())))(()', '((()))())(())(())(())(())(())(())(())(())(\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphiangy31.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    // your code here\n}\n\nif (match_parens(['()(', ')']) !== 'Yes') echo\
    \ \"ERROR 1\\n\";\nif (match_parens([')', ')']) !== 'No') echo \"ERROR 2\\n\"\
    ;\nif (match_parens(['()', '(']) !== 'Yes') echo \"ERROR 3\\n\";\nif (match_parens(['(',\
    \ ')']) !== 'Yes') echo \"ERROR 4\\n\";\necho \"OK\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "ERROR 1\nERROR 2\nERROR 3\nERROR 4\nOK\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyy9ams7x.php:27\nStack trace:\n#0 /tmp/tmpyy9ams7x.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyy9ams7x.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    // your code here\n    // 0 = closed\n    // 1 = open\n    $test1 = $lst[0];\n\
    \    $test2 = $lst[1];\n    $test1Num = strlen($test1);\n    $test2Num = strlen($test2);\n\
    \    $test1Lst = str_split($test1);\n    $test2Lst = str_split($test2);\n    $length\
    \ = $test1Num + $test2Num;\n    $stack = array();\n    $string = \"\";\n    $hold\
    \ = 1;\n    $result = \"Yes\";\n    for ($i = 0; $i < $length; $i++) {\n     \
    \   if ($i < $test1Num) {\n            $string .= $test1Lst[$i];\n        } else\
    \ {\n            $string .= $test2Lst[$i - $test1Num];\n        }\n        $list\
    \ = str_split($string);\n        $num = count($list);\n        if (count($stack)\
    \ == 0) {\n            array_push($stack, $list[0]);\n        } else {\n     \
    \       if (count($stack) == $num) {\n                $hold = 1;\n           \
    \     for ($j = 0; $j < $num; $j++) {\n                    if ($stack[$j] == $list[$j])\
    \ {\n                        continue;\n                    } else {\n       \
    \                 $hold = 0;\n                        break;\n               \
    \     }\n                }\n                if ($hold == 1) {\n              \
    \      $result = \"No\";\n                    break;\n                }\n    \
    \        }\n            if ($stack[count($stack) - 1] == \"(\") {\n          \
    \      if ($list[count($list) - 1] == \")\") {\n                    array_pop($stack);\n\
    \                } else {\n                    array_push($stack, $list[count($list)\
    \ - 1]);\n                }\n            } else {\n                array_push($stack,\
    \ $list[count($list) - 1]);\n            }\n        }\n    }\n    return $result;\n\
    }\n$test1 = ['()(', ')'];\n$test2 = [')', ')'];\n$test3 = ['(\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx8sxi_1x.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $count = 0;\n  for ($i = 0; $i < strlen($lst[0]); $i++) {\n    if ($lst[0][$i]\
    \ == '(') $count++;\n    else $count--;\n    if ($count < 0) return 'No';\n  }\n\
    \  for ($i = 0; $i < strlen($lst[1]); $i++) {\n    if ($lst[1][$i] == '(') $count++;\n\
    \    else $count--;\n    if ($count < 0) return 'No';\n  }\n  return $count ==\
    \ 0 ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlti2w_t.php:36\n\
    Stack trace:\n#0 /tmp/tmpxlti2w_t.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxlti2w_t.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  // Your code here...\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8de74tkv.php:21\n\
    Stack trace:\n#0 /tmp/tmp8de74tkv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8de74tkv.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$str = implode('', $lst);\n\t$str_rev = strrev($str);\n\t$len = strlen($str);\n\
    \t$temp = '';\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($str[$i] === '(') {\n\
    \t\t\t$temp .= ')';\n\t\t} else {\n\t\t\t$temp .= '(';\n\t\t}\n\t}\n\t$temp =\
    \ strrev($temp);\n\treturn ($str.$temp === $str_rev) ? 'Yes' : 'No';\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nusevqu.php:33\n\
    Stack trace:\n#0 /tmp/tmp7nusevqu.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7nusevqu.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $open = 0;\n  foreach ($lst as $str) {\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n      if ($str[$i] == '(') {\n        $open++;\n      } else {\n  \
    \      $open--;\n      }\n      if ($open < 0) {\n        return 'No';\n     \
    \ }\n    }\n  }\n  return ($open == 0) ? 'Yes' : 'No';\n}\n$tests = [\n  [['()(',\
    \ ')'], 'Yes'],\n  [[')', ')'], 'No'],\n  [['()', ')'], 'No'],\n  [['()(', '()()'],\
    \ 'Yes'],\n  [['(()()', ')'], 'No'],\n  [['()(()(', '))'], 'No'],\n  [['()(()(',\
    \ ')(()()'], 'Yes'],\n  [['((()(()', '((()()('], 'No'],\n  [['((()(()', '((()()('],\
    \ 'No'],\n  [['(()()(()(', '))'], 'No'],\n  [['(((()))(', '()'], 'Yes'],\n  [['(((()))(',\
    \ ')'], 'No'],\n  [['()((()()', '))'], 'No'],\n  [['()((()()', '()'], 'Yes'],\n\
    \  [['()((()()', ')('], 'No'],\n  [['()(', ')(())('], 'No'],\n  [['(', ')('],\
    \ 'No'],\n  [['()(', '()(()('], 'No'],\n  [['(()(', '())('], 'No'],\n  [[')(',\
    \ ')('], 'No'],\n  [['()(', ')'], 'Yes'],\n  [['(()(', '()'], 'Yes'],\n  [['(((()))(',\
    \ '()'], 'Yes'],\n  [['(()(', '))'], 'No'],\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_1r_qude.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str = join('', $lst);\n  $len = strlen($str);\n  $open = 0;\n  $close\
    \ = 0;\n  for ($i = 0; $i < $len; $i++) {\n    if ($str[$i] == '(') {\n      $open++;\n\
    \    } else if ($str[$i] == ')') {\n      $close++;\n    }\n    if ($close > $open)\
    \ {\n      return 'No';\n    }\n  }\n  if ($open == $close) {\n    return 'Yes';\n\
    \  }\n  return 'No';\n}\n\necho(match_parens(['()(', ')']) . \"\\n\");\necho(match_parens([')',\
    \ ')']) . \"\\n\");\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jphn7bl.php:44\n\
    Stack trace:\n#0 /tmp/tmp5jphn7bl.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5jphn7bl.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $open_count = 0;\n    $close_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $open_count++;\n        } else {\n            $close_count++;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $open_count++;\n        } else {\n            $close_count++;\n\
    \        }\n    }\n    if ($open_count == $close_count) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf4_1qw0b.php:53\n\
    Stack trace:\n#0 /tmp/tmpf4_1qw0b.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpf4_1qw0b.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $sub1 = substr_count($str1,\
    \ '(');\n    $sub2 = substr_count($str2, '(');\n    $sub3 = substr_count($str1,\
    \ ')');\n    $sub4 = substr_count($str2, ')');\n    if ($sub1 - $sub3 === $sub2\
    \ - $sub4 && $sub1 + $sub2 > 0) {\n        return 'Yes';\n    } else {\n     \
    \   return 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxl9_954u.php:31\n\
    Stack trace:\n#0 /tmp/tmpxl9_954u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxl9_954u.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $parens_dict = ['(' => ')', ')' => '('];\n    $open_parens = [];\n  \
    \  $lst_one = $lst[0];\n    $lst_two = $lst[1];\n    foreach (str_split($lst_one)\
    \ as $chr) {\n        if ($chr == '(') {\n            array_push($open_parens,\
    \ $chr);\n        } else {\n            if (empty($open_parens)) {\n         \
    \       array_push($open_parens, $chr);\n            } else {\n              \
    \  if ($open_parens[count($open_parens) - 1] == $parens_dict[$chr]) {\n      \
    \              array_pop($open_parens);\n                } else {\n          \
    \          array_push($open_parens, $chr);\n                }\n            }\n\
    \        }\n    }\n    foreach (str_split($lst_two) as $chr) {\n        if ($chr\
    \ == '(') {\n            array_push($open_parens, $chr);\n        } else {\n \
    \           if (empty($open_parens)) {\n                array_push($open_parens,\
    \ $chr);\n            } else {\n                if ($open_parens[count($open_parens)\
    \ - 1] == $parens_dict[$chr]) {\n                    array_pop($open_parens);\n\
    \                } else {\n                    array_push($open_parens, $chr);\n\
    \                }\n            }\n        }\n    }\n    if (empty($open_parens))\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48ao542n.php:62\n\
    Stack trace:\n#0 /tmp/tmp48ao542n.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp48ao542n.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $string = implode('', $lst);\n  $op_check = preg_match_all('/\\\
    (/', $string, $op_m);\n  $cl_check = preg_match_all('/\\)/', $string, $cl_m);\n\
    \  if ($op_check !== $cl_check) {\n    return 'No';\n  }\n  for ($i = 0; $i <\
    \ strlen($string); $i++) {\n    if ($string[$i] === '(') {\n      array_push($stack,\
    \ '(');\n    } elseif ($string[$i] === ')') {\n      if (array_pop($stack) !==\
    \ '(') {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n}\necho\
    \ match_parens(['()(', ')']) . PHP_EOL;\necho match_parens([')', ')']) . PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0v8va4_p.php:43\n\
    Stack trace:\n#0 /tmp/tmp0v8va4_p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0v8va4_p.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    if (empty($lst[0]) && empty($lst[1])) {\n        return 'Yes';\n    }\n\
    \    if (empty($lst[0])) {\n        return parens_balanced($lst[1]) ? 'Yes' :\
    \ 'No';\n    }\n    if (empty($lst[1])) {\n        return parens_balanced($lst[0])\
    \ ? 'Yes' : 'No';\n    }\n    $result = 'No';\n    for ($i = 0; $i < strlen($lst[0]);\
    \ $i++) {\n        $s = $lst[0][$i] . $lst[1];\n        if (parens_balanced($s))\
    \ {\n            $result = 'Yes';\n            break;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parens_balanced()\
    \ in /tmp/tmpy8ctn29h.php:26\nStack trace:\n#0 /tmp/tmpy8ctn29h.php(35): match_parens(Array)\n\
    #1 /tmp/tmpy8ctn29h.php(39): candidate(Array)\n#2 /tmp/tmpy8ctn29h.php(53): test()\n\
    #3 {main}\n  thrown in /tmp/tmpy8ctn29h.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lft = 0;\n    $rgt = 0;\n    foreach ($lst as $item) {\n        for\
    \ ($i = 0; $i < strlen($item); $i++) {\n            if ($item[$i] == '(') {\n\
    \                $lft++;\n            } else {\n                $rgt++;\n    \
    \        }\n        }\n    }\n    return $lft == $rgt ? 'Yes' : 'No';\n}\n\necho\
    \ match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')', ')']) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp54d0n0ap.php:44\n\
    Stack trace:\n#0 /tmp/tmp54d0n0ap.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp54d0n0ap.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    // your code here\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoopbaap9.php:21\n\
    Stack trace:\n#0 /tmp/tmpoopbaap9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpoopbaap9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $parens = '';\n  foreach ($lst as $str) {\n    foreach (str_split($str)\
    \ as $char) {\n      if ($char == '(') {\n        $parens .= '(';\n      } else\
    \ {\n        if (substr($parens, -1) == '(') {\n          $parens = substr($parens,\
    \ 0, -1);\n        } else {\n          return 'No';\n        }\n      }\n    }\n\
    \  }\n  return $parens ? 'No' : 'Yes';\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihi3_0ns.php:39\n\
    Stack trace:\n#0 /tmp/tmpihi3_0ns.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpihi3_0ns.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s = '';\n    $opens = 0;\n    $closes = 0;\n    foreach ($lst as $str)\
    \ {\n        for ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i]\
    \ == '(') {\n                $opens++;\n            } else {\n               \
    \ $closes++;\n            }\n        }\n        $s .= $str;\n    }\n    if ($opens\
    \ != $closes) {\n        return 'No';\n    }\n    $open_count = 0;\n    $closed_count\
    \ = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == '(')\
    \ {\n            $open_count++;\n        } else {\n            $closed_count++;\n\
    \        }\n        if ($closed_count > $open_count) {\n            return 'No';\n\
    \        }\n    }\n    return 'Yes';\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp54wgo4li.php:52\n\
    Stack trace:\n#0 /tmp/tmp54wgo4li.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp54wgo4li.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $lst[0] = str_split($lst[0]);\n  $lst[1] = str_split($lst[1]);\n  for ($i\
    \ = 0; $i < count($lst[0]); $i++) {\n    $lst[0][$i] == '(' ? $open++ : $close++;\n\
    \  }\n  for ($i = 0; $i < count($lst[1]); $i++) {\n    $lst[1][$i] == '(' ? $open++\
    \ : $close++;\n  }\n  return ($open == $close) ? 'Yes' : 'No';\n}\necho match_parens(['()(',\
    \ ')']) . PHP_EOL;\necho match_parens([')', ')']) . PHP_EOL;\necho match_parens(['(',\
    \ ')']) . PHP_EOL;\necho match_parens(['(()', ')']) . PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\nYes\nYes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06l9suda.php:43\n\
    Stack trace:\n#0 /tmp/tmp06l9suda.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp06l9suda.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = $lst[0];\n    $right = $lst[1];\n    $paren_count = 0;\n    $max_count\
    \ = 0;\n    for ($i = 0; $i < strlen($left); $i++) {\n        if ($left[$i] ==\
    \ '(') {\n            $paren_count++;\n        } else {\n            $paren_count--;\n\
    \        }\n        if ($paren_count > $max_count) {\n            $max_count =\
    \ $paren_count;\n        }\n    }\n    $max_count = max($max_count, $paren_count);\n\
    \    $paren_count = 0;\n    for ($i = 0; $i < strlen($right); $i++) {\n      \
    \  if ($right[$i] == '(') {\n            $paren_count++;\n        } else {\n \
    \           $paren_count--;\n        }\n        if ($paren_count < -$max_count)\
    \ {\n            return 'No';\n        }\n    }\n    if ($paren_count == 0) {\n\
    \        return 'Yes';\n    }\n    return 'No';\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimgs_e7f.php:50\n\
    Stack trace:\n#0 /tmp/tmpimgs_e7f.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpimgs_e7f.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    if (empty($lst)) {\n        return 'Yes';\n    }\n    $lst[0] = str_split($lst[0]);\n\
    \    $lst[1] = str_split($lst[1]);\n    if (strlen($lst[0]) < strlen($lst[1]))\
    \ {\n        $tmp = $lst[0];\n        $lst[0] = $lst[1];\n        $lst[1] = $tmp;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < count($lst[0]); $i++) {\n     \
    \   if ($lst[0][$i] == '(') {\n            $count++;\n        } else {\n     \
    \       $count--;\n        }\n        if ($count < 0) {\n            return 'No';\n\
    \        }\n    }\n    $count = 0;\n    for ($i = 0; $i < count($lst[1]); $i++)\
    \ {\n        if ($lst[1][$i] == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return 'No';\n        }\n    }\n    if ($count == 0) {\n        return 'Yes';\n\
    \    }\n    return match_parens([join($lst[0]), join($lst[1])]);\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmpitnkwbvs.php\
    \ on line 19\n\nWarning: strlen() expects parameter 1 to be string, array given\
    \ in /tmp/tmpitnkwbvs.php on line 19\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpitnkwbvs.php:56\nStack trace:\n#0 /tmp/tmpitnkwbvs.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpitnkwbvs.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $lst[0] = str_split($lst[0]);\n  $lst[1] = str_split($lst[1]);\n  if (count($lst[0])\
    \ == count($lst[1])) return 'Yes';\n  if (count($lst[0]) > count($lst[1])) {\n\
    \    return 'Yes';\n  } else {\n    $tmp = $lst[0];\n    $lst[0] = $lst[1];\n\
    \    $lst[1] = $tmp;\n  }\n  $count = 0;\n  for ($i = 0; $i < count($lst[0]);\
    \ $i++) {\n    if ($lst[0][$i] == '(') {\n      if ($lst[1][$i] == ')') $count++;\n\
    \    } else {\n      if ($lst[1][$i] == '(') $count--;\n    }\n  }\n  if ($count\
    \ == 0) return 'Yes';\n  return 'No';\n}\n\n$tests = [\n  ['(())()', ')'],\n \
    \ [')', ')'],\n  ['()(', ')'],\n  ['(())(', ')'],\n  ['())(()', ')'],\n  ['())(()()',\
    \ ')()'],\n  ['))(', '('],\n  ['))(()(', '()('],\n  ['))(()()(', '()()('],\n \
    \ ['))(((()()(', '()()()('],\n  ['()(()(', '))']\n];\n\nforeach ($tests as $t)\
    \ {\n  $res = match_parens($t);\n  var_dump(\"{$t[0]} | {$t[1]} ==> {$res}\");\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "string(18) \"(())() | ) ==> Yes\"\nstring(13) \") | ) ==> Yes\"\nstring(15)\
    \ \"()( | ) ==> Yes\"\nstring(17) \"(())( | ) ==> Yes\"\nstring(18) \"())(() |\
    \ ) ==> Yes\"\nstring(22) \"())(()() | )() ==> Yes\"\nstring(15) \"))( | ( ==>\
    \ Yes\"\nstring(20) \"))(()( | ()( ==> Yes\"\nstring(24) \"))(()()( | ()()( ==>\
    \ Yes\"\nstring(28) \"))(((()()( | ()()()( ==> Yes\"\nstring(19) \"()(()( | ))\
    \ ==> Yes\"\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3l6nyz_4.php:60\n\
    Stack trace:\n#0 /tmp/tmp3l6nyz_4.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp3l6nyz_4.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $arr = [];\n  for ($i = 0; $i < strlen($lst[0]); $i++) {\n    $arr[] =\
    \ $lst[0][$i];\n  }\n  for ($i = 0; $i < strlen($lst[1]); $i++) {\n    $arr[]\
    \ = $lst[1][$i];\n  }\n  $brackets = 0;\n  for ($i = 0; $i < count($arr); $i++)\
    \ {\n    if ($arr[$i] == '(') {\n      $brackets++;\n    } else if ($arr[$i] ==\
    \ ')') {\n      $brackets--;\n    }\n    if ($brackets < 0) {\n      return 'No';\n\
    \    }\n  }\n  if ($brackets == 0) {\n    return 'Yes';\n  } else {\n    return\
    \ 'No';\n  }\n}\necho match_parens(['()(', ')']) . PHP_EOL;\necho match_parens([')',\
    \ ')']) . PHP_EOL;\necho match_parens(['(()', ')']) . PHP_EOL;\necho match_parens(['(()',\
    \ '))']) . PHP_EOL;\necho match_parens(['(()(', '))']) . PHP_EOL;\necho match_parens(['(()((',\
    \ '))']) . PHP_EOL;\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\nYes\nNo\nYes\nNo\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmptyzdho4x.php:52\nStack trace:\n#0 /tmp/tmptyzdho4x.php(63): test()\n\
    #1 {main}\n  thrown in /tmp/tmptyzdho4x.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str = implode('', $lst);\n    $str = str_replace('()', '', $str);\n\
    \    $str = preg_replace('/\\(\\)/', '', $str);\n    $str = preg_replace('/\\\
    (\\)/', '', $str);\n    $str = preg_replace('/\\(\\)/', '', $str);\n    $str =\
    \ preg_replace('/\\(\\)/', '', $str);\n    $str = preg_replace('/\\(\\)/', '',\
    \ $str);\n    $str = preg_replace('/\\(\\)/', '', $str);\n    $str = preg_replace('/\\\
    (\\)/', '', $str);\n    $str = preg_replace('/\\(\\)/', '', $str);\n    $str =\
    \ preg_replace('/\\(\\)/', '', $str);\n    $str = preg_replace('/\\(\\)/', '',\
    \ $str);\n    $str = preg_replace('/\\(\\)/', '', $str);\n    $str = preg_replace('/\\\
    (\\)/', '', $str);\n    $str = preg_replace('/\\(\\)/', '', $str);\n    $str =\
    \ preg_replace('/\\(\\)/', '', $str);\n    $str = preg_replace('/\\(\\)/', '',\
    \ $str);\n    $str = preg_replace('/\\(\\)/', '', $str);\n    $str = preg_replace('/\\\
    (\\)/', '', $str);\n    $str = preg_replace('/\\(\\)/', '', $str);\n    $str =\
    \ preg_replace('/\\(\\)/', '', $str);\n    $str = preg_replace('/\\(\\)/', '',\
    \ $str);\n    $str = preg_replace('/\\(\\)/', '', $str);\n    $str = preg_replace('/\\\
    (\\)/', '', $str);\n    $str = preg_replace('/\\(\\)/', '', $str);\n    $str =\
    \ preg_replace('/\\(\\)/', '', $str);\n    $\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaproqjkw.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open_count = $close_count = 0;\n    for ($i = 0; $i < strlen($lst[0]);\
    \ $i++) {\n        if ($lst[0][$i] == '(') $open_count++;\n        else $close_count++;\n\
    \    }\n    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if ($lst[1][$i]\
    \ == '(') $open_count++;\n        else $close_count++;\n    }\n    return ($open_count\
    \ == $close_count) ? 'Yes' : 'No';\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_06uoazh.php:39\n\
    Stack trace:\n#0 /tmp/tmp_06uoazh.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_06uoazh.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\tif (check($lst[0], $lst[1])) {\n\t\treturn 'Yes';\n\t} else {\n\t\treturn\
    \ 'No';\n\t}\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check() in /tmp/tmp1cp0195a.php:14\n\
    Stack trace:\n#0 /tmp/tmp1cp0195a.php(22): match_parens(Array)\n#1 /tmp/tmp1cp0195a.php(26):\
    \ candidate(Array)\n#2 /tmp/tmp1cp0195a.php(40): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp1cp0195a.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    return (strlen($lst[0]) + strlen($lst[1])) % 2 == 0 ? 'Yes' : 'No';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnui0fjz.php:23\n\
    Stack trace:\n#0 /tmp/tmpxnui0fjz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxnui0fjz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $string = $lst[0].$lst[1];\n    $open = 0;\n    for ($i=0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $open--;\n        }\n        if ($open < 0) {\n        \
    \    return 'No';\n        }\n    }\n    return 'Yes';\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmztgxy5.php:36\n\
    Stack trace:\n#0 /tmp/tmpbmztgxy5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpbmztgxy5.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $p = [0, 0];\n  for ($i = 0; $i < 2; $i++) {\n    for ($j = 0; $j < strlen($lst[$i]);\
    \ $j++) {\n      if ($lst[$i][$j] == '(') $p[$i]++;\n      elseif ($lst[$i][$j]\
    \ == ')') $p[$i]--;\n      if ($p[$i] < 0) return 'No';\n    }\n  }\n  return\
    \ ($p[0] == $p[1]) ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6uwg4ut.php:30\n\
    Stack trace:\n#0 /tmp/tmpo6uwg4ut.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo6uwg4ut.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $s = $lst[0] . $lst[1];\n  $s = str_replace('()', '', $s);\n  if (empty($s))\
    \ {\n    return 'Yes';\n  }\n  return 'No';\n}\n$s = ['()(', ')'];\nassert(match_parens($s)\
    \ == 'Yes');\n$s = [')', ')'];\nassert(match_parens($s) == 'No');\necho \"OK\\\
    n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "OK\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmij5ykg.php:34\n\
    Stack trace:\n#0 /tmp/tmpfmij5ykg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfmij5ykg.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $map = [\n        '(' => -1,\n        ')' => 1\n    ];\n    $s = '';\n\
    \    foreach ($lst as $s1) {\n        $s = str_split($s1);\n        while (end($s)\
    \ == '(') {\n            $s = array_pop($s);\n        }\n        $s = array_map(function($x)\
    \ use ($map) {\n            return $map[$x];\n        }, $s);\n        $n = count($s);\n\
    \        for ($i = 0; $i < $n; $i++) {\n            $s[$i + 1] += $s[$i];\n  \
    \          if ($s[$i + 1] < 0) {\n                $s[$i + 1] = 0;\n          \
    \  }\n        }\n        if (end($s) != 0) {\n            return 'No';\n     \
    \   }\n    }\n    return 'Yes';\n}\necho match_parens(['()(', ')']) . \"\\n\"\
    ;\necho match_parens([')', ')']) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: end() expects parameter 1 to be array, string given in /tmp/tmpn8nitzm4.php\
    \ on line 21\n\nWarning: array_map(): Expected parameter 2 to be an array, string\
    \ given in /tmp/tmpn8nitzm4.php on line 26\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpn8nitzm4.php on\
    \ line 27\n\nWarning: end() expects parameter 1 to be array, null given in /tmp/tmpn8nitzm4.php\
    \ on line 34\nNo\nNo\n\nWarning: end() expects parameter 1 to be array, string\
    \ given in /tmp/tmpn8nitzm4.php on line 21\n\nWarning: array_map(): Expected parameter\
    \ 2 to be an array, string given in /tmp/tmpn8nitzm4.php on line 26\n\nWarning:\
    \ count(): Parameter must be an array or an object that implements Countable in\
    \ /tmp/tmpn8nitzm4.php on line 27\n\nWarning: end() expects parameter 1 to be\
    \ array, null given in /tmp/tmpn8nitzm4.php on line 34\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpn8nitzm4.php:47\nStack trace:\n#0 /tmp/tmpn8nitzm4.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpn8nitzm4.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $a = $lst[0];\n  $b = $lst[1];\n  $a_cnt = substr_count($a, '(');\n  $b_cnt\
    \ = substr_count($b, '(');\n  $ans = 'No';\n  if ($a_cnt == $b_cnt) {\n    $ans\
    \ = 'Yes';\n  } else if ($a_cnt > $b_cnt) {\n    $ans = 'Yes';\n    if ($a_cnt\
    \ > 2*$b_cnt) {\n      $ans = 'No';\n    }\n  } else {\n    $ans = 'Yes';\n  \
    \  if ($b_cnt > 2*$a_cnt) {\n      $ans = 'No';\n    }\n  }\n  return $ans;\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8yhu6fry.php:40\n\
    Stack trace:\n#0 /tmp/tmp8yhu6fry.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8yhu6fry.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $parentheses_stack = [];\n    $open_parentheses = 0;\n    $total_parentheses\
    \ = 0;\n    $result = 'Yes';\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    while\
    \ ($i < count($lst)) {\n        $j = 0;\n        while ($j < strlen($lst[$i]))\
    \ {\n            $k = 0;\n            while ($k < strlen($lst[$i])) {\n      \
    \          if ($lst[$i][$k] == '(') {\n                    array_push($parentheses_stack,\
    \ $lst[$i][$k]);\n                    $open_parentheses++;\n                }\
    \ else {\n                    if ($open_parentheses > 0) {\n                 \
    \       array_pop($parentheses_stack);\n                        $open_parentheses--;\n\
    \                    } else {\n                        $result = 'No';\n     \
    \                   break 3;\n                    }\n                }\n     \
    \           $k++;\n            }\n            $j++;\n        }\n        $i++;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu06zsiit.php:54\n\
    Stack trace:\n#0 /tmp/tmpu06zsiit.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpu06zsiit.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = array_shift($lst);\n    $str2 = array_shift($lst);\n    $str3\
    \ = $str1 . $str2;\n    $str4 = $str2 . $str1;\n    $parens = ['(', ')'];\n  \
    \  $open = [];\n    $close = [];\n    for ($i = 0; $i < strlen($str3); $i++) {\n\
    \        if ($str3[$i] == $parens[0]) {\n            array_push($open, $str3[$i]);\n\
    \        } else {\n            array_push($close, $str3[$i]);\n        }\n   \
    \ }\n    $balanced = false;\n    if (count($open) == count($close)) {\n      \
    \  $balanced = true;\n    }\n    if ($balanced) {\n        return 'Yes';\n   \
    \ }\n    $open = [];\n    $close = [];\n    for ($i = 0; $i < strlen($str4); $i++)\
    \ {\n        if ($str4[$i] == $parens[0]) {\n            array_push($open, $str4[$i]);\n\
    \        } else {\n            array_push($close, $str4[$i]);\n        }\n   \
    \ }\n    $balanced = false;\n    if (count($open) == count($close)) {\n      \
    \  $balanced = true;\n    }\n    if ($balanced) {\n        return 'Yes';\n   \
    \ }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdiw6td3.php:68\n\
    Stack trace:\n#0 /tmp/tmpzdiw6td3.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpzdiw6td3.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = str_split($lst[0]);\n    $str2 = str_split($lst[1]);\n    $str3\
    \ = array_merge($str1, $str2);\n    $stack = [];\n    foreach ($str3 as $char)\
    \ {\n        if ($char == '(') {\n            array_push($stack, $char);\n   \
    \     } else {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \            } else {\n                return 'No';\n            }\n        }\n\
    \    }\n    return 'Yes';\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxfvn3da.php:39\n\
    Stack trace:\n#0 /tmp/tmpoxfvn3da.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpoxfvn3da.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $arr = array_map('str_split', $lst);\n    $str = '';\n    foreach ($arr\
    \ as $el) {\n        $str .= implode('', $el);\n    }\n    return match_parens_str($str)\
    \ ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function match_parens_str()\
    \ in /tmp/tmpjfkwlt8j.php:19\nStack trace:\n#0 /tmp/tmpjfkwlt8j.php(23): match_parens(Array)\n\
    #1 /tmp/tmpjfkwlt8j.php(27): candidate(Array)\n#2 /tmp/tmpjfkwlt8j.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjfkwlt8j.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $l = $lst[0];\n  $r = $lst[1];\n  $parens = '';\n  $pair = '()';\n  while\
    \ (strlen($l) > 0 && strlen($r) > 0) {\n    $parens .= $pair;\n    $l = substr($l,\
    \ 1);\n    $r = substr($r, 1);\n  }\n  if (strlen($l) > 0) {\n    $parens = $l\
    \ . $parens;\n  } else if (strlen($r) > 0) {\n    $parens = $parens . $r;\n  }\n\
    \  // Initialize count to 0.\n  $count = 0;\n  // Loop through the string.\n \
    \ for ($i = 0; $i < strlen($parens); $i++) {\n    // If the current character\
    \ is an open parenthesis, increase the count by\n    // 1.\n    if ($parens[$i]\
    \ == '(') {\n      $count++;\n    }\n    // If the current character is a close\
    \ parenthesis, decrease the count by\n    // 1.\n    else if ($parens[$i] == ')')\
    \ {\n      $count--;\n    }\n    // If the count is below 0, return false.\n \
    \   if ($count < 0) {\n      return 'No';\n    }\n  }\n  // If the count is greater\
    \ than 0, return false.\n  if ($count > 0) {\n    return 'No';\n  }\n  // Else,\
    \ return true.\n  return 'Yes';\n}\n\necho match_parens(['()(', ')']) . PHP_EOL;\n\
    echo match_parens([')', ')']) . PHP_EOL;\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nYes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmj572n4u.php:62\n\
    Stack trace:\n#0 /tmp/tmpmj572n4u.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpmj572n4u.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $all_good = true;\n    $all_good = match_parens_helper($lst[0]) && $all_good;\n\
    \    $all_good = match_parens_helper($lst[1]) && $all_good;\n    $all_good = match_parens_helper($lst[0]\
    \ . $lst[1]) && $all_good;\n    return $all_good ? 'Yes' : 'No';\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function match_parens_helper()\
    \ in /tmp/tmph9dxc4pw.php:15\nStack trace:\n#0 /tmp/tmph9dxc4pw.php(21): match_parens(Array)\n\
    #1 /tmp/tmph9dxc4pw.php(25): candidate(Array)\n#2 /tmp/tmph9dxc4pw.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmph9dxc4pw.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $open = 0;\n    $close =\
    \ 0;\n    $flag = true;\n    for ($i = 0; $i < strlen($str1); $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $open++;\n        } else {\n         \
    \   $close++;\n        }\n        if ($close > $open) {\n            $flag = false;\n\
    \            break;\n        }\n    }\n    $open = 0;\n    $close = 0;\n    for\
    \ ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n    \
    \        $open++;\n        } else {\n            $close++;\n        }\n      \
    \  if ($close > $open) {\n            $flag = false;\n            break;\n   \
    \     }\n    }\n    return $flag ? 'Yes' : 'No';\n}\necho match_parens(['()(',\
    \ ')']) . PHP_EOL;\necho match_parens([')', ')']) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzs5qgi8e.php:52\n\
    Stack trace:\n#0 /tmp/tmpzs5qgi8e.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpzs5qgi8e.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = array_filter($lst[0], function($c) { return $c == '('; });\n\
    \    $right = array_filter($lst[1], function($c) { return $c == ')'; });\n   \
    \ return $left === $right ? 'Yes' : 'No';\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_filter() expects parameter 1 to be array, string given\
    \ in /tmp/tmp6lnz1v6_.php on line 14\n\nWarning: array_filter() expects parameter\
    \ 1 to be array, string given in /tmp/tmp6lnz1v6_.php on line 15\n\nWarning: array_filter()\
    \ expects parameter 1 to be array, string given in /tmp/tmp6lnz1v6_.php on line\
    \ 14\n\nWarning: array_filter() expects parameter 1 to be array, string given\
    \ in /tmp/tmp6lnz1v6_.php on line 15\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp6lnz1v6_.php:24\nStack trace:\n#0 /tmp/tmp6lnz1v6_.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6lnz1v6_.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str = implode('', $lst);\n  $l = strlen($str);\n  $stack = 0;\n  for ($i\
    \ = 0; $i < $l; $i++) {\n    if ($str[$i] == '(') {\n      $stack++;\n    } else\
    \ {\n      $stack--;\n    }\n    if ($stack < 0) {\n      return 'No';\n    }\n\
    \  }\n  return $stack == 0 ? 'Yes' : 'No';\n}\n\n$tests = [\n  ['()(', ')'],\n\
    \  [')', ')'],\n  ['(())(', ')('],\n  ['()', '('],\n  ['(((())))', '((((()))))'],\n\
    \  [')(', '((()))))'],\n  ['()(()(()()()()(', ')'],\n  ['(()(()()()(((()()()(',\
    \ '))))()'],\n  ['(()(()()()(((()()()()(((((()()()(((()(()()((()', '()))))()))))()))))()))))()))))()))))))'],\n\
    \  ['((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj94gtwen.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $test = array_sum(str_split($lst[0])) + array_sum(str_split($lst[1]));\n\
    \    return ($test == 0) ? 'Yes' : 'No';\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3t4gyn58.php:23\n\
    Stack trace:\n#0 /tmp/tmp3t4gyn58.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3t4gyn58.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    if(empty($lst)) {\n        return false;\n    }\n    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $ptr1 = 0;\n    $ptr2 = 0;\n    $i = 0;\n    $last_append\
    \ = 0;\n    while($i < strlen($str1) + strlen($str2)) {\n        if($ptr1 < strlen($str1)\
    \ && substr($str1, $ptr1, 1) == '(') {\n            $ptr1++;\n            $last_append\
    \ = 1;\n        } else if($ptr2 < strlen($str2) && substr($str2, $ptr2, 1) ==\
    \ '(') {\n            $ptr2++;\n            $last_append = 2;\n        } else\
    \ if($ptr1 < strlen($str1) && substr($str1, $ptr1, 1) == ')') {\n            if($last_append\
    \ == 1) {\n                return 'No';\n            }\n            $ptr1++;\n\
    \            $last_append = 1;\n        } else if($ptr2 < strlen($str2) && substr($str2,\
    \ $ptr2, 1) == ')') {\n            if($last_append == 2) {\n                return\
    \ 'No';\n            }\n            $ptr2++;\n            $last_append = 2;\n\
    \        }\n        $i++;\n    }\n    return 'Yes';\n}\necho \"match_parens(['()(',\
    \ ')']) = \" . match_parens(['()(', ')']) . \"\\n\";\necho \"match_parens([')',\
    \ ')']) = \" . match_parens([')', ')']) . \"\\n\";\necho \"match_parens(['((',\
    \ ')))']) = \" . match_parens(['((', ')))']) . \"\\n\";\necho \"match_parens(['(()',\
    \ ')()']) = \" . match_parens(['(()', ')()']) . \"\\n\";\necho \"match_parens(['))(',\
    \ '))(']) = \" . match_parens(['))(', '))(']) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "match_parens(['()(', ')']) = No\nmatch_parens([')', ')']) = Yes\nmatch_parens(['((',\
    \ ')))']) = No\nmatch_parens(['(()', ')()']) = No\nmatch_parens(['))(', '))('])\
    \ = No\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusdqh6q3.php:58\n\
    Stack trace:\n#0 /tmp/tmpusdqh6q3.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpusdqh6q3.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$newStr = implode($lst);\n\t$arr = str_split($newStr);\n\t$count = 0;\n\
    \tforeach ($arr as $char) {\n\t\tif ($char == '(') {\n\t\t\t$count++;\n\t\t} else\
    \ {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn 'No';\n\t\t}\n\
    \t}\n\tif ($count == 0) {\n\t\treturn 'Yes';\n\t} else {\n\t\treturn 'No';\n\t\
    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgvx_3dz.php:42\n\
    Stack trace:\n#0 /tmp/tmpmgvx_3dz.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmgvx_3dz.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $good = true;\n  $a = $lst[0];\n  $b = $lst[1];\n  //$n = strlen($a);\n\
    \  $n = strlen($b);\n  $ans = '';\n  $count = 0;\n  //for ($i = 0; $i < $n; $i++)\
    \ {\n  for ($i = 0; $i < $n; $i++) {\n    $ans .= $a[$i];\n    if ($a[$i] == '(')\
    \ {\n      $count++;\n    } else {\n      $count--;\n    }\n    if ($count < 0)\
    \ {\n      $good = false;\n      break;\n    }\n  }\n  if ($good == false) {\n\
    \    $ans = '';\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n      $ans\
    \ .= $b[$i];\n      if ($b[$i] == '(') {\n        $count++;\n      } else {\n\
    \        $count--;\n      }\n      if ($count < 0) {\n        $good = false;\n\
    \        break;\n      }\n    }\n  }\n  if ($good == false) {\n    return 'No';\n\
    \  } else {\n    return 'Yes';\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6rwndzi.php:63\n\
    Stack trace:\n#0 /tmp/tmpg6rwndzi.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpg6rwndzi.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $arr1 = str_split($str1);\n\
    \    $arr2 = str_split($str2);\n    $output = '';\n    $arr1length = count($arr1);\n\
    \    $arr2length = count($arr2);\n    $len = $arr1length + $arr2length;\n    $i\
    \ = 0;\n    $j = 0;\n    while ($i < $arr1length && $j < $arr2length) {\n    \
    \    if ($arr1[$i] == '(' && $arr2[$j] == ')') {\n            $output .= ')(';\n\
    \            $i++;\n            $j++;\n        } else if ($arr1[$i] == '(' &&\
    \ $arr2[$j] == '(') {\n            $output .= '(';\n            $i++;\n      \
    \  } else if ($arr1[$i] == ')' && $arr2[$j] == ')') {\n            $output .=\
    \ ')';\n            $j++;\n        } else if ($arr1[$i] == ')' && $arr2[$j] ==\
    \ '(') {\n            $output .= '(';\n            $j++;\n        }\n    }\n \
    \   while ($i < $arr1length) {\n        $output .= $arr1[$i];\n        $i++;\n\
    \    }\n    while ($j < $arr2length) {\n        $output .= $arr2[$j];\n      \
    \  $j++;\n    }\n    $arr = str_split($output);\n    $i = 0;\n    $stack = [];\n\
    \    $length = count($arr);\n    while ($i < $length) {\n        if ($arr[$i]\
    \ == '(') {\n            array_push($stack, $arr[$i]);\n        } else if ($arr[$i]\
    \ == ')') {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \            } else {\n                return 'No';\n            }\n        }\n\
    \        $i++;\n    }\n    if (count($stack\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplrehntke.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $arr = [];\n    $arr1 = [];\n    foreach ($lst as $val) {\n        $arr\
    \ = str_split($val);\n        for ($i = 0; $i < count($arr); $i++) {\n       \
    \     if ($arr[$i] == '(') {\n                array_push($arr1, '(');\n      \
    \      } elseif ($arr[$i] == ')') {\n                if (empty($arr1)) {\n   \
    \                 array_push($arr1, ')');\n                } else {\n        \
    \            $x = array_pop($arr1);\n                }\n            }\n      \
    \  }\n    }\n    if (!empty($arr1)) {\n        return 'No';\n    } else {\n  \
    \      return 'Yes';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjb7dd98.php:42\n\
    Stack trace:\n#0 /tmp/tmpxjb7dd98.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpxjb7dd98.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$stack = 0;\n\tforeach ($lst as $s) {\n\t\tforeach (str_split($s) as $c)\
    \ {\n\t\t\tif ($c == '(') {\n\t\t\t\t$stack++;\n\t\t\t} else {\n\t\t\t\t$stack--;\n\
    \t\t\t}\n\t\t\tif ($stack < 0) {\n\t\t\t\treturn 'No';\n\t\t\t}\n\t\t}\n\t}\n\t\
    return ($stack == 0) ? 'Yes' : 'No';\n}\n$tests = [\n\t[['()(', ')'], 'Yes'],\n\
    \t[['))', ')'], 'No'],\n\t[['))', '))'], 'No'],\n\t[['())', '))'], 'No'],\n\t\
    [['((()))()((()((()))))', '((((((()))))()'], 'Yes'],\n\t[['(())((()()))(())',\
    \ '()(())))('], 'No'],\n\t[['())(())(', '(((()))'], 'No'],\n\t[['((((())))()',\
    \ '()))'], 'No'],\n\t[['((()', '()))'], 'Yes'],\n\t[['))', '((()'], 'No'],\n\t\
    [['))(', '))(((('], 'No'],\n\t[['((', ')))'], 'No'],\n\t[['((((())))()', '()))'],\
    \ 'No'],\n\t[['))((', '())))'], 'No'],\n\t[['(((((((()()()()()()()()()', ')))))))))'],\
    \ 'No'],\n\t[['()', '()()()()'], 'Yes'],\n\t[['()', '()(()))'], 'No'],\n\t[['))',\
    \ '((()'], 'No'],\n\t[['()', '())'], 'No'],\n\t[['(', '())'], 'No'],\n\t[['(((()',\
    \ '())))'], 'Yes'],\n\t[['()(', ')()'], 'Yes\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7ak61g4g.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $count = 0;\n  foreach ($lst as $str) {\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n      if ($str[$i] == '(') {\n        $count++;\n      } else {\n \
    \       $count--;\n      }\n      if ($count < 0) {\n        return 'No';\n  \
    \    }\n    }\n  }\n  return $count == 0 ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpunwblf2y.php:38\n\
    Stack trace:\n#0 /tmp/tmpunwblf2y.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpunwblf2y.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  // count the number of open parentheses and close parentheses in lst[0]\n\
    \  $open = $close = 0;\n  for ($i = 0; $i < strlen($lst[0]); $i++) {\n    if ($lst[0][$i]\
    \ == '(') $open++;\n    else if ($lst[0][$i] == ')') $close++;\n  }\n  // count\
    \ the number of open parentheses and close parentheses in lst[1]\n  for ($i =\
    \ 0; $i < strlen($lst[1]); $i++) {\n    if ($lst[1][$i] == '(') $open++;\n   \
    \ else if ($lst[1][$i] == ')') $close++;\n  }\n  // if the number of open parentheses\
    \ and close parentheses\n  // in lst[0] + lst[1] is even, we can create a good\
    \ string\n  return ($open + $close) % 2 ? 'No' : 'Yes';\n}\n\n$tests = [\n  [['()(',\
    \ ')'], 'Yes'],\n  [[')', ')'], 'No'],\n  [['(()())', '()(()'], 'Yes'],\n  [[')(',\
    \ ')('], 'No'],\n  [['(())()(()(', '()))'], 'Yes'],\n  [['((()', '((()())()'],\
    \ 'Yes'],\n  [['))', ')()'], 'No'],\n  [['))', '()()'], 'Yes'],\n  [['()()(((()))',\
    \ '((()(((())))'], 'Yes'],\n  [['()()(((()))', '((()((())))'], 'No'],\n  [['((()(()))',\
    \ ')()()('], 'No'],\n  [['(()(((())()))', ')((((()(()))))'], 'Yes'],\n  [['(()(((())()))',\
    \ ')((((()(())))'], 'No'],\n  [['(((()', '((()((()'], 'Yes'],\n  [['(((((', '\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplsbb6ek0.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $l = 0;\n    $r = 0;\n    foreach($lst as $e) {\n        foreach (str_split($e)\
    \ as $c) {\n            if ($c == '(') $l++;\n            else $l--;\n       \
    \     if ($l < 0) return 'No';\n        }\n    }\n    return $l == 0 ? 'Yes' :\
    \ 'No';\n}\necho match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')',\
    \ ')']) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8_gnmpn.php:35\n\
    Stack trace:\n#0 /tmp/tmpr8_gnmpn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr8_gnmpn.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open=0;\n    $close=0;\n    foreach($lst as $str){\n        for($i=0;$i<strlen($str);$i++){\n\
    \            if($str[$i]=='('){\n                $open++;\n            }\n   \
    \         else{\n                $close++;\n            }\n        }\n    }\n\
    \    if($open==$close){\n        return 'Yes';\n    }\n    else{\n        return\
    \ 'No';\n    }\n}\nprint_r(match_parens(['()(', ')']) . \"\\n\"); // 'Yes'\nprint_r(match_parens([')',\
    \ ')']) . \"\\n\"); // 'No'\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2qtk_9hq.php:49\n\
    Stack trace:\n#0 /tmp/tmp2qtk_9hq.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2qtk_9hq.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $first = $lst[0];\n    $second = $lst[1];\n    $good_first = substr_count($first,\
    \ '(') === substr_count($first, ')');\n    $good_second = substr_count($second,\
    \ '(') === substr_count($second, ')');\n    if ($good_first && $good_second) {\n\
    \        $both = $first . $second;\n        $good_both = substr_count($both, '(')\
    \ === substr_count($both, ')');\n        return $good_both ? 'Yes' : 'No';\n \
    \   }\n    if ($good_first) {\n        return substr_count($second, '(') <= substr_count($first,\
    \ '(') ? 'Yes' : 'No';\n    }\n    if ($good_second) {\n        return substr_count($first,\
    \ '(') <= substr_count($second, '(') ? 'Yes' : 'No';\n    }\n    return 'No';\n\
    }\n\n$match_parens = 'match_parens';\n$cases = [\n    [['()(', ')'], 'Yes'],\n\
    \    [[')', ')'], 'No'],\n    [['(())', '))'], 'Yes'],\n    [['((()', '))'], 'No'],\n\
    \    [['(())(', ')'], 'Yes'],\n    [['(())(', '))'], 'Yes'],\n    [['()()()(',\
    \ '))'], 'Yes'],\n    [['(()()()', ')))'], 'No'],\n    [['(((((((', '))))))))))'],\
    \ 'No'],\n    [['))))', '(((((((((((('], 'No'],\n    [['))))', '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8ib2hhvd.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = $lst[0];\n    $close = $lst[1];\n    if (substr_count($open,\
    \ '(') > substr_count($close, '(')) {\n        return 'Yes';\n    }\n    return\
    \ 'No';\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56m896pu.php:28\n\
    Stack trace:\n#0 /tmp/tmp56m896pu.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp56m896pu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = is_array($lst) ? $lst : func_get_args();\n    $first = array_shift($lst);\n\
    \    if (count($lst) == 0) {\n        return $first == '()' ? 'Yes' : 'No';\n\
    \    }\n    $second = array_shift($lst);\n    $pos = strpos($first, ')');\n  \
    \  if ($pos === false) {\n        return match_parens($first . $second, $lst);\n\
    \    }\n    $new = substr($first, 0, $pos) . $second . substr($first, $pos);\n\
    \    return match_parens($new, $lst);\n}\n\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp_zx2gm84.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $first = array_shift($lst);\n    $second = array_shift($lst);\n    $firstStack\
    \ = [];\n    $secondStack = [];\n    for ($i = 0; $i < strlen($first); $i++) {\n\
    \        if ($first[$i] == '(') {\n            array_push($firstStack, $first[$i]);\n\
    \        } else {\n            if (!empty($firstStack)) {\n                array_pop($firstStack);\n\
    \            } else {\n                array_push($firstStack, $first[$i]);\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < strlen($second); $i++)\
    \ {\n        if ($second[$i] == '(') {\n            array_push($secondStack, $second[$i]);\n\
    \        } else {\n            if (!empty($secondStack)) {\n                array_pop($secondStack);\n\
    \            } else {\n                array_push($secondStack, $second[$i]);\n\
    \            }\n        }\n    }\n    if (count($firstStack) == count($secondStack))\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\necho\
    \ match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')', ')']) . \"\\\
    n\";\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nYes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74w17uie.php:55\n\
    Stack trace:\n#0 /tmp/tmp74w17uie.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp74w17uie.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1 = build_string($str1);\n\
    \  $str2 = build_string($str2);\n  if (is_good($str1) && is_good($str2)) {\n \
    \   return 'Yes';\n  }\n  return 'No';\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function build_string()\
    \ in /tmp/tmpv_6v580u.php:16\nStack trace:\n#0 /tmp/tmpv_6v580u.php(25): match_parens(Array)\n\
    #1 /tmp/tmpv_6v580u.php(29): candidate(Array)\n#2 /tmp/tmpv_6v580u.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv_6v580u.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str = $lst[0] . $lst[1];\n    if (strlen($str) % 2 != 0) {\n       \
    \ return 'No';\n    }\n    $count = 0;\n    for ($i = 0; $i < strlen($str); $i++)\
    \ {\n        if ($str[$i] == '(') {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ 'No';\n        }\n    }\n    return 'Yes';\n}\n\nprint_r(match_parens(['()(',\
    \ ')']));\nprint_r(match_parens([')', ')']));\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "YesNo\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ny1p6g5.php:42\n\
    Stack trace:\n#0 /tmp/tmp4ny1p6g5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4ny1p6g5.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $openParens = 0;\n    $closeParens = 0;\n    $string1 = $lst[0];\n  \
    \  $string2 = $lst[1];\n    for ($i = 0; $i < strlen($string1); $i++) {\n    \
    \    if ($string1[$i] == '(') {\n            $openParens++;\n        } else {\n\
    \            $closeParens++;\n        }\n    }\n    for ($i = 0; $i < strlen($string2);\
    \ $i++) {\n        if ($string2[$i] == '(') {\n            $openParens++;\n  \
    \      } else {\n            $closeParens++;\n        }\n    }\n    if ($openParens\
    \ == $closeParens) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv4tbc0zi.php:52\n\
    Stack trace:\n#0 /tmp/tmpv4tbc0zi.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpv4tbc0zi.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s = '';\n    foreach ($lst as $item) {\n        $s .= $item;\n    }\n\
    \    $r = substr_count($s, '(') - substr_count($s, ')');\n    if ($r === 0) {\n\
    \        return 'Yes';\n    }\n    return 'No';\n}\n\necho match_parens(['()(',\
    \ ')']) . PHP_EOL; // 'Yes'\necho match_parens([')', ')']) . PHP_EOL; // 'No'\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg94j7r75.php:41\n\
    Stack trace:\n#0 /tmp/tmpg94j7r75.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpg94j7r75.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  $l = strlen($s1);\n  $r = strlen($s2);\n\
    \  for ($i = 0; $i < $l; $i++) {\n    for ($j = 0; $j < $r; $j++) {\n      $str\
    \ = $s1 . $s2;\n      if (check_parens($str)) {\n        return 'Yes';\n     \
    \ }\n      $s2 = $s2[$j] . substr($s2, 0, $j) . substr($s2, $j + 1);\n    }\n\
    \    $s1 = $s1[$i] . substr($s1, 0, $i) . substr($s1, $i + 1);\n  }\n  return\
    \ 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_parens()\
    \ in /tmp/tmp3b4h7loe.php:21\nStack trace:\n#0 /tmp/tmp3b4h7loe.php(32): match_parens(Array)\n\
    #1 /tmp/tmp3b4h7loe.php(36): candidate(Array)\n#2 /tmp/tmp3b4h7loe.php(50): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3b4h7loe.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s = '';\n    for ($i = 0; $i\
    \ < strlen($s1); $i++) {\n        $s .= $s1[$i];\n        if ($s2) {\n       \
    \     $s .= $s2[0];\n            $s2 = substr($s2, 1);\n        }\n    }\n   \
    \ $s .= $s2;\n    $level = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n   \
    \     if ($s[$i] == '(') {\n            $level++;\n        } else {\n        \
    \    $level--;\n        }\n        if ($level < 0) {\n            return 'No';\n\
    \        }\n    }\n    return 'Yes';\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpazil94__.php:43\n\
    Stack trace:\n#0 /tmp/tmpazil94__.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpazil94__.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $new_str = \"\";\n    $temp\
    \ = str_split($str1);\n    $stack = [];\n    while(count($temp) != 0) {\n    \
    \    $x = array_pop($temp);\n        if ($x == \"(\") {\n            array_push($stack,\
    \ $x);\n        } else {\n            if(count($stack) != 0) {\n             \
    \   array_pop($stack);\n            } else {\n                $new_str .= $x;\n\
    \            }\n        }\n    }\n    $new_str = strrev($new_str);\n    if(check_parens($new_str\
    \ . $str2)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_parens()\
    \ in /tmp/tmpondzqoip.php:32\nStack trace:\n#0 /tmp/tmpondzqoip.php(40): match_parens(Array)\n\
    #1 /tmp/tmpondzqoip.php(44): candidate(Array)\n#2 /tmp/tmpondzqoip.php(58): test()\n\
    #3 {main}\n  thrown in /tmp/tmpondzqoip.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $n1 = strlen($lst[0]);\n    $n2 = strlen($lst[1]);\n    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $prev_count\
    \ = 0;\n    $count2 = 0;\n    $prev_count2 = 0;\n    while ($i < $n1 && $j < $n2)\
    \ {\n        if ($str1[$i] == '(') {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n        if ($str2[$j] == '(') {\n         \
    \   $count2++;\n        } else {\n            $count2--;\n        }\n        if\
    \ ($count < 0 || $count2 < 0) {\n            return 'No';\n        }\n       \
    \ if ($count == 0 && $count2 == 0) {\n            if ($prev_count > 0 && $prev_count2\
    \ < 0) {\n                $prev_count += $prev_count2;\n                $prev_count2\
    \ = 0;\n            }\n            if ($prev_count2 > 0 && $prev_count < 0) {\n\
    \                $prev_count2 += $prev_count;\n                $prev_count = 0;\n\
    \            }\n            if ($prev_count != 0 || $prev_count2 != 0) {\n   \
    \             return 'No';\n            }\n        }\n        $i++;\n        $j++;\n\
    \    }\n    if ($i < $n1) {\n        $str = $str1;\n        $n = $n1;\n      \
    \  $count = $count;\n        $prev_count = $prev_count;\n    } else {\n      \
    \  $str = $str2;\n        $n = $n2;\n        $count = $count2;\n        $prev_count\
    \ = $prev_count2;\n    }\n    while ($i < $n) {\n        if ($str[$i] == '(')\
    \ {\n            $count++;\n        } else {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            return\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcyluj1at.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $lhs = $lst[0];\n  $rhs = $lst[1];\n  $lhs_right = array_count_values($lhs)[')'];\n\
    \  $rhs_left = array_count_values($rhs)['('];\n  $lhs_left = strlen($lhs) - $lhs_right;\n\
    \  $rhs_right = strlen($rhs) - $rhs_left;\n  if ($lhs_left < $rhs_right || $lhs_right\
    \ < $rhs_left) {\n    return 'No';\n  }\n  return 'Yes';\n}\n\necho match_parens(['()(',\
    \ ')']) . \"\\n\";\necho match_parens([')', ')']) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_count_values() expects parameter 1 to be array, string\
    \ given in /tmp/tmpf2f8xgho.php on line 16\n\nWarning: array_count_values() expects\
    \ parameter 1 to be array, string given in /tmp/tmpf2f8xgho.php on line 17\nYes\n\
    \nWarning: array_count_values() expects parameter 1 to be array, string given\
    \ in /tmp/tmpf2f8xgho.php on line 16\n\nWarning: array_count_values() expects\
    \ parameter 1 to be array, string given in /tmp/tmpf2f8xgho.php on line 17\nYes\n\
    \nWarning: array_count_values() expects parameter 1 to be array, string given\
    \ in /tmp/tmpf2f8xgho.php on line 16\n\nWarning: array_count_values() expects\
    \ parameter 1 to be array, string given in /tmp/tmpf2f8xgho.php on line 17\n\n\
    Warning: array_count_values() expects parameter 1 to be array, string given in\
    \ /tmp/tmpf2f8xgho.php on line 16\n\nWarning: array_count_values() expects parameter\
    \ 1 to be array, string given in /tmp/tmpf2f8xgho.php on line 17\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpf2f8xgho.php:34\nStack trace:\n\
    #0 /tmp/tmpf2f8xgho.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpf2f8xgho.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$lst[0] = preg_replace(\"/\\(\\)/\", \"\", $lst[0]);\n\t$lst[1] = preg_replace(\"\
    /\\(\\)/\", \"\", $lst[1]);\n\t$str = $lst[0] . $lst[1];\n\twhile (strlen($str)\
    \ > 0) {\n\t\t$len = strlen($str);\n\t\t$str = preg_replace(\"/\\(\\)/\", \"\"\
    , $str);\n\t\tif ($len == strlen($str)) {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\t\
    return \"Yes\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1dxyaa1.php:35\n\
    Stack trace:\n#0 /tmp/tmpt1dxyaa1.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpt1dxyaa1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    if(count($lst) != 2) {\n        return 'No';\n    }\n    $parentheses\
    \ = array('(', ')');\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n\
    \    if(array_diff($lst[0], $parentheses) != [] || array_diff($lst[1], $parentheses)\
    \ != []) {\n        return 'No';\n    }\n    $str = \"\";\n    $parentheses =\
    \ [0, 0];\n    $str .= array_shift($lst[0]);\n    $parentheses[array_search($str[0],\
    \ $parentheses)]++;\n    $str .= array_shift($lst[1]);\n    $parentheses[array_search($str[1],\
    \ $parentheses)]++;\n    if($parentheses[0] > $parentheses[1]) {\n        return\
    \ 'No';\n    }\n    $l = 0;\n    $r = 0;\n    while(count($lst[0]) > 0) {\n  \
    \      $str .= array_shift($lst[0]);\n        $parentheses[array_search($str[strlen($str)\
    \ - 1], $parentheses)]++;\n        if($parentheses[0] > $parentheses[1]) {\n \
    \           return 'No';\n        }\n    }\n    while(count($lst[1]) > 0) {\n\
    \        $str .= array_shift($lst[1]);\n        $parentheses[array_search($str[strlen($str)\
    \ - 1], $parentheses)]++;\n        if($parentheses[0] > $parentheses[1]) {\n \
    \           return 'No';\n        }\n    }\n    if($parentheses[0] != $parentheses[1])\
    \ {\n        return 'No';\n    }\n    return 'Yes';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd6bllj7a.php:59\n\
    Stack trace:\n#0 /tmp/tmpd6bllj7a.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpd6bllj7a.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $parens = [\n        'open' => ['(', ')'],\n        'close' => [')',\
    \ '(']\n    ];\n    $result = [];\n    foreach ($lst as $str) {\n        $start\
    \ = $parens['open'][1];\n        $end = $parens['close'][1];\n        $stack =\
    \ [$start];\n        foreach (str_split($str) as $c) {\n            if ($c ===\
    \ $start) {\n                array_push($stack, $c);\n            } else {\n \
    \               if ($stack[count($stack) - 1] === $start) {\n                \
    \    array_pop($stack);\n                } else {\n                    return\
    \ 'No';\n                }\n            }\n        }\n        $result[] = $stack;\n\
    \    }\n    return $result[0][0] === $parens['open'][1] && $result[1][0] === $parens['close'][1]\
    \ ? 'Yes' : 'No';\n}\n\n$tests = [\n    [['()(', ')'], 'Yes'],\n    [[')', ')'],\
    \ 'No'],\n    [['()', '()'], 'Yes'],\n    [['()', '('], 'No'],\n    [['(()', ')'],\
    \ 'Yes'],\n    [['()', '))'], 'No'],\n    [['()', '((()))'], 'Yes'],\n    [['((((((',\
    \ '))))))'], 'Yes'],\n    [['(()', '((((((('], 'No'],\n    [['((()', '))'], 'Yes'],\n\
    \    [['((((', '))))'], 'Yes'],\n    [['(()', '((((((('], 'No'],\n    [['(', ')'],\
    \ 'Yes'],\n    [['()', ')'], 'No'],\n    [['(', '())'], 'Yes'],\n    [['(()',\
    \ ')'], 'Yes'],\n    [['(()', ')'], 'Yes'],\n    [['()((()))(', '())'], 'Yes'],\n\
    \    [['((\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppbvhnxib.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str3 = $str1 . $str2;\n\
    \    $count = 0;\n    for ($i = 0; $i < strlen($str3); $i++) {\n        if ($str3[$i]\
    \ == '(') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return 'No';\n        }\n \
    \   }\n    if ($count != 0) {\n        return 'No';\n    }\n    return 'Yes';\n\
    }\n\necho match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')', ')'])\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0bo9xt2.php:44\n\
    Stack trace:\n#0 /tmp/tmpt0bo9xt2.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpt0bo9xt2.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    // determine if it is possible to concatenate two strings\n    // such\
    \ that the resultant string is good\n    // a string is good if all of its parentheses\
    \ are balanced\n    // if any paren is open, we must have at least one closing\
    \ paren\n    // return the string \"Yes\" if a good string can be formed\n   \
    \ // else, return \"No\"\n    // so we have a list of two strings\n    // if any\
    \ string is empty, we have an empty string\n    // if both strings are empty,\
    \ we have an empty string\n    // if neither string is empty, we have at least\
    \ one open and one close paren\n    // if we have an even number of parens and\
    \ at least one open paren and\n    // one close paren, it's possible to balance\
    \ them\n    // so, check for at least one open and one close paren and even number\n\
    \    // of total parens\n    $total = 0;\n    $open = 0;\n    $close = 0;\n  \
    \  foreach ($lst as $str) {\n        $len = strlen($str);\n        for ($i = 0;\
    \ $i < $len; $i++) {\n            if ($str[$i] == '(') {\n                $open++;\n\
    \            } else {\n                $close++;\n            }\n            $total++;\n\
    \        }\n    }\n    // if we have an even number of total parens and we have\
    \ at least one\n    // open and one close paren, we can balance them\n    if ($total\
    \ % 2 == 0 && $open > 0 && $close > 0) {\n        return 'Yes';\n    }\n    return\
    \ 'No';\n}\necho match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')',\
    \ ')']) . \"\\n\";\necho match_parens(['', '']) . \"\\n\";\necho match_parens(['',\
    \ ')()']) . \"\\n\";\necho match_parens(['(', ')()']) . \"\\n\";\necho match_parens(['(()',\
    \ ')']) . \"\\n\";\necho match_parens(['(()', '))']) . \"\\n\";\necho match_parens(['))',\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjqj27hrr.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $left = 0;\n    $right = 0;\n\
    \    for ($i = 0; $i < strlen($s1); $i++) {\n        if ($s1[$i] == '(') {\n \
    \           $left++;\n        } else {\n            $right++;\n        }\n   \
    \ }\n    for ($i = 0; $i < strlen($s2); $i++) {\n        if ($s2[$i] == '(') {\n\
    \            $left++;\n        } else {\n            $right++;\n        }\n  \
    \  }\n    if ($left != $right) {\n        return 'No';\n    } else {\n       \
    \ return 'Yes';\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuqbw5iei.php:53\n\
    Stack trace:\n#0 /tmp/tmpuqbw5iei.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpuqbw5iei.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $l = str_split($lst[0]);\n  $r = str_split($lst[1]);\n  $result = '';\n\
    \  while (!empty($l) || !empty($r)) {\n    if (end($l) == '(' && end($r) == ')')\
    \ {\n      array_pop($l);\n      array_pop($r);\n    } else if (end($l) == '(')\
    \ {\n      $result .= '(';\n      array_pop($l);\n    } else if (end($r) == ')')\
    \ {\n      $result .= ')';\n      array_pop($r);\n    }\n  }\n  $result = $lst[0]\
    \ . $result . $lst[1];\n  $stack = [];\n  for ($i = 0; $i < strlen($result); $i++)\
    \ {\n    if ($result[$i] == '(') array_push($stack, $result[$i]);\n    else if\
    \ ($result[$i] == ')') {\n      if (empty($stack)) return 'No';\n      array_pop($stack);\n\
    \    }\n  }\n  return empty($stack) ? 'Yes' : 'No';\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    $open_lst = [];\n    $close_lst = [];\n\
    \    for ($i = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(')\
    \ {\n            $open_lst[] = '(';\n            $open++;\n        } else {\n\
    \            $close_lst[] = ')';\n            $close++;\n        }\n    }\n  \
    \  for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if ($lst[1][$i] == '(')\
    \ {\n            $open_lst[] = '(';\n            $open++;\n        } else {\n\
    \            $close_lst[] = ')';\n            $close++;\n        }\n    }\n  \
    \  if ($open != $close) {\n        return 'No';\n    }\n    $temp = [];\n    $open\
    \ = 0;\n    $close = 0;\n    for ($i = 0; $i < count($open_lst); $i++) {\n   \
    \     if ($open_lst[$i] == '(') {\n            $open++;\n        } else {\n  \
    \          $close++;\n        }\n        if ($open < $close) {\n            return\
    \ 'No';\n        }\n    }\n    return 'Yes';\n}\necho match_parens(['()(', ')'])\
    \ . \"\\n\";\necho match_parens([')', ')']) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwk0h7qjo.php:71\n\
    Stack trace:\n#0 /tmp/tmpwk0h7qjo.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpwk0h7qjo.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    list($a, $b) = $lst;\n    $c = 0;\n    $a = str_split($a);\n    $b =\
    \ str_split($b);\n    foreach($a as $s) {\n        if ($s == '(') $c++;\n    \
    \    else $c--;\n        if ($c < 0) return 'No';\n    }\n    foreach($b as $s)\
    \ {\n        if ($s == '(') $c++;\n        else $c--;\n        if ($c < 0) return\
    \ 'No';\n    }\n    return $c == 0 ? 'Yes' : 'No';\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv26gvw0_.php:38\n\
    Stack trace:\n#0 /tmp/tmpv26gvw0_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpv26gvw0_.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = str_split($lst[0]);\n    $str2 = str_split($lst[1]);\n    $str1_index\
    \ = 0;\n    $str2_index = 0;\n    $str1_length = count($str1);\n    $str2_length\
    \ = count($str2);\n    $current_string = $str1;\n    $current_string_index = &$str1_index;\n\
    \    $current_string_length = &$str1_length;\n    $open_parens = 0;\n    while\
    \ ($current_string_index < $current_string_length) {\n        $current_char =\
    \ $current_string[$current_string_index];\n        if ($current_char == '(') {\n\
    \            $open_parens++;\n        } elseif ($current_char == ')') {\n    \
    \        $open_parens--;\n        }\n        if ($open_parens < 0) {\n       \
    \     return 'No';\n        }\n        $current_string_index++;\n        if ($current_string_index\
    \ == $current_string_length) {\n            if ($current_string == $str1) {\n\
    \                $current_string = $str2;\n                $current_string_index\
    \ = &$str2_index;\n                $current_string_length = &$str2_length;\n \
    \           } else {\n                break;\n            }\n        }\n    }\n\
    \    if ($open_parens > 0) {\n        return 'No';\n    }\n    return 'Yes';\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbge2iie.php:58\n\
    Stack trace:\n#0 /tmp/tmphbge2iie.php(69): test()\n#1 {main}\n  thrown in /tmp/tmphbge2iie.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    $left_lst = 0;\n    $right_lst = 0;\n\
    \    for ($i = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(')\
    \ {\n            $left++;\n        } else {\n            $right++;\n        }\n\
    \    }\n    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if ($lst[1][$i]\
    \ == '(') {\n            $left_lst++;\n        } else {\n            $right_lst++;\n\
    \        }\n    }\n    if ($left == $right_lst && $right == $left_lst) {\n   \
    \     return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\necho match_parens(['()(',\
    \ ')']) . \"\\n\"; // Yes\necho match_parens([')', ')']) . \"\\n\"; // No\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_fcrvfqa.php:46\n\
    Stack trace:\n#0 /tmp/tmp_fcrvfqa.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp_fcrvfqa.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $strs = [\n        $lst[0],\n        $lst[1],\n        $lst[0] . $lst[1],\n\
    \        $lst[1] . $lst[0],\n    ];\n    foreach ($strs as $str) {\n        if\
    \ (good($str)) {\n            return 'Yes';\n        }\n    }\n    return 'No';\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function good() in /tmp/tmpscfjml8y.php:21\n\
    Stack trace:\n#0 /tmp/tmpscfjml8y.php(28): match_parens(Array)\n#1 /tmp/tmpscfjml8y.php(32):\
    \ candidate(Array)\n#2 /tmp/tmpscfjml8y.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpscfjml8y.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $l = 0;\n    $r = 0;\n    foreach($lst as $k => $v) {\n        $l +=\
    \ substr_count($v, '(');\n        $r += substr_count($v, ')');\n    }\n    if\
    \ ($l == $r) {\n        return 'Yes';\n    }\n    return 'No';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpru7chiys.php:40\n\
    Stack trace:\n#0 /tmp/tmpru7chiys.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpru7chiys.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $s = '';\n  foreach ($lst as $str) {\n    $s .= $str;\n  }\n  $arr = [];\n\
    \  $count = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    if ($s[$i] == '(')\
    \ {\n      $count++;\n    } else {\n      $count--;\n    }\n    if ($count < 0)\
    \ {\n      return 'No';\n    }\n  }\n  if ($count == 0) {\n    return 'Yes';\n\
    \  } else {\n    return 'No';\n  }\n}\n\necho match_parens(['()(', ')']) . \"\\\
    n\";\necho match_parens([')', ')']) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuot887su.php:47\n\
    Stack trace:\n#0 /tmp/tmpuot887su.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpuot887su.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $result = 'Yes';\n  $lst[0] = str_split($lst[0]);\n  $lst[1] = str_split($lst[1]);\n\
    \  $left = $right = 0;\n  $left1 = count(array_filter($lst[0], function($char)\
    \ {\n    return $char == '(';\n  }));\n  $right1 = count(array_filter($lst[0],\
    \ function($char) {\n    return $char == ')';\n  }));\n  $left2 = count(array_filter($lst[1],\
    \ function($char) {\n    return $char == '(';\n  }));\n  $right2 = count(array_filter($lst[1],\
    \ function($char) {\n    return $char == ')';\n  }));\n  if($left1 == $right1)\
    \ {\n    $left = $left2;\n    $right = $right2;\n  } else if($left2 == $right2)\
    \ {\n    $left = $left1;\n    $right = $right1;\n  } else {\n    $result = 'No';\n\
    \  }\n  if($result != 'No') {\n    if($left < $right) {\n      $result = 'No';\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfz_schr.php:51\n\
    Stack trace:\n#0 /tmp/tmpmfz_schr.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpmfz_schr.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $lst[0] = str_split($lst[0]);\n  $lst[1] = str_split($lst[1]);\n  $str\
    \ = '';\n  $open = 0;\n  foreach ($lst[0] as $i) {\n    if ($i == '(') $open++;\n\
    \    elseif ($i == ')') $open--;\n    $str .= $i;\n  }\n  foreach ($lst[1] as\
    \ $i) {\n    if ($i == '(') $open++;\n    elseif ($i == ')') $open--;\n    $str\
    \ .= $i;\n  }\n  return $open == 0 ? 'Yes' : 'No';\n}\necho match_parens(['()(',\
    \ ')']) . PHP_EOL;\necho match_parens([')', ')']) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpffcp5s1p.php:46\n\
    Stack trace:\n#0 /tmp/tmpffcp5s1p.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpffcp5s1p.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $left = [];\n  $right = [];\n  foreach ($lst as $str) {\n    $left[] =\
    \ substr_count($str, '(');\n    $right[] = substr_count($str, ')');\n  }\n  if\
    \ ($left[0] > $right[0] && $left[1] > $right[1]) return 'Yes';\n  if ($left[0]\
    \ < $right[0] && $left[1] < $right[1]) return 'Yes';\n  return 'No';\n}\necho\
    \ match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')', ')']) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nYes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1mzxtsjv.php:31\n\
    Stack trace:\n#0 /tmp/tmp1mzxtsjv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1mzxtsjv.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    if (count($lst) < 2) return 'No';\n    $stack1 = [];\n    $stack2 = [];\n\
    \    $str1 = $lst[0];\n    $str2 = $lst[1];\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            array_push($stack1, $str1[$i]);\n\
    \        } else if ($str1[$i] == ')') {\n            if (count($stack1) == 0)\
    \ return 'No';\n            array_pop($stack1);\n        }\n    }\n    for ($i\
    \ = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n        \
    \    array_push($stack2, $str2[$i]);\n        } else if ($str2[$i] == ')') {\n\
    \            if (count($stack2) == 0) return 'No';\n            array_pop($stack2);\n\
    \        }\n    }\n    $stack = [];\n    while (count($stack1) > 0) {\n      \
    \  array_push($stack, array_pop($stack1));\n    }\n    while (count($stack2) >\
    \ 0) {\n        array_push($stack, array_pop($stack2));\n    }\n    if (count($stack)\
    \ == 0) return 'Yes';\n    if (count($stack) % 2 == 1) return 'No';\n    $pos\
    \ = 1;\n    $nxt = count($stack) - 1;\n    while ($pos < $nxt) {\n        if ($stack[$pos]\
    \ == '(' && $stack[$nxt] == ')') {\n            $pos += 2;\n            $nxt -=\
    \ 2;\n        } else {\n            return 'No';\n        }\n    }\n    return\
    \ 'Yes';\n}\necho match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')',\
    \ ')']) . \"\\n\";\necho match_parens(['(()', ')']) . \"\\n\";\necho match_parens(['()',\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmputhzyi14.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $start = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++) {\n       \
    \ if ($lst[0][$i] == '(') {\n            $start++;\n        } else {\n       \
    \     $start--;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]); $i++)\
    \ {\n        if ($lst[1][$i] == '(') {\n            $start++;\n        } else\
    \ {\n            $start--;\n        }\n    }\n    if ($start == 0) {\n       \
    \ return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxprddr_.php:50\n\
    Stack trace:\n#0 /tmp/tmprxprddr_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmprxprddr_.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') $left++;\n\
    \            else $right++;\n        }\n    }\n    if ($left == $right) return\
    \ 'Yes';\n    else return 'No';\n}\n\necho match_parens(['()(', ')']) . \"\\n\"\
    ;\necho match_parens([')', ')']) . \"\\n\";\necho match_parens(['()(', ')']) .\
    \ \"\\n\";\necho match_parens(['()(()(', '()))']) . \"\\n\";\necho match_parens(['()(()',\
    \ ')()']) . \"\\n\";\necho match_parens(['(()(()(', '()))))']) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\nYes\nYes\nYes\nNo\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpj0f_f5xs.php:46\nStack trace:\n#0 /tmp/tmpj0f_f5xs.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmpj0f_f5xs.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$lst = join('', $lst);\n\t$cnt = 0;\n\tfor ($i = 0; $i < strlen($lst);\
    \ $i++) {\n\t\tif ($lst[$i] == '(') {\n\t\t\t$cnt++;\n\t\t} else {\n\t\t\t$cnt--;\n\
    \t\t}\n\t\tif ($cnt < 0) {\n\t\t\treturn 'No';\n\t\t}\n\t}\n\treturn $cnt ? 'No'\
    \ : 'Yes';\n}\n\necho match_parens(['()(', ')']).\"\\n\";\necho match_parens([')',\
    \ ')']).\"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv77w5rsx.php:39\n\
    Stack trace:\n#0 /tmp/tmpv77w5rsx.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpv77w5rsx.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1 = make_good($str1);\n  $str2\
    \ = make_good($str2);\n  if ($str1 && $str2) {\n    return 'Yes';\n  } else {\n\
    \    return 'No';\n  }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function make_good() in\
    \ /tmp/tmprlovbb8q.php:16\nStack trace:\n#0 /tmp/tmprlovbb8q.php(25): match_parens(Array)\n\
    #1 /tmp/tmprlovbb8q.php(29): candidate(Array)\n#2 /tmp/tmprlovbb8q.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmprlovbb8q.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $open1 = 0;\n  $open2 = 0;\n  for\
    \ ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == '(') {\n      $open1++;\n\
    \    } else {\n      $open1--;\n    }\n    if ($open1 < 0) {\n      return 'No';\n\
    \    }\n  }\n  for ($i = 0; $i < strlen($str2); $i++) {\n    if ($str2[$i] ==\
    \ '(') {\n      $open2++;\n    } else {\n      $open2--;\n    }\n    if ($open2\
    \ < 0) {\n      return 'No';\n    }\n  }\n  if ($open1 == 0 && $open2 == 0) {\n\
    \    return 'Yes';\n  }\n  if ($open1 != 0 && $open2 != 0) {\n    return 'No';\n\
    \  }\n  if ($open1 != 0) {\n    $str = $str1 . $str2;\n    $open = $open1;\n \
    \ } else {\n    $str = $str2 . $str1;\n    $open = $open2;\n  }\n  $count = 0;\n\
    \  for ($i = 0; $i < strlen($str); $i++) {\n    if ($str[$i] == '(') {\n     \
    \ $count++;\n    } else {\n      $count--;\n    }\n    if ($count < 0) {\n   \
    \   return 'No';\n    }\n  }\n  if ($count == $open) {\n    return 'Yes';\n  }\n\
    \  return 'No';\n}\necho match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')',\
    \ ')']) . \"\\n\";\necho match_parens(['()(', '))']) . \"\\n\";\necho match_parens(['()(',\
    \ '())']) . \"\\n\";\necho match_parens(['())(', ')(']) . \"\\n\";\necho match\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfiliqrup.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $list = $lst;\n  $test = implode('', $list);\n  $test = str_split($test);\n\
    \  $last = count($test) - 1;\n  $first = $test[0];\n  $last_item = $test[$last];\n\
    \  if($first == ')' && $last_item == '(') {\n    return 'No';\n  } elseif ($first\
    \ == ')' && $last_item == ')') {\n    $test[0] = '';\n    $test[$last] = '';\n\
    \    $test = implode('', $test);\n    $test = str_split($test);\n    $count =\
    \ count($test);\n    $sum = 0;\n    for($i = 0; $i < $count; $i++) {\n      if($test[$i]\
    \ == '(') {\n        $sum += 1;\n      } elseif ($test[$i] == ')') {\n       \
    \ $sum -= 1;\n      }\n    }\n    if($sum == 0) {\n      return 'Yes';\n    }\
    \ else {\n      return 'No';\n    }\n  } elseif ($first == '(' && $last_item ==\
    \ ')') {\n    $test[0] = '';\n    $test[$last] = '';\n    $test = implode('',\
    \ $test);\n    $test = str_split($test);\n    $count = count($test);\n    $sum\
    \ = 0;\n    for($i = 0; $i < $count; $i++) {\n      if($test[$i] == '(') {\n \
    \       $sum += 1;\n      } elseif ($test[$i] == ')') {\n        $sum -= 1;\n\
    \      }\n    }\n    if($sum == 0) {\n      return 'Yes';\n    } else {\n    \
    \  return 'No';\n    }\n  } elseif ($first == '(' && $last_item == '(') {\n  \
    \  $test[0] = '';\n    $test[$last] = '';\n    $test = implode('', $test);\n \
    \   $test = str_split($test);\n    $\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpam84l4vf.php on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $openned = 0;\n  foreach($lst as $s) {\n    $openned += substr_count($s,\
    \ '(') - substr_count($s, ')');\n    if ($openned < 0) {\n      return 'No';\n\
    \    }\n  }\n  return 'Yes';\n}\n\necho match_parens(['()(', ')']) . PHP_EOL;\n\
    echo match_parens([')', ')']) . PHP_EOL;\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0o2u14h1.php:34\n\
    Stack trace:\n#0 /tmp/tmp0o2u14h1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0o2u14h1.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $a = $lst[0];\n    $b = $lst[1];\n    $s = '';\n    for ($i = 0; $i <\
    \ strlen($a); $i++) {\n        $s .= $a[$i];\n        if (valid($s)) {\n     \
    \       $s = '';\n        }\n    }\n    $s .= $b;\n    return valid($s) ? 'Yes'\
    \ : 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function valid() in /tmp/tmpmggkvfsc.php:19\n\
    Stack trace:\n#0 /tmp/tmpmggkvfsc.php(28): match_parens(Array)\n#1 /tmp/tmpmggkvfsc.php(32):\
    \ candidate(Array)\n#2 /tmp/tmpmggkvfsc.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpmggkvfsc.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1Count = 0;\n    $str2Count\
    \ = 0;\n    $str1Rev = strrev($str1);\n    $str2Rev = strrev($str2);\n    for\
    \ ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n    \
    \        $str1Count++;\n        } else {\n            $str1Count--;\n        }\n\
    \        if ($str1Count < 0) {\n            return 'No';\n        }\n    }\n \
    \   for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n\
    \            $str2Count++;\n        } else {\n            $str2Count--;\n    \
    \    }\n        if ($str2Count < 0) {\n            return 'No';\n        }\n \
    \   }\n    $str2Count = $str1Count + $str2Count;\n    for ($i = 0; $i < strlen($str1Rev);\
    \ $i++) {\n        if ($str1Rev[$i] == ')') {\n            $str1Count++;\n   \
    \     } else {\n            $str1Count--;\n        }\n        if ($str1Count <\
    \ 0) {\n            return 'No';\n        }\n    }\n    for ($i = 0; $i < strlen($str2Rev);\
    \ $i++) {\n        if ($str2Rev[$i] == ')') {\n            $str2Count++;\n   \
    \     } else {\n            $str2Count--;\n        }\n        if ($str2Count <\
    \ 0) {\n            return 'No';\n        }\n    }\n    return 'Yes';\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvud084_.php:68\n\
    Stack trace:\n#0 /tmp/tmpdvud084_.php(82): test()\n#1 {main}\n  thrown in /tmp/tmpdvud084_.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $open_parens = 0;\n  $res = 'Yes';\n  $parens = ['(' => 1, ')' => -1];\n\
    \  for ($i = 0; $i < strlen($lst[0]); $i++) {\n    $open_parens += $parens[$lst[0][$i]];\n\
    \    if ($open_parens < 0) {\n      $res = 'No';\n      break;\n    }\n  }\n \
    \ if ($res === 'Yes') {\n    for ($i = 0; $i < strlen($lst[1]); $i++) {\n    \
    \  $open_parens += $parens[$lst[1][$i]];\n      if ($open_parens < 0) {\n    \
    \    $res = 'No';\n        break;\n      }\n    }\n  }\n  return $res;\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeqp63zgt.php:44\n\
    Stack trace:\n#0 /tmp/tmpeqp63zgt.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpeqp63zgt.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $left = $lst[0];\n  $right = $lst[1];\n  $total = 0;\n  for ($i = 0; $i\
    \ < strlen($left); $i++) {\n    if ($left[$i] == '(') {\n      $total++;\n   \
    \ } else {\n      $total--;\n    }\n    if ($total < 0) {\n      return 'No';\n\
    \    }\n  }\n  for ($i = 0; $i < strlen($right); $i++) {\n    if ($right[$i] ==\
    \ '(') {\n      $total++;\n    } else {\n      $total--;\n    }\n    if ($total\
    \ < 0) {\n      return 'No';\n    }\n  }\n  return $total == 0 ? 'Yes' : 'No';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfuivjv8.php:48\n\
    Stack trace:\n#0 /tmp/tmplfuivjv8.php(59): test()\n#1 {main}\n  thrown in /tmp/tmplfuivjv8.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $l1 = $lst[0];\n    $l2 = $lst[1];\n    $l1_len = strlen($l1);\n    $l2_len\
    \ = strlen($l2);\n    if ($l1_len % 2 == 1) {\n        if ($l2_len % 2 == 1) {\n\
    \            return 'No';\n        } else {\n            return 'Yes';\n     \
    \   }\n    } else {\n        if ($l2_len % 2 == 1) {\n            return 'Yes';\n\
    \        } else {\n            return 'No';\n        }\n    }\n}\n\nprint(match_parens(['()(',\
    \ ')']) . \"\\n\");\nprint(match_parens([')', ')']) . \"\\n\");\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpef746ifx.php:40\n\
    Stack trace:\n#0 /tmp/tmpef746ifx.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpef746ifx.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lefts = 0;\n    $rights = 0;\n    foreach($lst as $s) {\n        $n\
    \ = strlen($s);\n        for($i = 0; $i < $n; $i++) {\n            if($s[$i] ==\
    \ '(') {\n                $lefts++;\n            } else {\n                $rights++;\n\
    \            }\n        }\n    }\n    if($lefts > $rights) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpno4aspv9.php:38\n\
    Stack trace:\n#0 /tmp/tmpno4aspv9.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpno4aspv9.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$left = array_shift($lst);\n\t$right = array_shift($lst);\n\t$str = $left\
    \ . $right;\n\t$len = strlen($str);\n\t$count = 0;\n\tfor ($i = 0; $i < $len;\
    \ $i++) {\n\t\tif ($str[$i] == '(') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn 'No';\n\t\t}\n\t}\n\treturn $count\
    \ == 0 ? 'Yes' : 'No';\n}\necho match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')',\
    \ ')']) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2af2l6r.php:41\n\
    Stack trace:\n#0 /tmp/tmpp2af2l6r.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpp2af2l6r.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = preg_replace(\"/\\(/\", \")\", $lst[0]);\n    $str = implode(\"\
    \", $lst);\n    if (preg_match(\"/\\(\\)/\", $str)) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpobof58au.php:28\n\
    Stack trace:\n#0 /tmp/tmpobof58au.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpobof58au.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$str1 = $lst[0];\n\t$str2 = $lst[1];\n\t$len1 = strlen($str1);\n\t$len2\
    \ = strlen($str2);\n\t$str3 = $str1 . $str2;\n\t$len3 = strlen($str3);\n\t$score\
    \ = 0;\n\t$good_str = 'Yes';\n\t$bad_str = 'No';\n\tfor ($i = 0; $i < $len3; $i++)\
    \ {\n\t\tif ($str3[$i] == '(') {\n\t\t\t$score += 1;\n\t\t} else {\n\t\t\t$score\
    \ -= 1;\n\t\t}\n\t\tif ($score < 0) {\n\t\t\treturn $bad_str;\n\t\t}\n\t}\n\t\
    if ($score == 0) {\n\t\treturn $good_str;\n\t} else {\n\t\treturn $bad_str;\n\t\
    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjnzrtts.php:48\n\
    Stack trace:\n#0 /tmp/tmprjnzrtts.php(59): test()\n#1 {main}\n  thrown in /tmp/tmprjnzrtts.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open > $close) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5g1fw5lk.php:42\n\
    Stack trace:\n#0 /tmp/tmp5g1fw5lk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp5g1fw5lk.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    // Your code here\n    // count the number of ( and ) \n    // if equal\
    \ --> Yes\n    // if not equal ---> No\n    $open_parenthesis = 0;\n    $close_parenthesis\
    \ = 0;\n    foreach($lst as $item){\n        for($i = 0; $i < strlen($item); $i++){\n\
    \            if($item[$i] == '('){\n                $open_parenthesis++;\n   \
    \         }else if($item[$i] == ')'){\n                $close_parenthesis++;\n\
    \            }\n        }\n    }\n    if($open_parenthesis == $close_parenthesis){\n\
    \        return 'Yes';\n    }else{\n        return 'No';\n    }\n}\n\nprint_r(match_parens(['()(',\
    \ ')']));\nprint_r(match_parens([')', ')']));\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "YesNo\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp042my_wy.php:52\n\
    Stack trace:\n#0 /tmp/tmp042my_wy.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp042my_wy.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left  = $lst[0];\n    $right = $lst[1];\n    if ($left == ')' or $right\
    \ == '(') return 'No';\n    $cnt = 0;\n    for ($i = 0; $i < strlen($left); $i++)\
    \ {\n        if ($left[$i] == '(') $cnt++;\n        else if ($left[$i] == ')')\
    \ $cnt--;\n        if ($cnt < 0) return 'No';\n    }\n    $cnt = 0;\n    for ($i\
    \ = 0; $i < strlen($right); $i++) {\n        if ($right[$i] == '(') $cnt++;\n\
    \        else if ($right[$i] == ')') $cnt--;\n        if ($cnt < 0) return 'No';\n\
    \    }\n    return 'Yes';\n}\necho match_parens(['()(', ')']) . PHP_EOL;\necho\
    \ match_parens([')', ')']) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ck3b1g3.php:38\n\
    Stack trace:\n#0 /tmp/tmp7ck3b1g3.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp7ck3b1g3.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  // Your code here\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhzxj1we.php:22\n\
    Stack trace:\n#0 /tmp/tmprhzxj1we.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprhzxj1we.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $cnt = 0;\n    foreach($lst as $item) {\n        foreach(str_split($item)\
    \ as $ch) {\n            if ($ch == '(') $cnt++;\n            else $cnt--;\n \
    \           if ($cnt < 0) return 'No';\n        }\n    }\n    return $cnt == 0\
    \ ? 'Yes' : 'No';\n}\necho match_parens(['()(', ')']) . PHP_EOL;\necho match_parens([')',\
    \ ')']) . PHP_EOL;\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19ajv0qo.php:34\n\
    Stack trace:\n#0 /tmp/tmp19ajv0qo.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp19ajv0qo.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open_cnt = $close_cnt = 0;\n    foreach($lst as $i) {\n        $open_cnt\
    \ += substr_count($i, '(');\n        $close_cnt += substr_count($i, ')');\n  \
    \  }\n    if($open_cnt != $close_cnt) {\n        return 'No';\n    }\n    $str\
    \ = implode('', $lst);\n    $open_cnt = $close_cnt = 0;\n    for($i = 0; $i <\
    \ strlen($str); $i++) {\n        if($str[$i] == '(') {\n            $open_cnt++;\n\
    \        } else {\n            $close_cnt++;\n        }\n        if($close_cnt\
    \ > $open_cnt) {\n            return 'No';\n        }\n    }\n    return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ddvbteq.php:45\n\
    Stack trace:\n#0 /tmp/tmp7ddvbteq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp7ddvbteq.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lparen = 0;\n    $rparen = 0;\n    for ($i = 0; $i < strlen($lst[0]);\
    \ $i++) {\n        if ($lst[0][$i] == '(') {\n            $lparen++;\n       \
    \ } else {\n            $rparen++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $lparen++;\n       \
    \ } else {\n            $rparen++;\n        }\n    }\n    if ($lparen == $rparen)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yec2r17.php:50\n\
    Stack trace:\n#0 /tmp/tmp3yec2r17.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp3yec2r17.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $s) {\n        $open\
    \ += substr_count($s, '(');\n        $close += substr_count($s, ')');\n    }\n\
    \    if ($open == $close) {\n        return 'Yes';\n    }\n    return 'No';\n\
    }\n\n$tests = [\n    [['()(', ')'], 'Yes'],\n    [[')', ')'], 'No'],\n    [['(()',\
    \ ')'], 'No'],\n    [['(()(()', ')'], 'Yes'],\n    [['))(()(', ')'], 'No'],\n\
    \    [['((()))(', ')'], 'Yes'],\n    [['(()((())', ')'], 'Yes'],\n    [['(((())(()',\
    \ ')'], 'Yes'],\n    [[')((())((', ')'], 'No'],\n    [['(((((((((', ')'], 'No'],\n\
    \    [['()(()(()(', ')'], 'Yes'],\n    [['(((()(()(', ')'], 'Yes'],\n    [['((()(()((',\
    \ ')'], 'No'],\n    [['()()()()(', ')'], 'Yes'],\n    [['(((())))()', ')'], 'Yes'],\n\
    \    [['(((())))()', ')'], 'Yes'],\n    [['()()()()()', ')'], 'Yes'],\n    [['()()()()()()',\
    \ ')'], 'Yes'],\n    [['(())()()()()', ')'], 'Yes'],\n    [['()(())()()()', ')'],\
    \ 'Yes'],\n    [['()()(())()()', ')'], 'Yes'],\n    [['()()()(())()', ')'], 'Yes'],\n\
    \    [['()()()()(())', ')'], 'Yes'],\n    [['()()()()()()', ')'], 'Yes'],\n  \
    \  [['()()()()()()()', ')'], 'Yes'],\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5r91z4pu.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    if (paren_balance($str1 .\
    \ $str2) || paren_balance($str2 . $str1)) {\n        return 'Yes';\n    }\n  \
    \  return 'No';\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function paren_balance()\
    \ in /tmp/tmpz8zmyzpk.php:16\nStack trace:\n#0 /tmp/tmpz8zmyzpk.php(22): match_parens(Array)\n\
    #1 /tmp/tmpz8zmyzpk.php(26): candidate(Array)\n#2 /tmp/tmpz8zmyzpk.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz8zmyzpk.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $p1 = 0;\n    $p2 = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $p1++;\n        } else {\n\
    \            $p1--;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $p2++;\n        } else\
    \ {\n            $p2--;\n        }\n    }\n    if ($p1 + $p2 < 0) {\n        return\
    \ 'No';\n    }\n    return 'Yes';\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp36att0e8.php:47\n\
    Stack trace:\n#0 /tmp/tmp36att0e8.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp36att0e8.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$str1 = $lst[0];\n\t$str2 = $lst[1];\n\t$list = [$str1.$str2, $str2.$str1];\n\
    \t$balanced = true;\n\t$i = 0;\n\twhile ($i < count($list) && $balanced) {\n\t\
    \t$balanced = is_balanced($list[$i]);\n\t\t$i++;\n\t}\n\treturn $balanced ? 'Yes'\
    \ : 'No';\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_balanced()\
    \ in /tmp/tmpl_r6o315.php:20\nStack trace:\n#0 /tmp/tmpl_r6o315.php(26): match_parens(Array)\n\
    #1 /tmp/tmpl_r6o315.php(30): candidate(Array)\n#2 /tmp/tmpl_r6o315.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl_r6o315.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $arr1 = str_split($lst[0]);\n    $arr2 = str_split($lst[1]);\n    $cnt\
    \ = 0;\n    for ($i = 0; $i < count($arr1); $i++) {\n        if ($arr1[$i] ==\
    \ '(') {\n            $cnt++;\n        } else {\n            $cnt--;\n       \
    \ }\n    }\n    for ($i = 0; $i < count($arr2); $i++) {\n        if ($arr2[$i]\
    \ == '(') {\n            $cnt++;\n        } else {\n            $cnt--;\n    \
    \    }\n    }\n    if ($cnt == 0) {\n        return 'Yes';\n    } else {\n   \
    \     return 'No';\n    }\n}\necho match_parens(['()(', ')']) . PHP_EOL;\necho\
    \ match_parens([')', ')']) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1s2x4hxb.php:53\n\
    Stack trace:\n#0 /tmp/tmp1s2x4hxb.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp1s2x4hxb.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $l = str_split($lst[0]);\n  $r = str_split($lst[1]);\n  $l_open = $l_close\
    \ = $r_open = $r_close = 0;\n  foreach ($l as $c) {\n    if ($c == '(') {\n  \
    \    $l_open++;\n    } else {\n      $l_close++;\n    }\n  }\n  foreach ($r as\
    \ $c) {\n    if ($c == '(') {\n      $r_open++;\n    } else {\n      $r_close++;\n\
    \    }\n  }\n  if (($l_open + $r_open) == ($l_close + $r_close)) {\n    return\
    \ 'Yes';\n  } else {\n    return 'No';\n  }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9lhtanqd.php:51\n\
    Stack trace:\n#0 /tmp/tmp9lhtanqd.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9lhtanqd.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $result = 0;\n    $test_string = '';\n    foreach ($lst as $str) {\n\
    \        $test_string .= $str;\n        for ($i = 0; $i < strlen($test_string);\
    \ $i++) {\n            if ($test_string[$i] == '(') {\n                $result++;\n\
    \            } else {\n                $result--;\n            }\n           \
    \ if ($result < 0) {\n                return 'No';\n            }\n        }\n\
    \    }\n    if ($result > 0) {\n        return 'No';\n    }\n    return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdz19p0ti.php:40\n\
    Stack trace:\n#0 /tmp/tmpdz19p0ti.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdz19p0ti.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $s) {\n        for\
    \ ($i = 0; $i < strlen($s); $i++) {\n            if ($s[$i] == '(') {\n      \
    \          $open++;\n            } else {\n                $close++;\n       \
    \     }\n        }\n    }\n    if ($open == $close) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxraa6p4h.php:45\n\
    Stack trace:\n#0 /tmp/tmpxraa6p4h.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpxraa6p4h.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open_parens = 0;\n    foreach ($lst as $str) {\n        for ($i = 0;\
    \ $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n           \
    \     $open_parens++;\n            } else {\n                $open_parens--;\n\
    \            }\n            if ($open_parens < 0) {\n                return 'No';\n\
    \            }\n        }\n    }\n    return $open_parens == 0 ? 'Yes' : 'No';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplaej6sh.php:38\n\
    Stack trace:\n#0 /tmp/tmpplaej6sh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpplaej6sh.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $not_counted = [];\n    $count = 0;\n    $count2 = 0;\n    foreach($lst\
    \ as $str) {\n        for($i = 0; $i < strlen($str); $i++) {\n            if($str[$i]\
    \ == '(') {\n                $count++;\n            } else {\n               \
    \ $count--;\n            }\n            if($count < 0) {\n                return\
    \ 'No';\n            }\n        }\n        if($count == 0) {\n            return\
    \ 'Yes';\n        }\n        if($count > 0) {\n            $count2 += $count;\n\
    \        }\n    }\n    if($count2 % 2 == 0) {\n        return 'Yes';\n    }\n\
    \    return 'No';\n}\necho match_parens(['()(', ')']) . PHP_EOL;\necho match_parens([')',\
    \ ')']) . PHP_EOL;\necho match_parens(['()(()', ')']) . PHP_EOL;\necho match_parens(['()(()',\
    \ '((()))']) . PHP_EOL;\necho match_parens(['()(()', '((()))', '))(()())']) .\
    \ PHP_EOL;\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\nYes\nYes\nNo\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpnl7pxbxg.php:54\nStack trace:\n#0 /tmp/tmpnl7pxbxg.php(65): test()\n\
    #1 {main}\n  thrown in /tmp/tmpnl7pxbxg.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  // Your code here\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzeeekekr.php:21\n\
    Stack trace:\n#0 /tmp/tmpzeeekekr.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzeeekekr.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $s1 = str_split($lst[0]);\n  $s2 = str_split($lst[1]);\n  $s = '';\n  $e\
    \ = '';\n  $f = 0;\n  $o = 0;\n  foreach ($s1 as $v) {\n    if ($v == '(') {\n\
    \      $f += 1;\n    } else {\n      $f -= 1;\n    }\n    if ($f < 0) {\n    \
    \  $o = 1;\n    }\n  }\n  foreach ($s2 as $v) {\n    if ($v == '(') {\n      $f\
    \ += 1;\n    } else {\n      $f -= 1;\n    }\n    if ($f < 0) {\n      $o = 1;\n\
    \    }\n  }\n  return ($f == 0 && $o == 0) ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzk2rd4l.php:51\n\
    Stack trace:\n#0 /tmp/tmpkzk2rd4l.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpkzk2rd4l.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    // your code here\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5kwfal5g.php:21\n\
    Stack trace:\n#0 /tmp/tmp5kwfal5g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5kwfal5g.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $matches = array();\n  preg_match_all('/(\\\
    (|\\))/', $str1, $matches);\n  $parens1 = $matches[0];\n  $matches = array();\n\
    \  preg_match_all('/(\\(|\\))/', $str2, $matches);\n  $parens2 = $matches[0];\n\
    \  return valid_parens($parens1, $parens2) ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function valid_parens()\
    \ in /tmp/tmp96y17vic.php:22\nStack trace:\n#0 /tmp/tmp96y17vic.php(26): match_parens(Array)\n\
    #1 /tmp/tmp96y17vic.php(30): candidate(Array)\n#2 /tmp/tmp96y17vic.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmp96y17vic.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $count1 = 0;\n    $count2 = 0;\n    for ($i = 0; $i < strlen($lst[0]);\
    \ $i++) {\n        if ($lst[0][$i] == '(') {\n            $count1++;\n       \
    \ } else {\n            $count1--;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $count2++;\n       \
    \ } else {\n            $count2--;\n        }\n    }\n    if ($count1 == $count2)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpav9wux98.php:41\n\
    Stack trace:\n#0 /tmp/tmpav9wux98.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpav9wux98.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $has_open = false;\n  $result = 'Yes';\n  foreach ($lst as $s) {\n    $has_open\
    \ = balance_parens($s, $has_open);\n    if ($has_open === false) {\n      $result\
    \ = 'No';\n      break;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function balance_parens()\
    \ in /tmp/tmpev1412rr.php:17\nStack trace:\n#0 /tmp/tmpev1412rr.php(27): match_parens(Array)\n\
    #1 /tmp/tmpev1412rr.php(31): candidate(Array)\n#2 /tmp/tmpev1412rr.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpev1412rr.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $parens = 0;\n  for ($i = 0; $i\
    \ < strlen($str1); $i++) {\n    if ($str1[$i] == '(') {\n      $parens++;\n  \
    \  } else {\n      $parens--;\n    }\n    if ($parens < 0) {\n      return 'No';\n\
    \    }\n  }\n  $parens = 0;\n  for ($i = 0; $i < strlen($str2); $i++) {\n    if\
    \ ($str2[$i] == '(') {\n      $parens++;\n    } else {\n      $parens--;\n   \
    \ }\n    if ($parens < 0) {\n      return 'No';\n    }\n  }\n  return 'Yes';\n\
    }\necho match_parens(['()(', ')']) . PHP_EOL;\necho match_parens([')', ')']) .\
    \ PHP_EOL;\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ph25fmd.php:47\n\
    Stack trace:\n#0 /tmp/tmp7ph25fmd.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp7ph25fmd.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $len1 = strlen($str1);\n  $len2\
    \ = strlen($str2);\n  $rng = range(0, $len1);\n  $rng = array_merge($rng, range(0,\
    \ $len2));\n  $rng = array_unique($rng);\n  $rng = array_merge($rng, range(-$len1,\
    \ -1));\n  $rng = array_merge($rng, range(-$len2, -1));\n  foreach ($rng as $idx)\
    \ {\n    $concat = \"\";\n    if ($idx >= 0) {\n      $concat = substr($str1,\
    \ 0, $idx);\n    }\n    $concat .= $str2;\n    if ($idx < 0) {\n      $concat\
    \ .= substr($str1, $idx);\n    }\n    if (valid_parens($concat)) {\n      return\
    \ \"Yes\";\n    }\n  }\n  return \"No\";\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function valid_parens()\
    \ in /tmp/tmpfxacw0kg.php:32\nStack trace:\n#0 /tmp/tmpfxacw0kg.php(40): match_parens(Array)\n\
    #1 /tmp/tmpfxacw0kg.php(44): candidate(Array)\n#2 /tmp/tmpfxacw0kg.php(58): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfxacw0kg.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $string1 = $lst[0];\n    $string2 = $lst[1];\n    $parentheses = function($string)\
    \ {\n        $n = strlen($string);\n        $cnt = 0;\n        for ($i = 0; $i\
    \ < $n; $i++) {\n            if ($string[$i] == '(') {\n                $cnt++;\n\
    \            } else {\n                $cnt--;\n            }\n            if\
    \ ($cnt < 0) {\n                return 0;\n            }\n        }\n        return\
    \ $cnt;\n    };\n    if ($parentheses($string1) + $parentheses($string2) == 0)\
    \ {\n        return 'Yes';\n    }\n    return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx5g55psg.php:42\n\
    Stack trace:\n#0 /tmp/tmpx5g55psg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpx5g55psg.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $open_result = 0;\n    $close = 0;\n    $close_result\
    \ = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i]\
    \ == '(') {\n            $open++;\n        } else {\n            $close++;\n \
    \       }\n        if ($open < $close) {\n            $open_result = -1;\n   \
    \     }\n    }\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n        if ($open > $close) {\n  \
    \          $close_result = -1;\n        }\n    }\n    return $open_result == -1\
    \ || $close_result == -1 ? 'No' : 'Yes';\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkywix9z9.php:51\n\
    Stack trace:\n#0 /tmp/tmpkywix9z9.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpkywix9z9.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $cnt = 0;\n    for ($i =\
    \ 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') $cnt++;\n    \
    \    else $cnt--;\n        if ($cnt < 0) return 'No';\n    }\n    $cnt = 0;\n\
    \    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(') $cnt++;\n\
    \        else $cnt--;\n        if ($cnt < 0) return 'No';\n    }\n    return 'Yes';\n\
    }\necho match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')', ')']) .\
    \ \"\\n\";\necho match_parens(['()(()', ')']) . \"\\n\";\necho match_parens(['()(()(',\
    \ '())))']) . \"\\n\";\necho match_parens(['()', '()()']) . \"\\n\";\necho match_parens(['(()(()',\
    \ '()()))']) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nNo\nNo\nNo\nYes\nNo\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpeq_pa10n.php:41\nStack trace:\n#0 /tmp/tmpeq_pa10n.php(55): test()\n\
    #1 {main}\n  thrown in /tmp/tmpeq_pa10n.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst = array_values($lst);\n    $open = str_split($lst[0]);\n    $close\
    \ = str_split($lst[1]);\n    $open_count = substr_count($lst[0], '(');\n    $close_count\
    \ = substr_count($lst[1], ')');\n    if ($open_count != $close_count) {\n    \
    \    return 'No';\n    }\n    $open_regex = preg_quote(implode('', $open));\n\
    \    $close_regex = preg_quote(implode('', $close));\n    if (!preg_match(\"/^$open_regex$/\"\
    , $close_regex) &&\n        !preg_match(\"/^$close_regex$/\", $open_regex)) {\n\
    \        return 'No';\n    }\n    $res = implode('', $open).implode('', $close);\n\
    \    $parens = str_split($res);\n    $parens_stacked = [];\n    foreach ($parens\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($parens_stacked,\
    \ $paren);\n        } else {\n            $last_paren = array_pop($parens_stacked);\n\
    \            if ($last_paren != '(') {\n                return 'No';\n       \
    \     }\n        }\n    }\n    return 'Yes';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptpi1rble.php:49\n\
    Stack trace:\n#0 /tmp/tmptpi1rble.php(63): test()\n#1 {main}\n  thrown in /tmp/tmptpi1rble.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  if ($lst[0] == ')' || $lst[1] == '(') {\n    return 'No';\n  }\n  $str\
    \ = $lst[0] . $lst[1];\n  $i = 0;\n  $cnt = 0;\n  while ($i < strlen($str)) {\n\
    \    if ($str[$i] == '(') {\n      $cnt++;\n    } else {\n      $cnt--;\n    }\n\
    \    if ($cnt < 0) {\n      return 'No';\n    }\n    $i++;\n  }\n  if ($cnt ==\
    \ 0) {\n    return 'Yes';\n  }\n  return 'No';\n}\necho match_parens(['()(', ')'])\
    \ . \"\\n\";\necho match_parens([')', ')']) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1zz_fizj.php:46\n\
    Stack trace:\n#0 /tmp/tmp1zz_fizj.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp1zz_fizj.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $open = 0;\n  $good = TRUE;\n  $length = strlen($lst[0]) + strlen($lst[1]);\n\
    \  $buffer = str_split($lst[0].$lst[1]);\n  for ($i = 0; $i < $length; $i++) {\n\
    \    $open += $buffer[$i] == '(' ? 1 : -1;\n    if ($open < 0) {\n      $good\
    \ = FALSE;\n      break;\n    }\n  }\n  return $good ? 'Yes' : 'No';\n}\n\necho\
    \ match_parens(['()(', ')']) . \"\\n\"; // 'Yes'\necho match_parens([')', ')'])\
    \ . \"\\n\"; // 'No'\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecwhviut.php:38\n\
    Stack trace:\n#0 /tmp/tmpecwhviut.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpecwhviut.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $a = $lst[0];\n    $b = $lst[1];\n    $a_parens = 0;\n    $b_parens =\
    \ 0;\n    for ($i = 0; $i < strlen($a); $i++) {\n        if ($a[$i] == '(') {\n\
    \            $a_parens++;\n        } else {\n            $a_parens--;\n      \
    \  }\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        if ($b[$i] ==\
    \ '(') {\n            $b_parens++;\n        } else {\n            $b_parens--;\n\
    \        }\n    }\n    $a_parens = max(0, $a_parens);\n    $b_parens = max(0,\
    \ $b_parens);\n    $max_parens = $a_parens + $b_parens;\n    $result = \"\";\n\
    \    for ($i = 0; $i < $max_parens; $i++) {\n        if ($a_parens > 0) {\n  \
    \          $result .= '(';\n            $a_parens--;\n        } else {\n     \
    \       $result .= ')';\n            $b_parens--;\n        }\n    }\n    if ($a_parens\
    \ > 0) {\n        $result = $a . $result;\n    } else {\n        $result = $result\
    \ . $b;\n    }\n    $open_parens = 0;\n    for ($i = 0; $i < strlen($result);\
    \ $i++) {\n        if ($result[$i] == '(') {\n            $open_parens++;\n  \
    \      } else {\n            $open_parens--;\n        }\n        if ($open_parens\
    \ < 0) {\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgr_mso9.php:71\n\
    Stack trace:\n#0 /tmp/tmptgr_mso9.php(82): test()\n#1 {main}\n  thrown in /tmp/tmptgr_mso9.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$S = $lst[0] . $lst[1];\n\t$parens = 0;\n\tfor ($i = 0; $i < strlen($S);\
    \ $i++) {\n\t\tif ($S[$i] == '(') {\n\t\t\t$parens++;\n\t\t} else {\n\t\t\t$parens--;\n\
    \t\t}\n\t\tif ($parens < 0) return 'No';\n\t}\n\treturn $parens == 0 ? 'Yes' :\
    \ 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ggsjfjq.php:35\n\
    Stack trace:\n#0 /tmp/tmp4ggsjfjq.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4ggsjfjq.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $len1 = strlen($str1);\n  $len2\
    \ = strlen($str2);\n  $strs = [$str1, $str2];\n  $lens = [$len1, $len2];\n  //\
    \ loop through the 2 strings\n  for ($i = 0; $i < 2; $i++) {\n    // loop through\
    \ each character of each string\n    for ($j = 0; $j < $lens[$i]; $j++) {\n  \
    \    // if a close parentheses is found, set it to true\n      if ($strs[$i][$j]\
    \ == ')') {\n        $match = true;\n        break;\n      }\n    }\n    // if\
    \ a close parentheses was found, break out of loop\n    if ($match) {\n      break;\n\
    \    }\n  }\n  // if one of the strings doesn't contain a closing parentheses\n\
    \  // return 'No'\n  if (!$match) {\n    return 'No';\n  }\n  // track the number\
    \ of open parentheses\n  $count = 0;\n  // loop through each character of the\
    \ first string\n  for ($i = 0; $i < $len1; $i++) {\n    // if an open parentheses\
    \ is found, increment the counter\n    if ($str1[$i] == '(') {\n      $count++;\n\
    \    }\n    // if a close parentheses is found, decrement the counter\n    if\
    \ ($str1[$i] == ')') {\n      $count--;\n    }\n    // if the counter goes below\
    \ 0, return 'No'\n    if ($count < 0) {\n      return 'No';\n    }\n  }\n  //\
    \ if the counter is greater than 0, return 'No'\n  if ($count > 0) {\n    return\
    \ 'No';\n  }\n  // set the counter back to 0\n  $count = 0;\n  // loop through\
    \ each character of the second string\n  for ($i = 0; $i < $len2; $i++) {\n  \
    \  // if an open parentheses is found, increment the counter\n    if ($str2[$i]\
    \ == '\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl0xnzixn.php on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  // your code here\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwwy63_cc.php:22\n\
    Stack trace:\n#0 /tmp/tmpwwy63_cc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwwy63_cc.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    if (parens_good($lst[0])) {\n        return 'Yes';\n    }\n    if (parens_good($lst[1]))\
    \ {\n        return 'Yes';\n    }\n    if (parens_good($lst[0] . $lst[1])) {\n\
    \        return 'Yes';\n    }\n    if (parens_good($lst[1] . $lst[0])) {\n   \
    \     return 'Yes';\n    }\n    return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function parens_good()\
    \ in /tmp/tmp6f8htsya.php:14\nStack trace:\n#0 /tmp/tmp6f8htsya.php(30): match_parens(Array)\n\
    #1 /tmp/tmp6f8htsya.php(34): candidate(Array)\n#2 /tmp/tmp6f8htsya.php(48): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6f8htsya.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $right_parens = 0;\n  $left_parens = 0;\n  foreach ($lst as $str) {\n \
    \   for ($i = 0; $i < strlen($str); $i++) {\n      if ($str[$i] == '(') {\n  \
    \      $left_parens++;\n      } else {\n        $right_parens++;\n      }\n  \
    \  }\n  }\n  if ($left_parens == $right_parens) {\n    return 'Yes';\n  } else\
    \ {\n    return 'No';\n  }\n}\necho match_parens(['()(', ')']) . \"\\n\";\necho\
    \ match_parens([')', ')']) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpch3nmdk2.php:47\n\
    Stack trace:\n#0 /tmp/tmpch3nmdk2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpch3nmdk2.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    $str1 = str_split($lst[0]);\n    $str2\
    \ = str_split($lst[1]);\n    foreach ($str1 as $char) {\n        if ($char ==\
    \ '(') {\n            $open++;\n        } else {\n            $close++;\n    \
    \    }\n    }\n    foreach ($str2 as $char) {\n        if ($char == '(') {\n \
    \           $open++;\n        } else {\n            $close++;\n        }\n   \
    \ }\n    if ($open == $close) {\n        return 'Yes';\n    } else {\n       \
    \ return 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx0ok1r2y.php:52\n\
    Stack trace:\n#0 /tmp/tmpx0ok1r2y.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpx0ok1r2y.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $strs = implode($lst);\n  $depth = 0;\n  for ($i = 0; $i < strlen($strs);\
    \ $i++) {\n    $depth += ($strs[$i] == '(') ? 1 : -1;\n    if ($depth < 0) return\
    \ 'No';\n  }\n  return ($depth == 0) ? 'Yes' : 'No';\n}\n\necho match_parens(['()(',\
    \ ')']) . \"\\n\";\necho match_parens([')', ')']) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoze5gl62.php:33\n\
    Stack trace:\n#0 /tmp/tmpoze5gl62.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpoze5gl62.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $l = $lst[0];\n    $r = $lst[1];\n    $ls = array();\n    $rs = array();\n\
    \    $total = 0;\n    $yes = false;\n    for ($i = 0; $i < strlen($l); $i++) {\n\
    \        if ($l[$i] == '(') {\n            $ls[] = '(';\n            $total++;\n\
    \        } else {\n            $rs[] = ')';\n            $total--;\n        }\n\
    \    }\n    for ($i = 0; $i < strlen($r); $i++) {\n        if ($r[$i] == '(')\
    \ {\n            $ls[] = '(';\n            $total++;\n        } else {\n     \
    \       $rs[] = ')';\n            $total--;\n        }\n    }\n    if ($total\
    \ < 0) {\n        return 'No';\n    }\n    $mls = count($ls);\n    $mrs = count($rs);\n\
    \    while ($mls > 0) {\n        $mls--;\n        $mrs--;\n        $total--;\n\
    \        if ($total < 0) {\n            return 'No';\n        }\n    }\n    return\
    \ 'Yes';\n}\necho match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')',\
    \ ')']) . \"\\n\";\necho match_parens(['()', ')']) . \"\\n\";\necho match_parens(['(((',\
    \ ')()']) . \"\\n\";\necho match_parens(['(()', ')()']) . \"\\n\";\necho match_parens(['(()))',\
    \ ')()']) . \"\\n\";\necho match_parens(['((()', ')()']) . \"\\n\";\necho match_parens(['(()))',\
    \ '()())']) . \"\\n\";\necho match_parens(['((()))', '()())']) . \"\\n\";\necho\
    \ match_parens(['((()))', '((()))']) . \"\\n\";\necho match_parens(['(()))', '((()))'])\
    \ . \"\\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0wvz_bmr.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    foreach ($lst as $s) {\n        $left\
    \ = 0;\n        $right = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n \
    \           if ($s[$i] == '(') {\n                $left++;\n            } else\
    \ {\n                $right++;\n            }\n            if ($right > $left)\
    \ {\n                return 'No';\n            }\n        }\n    }\n    return\
    \ 'Yes';\n}\necho match_parens(['()(', ')']) . \"\\n\";\necho match_parens([')',\
    \ ')']) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgx7hbep.php:39\n\
    Stack trace:\n#0 /tmp/tmpvgx7hbep.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvgx7hbep.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $opposites = [\n        '('\
    \ => ')',\n        ')' => '('\n    ];\n    $count = 0;\n    foreach (str_split($str1)\
    \ as $char) {\n        if ($char === '(') {\n            $count++;\n        }\
    \ else {\n            $count--;\n        }\n    }\n    if ($count < 0) {\n   \
    \     return 'No';\n    }\n    $count = 0;\n    foreach (str_split($str2) as $char)\
    \ {\n        if ($char === '(') {\n            $count++;\n        } else {\n \
    \           $count--;\n        }\n    }\n    if ($count > 0) {\n        return\
    \ 'No';\n    }\n    $stack = [];\n    $str1 = str_split($str1);\n    $str2 = str_split($str2);\n\
    \    while (!empty($str1) || !empty($str2)) {\n        if (empty($stack)) {\n\
    \            if (!empty($str1)) {\n                $char = array_shift($str1);\n\
    \            } else {\n                $char = array_shift($str2);\n         \
    \   }\n            array_push($stack, $char);\n        } else {\n            $top\
    \ = end($stack);\n            if ($opposites[$top] === $str1[0]) {\n         \
    \       array_shift($str1);\n                array_pop($stack);\n            }\
    \ elseif ($opposites[$top] === $str2[0]) {\n                array_shift($str2);\n\
    \                array_pop($stack);\n            } else {\n                if\
    \ (!empty($str1)) {\n                    $char = array_shift($str1);\n       \
    \         } else {\n                    $char = array_shift($str2);\n        \
    \        }\n                array_push($stack, $char);\n            }\n      \
    \  }\n    }\n    if (empty($stack)) {\n        return 'Yes';\n    } else {\n \
    \       return 'No';\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphizzj39e.php:86\n\
    Stack trace:\n#0 /tmp/tmphizzj39e.php(97): test()\n#1 {main}\n  thrown in /tmp/tmphizzj39e.php\
    \ on line 86\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $l = $lst[0];\n  $r = $lst[1];\n  return balance($l, $r) ? 'Yes' : 'No';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function balance() in\
    \ /tmp/tmpr9xgseg4.php:16\nStack trace:\n#0 /tmp/tmpr9xgseg4.php(20): match_parens(Array)\n\
    #1 /tmp/tmpr9xgseg4.php(24): candidate(Array)\n#2 /tmp/tmpr9xgseg4.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr9xgseg4.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    if (count($lst) < 2) {\n        return 'No';\n    }\n    $a = $lst[0];\n\
    \    $b = $lst[1];\n    $a = str_split($a);\n    $b = str_split($b);\n    $count\
    \ = 0;\n    $all_count = 0;\n    while (count($a) > 0) {\n        if (array_pop($a)\
    \ == '(') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        $all_count += $count;\n    }\n    $count = 0;\n    while (count($b)\
    \ > 0) {\n        if (array_pop($b) == '(') {\n            $count++;\n       \
    \ } else {\n            $count--;\n        }\n        $all_count += $count;\n\
    \    }\n    if ($all_count == 0) {\n        return 'Yes';\n    } else {\n    \
    \    return 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5sukbpc.php:51\n\
    Stack trace:\n#0 /tmp/tmph5sukbpc.php(65): test()\n#1 {main}\n  thrown in /tmp/tmph5sukbpc.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$s = $lst[0] . $lst[1];\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\tif ($s[$i] == '(') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn 'No';\n\t\t}\n\t}\n\treturn 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46m8f6bk.php:37\n\
    Stack trace:\n#0 /tmp/tmp46m8f6bk.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp46m8f6bk.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  if ($lst[0][0] == ')') {\n        list($lst[0], $lst[1]) = [$lst[1], $lst[0]];\n\
    \    }\n    $lst = array_merge($lst[0], $lst[1]);\n    $opn = 0;\n    $cls = 0;\n\
    \    foreach ($lst as $v) {\n        if ($v == '(') {\n            $opn++;\n \
    \       } else {\n            $cls++;\n        }\n        if ($cls > $opn) {\n\
    \            return 'No';\n        }\n    }\n    return $opn == $cls ? 'Yes' :\
    \ 'No';\n}\necho match_parens(['()(', ')']) . PHP_EOL;\necho match_parens([')',\
    \ ')']) . PHP_EOL;\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7a4tbtuy.php:45\n\
    Stack trace:\n#0 /tmp/tmp7a4tbtuy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp7a4tbtuy.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t// your code here\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_c3f1qzx.php:22\n\
    Stack trace:\n#0 /tmp/tmp_c3f1qzx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_c3f1qzx.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $l1 = $lst[0];\n    $l2 = $lst[1];\n    $par1 = array();\n    $par2 =\
    \ array();\n    $par3 = array();\n    $par4 = array();\n    for ($i = 0; $i <\
    \ strlen($l1); $i++) {\n        if ($l1[$i] == '(') {\n            array_push($par1,\
    \ $l1[$i]);\n        } else {\n            array_pop($par1);\n        }\n    }\n\
    \    for ($i = 0; $i < strlen($l2); $i++) {\n        if ($l2[$i] == '(') {\n \
    \           array_push($par2, $l2[$i]);\n        } else {\n            array_pop($par2);\n\
    \        }\n    }\n    $par3 = array_merge($par1, $l2);\n    $par4 = array_merge($l1,\
    \ $par2);\n    for ($i = 0; $i < strlen($par3); $i++) {\n        if ($par3[$i]\
    \ == '(') {\n            array_push($par1, $par3[$i]);\n        } else {\n   \
    \         array_pop($par1);\n        }\n    }\n    for ($i = 0; $i < strlen($par4);\
    \ $i++) {\n        if ($par4[$i] == '(') {\n            array_push($par2, $par4[$i]);\n\
    \        } else {\n            array_pop($par2);\n        }\n    }\n    if (empty($par1)\
    \ && empty($par2)) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_merge(): Expected parameter 2 to be an array, string given\
    \ in /tmp/tmp5cq1v63y.php on line 34\n\nWarning: array_merge(): Expected parameter\
    \ 1 to be an array, string given in /tmp/tmp5cq1v63y.php on line 35\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp5cq1v63y.php:61\nStack trace:\n\
    #0 /tmp/tmp5cq1v63y.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp5cq1v63y.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $counter = 0;\n  $arr = [];\n  $arr = explode('', $lst[0]);\n\
    \  $arr2 = explode('', $lst[1]);\n  $arr3 = array_merge($arr, $arr2);\n  for ($i\
    \ = 0; $i < count($arr3); $i++) {\n    if ($arr3[$i] == '(') {\n      array_push($stack,\
    \ $arr3[$i]);\n    } else {\n      if (count($stack) > 0) {\n        array_pop($stack);\n\
    \      } else {\n        $counter++;\n      }\n    }\n  }\n  if (count($stack)\
    \ == 0 && $counter == 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n\
    \  }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: explode(): Empty delimiter in /tmp/tmp8ya6b3wa.php on line 17\n\
    \nWarning: explode(): Empty delimiter in /tmp/tmp8ya6b3wa.php on line 18\n\nWarning:\
    \ array_merge(): Expected parameter 1 to be an array, bool given in /tmp/tmp8ya6b3wa.php\
    \ on line 19\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp8ya6b3wa.php on line 20\n\nWarning: explode():\
    \ Empty delimiter in /tmp/tmp8ya6b3wa.php on line 17\n\nWarning: explode(): Empty\
    \ delimiter in /tmp/tmp8ya6b3wa.php on line 18\n\nWarning: array_merge(): Expected\
    \ parameter 1 to be an array, bool given in /tmp/tmp8ya6b3wa.php on line 19\n\n\
    Warning: count(): Parameter must be an array or an object that implements Countable\
    \ in /tmp/tmp8ya6b3wa.php on line 20\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp8ya6b3wa.php:43\nStack trace:\n#0 /tmp/tmp8ya6b3wa.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8ya6b3wa.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $str_lst = array_map(function($str) { return str_split($str); }, $lst);\n\
    \    $map = ['(' => 'open', ')' => 'close'];\n    $str_lst = array_map(function($str)\
    \ use($map) {\n        return array_map(function($ch) use($map) { return $map[$ch];\
    \ }, $str);\n    }, $str_lst);\n    $map_back = ['open' => '(', 'close' => ')'];\n\
    \    $open_indices = [];\n    foreach ($str_lst[0] as $i => $paren) {\n      \
    \  if ($paren === 'open') {\n            $open_indices[] = $i;\n        }\n  \
    \  }\n    $max_open_possible = 0;\n    $close_count = 0;\n    foreach ($str_lst[1]\
    \ as $paren) {\n        if ($paren === 'close') {\n            $close_count++;\n\
    \        }\n    }\n    if ($close_count < count($open_indices)) {\n        return\
    \ 'No';\n    }\n    $count = 0;\n    foreach ($str_lst[1] as $paren) {\n     \
    \   if ($paren === 'close') {\n            $count++;\n        }\n        if ($count\
    \ > count($open_indices)) {\n            return 'No';\n        }\n    }\n    return\
    \ 'Yes';\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpja2u5wow.php:52\n\
    Stack trace:\n#0 /tmp/tmpja2u5wow.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpja2u5wow.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $openParens = $closeParens = 0;\n  $a = $lst[0];\n  $b = $lst[1];\n  for\
    \ ($i = 0; $i < strlen($a); $i++) {\n    if ($a[$i] == '(') {\n      $openParens++;\n\
    \    } else {\n      $closeParens++;\n    }\n  }\n  for ($i = 0; $i < strlen($b);\
    \ $i++) {\n    if ($b[$i] == '(') {\n      $openParens++;\n    } else {\n    \
    \  $closeParens++;\n    }\n  }\n  if ($openParens == $closeParens) {\n    return\
    \ 'Yes';\n  } else {\n    return 'No';\n  }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdats9il.php:51\n\
    Stack trace:\n#0 /tmp/tmpzdats9il.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpzdats9il.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $s = array_reduce($lst, function($a, $b) { return $a.$b; }, '');\n  $l\
    \ = strlen($s);\n  $bal = 0;\n  for ($i = 0; $i < $l; $i++) {\n    if ($s[$i]\
    \ == '(') {\n      $bal++;\n    } else if ($s[$i] == ')') {\n      $bal--;\n \
    \   }\n    if ($bal < 0) {\n      return 'No';\n    }\n  }\n  return $bal == 0\
    \ ? 'Yes' : 'No';\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppekqiccy.php:37\n\
    Stack trace:\n#0 /tmp/tmppekqiccy.php(48): test()\n#1 {main}\n  thrown in /tmp/tmppekqiccy.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        $str\
    \ = str_split($str);\n        foreach ($str as $char) {\n            if ($char\
    \ == '(') {\n                $open++;\n            } else {\n                $close++;\n\
    \            }\n        }\n    }\n    return $open == $close ? 'Yes' : 'No';\n\
    }\n\necho match_parens(['()(', ')']) . PHP_EOL;\necho match_parens([')', ')'])\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_kodu41.php:45\n\
    Stack trace:\n#0 /tmp/tmph_kodu41.php(50): test()\n#1 {main}\n  thrown in /tmp/tmph_kodu41.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $l1 = $lst[0];\n  $l2 = $lst[1];\n  $inputs = [\n    $l1 . $l2,\n    $l2\
    \ . $l1,\n    $l1 . strrev($l2),\n    $l2 . strrev($l1),\n    strrev($l1) . $l2,\n\
    \    strrev($l2) . $l1,\n    strrev($l1) . strrev($l2),\n    strrev($l2) . strrev($l1),\n\
    \  ];\n  foreach ($inputs as $input) {\n    if (isGood($input)) return 'Yes';\n\
    \  }\n  return 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isGood() in /tmp/tmpd8tux5a3.php:27\n\
    Stack trace:\n#0 /tmp/tmpd8tux5a3.php(33): match_parens(Array)\n#1 /tmp/tmpd8tux5a3.php(37):\
    \ candidate(Array)\n#2 /tmp/tmpd8tux5a3.php(51): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpd8tux5a3.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$first = $lst[0];\n\t$second = $lst[1];\n\t$first_is_good = $second_is_good\
    \ = false;\n\t$first_is_good = check_good($first);\n\t$second_is_good = check_good($second);\n\
    \tif ($first_is_good) {\n\t\tif ($second_is_good) {\n\t\t\treturn 'Yes';\n\t\t\
    } else {\n\t\t\t$count = 0;\n\t\t\tfor ($i = 0; $i < strlen($second); $i++) {\n\
    \t\t\t\tif ($second[$i] == '(') {\n\t\t\t\t\t$count++;\n\t\t\t\t} else if ($second[$i]\
    \ == ')') {\n\t\t\t\t\t$count--;\n\t\t\t\t}\n\t\t\t\tif ($count < 0) {\n\t\t\t\
    \t\treturn 'No';\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 'Yes';\n\t\t}\n\t} else {\n\
    \t\tif ($second_is_good) {\n\t\t\t$count = 0;\n\t\t\tfor ($i = 0; $i < strlen($first);\
    \ $i++) {\n\t\t\t\tif ($first[$i] == '(') {\n\t\t\t\t\t$count++;\n\t\t\t\t} else\
    \ if ($first[$i] == ')') {\n\t\t\t\t\t$count--;\n\t\t\t\t}\n\t\t\t\tif ($count\
    \ < 0) {\n\t\t\t\t\treturn 'No';\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 'Yes';\n\t\t\
    } else {\n\t\t\t$first_count = $second_count = 0;\n\t\t\tfor ($i = 0; $i < strlen($first);\
    \ $i++) {\n\t\t\t\tif ($first[$i] == '(') {\n\t\t\t\t\t$first_count++;\n\t\t\t\
    \t} else if ($first[$i] == ')') {\n\t\t\t\t\t$first_count--;\n\t\t\t\t}\n\t\t\t\
    \tif ($first_\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi_j1312i.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  if (empty($lst)) {\n    return \"No\";\n  }\n  $parens = implode('', $lst);\n\
    \  $open = '(';\n  $close = ')';\n  $balance = 0;\n  for ($i = 0; $i < strlen($parens);\
    \ $i++) {\n    if ($parens[$i] == $open) {\n      $balance++;\n    } else {\n\
    \      $balance--;\n    }\n    if ($balance < 0) {\n      return \"No\";\n   \
    \ }\n  }\n  return \"Yes\";\n}\n\necho \"match_parens(['()(', ')']) == 'Yes':\
    \ \" .\n    (match_parens(['()(', ')']) == 'Yes' ? 'PASS' : 'FAIL') . \"\\n\"\
    ;\necho \"match_parens([')', ')']) == 'No': \" .\n    (match_parens([')', ')'])\
    \ == 'No' ? 'PASS' : 'FAIL') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "match_parens(['()(', ')']) == 'Yes': PASS\nmatch_parens([')', ')']) ==\
    \ 'No': PASS\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_4mmmbxn.php:46\n\
    Stack trace:\n#0 /tmp/tmp_4mmmbxn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_4mmmbxn.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $brackets = ['(' => 0, ')' => 0];\n    foreach ($lst as $k => $v) {\n\
    \        foreach (str_split($v) as $k2 => $v2) {\n            $brackets[$v2]++;\n\
    \        }\n    }\n    return $brackets['('] == $brackets[')'] ? 'Yes' : 'No';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58yg65fz.php:37\n\
    Stack trace:\n#0 /tmp/tmp58yg65fz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp58yg65fz.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$new_str = '';\n\tforeach ($lst as $str) {\n\t\t$new_str .= $str;\n\t}\n\
    \t$str_len = strlen($new_str);\n\t$i = 0;\n\t$j = 0;\n\twhile ($i < $str_len)\
    \ {\n\t\tif ($new_str[$i] == '(') {\n\t\t\t$j = $i + 1;\n\t\t\twhile ($j < $str_len)\
    \ {\n\t\t\t\tif ($new_str[$j] == ')') {\n\t\t\t\t\t$new_str[$i] = '-';\n\t\t\t\
    \t\t$new_str[$j] = '-';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$j++;\n\t\t\t}\n\
    \t\t}\n\t\t$i++;\n\t}\n\tif (strpos($new_str, '(') === false && strpos($new_str,\
    \ ')') === false) {\n\t\treturn 'Yes';\n\t}\n\treturn 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58_jb52c.php:49\n\
    Stack trace:\n#0 /tmp/tmp58_jb52c.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp58_jb52c.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n\t$str1 = $lst[0];\n\t$str2 = $lst[1];\n\t$res1 = 0;\n\t$res2 = 0;\n\tforeach\
    \ (str_split($str1) as $char) {\n\t\tif ($char == '(') {\n\t\t\t$res1++;\n\t\t\
    } else {\n\t\t\t$res1--;\n\t\t}\n\t\tif ($res1 < 0) {\n\t\t\treturn 'No';\n\t\t\
    }\n\t}\n\tforeach (str_split($str2) as $char) {\n\t\tif ($char == '(') {\n\t\t\
    \t$res2++;\n\t\t} else {\n\t\t\t$res2--;\n\t\t}\n\t\tif ($res2 < 0) {\n\t\t\t\
    return 'No';\n\t\t}\n\t}\n\treturn ($res1 == $res2 ? 'Yes' : 'No');\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0gpcr7r.php:46\n\
    Stack trace:\n#0 /tmp/tmps0gpcr7r.php(60): test()\n#1 {main}\n  thrown in /tmp/tmps0gpcr7r.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
