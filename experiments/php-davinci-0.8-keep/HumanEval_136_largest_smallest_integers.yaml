name: HumanEval_136_largest_smallest_integers
language: php
prompt: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n//\
  \ the largest of negative integers, and 'b' is the smallest\n// of positive integers\
  \ in a list.\n// If there is no negative or positive integers, return them as None.\n\
  // Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n//\
  \ largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
  \ == (None, None)\nfunction largest_smallest_integers($lst) {\n"
tests: "function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
  \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7,\
  \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3,\
  \ 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1,\
  \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $res1 = '';\n  $res2 = '';\n  foreach ($lst as $k => $v) {\n    if\
    \ ($v > 0) {\n      if ($res2 == '') {\n        $res2 = $v;\n      } else {\n\
    \        if ($v < $res2) {\n          $res2 = $v;\n        }\n      }\n    } else\
    \ {\n      if ($res1 == '') {\n        $res1 = $v;\n      } else {\n        if\
    \ ($v > $res1) {\n          $res1 = $v;\n        }\n      }\n    }\n  }\n  return\
    \ $res1 === '' ? array(null, $res2) : array($res1, $res2);\n}\n\necho \"<pre>\"\
    ;\nvar_dump(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\necho \"</pre>\";\n\
    \necho \"<pre>\";\nvar_dump(largest_smallest_integers([]));\necho \"</pre>\";\n\
    \necho \"<pre>\";\nvar_dump(largest_smallest_integers([0]));\necho \"</pre>\";",
  "\t$min = null;\n\t$max = null;\n\tforeach ($lst as $v) {\n\t\tif ($v < 0 && ($max\
    \ === null || $v > $max)) {\n\t\t\t$max = $v;\n\t\t}\n\t\tif ($v > 0 && ($min\
    \ === null || $v < $min)) {\n\t\t\t$min = $v;\n\t\t}\n\t}\n\treturn [$max, $min];\n\
    }\necho largest_smallest_integers([2, 4, 1, 3, 5, 7]) . \"\\n\";\necho largest_smallest_integers([])\
    \ . \"\\n\";\necho largest_smallest_integers([0]) . \"\\n\";\necho largest_smallest_integers([-1,\
    \ 2, 1, -5, 5, -6]) . \"\\n\";", "\t$neg = null;\n\t$pos = null;\n\tfor ($i =\
    \ 0; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < 0) {\n\t\t\tif ($neg == null\
    \ || $lst[$i] > $neg) {\n\t\t\t\t$neg = $lst[$i];\n\t\t\t}\n\t\t} else {\n\t\t\
    \tif ($pos == null || $lst[$i] < $pos) {\n\t\t\t\t$pos = $lst[$i];\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn array($neg, $pos);\n}\n\necho \"largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == (None, 1) => \";\nvar_dump(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == array(null, 1));\necho \"largest_smallest_integers([]) ==\
    \ (None, None) => \";\nvar_dump(largest_smallest_integers([]) == array(null, null));\n\
    echo \"largest_smallest_integers([0]) == (None, None) => \";\nvar_dump(largest_smallest_integers([0])\
    \ == array(null, null));", "    $cnt = count($lst);\n    if ($cnt == 0) {\n  \
    \      return array(null, null);\n    }\n    $max = -PHP_INT_MAX;\n    $min =\
    \ PHP_INT_MAX;\n    for ($i = 0; $i < $cnt; $i++) {\n        if ($lst[$i] < 0)\
    \ {\n            $max = max($max, $lst[$i]);\n        }\n        if ($lst[$i]\
    \ > 0) {\n            $min = min($min, $lst[$i]);\n        }\n    }\n    return\
    \ array($max == -PHP_INT_MAX ? null : $max, $min == PHP_INT_MAX ? null : $min);\n\
    }", "    $positives = $negatives = [];\n    foreach ($lst as $n) {\n        if\
    \ ($n > 0) {\n            $positives[] = $n;\n        } elseif ($n < 0) {\n  \
    \          $negatives[] = $n;\n        }\n    }\n    return array(count($negatives)\
    \ > 0 ? max($negatives) : null, count($positives) > 0 ? min($positives) : null);\n\
    }\necho largest_smallest_integers([2, 4, 1, 3, 5, 7]);\necho largest_smallest_integers([]);\n\
    echo largest_smallest_integers([0]);", "\t$sorted_lst = sort_integers($lst);\n\
    \treturn [$sorted_lst[0], $sorted_lst[count($sorted_lst) - 1]];\n}\n", "  $result\
    \ = ['a' => NULL, 'b' => NULL];\n  $negative = true;\n  $positive = true;\n  foreach\
    \ ($lst as $item) {\n    if ($item < 0) {\n      if ($negative || $item > $result['a'])\
    \ {\n        $result['a'] = $item;\n      }\n      $negative = false;\n    } elseif\
    \ ($item > 0) {\n      if ($positive || $item < $result['b']) {\n        $result['b']\
    \ = $item;\n      }\n      $positive = false;\n    }\n  }\n  return $result;\n\
    }", "    $min = null;\n    $max = null;\n    foreach ($lst as $value) {\n    \
    \    if ($value >= 0) {\n            if ($min === null || $value < $min) {\n \
    \               $min = $value;\n            }\n        } else {\n            if\
    \ ($max === null || $value > $max) {\n                $max = $value;\n       \
    \     }\n        }\n    }\n    return [$max, $min];\n}\n", "  $neg = array_filter($lst,\
    \ function($x) { return $x < 0; });\n  $pos = array_filter($lst, function($x)\
    \ { return $x > 0; });\n  return (count($neg) === 0 ? None : max($neg))\n    .\
    \ \" \" . (count($pos) === 0 ? None : min($pos));\n}\n", "  $lst = array_filter($lst,\
    \ function($elem) { return is_int($elem); });\n  $lst = array_map(function($elem)\
    \ { return (int)$elem; }, $lst);\n  sort($lst);\n  $pos = [];\n  $neg = [];\n\
    \  foreach ($lst as $elem) {\n    if ($elem > 0) {\n      $pos[] = $elem;\n  \
    \  } elseif ($elem < 0) {\n      $neg[] = $elem;\n    }\n  }\n  $a = null;\n \
    \ $b = null;\n  if (count($neg) > 0) {\n    $a = $neg[count($neg) - 1];\n  }\n\
    \  if (count($pos) > 0) {\n    $b = $pos[0];\n  }\n  return [$a, $b];\n}\nprint_r(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\nprint_r(largest_smallest_integers([]));\nprint_r(largest_smallest_integers([0]));\n",
  "    if (empty($lst)) return array(null, null);\n    $i = 0;\n    $min = 0;\n  \
    \  $max = 0;\n    foreach ($lst as $v) {\n        if ($v > 0) {\n            if\
    \ ($i == 0) {\n                $i++;\n                $min = $v;\n           \
    \ } else {\n                if ($v < $min) $min = $v;\n            }\n       \
    \ } elseif ($v < 0) {\n            if ($i == 0) {\n                $i++;\n   \
    \             $max = $v;\n            } else {\n                if ($v > $max)\
    \ $max = $v;\n            }\n        }\n    }\n    if ($i == 0) return array(null,\
    \ null);\n    return array($max, $min);\n}\n", "  // Your code here.\n}\n", " \
    \   $negative = NULL;\n    $positive = NULL;\n    foreach ($lst as $i) {\n   \
    \     if ($i < 0) {\n            if ($negative === NULL) {\n                $negative\
    \ = $i;\n            } elseif ($i > $negative) {\n                $negative =\
    \ $i;\n            }\n        } elseif ($i > 0) {\n            if ($positive ===\
    \ NULL) {\n                $positive = $i;\n            } elseif ($i < $positive)\
    \ {\n                $positive = $i;\n            }\n        }\n    }\n    return\
    \ [$negative, $positive];\n}\n", "\t$neg = NULL;\n\t$pos = NULL;\n\tforeach ($lst\
    \ as $v) {\n\t\tif ($v > 0) {\n\t\t\tif ($pos === NULL) {\n\t\t\t\t$pos = $v;\n\
    \t\t\t} else {\n\t\t\t\t$pos = min($pos, $v);\n\t\t\t}\n\t\t} else if ($v < 0)\
    \ {\n\t\t\tif ($neg === NULL) {\n\t\t\t\t$neg = $v;\n\t\t\t} else {\n\t\t\t\t\
    $neg = max($neg, $v);\n\t\t\t}\n\t\t}\n\t}\n\treturn array($neg, $pos);\n}\n",
  "  // Your code here\n}\n", "  $a = NULL;\n  $b = NULL;\n  $largest = NULL;\n  $smallest\
    \ = NULL;\n  foreach ($lst as $value) {\n    if ($value < 0) {\n      if (is_null($largest)\
    \ || $value > $largest) {\n        $largest = $value;\n      }\n    } elseif ($value\
    \ > 0) {\n      if (is_null($smallest) || $value < $smallest) {\n        $smallest\
    \ = $value;\n      }\n    }\n  }\n  return array($largest, $smallest);\n}\n",
  "    $neg_lst = [];\n    $pos_lst = [];\n    foreach ($lst as $v) {\n        if\
    \ ($v > 0) {\n            $pos_lst[] = $v;\n        } else if ($v < 0) {\n   \
    \         $neg_lst[] = $v;\n        }\n    }\n    if (!$neg_lst && !$pos_lst)\
    \ {\n        return [null, null];\n    }\n    return [\n        $neg_lst ? max($neg_lst)\
    \ : null,\n        $pos_lst ? min($pos_lst) : null\n    ];\n}\n", "    $a = NULL;\n\
    \    $b = NULL;\n    if (count($lst) == 0) {\n        return array(NULL, NULL);\n\
    \    }\n    foreach ($lst as $v) {\n        if ($v < 0) {\n            if ($a\
    \ === NULL) {\n                $a = $v;\n            } elseif ($v > $a) {\n  \
    \              $a = $v;\n            }\n        } elseif ($v > 0) {\n        \
    \    if ($b === NULL) {\n                $b = $v;\n            } elseif ($v <\
    \ $b) {\n                $b = $v;\n            }\n        }\n    }\n    return\
    \ array($a, $b);\n}\necho '<pre>';\nvar_dump(largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7]));\nvar_dump(largest_smallest_integers([]));\nvar_dump(largest_smallest_integers([0]));\n\
    echo '</pre>';", "\t$max = null;\n\t$min = null;\n\tforeach ($lst as $elem) {\n\
    \t\tif ($elem < 0 && ($max === null || $elem > $max)) {\n\t\t\t$max = $elem;\n\
    \t\t}\n\t\tif ($elem > 0 && ($min === null || $elem < $min)) {\n\t\t\t$min = $elem;\n\
    \t\t}\n\t}\n\treturn [$max, $min];\n}\nvar_dump(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])); // (None, 1)\nvar_dump(largest_smallest_integers([])); //\
    \ (None, None)\nvar_dump(largest_smallest_integers([0])); // (None, None)\nvar_dump(largest_smallest_integers([2,\
    \ -4, 1, -3, 5, -7])); // (-7, 1)\nvar_dump(largest_smallest_integers([-2, -4,\
    \ -1, -3, -5, -7])); // (-1, None)\nvar_dump(largest_smallest_integers([-2, 4,\
    \ -1, 3, -5, 7])); // (-1, 3)", "  //\n}\n", "  $positives = [];\n  $negatives\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num > 0) {\n      $positives[] =\
    \ $num;\n    } else if ($num < 0) {\n      $negatives[] = $num;\n    }\n  }\n\
    \  $result = [\n    max($negatives),\n    min($positives)\n  ];\n  return array_map(function($num)\
    \ {\n    return is_int($num) ? $num : null;\n  }, $result);\n}\n", "    $neg_int\
    \ = array_filter($lst, function($x) { return $x < 0; });\n    $pos_int = array_filter($lst,\
    \ function($x) { return $x > 0; });\n    if (empty($neg_int) && empty($pos_int))\
    \ return [null, null];\n    $largest_neg = empty($neg_int) ? null : max($neg_int);\n\
    \    $smallest_pos = empty($pos_int) ? null : min($pos_int);\n    return [$largest_neg,\
    \ $smallest_pos];\n}\n\n$tests = [\n    [[2, 4, 1, 3, 5, 7], [null, 1]],\n   \
    \ [[], [null, null]],\n    [[0], [null, null]],\n    [[-10, 1, 2, -4, -4, -7,\
    \ 1, 2, 3, -4, 3, -5, -3, 3, -4, 3, -5, -3, 2, 4, 2, -4, -4, -7, 1, 2, 3, -4,\
    \ 3, -5, -3, 3, -4, 3, -5, -3, 2, 4, 2, -4, -4, -7, 1, 2, 3, -4, 3, -5, -3, 3,\
    \ -4, 3, -5, -3, 2, 4, 2, -4, -4, -7, 1, 2, 3, -4, 3, -5, -3, 3, -4, 3, -5, -3,\
    \ 2, 4, 2, -4, -4, -7, 1, 2, 3, -4, 3, -5, -3, 3, -4, 3, -5, -3, 2, 4, 2, -4,\
    \ -4, -7, 1, 2, 3, -4, 3, -5, -3, 3, -4, 3, -5, -3, 2, 4, 2, -4, -4, -7, 1, 2,\
    \ 3, -4, 3, -5, -3, 3, -4, 3, -5, -3, 2, 4, 2, -4", "    $negatives = [];\n  \
    \  $positives = [];\n    $len = count($lst);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($lst[$i] < 0) {\n            array_push($negatives, $lst[$i]);\n\
    \        } elseif ($lst[$i] > 0) {\n            array_push($positives, $lst[$i]);\n\
    \        }\n    }\n    if (count($negatives) === 0) {\n        $negatives = null;\n\
    \    } else {\n        $negatives = max($negatives);\n    }\n    if (count($positives)\
    \ === 0) {\n        $positives = null;\n    } else {\n        $positives = min($positives);\n\
    \    }\n    return [$negatives, $positives];\n}\n", "    $negs = $pos = [];\n\
    \    foreach ($lst as $num) {\n        if ($num < 0) {\n            $negs[] =\
    \ $num;\n        } else if ($num > 0) {\n            $pos[] = $num;\n        }\n\
    \    }\n    if (!$negs) {\n        $negs = NULL;\n    } else {\n        $negs\
    \ = max($negs);\n    }\n    if (!$pos) {\n        $pos = NULL;\n    } else {\n\
    \        $pos = min($pos);\n    }\n    return [$negs, $pos];\n}\n", "    $neg\
    \ = [];\n    $pos = [];\n    foreach ($lst as $n) {\n        if ($n < 0) {\n \
    \           $neg[] = $n;\n        } elseif ($n > 0) {\n            $pos[] = $n;\n\
    \        }\n    }\n    if (count($neg) > 0) {\n        $largest_neg = max($neg);\n\
    \    } else {\n        $largest_neg = null;\n    }\n    if (count($pos) > 0) {\n\
    \        $smallest_pos = min($pos);\n    } else {\n        $smallest_pos = null;\n\
    \    }\n    return [$largest_neg, $smallest_pos];\n}\n\n$tests = [[2, 4, 1, 3,\
    \ 5, 7], [], [0], [-1, -2, -3, 1, 2, 3]];\nforeach ($tests as $test) {\n    print_r(largest_smallest_integers($test));\n\
    }", "  if (count($lst) === 0) {\n    return [null, null];\n  }\n  $maxNeg = null;\n\
    \  $minPos = null;\n  foreach ($lst as $x) {\n    if ($x < 0) {\n      if ($maxNeg\
    \ === null || $x > $maxNeg) {\n        $maxNeg = $x;\n      }\n    } else if ($x\
    \ > 0) {\n      if ($minPos === null || $x < $minPos) {\n        $minPos = $x;\n\
    \      }\n    }\n  }\n  return [$maxNeg, $minPos];\n}\necho \"largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == (None, 1): \";\necho largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7]) === [null, 1] ? \"PASS\" : \"FAIL\";\necho \"\\n\";\necho \"largest_smallest_integers([])\
    \ == (None, None): \";\necho largest_smallest_integers([]) === [null, null] ?\
    \ \"PASS\" : \"FAIL\";\necho \"\\n\";\necho \"largest_smallest_integers([0]) ==\
    \ (None, None): \";\necho largest_smallest_integers([0]) === [null, null] ? \"\
    PASS\" : \"FAIL\";\necho \"\\n\";\n", "    $pos = [];\n    $neg = [];\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n    \
    \    } else if ($num > 0) {\n            $pos[] = $num;\n        }\n    }\n  \
    \  if (count($pos) == 0) {\n        $pos = null;\n    } else {\n        $pos =\
    \ min($pos);\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    }\
    \ else {\n        $neg = max($neg);\n    }\n    return [$neg, $pos];\n}\n", "\t\
    $max_neg = NULL;\n\t$min_pos = NULL;\n\tforeach ($lst as $val) {\n\t\tif ($val\
    \ > 0 && ($min_pos === NULL || $val < $min_pos)) {\n\t\t\t$min_pos = $val;\n\t\
    \t}\n\t\tif ($val < 0 && ($max_neg === NULL || $val > $max_neg)) {\n\t\t\t$max_neg\
    \ = $val;\n\t\t}\n\t}\n\treturn array($max_neg, $min_pos);\n}", "    if (count($lst)\
    \ == 0) {\n        return [null, null];\n    }\n\n    $negatives = array_filter($lst,\
    \ function($v) { return $v < 0; });\n    $positives = array_filter($lst, function($v)\
    \ { return $v > 0; });\n\n    if (count($negatives) == 0) {\n        $negatives\
    \ = [null];\n    }\n\n    if (count($positives) == 0) {\n        $positives =\
    \ [null];\n    }\n\n    $min = min($positives);\n    $max = max($negatives);\n\
    \n    return [$max, $min];\n}\n", "\t$lst = array_diff($lst, [0]);\n\tsort($lst);\n\
    \treturn empty($lst) || $lst[0] >= 0 ?\n\t\t[null, null] :\n\t\t[$lst[0], $lst[count($lst)\
    \ - 1]];\n}", "    $neg = None;\n    $pos = None;\n    foreach ($lst as $item)\
    \ {\n        if ($item < 0 && ($neg === None || $item > $neg)) {\n           \
    \ $neg = $item;\n        }\n        if ($item > 0 && ($pos === None || $item <\
    \ $pos)) {\n            $pos = $item;\n        }\n    }\n    return [$neg, $pos];\n\
    }\n", "    $largest = NULL;\n    $smallest = NULL;\n    if (count($lst) == 0)\
    \ {\n        return array($largest, $smallest);\n    } else {\n        foreach\
    \ ($lst as $item) {\n            if ($item > 0) {\n                if ($smallest\
    \ === NULL) {\n                    $smallest = $item;\n                } elseif\
    \ ($item < $smallest) {\n                    $smallest = $item;\n            \
    \    }\n            } elseif ($item < 0) {\n                if ($largest === NULL)\
    \ {\n                    $largest = $item;\n                } elseif ($item >\
    \ $largest) {\n                    $largest = $item;\n                }\n    \
    \        }\n        }\n        return array($largest, $smallest);\n    }\n}\n",
  "    if (empty($lst)) return [null, null];\n    $n = count($lst);\n    $min = $max\
    \ = null;\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] < 0) {\n  \
    \          if ($max === null || $lst[$i] > $max) $max = $lst[$i];\n        } else\
    \ {\n            if ($min === null || $lst[$i] < $min) $min = $lst[$i];\n    \
    \    }\n    }\n    return [$max, $min];\n}\n", "  // TODO\n}\n", "\tif (empty($lst))\
    \ {\n\t\treturn [NULL, NULL];\n\t}\n\t$negs = [];\n\t$pos = $lst[0];\n\tforeach\
    \ ($lst as $n) {\n\t\tif ($n < 0) {\n\t\t\t$negs[] = $n;\n\t\t} elseif ($n > 0\
    \ && $n < $pos) {\n\t\t\t$pos = $n;\n\t\t}\n\t}\n\treturn empty($negs) ? [NULL,\
    \ $pos] : [max($negs), $pos];\n}\n", "    $res = array();\n    $check = array_filter($lst,\
    \ function($i) { return $i > 0; });\n    if (empty($check)) {\n        $res[]\
    \ = null;\n    } else {\n        $res[] = min($check);\n    }\n    $check = array_filter($lst,\
    \ function($i) { return $i < 0; });\n    if (empty($check)) {\n        $res[]\
    \ = null;\n    } else {\n        $res[] = max($check);\n    }\n    return $res;\n\
    }\necho '<h1>Largest smallest integers</h1>';\nvar_dump(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\nvar_dump(largest_smallest_integers([]));\nvar_dump(largest_smallest_integers([0]));\n",
  "\t$largest_negative = null;\n\t$smallest_positive = null;\n\t\n\tforeach ($lst\
    \ as $value) {\n\t\tif ($value > 0) {\n\t\t\tif ($smallest_positive === null ||\
    \ $value < $smallest_positive) {\n\t\t\t\t$smallest_positive = $value;\n\t\t\t\
    }\n\t\t} elseif ($value < 0) {\n\t\t\tif ($largest_negative === null || $value\
    \ > $largest_negative) {\n\t\t\t\t$largest_negative = $value;\n\t\t\t}\n\t\t}\n\
    \t}\n\t\n\treturn array($largest_negative, $smallest_positive);\n}\necho 'largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == (None, 1): ' .\n\t\t(largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7]) == array(null, 1) ? 'PASS' : 'FAIL') .\n\t\t\"\\n\";\necho 'largest_smallest_integers([])\
    \ == (None, None): ' .\n\t\t(largest_smallest_integers([]) == array(null, null)\
    \ ? 'PASS' : 'FAIL') .\n\t\t\"\\n\";\necho 'largest_smallest_integers([0]) ==\
    \ (None, None): ' .\n\t\t(largest_smallest_integers([0]) == array(null, null)\
    \ ? 'PASS' : 'FAIL') .\n\t\t\"\\n\";\necho 'largest_smallest_integers([-1, -2,\
    \ -3, -4, 1, 2, 3, 4]) == (-4, 1): ' .\n\t\t(largest_smallest_integers([-1, -2,\
    \ -3, -4, 1, 2, 3, 4]) == array(-4, 1) ? 'PASS' : 'FAIL') .\n\t\t\"\\n\";", " \
    \ // Your code here\n}\n", "    $lst = array_filter($lst, function($val) {\n \
    \       return $val != 0;\n    });\n    if (count($lst) < 1) {\n        return\
    \ array(null, null);\n    } elseif (count($lst) == 1) {\n        if ($lst[0] >\
    \ 0) {\n            return array(null, $lst[0]);\n        } else {\n         \
    \   return array($lst[0], null);\n        }\n    }\n    $pos = array_filter($lst,\
    \ function($val) {\n        return $val > 0;\n    });\n    $neg = array_filter($lst,\
    \ function($val) {\n        return $val < 0;\n    });\n    return array(min($neg),\
    \ min($pos));\n}\n", "  $neg = [];\n  $pos = [];\n  $result = [];\n  if (count($lst)\
    \ > 0) {\n    foreach ($lst as $val) {\n      if ($val < 0) {\n        $neg[]\
    \ = $val;\n      } elseif ($val > 0) {\n        $pos[] = $val;\n      }\n    }\n\
    \    rsort($neg);\n    sort($pos);\n    if (count($neg) > 0) {\n      $result[]\
    \ = $neg[0];\n    } else {\n      $result[] = null;\n    }\n    if (count($pos)\
    \ > 0) {\n      $result[] = $pos[0];\n    } else {\n      $result[] = null;\n\
    \    }\n  } else {\n    $result = [null, null];\n  }\n  return $result;\n}\n",
  "  $tmp = [];\n  foreach ($lst as $v) {\n    if ($v >= 0) {\n      $tmp[] = $v;\n\
    \    }\n  }\n  if (!empty($tmp)) {\n    $b = min($tmp);\n  } else {\n    $b =\
    \ null;\n  }\n  $tmp = [];\n  foreach ($lst as $v) {\n    if ($v < 0) {\n    \
    \  $tmp[] = $v;\n    }\n  }\n  if (!empty($tmp)) {\n    $a = max($tmp);\n  } else\
    \ {\n    $a = null;\n  }\n  return [$a, $b];\n}", "    if (empty($lst)) {\n  \
    \      return array(null, null);\n    }\n\n    $negative = [];\n    $positive\
    \ = [];\n\n    foreach ($lst as $v) {\n        if ($v < 0) {\n            $negative[]\
    \ = $v;\n        } else if ($v > 0) {\n            $positive[] = $v;\n       \
    \ }\n    }\n\n    return array(empty($negative) ? null : max($negative), empty($positive)\
    \ ? null : min($positive));\n}\n\nclass LargeSmallIntTest extends TestCase {\n\
    \    public function testDescriptionExamples() {\n        $this->assertEquals(array(null,\
    \ 1), largest_smallest_integers([2, 4, 1, 3, 5, 7]));\n        $this->assertEquals(array(null,\
    \ null), largest_smallest_integers([]));\n        $this->assertEquals(array(null,\
    \ null), largest_smallest_integers([0]));\n    }\n}", "    if (empty($lst)) {\n\
    \        return array(null, null);\n    }\n\n    $largest_negative = null;\n \
    \   $smallest_positive = null;\n\n    for ($i = 0; $i < count($lst); $i++) {\n\
    \        if ($lst[$i] < 0) {\n            if ($largest_negative === null || $lst[$i]\
    \ > $largest_negative) {\n                $largest_negative = $lst[$i];\n    \
    \        }\n        } else {\n            if ($smallest_positive === null || $lst[$i]\
    \ < $smallest_positive) {\n                $smallest_positive = $lst[$i];\n  \
    \          }\n        }\n    }\n\n    return array($largest_negative, $smallest_positive);\n\
    }\n", '}', "  $a = max(array_filter($lst, function($n) { return $n < 0; }));\n\
    \  $b = min(array_filter($lst, function($n) { return $n > 0; }));\n  return array($a,\
    \ $b);\n}\n", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $el) {\n\
    \        if ($el < 0) {\n            if ($neg === null || $el > $neg) {\n    \
    \            $neg = $el;\n            }\n        } elseif ($el > 0) {\n      \
    \      if ($pos === null || $el < $pos) {\n                $pos = $el;\n     \
    \       }\n        }\n    }\n    return [$neg, $pos];\n}\n", "    $numeros = [0,\
    \ 0];\n    $cuenta = 0;\n    foreach ($lst as $numero) {\n        if ($numero\
    \ > 0) {\n            if ($numero < $numeros[1] || $numeros[1] == 0) {\n     \
    \           $numeros[1] = $numero;\n            }\n        } else {\n        \
    \    if ($numero > $numeros[0]) {\n                $numeros[0] = $numero;\n  \
    \          }\n        }\n        if ($numero != 0) {\n            $cuenta++;\n\
    \        }\n    }\n    if ($cuenta > 0) {\n        return ($numeros[0], $numeros[1]);\n\
    \    } else {\n        return (null, null);\n    }\n}\n", "    $a = $b = null;\n\
    \    foreach ($lst as $n) {\n        if ($n < 0 && ($a === null || $n > $a)) {\n\
    \            $a = $n;\n        }\n        if ($n > 0 && ($b === null || $n < $b))\
    \ {\n            $b = $n;\n        }\n    }\n    return [$a, $b];\n}\n", "   \
    \ $a = $b = null;\n    foreach ($lst as $el) {\n        if ($el > 0 && ($b ===\
    \ null || $el < $b)) $b = $el;\n        if ($el < 0 && ($a === null || $el > $a))\
    \ $a = $el;\n    }\n    return array($a, $b);\n}\n", "  $n = array_filter($lst,\
    \ function($x) { return $x < 0;});\n  $p = array_filter($lst, function($x) { return\
    \ $x > 0;});\n  $l = array_values($n);\n  $j = array_values($p);\n  if (empty($l))\
    \ {\n    $l = null;\n  } else {\n    $l = max($l);\n  }\n  if (empty($j)) {\n\
    \    $j = null;\n  } else {\n    $j = min($j);\n  }\n  return [$l, $j];\n}\n",
  "    if(empty($lst)) {\n        return [null, null];\n    }\n    $min = null;\n\
    \    $max = null;\n    foreach($lst as $i) {\n        if($i > 0) {\n         \
    \   if($min === null || $i < $min) {\n                $min = $i;\n           \
    \ }\n        } elseif($i < 0) {\n            if($max === null || $i > $max) {\n\
    \                $max = $i;\n            }\n        }\n    }\n    return [$max,\
    \ $min];\n}\n\nprint_r(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\nprint_r(largest_smallest_integers([]));\n\
    print_r(largest_smallest_integers([0]));", "    $negatives = [];\n    $positives\
    \ = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] > 0)\
    \ {\n            array_push($positives, $lst[$i]);\n        } elseif ($lst[$i]\
    \ < 0) {\n            array_push($negatives, $lst[$i]);\n        }\n    }\n  \
    \  if (count($negatives) == 0) {\n        $negatives = null;\n    } else {\n \
    \       rsort($negatives);\n        $negatives = $negatives[0];\n    }\n    if\
    \ (count($positives) == 0) {\n        $positives = null;\n    } else {\n     \
    \   sort($positives);\n        $positives = $positives[0];\n    }\n    return\
    \ [$negatives, $positives];\n}\necho \"<h2>Largest and Smallest Integers</h2>\"\
    ;\necho \"<pre>\";\nprint_r(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(largest_smallest_integers([]));\necho\
    \ \"</pre>\";\necho \"<pre>\";\nprint_r(largest_smallest_integers([0]));\necho\
    \ \"</pre>\";\n", "    if (count($lst) == 0) return array(null, null);\n    sort($lst);\n\
    \    if ($lst[0] > 0) return array(null, $lst[0]);\n    if ($lst[count($lst) -\
    \ 1] < 0) return array($lst[count($lst) - 1], null);\n    $neg = array();\n  \
    \  $pos = array();\n    foreach ($lst as $val) {\n        if ($val < 0) $neg[]\
    \ = $val;\n        else $pos[] = $val;\n    }\n    return array($neg[count($neg)\
    \ - 1], $pos[0]);\n}\n\n$a = array(2, 4, 1, 3, 5, 7);\n$a = largest_smallest_integers($a);\n\
    print_r($a);\necho \"\\n\";\n\n$a = array();\n$a = largest_smallest_integers($a);\n\
    print_r($a);\necho \"\\n\";\n\n$a = array(0);\n$a = largest_smallest_integers($a);\n\
    print_r($a);\necho \"\\n\";\n\n$a = array(-1, -2, -3, -4, -5);\n$a = largest_smallest_integers($a);\n\
    print_r($a);\necho \"\\n\";\n\n$a = array(1, 2, 3, 4, 5);\n$a = largest_smallest_integers($a);\n\
    print_r($a);\necho \"\\n\";\n\n$a = array(-1, -2, -3, -4, -5, 1, 2, 3, 4, 5);\n\
    $a = largest_smallest_integers($a);\nprint_r($a);\necho \"\\n\";\n\n$a = array(-1,\
    \ -2, -3, -4, -5, 1, -2, -3, -4, -5);\n$a = largest_smallest_integers($a);\nprint_r($a);\n\
    echo \"\\n\";\n\n$a = array(-1, -2, -3, -4, -5, 1, 2, 3, 4, 5, 6,", "    if (!$lst)\
    \ return [null, null];\n    $min = null;\n    $max = null;\n    foreach ($lst\
    \ as $v) {\n        if ($v > 0) {\n            if ($min === null || $v < $min)\
    \ $min = $v;\n        } else if ($v < 0) {\n            if ($max === null || $v\
    \ > $max) $max = $v;\n        }\n    }\n    return [$max, $min];\n}\n\nvar_dump(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\nvar_dump(largest_smallest_integers([]));\nvar_dump(largest_smallest_integers([0]));",
  "    $pos_min = null;\n    $neg_max = null;\n    foreach ($lst as $i) {\n      \
    \  if ($i < 0) {\n            if ($neg_max === null) {\n                $neg_max\
    \ = $i;\n            } else {\n                $neg_max = max($neg_max, $i);\n\
    \            }\n        } elseif ($i > 0) {\n            if ($pos_min === null)\
    \ {\n                $pos_min = $i;\n            } else {\n                $pos_min\
    \ = min($pos_min, $i);\n            }\n        }\n    }\n    return array($neg_max,\
    \ $pos_min);\n}", "    $pos = $neg = null;\n    foreach ($lst as $el) {\n    \
    \    if ($el > 0) {\n            if ($pos == null || $el < $pos) {\n         \
    \       $pos = $el;\n            }\n        } elseif ($el < 0) {\n           \
    \ if ($neg == null || $el > $neg) {\n                $neg = $el;\n           \
    \ }\n        }\n    }\n    return [$neg, $pos];\n}\n", "    $neg = null;\n   \
    \ $pos = null;\n    foreach ($lst as $x) {\n        if ($x > 0) {\n          \
    \  if ($pos === null || $x < $pos) {\n                $pos = $x;\n           \
    \ }\n        } elseif ($x < 0) {\n            if ($neg === null || $x > $neg)\
    \ {\n                $neg = $x;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n", "    $n = count($lst);\n    $largest = NULL;\n    $smallest =\
    \ NULL;\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] < 0) {\n    \
    \        if ($largest == NULL) {\n                $largest = $lst[$i];\n     \
    \       } else if ($lst[$i] > $largest) {\n                $largest = $lst[$i];\n\
    \            }\n        } else if ($lst[$i] > 0) {\n            if ($smallest\
    \ == NULL) {\n                $smallest = $lst[$i];\n            } else if ($lst[$i]\
    \ < $smallest) {\n                $smallest = $lst[$i];\n            }\n     \
    \   }\n    }\n    $result = [$largest, $smallest];\n    return $result;\n}\n$tests\
    \ = [[[-1, 0, 4, -2, 3, 8, -3], [-3, 3]],\n[[2, 4, 1, 3, 5, 7], [NULL, 1]],\n\
    [[], [NULL, NULL]],\n[[0], [NULL, NULL]]];\necho \"\\nTesting...\\n\";\nfor ($i\
    \ = 0; $i < count($tests); $i++) {\n    if (largest_smallest_integers($tests[$i][0])\
    \ == $tests[$i][1]) {\n        echo \"Test \" . ($i + 1) . \" passed.\\n\";\n\
    \    } else {\n        echo \"Test \" . ($i + 1) . \" failed.\\n\";\n    }\n}",
  "    $negatives = [];\n    $positives = [];\n    $lst2 = [];\n    foreach ($lst\
    \ as $item) {\n        if ($item > 0) {\n            $positives[] = $item;\n \
    \       } elseif ($item < 0) {\n            $negatives[] = $item;\n        }\n\
    \    }\n    if (empty($negatives)) {\n        $lst2[] = NULL;\n    } else {\n\
    \        $lst2[] = max($negatives);\n    }\n    if (empty($positives)) {\n   \
    \     $lst2[] = NULL;\n    } else {\n        $lst2[] = min($positives);\n    }\n\
    \    return $lst2;\n}\nprint_r(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\n\
    echo \"\\n\";\nprint_r(largest_smallest_integers([]));\necho \"\\n\";\nprint_r(largest_smallest_integers([0]));\n\
    echo \"\\n\";\n", "  $min = null;\n  $max = null;\n  foreach ($lst as $val) {\n\
    \    if ($val > 0) {\n      if ($min === null || $val < $min) {\n        $min\
    \ = $val;\n      }\n    } elseif ($val < 0) {\n      if ($max === null || $val\
    \ > $max) {\n        $max = $val;\n      }\n    }\n  }\n  return [$max, $min];\n\
    }\n", "  $min = null;\n  $max = null;\n  foreach ($lst as $value) {\n    if ($value\
    \ > 0) {\n      if (is_null($min) || $value < $min) {\n        $min = $value;\n\
    \      }\n    } else if ($value < 0) {\n      if (is_null($max) || $value > $max)\
    \ {\n        $max = $value;\n      }\n    }\n  }\n  return [$max, $min];\n}\n",
  "  rsort($lst);\n  sort($lst);\n  $arr = array();\n  if (count($lst) > 0) {\n  \
    \  if ($lst[0] < 0) {\n      $arr[] = $lst[0];\n    } else {\n      $arr[] = null;\n\
    \    }\n    if ($lst[count($lst) - 1] > 0) {\n      $arr[] = $lst[count($lst)\
    \ - 1];\n    } else {\n      $arr[] = null;\n    }\n  } else {\n    $arr[] = null;\n\
    \    $arr[] = null;\n  }\n  return $arr;\n}\necho \"<pre>\";\nprint_r(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(largest_smallest_integers([]));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(largest_smallest_integers([0]));\n\
    echo \"</pre>\";", "    $smallest_pos = null;\n    $largest_neg = null;\n    foreach\
    \ ($lst as $elem) {\n        if ($elem > 0) {\n            if ($smallest_pos ===\
    \ null || $elem < $smallest_pos) {\n                $smallest_pos = $elem;\n \
    \           }\n        } else if ($elem < 0) {\n            if ($largest_neg ===\
    \ null || $elem > $largest_neg) {\n                $largest_neg = $elem;\n   \
    \         }\n        }\n    }\n    return array($largest_neg, $smallest_pos);\n\
    }\n", "    $bigNeg = NULL;\n    $smallPos = NULL;\n    foreach ($lst as $value)\
    \ {\n        if ($value < 0 && ($bigNeg == NULL || $value > $bigNeg)) {\n    \
    \        $bigNeg = $value;\n        }\n        if ($value > 0 && ($smallPos ==\
    \ NULL || $value < $smallPos)) {\n            $smallPos = $value;\n        }\n\
    \    }\n    return [$bigNeg, $smallPos];\n}\n", "    $max = $min = null;\n   \
    \ $count = count($lst);\n    for ($i = 0; $i < $count; $i++) {\n        if ($lst[$i]\
    \ > 0) {\n            if ($min === null || $lst[$i] < $min) {\n              \
    \  $min = $lst[$i];\n            }\n        } else if ($lst[$i] < 0) {\n     \
    \       if ($max === null || $lst[$i] > $max) {\n                $max = $lst[$i];\n\
    \            }\n        }\n    }\n    return [$max, $min];\n}\n\nvar_dump(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));", "    $negs = array_filter($lst, function($num) { return\
    \ $num < 0; });\n    $pos = array_filter($lst, function($num) { return $num >\
    \ 0; });\n    $a = empty($negs) ? None : max($negs);\n    $b = empty($pos) ? None\
    \ : min($pos);\n    return array($a, $b);\n}\n\n$a = largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]);\n$a = largest_smallest_integers([]);\n$a = largest_smallest_integers([0]);\n",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $neg[] = $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n\
    \  }\n  if (!empty($neg)) {\n    $neg_max = max($neg);\n  } else {\n    $neg_max\
    \ = null;\n  }\n  if (!empty($pos)) {\n    $pos_min = min($pos);\n  } else {\n\
    \    $pos_min = null;\n  }\n  return [$neg_max, $pos_min];\n}\n\nprint_r(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\nprint_r(largest_smallest_integers([]));\nprint_r(largest_smallest_integers([0]));",
  "  $negatives = $positives = [];\n  foreach ($lst as $l) {\n    if ($l < 0) {\n\
    \      $negatives[] = $l;\n    } elseif ($l > 0) {\n      $positives[] = $l;\n\
    \    }\n  }\n  sort($negatives);\n  sort($positives);\n  $a = count($negatives)\
    \ ? $negatives[0] : null;\n  $b = count($positives) ? $positives[0] : null;\n\
    \  return [$a, $b];\n}\n", "    // Your code here.\n    $lst = array_values(array_filter($lst,\
    \ function($n) {\n        return $n != 0;\n    }));\n    if (empty($lst)) {\n\
    \        return [null, null];\n    }\n\n    $positive = array_filter($lst, function($n)\
    \ {\n        return $n > 0;\n    });\n    $negative = array_filter($lst, function($n)\
    \ {\n        return $n < 0;\n    });\n\n    return [\n        empty($negative)\
    \ ? null : max($negative),\n        empty($positive) ? null : min($positive)\n\
    \    ];\n}\n", "  $lst = array_filter($lst, function($x) {\n    return is_integer($x);\n\
    \  });\n  if (empty($lst)) {\n    return [null, null];\n  } else {\n    $negative\
    \ = array_filter($lst, function($x) {\n      return $x < 0;\n    });\n    $positive\
    \ = array_filter($lst, function($x) {\n      return $x > 0;\n    });\n    if (empty($negative))\
    \ {\n      $a = null;\n    } else {\n      $a = max($negative);\n    }\n    if\
    \ (empty($positive)) {\n      $b = null;\n    } else {\n      $b = min($positive);\n\
    \    }\n    return [$a, $b];\n  }\n}\n", "    $pos = $neg = null;\n    foreach\
    \ ($lst as $item) {\n        if ($item < 0) {\n            if ($neg == null ||\
    \ $item > $neg) {\n                $neg = $item;\n            }\n        } elseif\
    \ ($item > 0) {\n            if ($pos == null || $item < $pos) {\n           \
    \     $pos = $item;\n            }\n        }\n    }\n    return [$neg, $pos];\n\
    }\n", "  $positive = null;\n  $negative = null;\n  if (empty($lst)) {\n    return\
    \ array($negative, $positive);\n  }\n\n  foreach ($lst as $num) {\n    if ($num\
    \ < 0) {\n      if ($negative == null || $num > $negative) {\n        $negative\
    \ = $num;\n      }\n    } else if ($num > 0) {\n      if ($positive == null ||\
    \ $num < $positive) {\n        $positive = $num;\n      }\n    }\n  }\n\n  return\
    \ array($negative, $positive);\n}\n\nclass LargestSmallestIntegersTest extends\
    \ TestCase {\n  public function testBasics() {\n    $this->assertEquals(array(None,\
    \ 1), largest_smallest_integers([2, 4, 1, 3, 5, 7]));\n    $this->assertEquals(array(None,\
    \ None), largest_smallest_integers([]));\n    $this->assertEquals(array(None,\
    \ None), largest_smallest_integers([0]));\n    $this->assertEquals(array(-3, 1),\
    \ largest_smallest_integers([2, -2, 3, -3, 1]));\n    $this->assertEquals(array(-1,\
    \ None), largest_smallest_integers([-1]));\n    $this->assertEquals(array(None,\
    \ None), largest_smallest_integers([1]));\n    $this->assertEquals(array(-5, 4),\
    \ largest_smallest_integers([-1, -5, -7, -9, -8, 4]));\n    $this->assertEquals(array(-2,\
    \ None), largest_smallest_integers([-2]));\n    $this->assertEquals(array(None,\
    \ None), largest_smallest_integers([2]));\n    $this->assertEquals(array(-1, 1),\
    \ largest_smallest_integers([-1, 0, 1]));\n    $this->assertEquals(array(-1, None),\
    \ largest_smallest_integers([-1, 0]));\n    $this->assertEquals(array(None, None),\
    \ largest_smallest", "    $negatives = array_filter($lst, function($v) { return\
    \ $v < 0; });\n    $positives = array_filter($lst, function($v) { return $v >\
    \ 0; });\n    if (count($negatives) > 0) {\n        $a = max($negatives);\n  \
    \  } else {\n        $a = null;\n    }\n    if (count($positives) > 0) {\n   \
    \     $b = min($positives);\n    } else {\n        $b = null;\n    }\n    return\
    \ array($a, $b);\n}", "    $neg = array_filter($lst, function($v) { return $v\
    \ < 0; });\n    $pos = array_filter($lst, function($v) { return $v > 0; });\n\
    \    return (!empty($neg) ? max($neg) : null) . ', ' .\n           (!empty($pos)\
    \ ? min($pos) : null);\n}\n", "    $smallest = null;\n    $largest = null;\n \
    \   foreach ($lst as $item) {\n        if ($item < 0) {\n            if ($largest\
    \ === null || $item > $largest) {\n                $largest = $item;\n       \
    \     }\n        } elseif ($item > 0) {\n            if ($smallest === null ||\
    \ $item < $smallest) {\n                $smallest = $item;\n            }\n  \
    \      }\n    }\n    return [$largest, $smallest];\n}\necho json_encode(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\necho json_encode(largest_smallest_integers([]));\necho json_encode(largest_smallest_integers([0]));",
  "\tif(empty($lst)) return [null, null];\n\t$neg = [];\n\t$pos = [];\n\tforeach($lst\
    \ as $item) {\n\t\tif($item < 0) {\n\t\t\t$neg[] = $item;\n\t\t} else if($item\
    \ > 0) {\n\t\t\t$pos[] = $item;\n\t\t}\n\t}\n\treturn [empty($neg) ? null : max($neg),\
    \ empty($pos) ? null : min($pos)];\n}", "\tif (empty($lst)) return [null, null];\n\
    \t\n\t$negatives = [];\n\t$positives = [];\n\t\n\tforeach ($lst as $int) {\n\t\
    \tif ($int < 0) {\n\t\t\t$negatives[] = $int;\n\t\t} elseif ($int > 0) {\n\t\t\
    \t$positives[] = $int;\n\t\t}\n\t}\n\t\n\tif (empty($negatives)) {\n\t\t$negatives\
    \ = null;\n\t} else {\n\t\t$negatives = max($negatives);\n\t}\n\t\n\tif (empty($positives))\
    \ {\n\t\t$positives = null;\n\t} else {\n\t\t$positives = min($positives);\n\t\
    }\n\t\n\treturn [$negatives, $positives];\n}\n", "    $negatives = [];\n    $positives\
    \ = [];\n    foreach ($lst as $l) {\n        if ($l > 0) {\n            $positives[]\
    \ = $l;\n        } elseif ($l < 0) {\n            $negatives[] = $l;\n       \
    \ }\n    }\n    $a = ($negatives) ? max($negatives) : null;\n    $b = ($positives)\
    \ ? min($positives) : null;\n    return [$a, $b];\n}\n\n$tests = [\n    [[2, 4,\
    \ 1, 3, 5, 7], [null, 1]],\n    [[], [null, null]],\n    [[0], [null, null]],\n\
    \    [[-1, -2, -5, -7, -11], [-1, null]],\n    [[-1, -2, -5, -7, 11], [-1, 11]],\n\
    \    [[-1, 2, -5, -7, 11], [-1, 2]],\n    [[1, 2, 5, 7, 11], [null, 1]],\n];\n\
    \nforeach ($tests as [$input, $expected]) {\n    $result = largest_smallest_integers($input);\n\
    \    echo \"$result == $expected\\n\";\n}", "    if (empty($lst)) return [null,\
    \ null];\n    $positive = $negative = null;\n    foreach ($lst as $i) {\n    \
    \    if ($i > 0) $positive = $positive === null ? $i : min($positive, $i);\n \
    \       if ($i < 0) $negative = $negative === null ? $i : max($negative, $i);\n\
    \    }\n    return [$negative, $positive];\n}", "  $neg = array_filter($lst, function($n)\
    \ {\n    return $n < 0;\n  });\n  $pos = array_filter($lst, function($n) {\n \
    \   return $n > 0;\n  });\n  return [\n    count($neg) ? max($neg) : null,\n \
    \   count($pos) ? min($pos) : null\n  ];\n}\n", "  $biggest = null;\n  $smallest\
    \ = null;\n  foreach ($lst as $num) {\n    if ($num > 0) {\n      if ($num < $smallest\
    \ || $smallest === null) {\n        $smallest = $num;\n      }\n    } elseif ($num\
    \ < 0) {\n      if ($num > $biggest || $biggest === null) {\n        $biggest\
    \ = $num;\n      }\n    }\n  }\n  return [$biggest, $smallest];\n}\n\necho \"\
    This should be (null, null): \" . var_export(largest_smallest_integers([0]), true)\
    \ . \"\\n\";\necho \"This should be (null, 1): \" . var_export(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]), true) . \"\\n\";\necho \"This should be (null, null): \" .\
    \ var_export(largest_smallest_integers([]), true) . \"\\n\";\necho \"This should\
    \ be (3, 1): \" . var_export(largest_smallest_integers([2, 4, -3, 1, -5, 7]),\
    \ true) . \"\\n\";\necho \"This should be (-3, 1): \" . var_export(largest_smallest_integers([2,\
    \ 4, -3, 1, -5, -7]), true) . \"\\n\";\necho \"This should be (-3, null): \" .\
    \ var_export(largest_smallest_integers([-2, -4, -3, -1, -5, -7]), true) . \"\\\
    n\";\necho \"This should be (null, 1): \" . var_export(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]), true) . \"\\n\";\necho \"This should be (null, 1): \" . var_export(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, -7]), true) . \"\\n\";\necho \"This should be (null, null): \" .\
    \ var_export(largest_smallest_integers([0]), true) . \"\\n\";\necho \"This should\
    \ be (null, 1): \" . var_export", "    $min = PHP_INT_MAX;\n    $max = PHP_INT_MIN;\n\
    \    foreach ($lst as $int) {\n        if ($int < 0) {\n            $max = max($max,\
    \ $int);\n        } elseif ($int > 0) {\n            $min = min($min, $int);\n\
    \        }\n    }\n    if ($min == PHP_INT_MAX) {\n        $min = null;\n    }\n\
    \    if ($max == PHP_INT_MIN) {\n        $max = null;\n    }\n    return [$max,\
    \ $min];\n}\n\nprint_r(largest_smallest_integers([2, 4, 1, 3, 5, 7])); // (None,\
    \ 1)\nprint_r(largest_smallest_integers([])); // (None, None)\nprint_r(largest_smallest_integers([0]));\
    \ // (None, None)", "    if (!$lst) {\n        return [null, null];\n    }\n \
    \   $max = PHP_INT_MIN;\n    $min = PHP_INT_MAX;\n    foreach ($lst as $element)\
    \ {\n        if ($element > 0) {\n            $min = min($min, $element);\n  \
    \      } elseif ($element < 0) {\n            $max = max($max, $element);\n  \
    \      }\n    }\n    if ($max == PHP_INT_MIN) {\n        $max = null;\n    }\n\
    \    if ($min == PHP_INT_MAX) {\n        $min = null;\n    }\n    return [$max,\
    \ $min];\n}\n", "    if (!$lst) {\n        return [null, null];\n    }\n    $negatives\
    \ = array_filter($lst, function ($v) {\n        return $v < 0;\n    });\n    $positives\
    \ = array_filter($lst, function ($v) {\n        return $v > 0;\n    });\n    return\
    \ [max($negatives), min($positives)];\n}\n", "  $a = null;\n  $b = null;\n  if\
    \ (!empty($lst)) {\n    foreach ($lst as $i) {\n      if ($i >= 0) {\n       \
    \ if ($b === null || $i < $b) {\n          $b = $i;\n        }\n      } else {\n\
    \        if ($a === null || $i > $a) {\n          $a = $i;\n        }\n      }\n\
    \    }\n  }\n  return array($a, $b);\n}\n", "  $min = PHP_INT_MAX;\n  $max = PHP_INT_MIN;\n\
    \  foreach ($lst as $i) {\n    if ($i > 0) {\n      $min = min($min, $i);\n  \
    \  } else if ($i < 0) {\n      $max = max($max, $i);\n    }\n  }\n  return array($max\
    \ == PHP_INT_MIN ? null : $max, $min == PHP_INT_MAX ? null : $min);\n}\n", " \
    \ $smallest = null;\n  $largest = null;\n  foreach ($lst as $i) {\n    if ($i\
    \ < 0) {\n      if ($largest === null || $i > $largest) {\n        $largest =\
    \ $i;\n      }\n    } else if ($i > 0) {\n      if ($smallest === null || $i <\
    \ $smallest) {\n        $smallest = $i;\n      }\n    }\n  }\n  return [$largest,\
    \ $smallest];\n}\n\necho \"<pre>\";\necho largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7]) . \"\\n\";\necho largest_smallest_integers([]) . \"\\n\";\necho largest_smallest_integers([0])\
    \ . \"\\n\";\necho \"</pre>\";", "    if (empty($lst)) return [null, null];\n\
    \    $sorted = array_unique($lst);\n    sort($sorted);\n    if (count($sorted)\
    \ == 1) return [null, null];\n    $last = count($sorted) - 1;\n    if ($sorted[0]\
    \ > 0) return [null, $sorted[0]];\n    if ($sorted[$last] < 0) return [$sorted[$last],\
    \ null];\n    return [$sorted[$last], $sorted[0]];\n}\necho '[2, 4, 1, 3, 5, 7]\
    \ ';\nvar_dump(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\necho '[0] ';\n\
    var_dump(largest_smallest_integers([0]));\necho '[] ';\nvar_dump(largest_smallest_integers([]));\n\
    echo '[-1, 0, 1] ';\nvar_dump(largest_smallest_integers([-1, 0, 1]));\necho '[-1,\
    \ 0, -1] ';\nvar_dump(largest_smallest_integers([-1, 0, -1]));\necho '[-5, 0,\
    \ -1] ';\nvar_dump(largest_smallest_integers([-5, 0, -1]));\necho '[1, 1, 1] ';\n\
    var_dump(largest_smallest_integers([1, 1, 1]));\necho '[1, 0, -1] ';\nvar_dump(largest_smallest_integers([1,\
    \ 0, -1]));", "    $large = null;\n    $small = null;\n    foreach ($lst as $value)\
    \ {\n        if ($value >= 0) {\n            if (is_null($small)) $small = $value;\n\
    \            if ($value < $small) $small = $value;\n        } else {\n       \
    \     if (is_null($large)) $large = $value;\n            if ($value > $large)\
    \ $large = $value;\n        }\n    }\n    return array($large, $small);\n}\n\n\
    print_r(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\nprint_r(largest_smallest_integers([]));\n\
    print_r(largest_smallest_integers([0]));\n", "  $negatives = array_filter($lst,\
    \ function($num) {\n    return $num < 0;\n  });\n  if (empty($negatives)) {\n\
    \    $negatives = null;\n  } else {\n    $negatives = max($negatives);\n  }\n\n\
    \  $positives = array_filter($lst, function($num) {\n    return $num > 0;\n  });\n\
    \  if (empty($positives)) {\n    $positives = null;\n  } else {\n    $positives\
    \ = min($positives);\n  }\n\n  return array($negatives, $positives);\n}", "  $neg\
    \ = $pos = null;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      if ($neg\
    \ === null || $num > $neg) {\n        $neg = $num;\n      }\n    } elseif ($num\
    \ > 0) {\n      if ($pos === null || $num < $pos) {\n        $pos = $num;\n  \
    \    }\n    }\n  }\n  return [$neg, $pos];\n}\n", "    if (empty($lst)) return\
    \ [null, null];\n    $min = $max = $lst[0];\n    foreach ($lst as $v) {\n    \
    \    if ($v > 0 && $v < $min) $min = $v;\n        if ($v < 0 && $v > $max) $max\
    \ = $v;\n    }\n    return [$max, $min];\n}\necho '<pre>';\nprint_r(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\nprint_r(largest_smallest_integers([]));\nprint_r(largest_smallest_integers([0]));\n\
    echo '</pre>';", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $n) {\n\
    \        if ($n > 0) {\n            $pos[] = $n;\n        } elseif ($n < 0) {\n\
    \            $neg[] = $n;\n        }\n    }\n    $a = null;\n    $b = null;\n\
    \    if (count($neg) > 0) {\n        $a = max($neg);\n    }\n    if (count($pos)\
    \ > 0) {\n        $b = min($pos);\n    }\n    return [$a, $b];\n}\n", "  if (!is_array($lst))\
    \ {\n    return false;\n  }\n  $positive = [];\n  $negative = [];\n  foreach ($lst\
    \ as $value) {\n    if ($value > 0) {\n      $positive[] = $value;\n    } else\
    \ if ($value < 0) {\n      $negative[] = $value;\n    }\n  }\n  if (count($positive)\
    \ > 0) {\n    $smallest_pos = min($positive);\n  } else {\n    $smallest_pos =\
    \ NULL;\n  }\n  if (count($negative) > 0) {\n    $largest_neg = max($negative);\n\
    \  } else {\n    $largest_neg = NULL;\n  }\n  return [$largest_neg, $smallest_pos];\n\
    }\necho \"largest_smallest_integers(2, 4, 1, 3, 5, 7) === (None, 1): \";\necho\
    \ (largest_smallest_integers([2, 4, 1, 3, 5, 7]) === [NULL, 1]) ? 'PASS' : 'FAIL';\n\
    echo \"\\n\";\necho \"largest_smallest_integers([]) === (None, None): \";\necho\
    \ (largest_smallest_integers([]) === [NULL, NULL]) ? 'PASS' : 'FAIL';\necho \"\
    \\n\";\necho \"largest_smallest_integers([0]) === (None, None): \";\necho (largest_smallest_integers([0])\
    \ === [NULL, NULL]) ? 'PASS' : 'FAIL';\necho \"\\n\";\necho \"largest_smallest_integers(2,\
    \ 4, -1, 3, 5, -7) === (-7, 1): \";\necho (largest_smallest_integers([2, 4, -1,\
    \ 3, 5, -7]) === [-7, 1]) ? 'PASS' : 'FAIL';\necho \"\\n\";\necho \"largest_smallest_integers(-1,\
    \ -2, -3, -4, -5) === (-1, None): \";\necho (largest_smallest_integers([-1, -2,\
    \ -3, -4, -5]) === [-1, NULL]) ? '", "    if (empty($lst)) return [null, null];\n\
    \    $min = PHP_INT_MAX;\n    $max = PHP_INT_MIN;\n    foreach ($lst as $v) {\n\
    \        if ($v > 0) {\n            $min = min($min, $v);\n        } elseif ($v\
    \ < 0) {\n            $max = max($max, $v);\n        }\n    }\n    return [$max\
    \ == PHP_INT_MIN ? null : $max, $min == PHP_INT_MAX ? null : $min];\n}\n", " \
    \   $a = $b = null;\n    $neg = $pos = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] > 0) {\n            $pos[] = $lst[$i];\n     \
    \   } else if ($lst[$i] < 0) {\n            $neg[] = $lst[$i];\n        }\n  \
    \  }\n    if (count($neg) > 0) {\n        $a = max($neg);\n    }\n    if (count($pos)\
    \ > 0) {\n        $b = min($pos);\n    }\n    return [$a, $b];\n}\n", "    $min\
    \ = null;\n    $max = null;\n    foreach ($lst as $val) {\n        if ($val >\
    \ 0) {\n            if ($min === null || $val < $min) {\n                $min\
    \ = $val;\n            }\n        } else if ($val < 0) {\n            if ($max\
    \ === null || $val > $max) {\n                $max = $val;\n            }\n  \
    \      }\n    }\n    return [$max, $min];\n}", "\tsort($lst);\n\tif (!empty($lst))\
    \ {\n\t\tif (max($lst) < 0) {\n\t\t\treturn array(max($lst), None);\n\t\t} elseif\
    \ (min($lst) > 0) {\n\t\t\treturn array(None, min($lst));\n\t\t} else {\n\t\t\t\
    return array(None, None);\n\t\t}\n\t} else {\n\t\treturn array(None, None);\n\t\
    }\n}", "    $min = PHP_INT_MAX;\n    $max = PHP_INT_MIN;\n    if (sizeof($lst)\
    \ == 0) {\n        return [null, null];\n    }\n    for ($i = 0; $i < sizeof($lst);\
    \ $i++) {\n        if ($lst[$i] > 0 && $lst[$i] < $min) {\n            $min =\
    \ $lst[$i];\n        }\n        if ($lst[$i] < 0 && $lst[$i] > $max) {\n     \
    \       $max = $lst[$i];\n        }\n    }\n    return [$max, $min];\n}", "  $negs\
    \ = array_filter($lst, function($num) { return $num < 0; });\n  $pos = array_filter($lst,\
    \ function($num) { return $num > 0; });\n  return [max($negs), min($pos)];\n}\n\
    \nvar_dump(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\nvar_dump(largest_smallest_integers([]));\n\
    var_dump(largest_smallest_integers([0]));", "    sort($lst);\n    $smallest =\
    \ null;\n    $largest = null;\n    foreach ($lst as $l) {\n        if ($l < 0)\
    \ {\n            $largest = $l;\n        } else {\n            $smallest = $l;\n\
    \            break;\n        }\n    }\n    return array($largest, $smallest);\n\
    }", "  $l = 0;\n  $s = 0;\n  foreach ($lst as $item) {\n    if ($item < 0 && $item\
    \ > $l) {\n      $l = $item;\n    }\n    if ($item > 0 && ($item < $s || $s ==\
    \ 0)) {\n      $s = $item;\n    }\n  }\n  if ($l == 0 && $s == 0) {\n    return\
    \ [NULL, NULL];\n  }\n  return [$l, $s];\n}\n", "  $smallest = null;\n  $largest\
    \ = null;\n  foreach ($lst as $val) {\n    if ($val < 0) {\n      if ($largest\
    \ === null || $val > $largest) {\n        $largest = $val;\n      }\n    } else\
    \ {\n      if ($smallest === null || $val < $smallest) {\n        $smallest =\
    \ $val;\n      }\n    }\n  }\n  return [$largest, $smallest];\n}\n\nvar_dump(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\nvar_dump(largest_smallest_integers([]));\nvar_dump(largest_smallest_integers([0]));",
  "  // your code here\n}\n", "\t$negative_lst = [];\n\t$positive_lst = [];\n\tforeach\
    \ ($lst as $item) {\n\t\tif ($item > 0) {\n\t\t\t$positive_lst[] = $item;\n\t\t\
    } elseif ($item < 0) {\n\t\t\t$negative_lst[] = $item;\n\t\t}\n\t}\n\tif (count($negative_lst)\
    \ == 0) {\n\t\t$negative_lst[] = null;\n\t}\n\tif (count($positive_lst) == 0)\
    \ {\n\t\t$positive_lst[] = null;\n\t}\n\tsort($negative_lst);\n\tsort($positive_lst);\n\
    \treturn [end($negative_lst), $positive_lst[0]];\n}\n", "    $lstNeg = [];\n \
    \   $lstPos = [];\n    foreach ($lst as $item) {\n        if ($item > 0) {\n \
    \           $lstPos[] = $item;\n        } elseif ($item < 0) {\n            $lstNeg[]\
    \ = $item;\n        }\n    }\n    if (empty($lstNeg) && empty($lstPos)) {\n  \
    \      return [null, null];\n    } elseif (empty($lstNeg)) {\n        return [null,\
    \ min($lstPos)];\n    } elseif (empty($lstPos)) {\n        return [max($lstNeg),\
    \ null];\n    } else {\n        return [max($lstNeg), min($lstPos)];\n    }\n\
    }\necho '<pre>';\nprint_r(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\nprint_r(largest_smallest_integers([]));\n\
    print_r(largest_smallest_integers([0]));\necho '</pre>';", "\t$l = NULL;\n\t$s\
    \ = NULL;\n\tforeach ($lst as $v) {\n\t\tif ($v > 0) {\n\t\t\tif ($s === NULL\
    \ || $v < $s) {\n\t\t\t\t$s = $v;\n\t\t\t}\n\t\t} else if ($v < 0) {\n\t\t\tif\
    \ ($l === NULL || $v > $l) {\n\t\t\t\t$l = $v;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ array($l, $s);\n}\n", "    $min = PHP_INT_MAX;\n    $max = PHP_INT_MIN;\n  \
    \  $min_pos = false;\n    $max_neg = false;\n    foreach ($lst as $item) {\n \
    \       if ($item >= 0 && $item < $min) {\n            $min = $item;\n       \
    \     $min_pos = true;\n        }\n        if ($item < 0 && $item > $max) {\n\
    \            $max = $item;\n            $max_neg = true;\n        }\n    }\n \
    \   return [$max_neg ? $max : null, $min_pos ? $min : null];\n}\n", "    $min\
    \ = 0;\n    $max = 0;\n    $len = count($lst);\n    if ($len > 0) {\n        $min\
    \ = $lst[0];\n        $max = $lst[0];\n        for ($i = 1; $i < $len; $i++) {\n\
    \            if ($lst[$i] < $min) {\n                $min = $lst[$i];\n      \
    \      }\n            if ($lst[$i] > $max) {\n                $max = $lst[$i];\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n\nprint_r(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\necho \"\\n\";\nprint_r(largest_smallest_integers([]));\n\
    echo \"\\n\";\nprint_r(largest_smallest_integers([0]));\necho \"\\n\";\n", " \
    \   $neg = NULL;\n    $pos = NULL;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($neg === NULL) {\n                $neg = $num;\n   \
    \         } elseif ($num > $neg) {\n                $neg = $num;\n           \
    \ }\n        } elseif ($num > 0) {\n            if ($pos === NULL) {\n       \
    \         $pos = $num;\n            } elseif ($num < $pos) {\n               \
    \ $pos = $num;\n            }\n        }\n    }\n    return array($neg, $pos);\n\
    }", "    $max = null;\n    $min = null;\n    $max2 = null;\n    $min2 = null;\n\
    \    foreach ($lst as $value) {\n        if ($value > 0 && ($min == null || $value\
    \ < $min)) {\n            $min = $value;\n        }\n        if ($value < 0 &&\
    \ ($max == null || $value > $max)) {\n            $max = $value;\n        }\n\
    \    }\n    return [$max, $min];\n}\n", "\t// TODO: Write your code here\n}",
  "  $count = 0;\n  $output = array();\n  if (count($lst) == 0){\n    return array(NULL,\
    \ NULL);\n  }\n  foreach ($lst as $value) {\n    if ($value < 0){\n      $output[0]\
    \ = $value;\n      $count += 1;\n    }\n    if ($value > 0){\n      $output[1]\
    \ = $value;\n      $count += 1;\n    }\n  }\n  if ($count == 0){\n    return array(NULL,\
    \ NULL);\n  }\n  elseif ($count == 1){\n    return array(NULL, $output[1]);\n\
    \  }\n  elseif ($count == 2){\n    return array($output[0], $output[1]);\n  }\n\
    }\n\n$list1 = array(2, 4, 1, 3, 5, 7);\n$list2 = array();\n$list3 = array(0);\n\
    echo largest_smallest_integers($list1);\necho '<br>';\necho largest_smallest_integers($list2);\n\
    echo '<br>';\necho largest_smallest_integers($list3);\necho '<br>';\n\n", "  if\
    \ (count($lst) == 0) {\n    return array(null, null);\n  }\n  $large = null;\n\
    \  $small = null;\n  foreach ($lst as $i) {\n    if ($i > 0) {\n      if (is_null($small)\
    \ || $i < $small) {\n        $small = $i;\n      }\n    } else if ($i < 0) {\n\
    \      if (is_null($large) || $i > $large) {\n        $large = $i;\n      }\n\
    \    }\n  }\n  return array($large, $small);\n}\n", "  $positive = PHP_INT_MAX;\n\
    \  $negative = PHP_INT_MIN;\n  foreach ($lst as $l) {\n    if ($l > 0 && $l <\
    \ $positive) {\n      $positive = $l;\n    }\n    if ($l < 0 && $l > $negative)\
    \ {\n      $negative = $l;\n    }\n  }\n  if ($positive == PHP_INT_MAX) {\n  \
    \  $positive = null;\n  }\n  if ($negative == PHP_INT_MIN) {\n    $negative =\
    \ null;\n  }\n  return [$negative, $positive];\n}\nprint_r(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\nprint_r(largest_smallest_integers([]));\nprint_r(largest_smallest_integers([0]));",
  "  $neg = [];\n  $pos = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($lst[$i]\
    \ < 0) {\n      array_push($neg, $lst[$i]);\n    } elseif ($lst[$i] > 0) {\n \
    \     array_push($pos, $lst[$i]);\n    }\n  }\n  if (count($neg) === 0) {\n  \
    \  $neg = \"None\";\n  } else {\n    $neg = max($neg);\n  }\n  if (count($pos)\
    \ === 0) {\n    $pos = \"None\";\n  } else {\n    $pos = min($pos);\n  }\n  return\
    \ \"(\" . $neg . \", \" . $pos . \")\";\n}\n\necho largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]);\n", "  if(!$lst) return array(null, null);\n  $negative = null;\n\
    \  $positive = null;\n  foreach($lst as $num) {\n    if($num < 0) {\n      if($negative\
    \ === null || $num > $negative) {\n        $negative = $num;\n      }\n    } elseif($num\
    \ > 0) {\n      if($positive === null || $num < $positive) {\n        $positive\
    \ = $num;\n      }\n    }\n  }\n  return array($negative, $positive);\n}\n", " \
    \   // TODO\n}\necho largest_smallest_integers([2, 4, 1, 3, 5, 7]); // (None,\
    \ 1)\necho largest_smallest_integers([]); // (None, None)\necho largest_smallest_integers([0]);\
    \ // (None, None)", "  $s = $l = null;\n  foreach ($lst as $v) {\n    if ($v >\
    \ 0) {\n      if ($s === null || $v < $s) $s = $v;\n    } else if ($v < 0) {\n\
    \      if ($l === null || $v > $l) $l = $v;\n    }\n  }\n  return array($l, $s);\n\
    }\n\nif (!debug_backtrace()) {\n  print_r(largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7]));\n  print_r(largest_smallest_integers([]));\n  print_r(largest_smallest_integers([0]));\n\
    }", "  // Your code here\n}\necho largest_smallest_integers([2, 4, 1, 3, 5, 7])\
    \ . \"\\n\";\necho largest_smallest_integers([]) . \"\\n\";\necho largest_smallest_integers([0])\
    \ . \"\\n\";\necho largest_smallest_integers([-1, -2, -3, -4, -5]) . \"\\n\";\n\
    echo largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]) . \"\\n\"\
    ;\necho largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]) . \"\
    \\n\";", "    if (empty($lst)) {\n        return array(null, null);\n    }\n \
    \   $a = array();\n    $b = array();\n    foreach ($lst as $value) {\n       \
    \ if ($value < 0) {\n            $a[] = $value;\n        } elseif ($value > 0)\
    \ {\n            $b[] = $value;\n        }\n    }\n    if (empty($a)) {\n    \
    \    $a = null;\n    } else {\n        $a = max($a);\n    }\n    if (empty($b))\
    \ {\n        $b = null;\n    } else {\n        $b = min($b);\n    }\n    return\
    \ array($a, $b);\n}\n", "    $neg = $pos = [];\n    foreach ($lst as $num) {\n\
    \        if ($num > 0) {\n            $pos[] = $num;\n        } elseif ($num <\
    \ 0) {\n            $neg[] = $num;\n        }\n    }\n    return [max($neg) ?:\
    \ null, min($pos) ?: null];\n}\n", "\tif (count($lst) == 0) {\n\t\treturn array(NULL,\
    \ NULL);\n\t}\n\t$maxNeg = NULL;\n\t$minPos = NULL;\n\tforeach ($lst as $x) {\n\
    \t\tif ($x < 0 && ($maxNeg == NULL || $x > $maxNeg)) {\n\t\t\t$maxNeg = $x;\n\t\
    \t}\n\t\tif ($x > 0 && ($minPos == NULL || $x < $minPos)) {\n\t\t\t$minPos = $x;\n\
    \t\t}\n\t}\n\treturn array($maxNeg, $minPos);\n}\n", "  if(!$lst) return [null,\
    \ null];\n  $negs = [];\n  $pos = null;\n  foreach($lst as $i) {\n    if($i <\
    \ 0) {\n      $negs[] = $i;\n    } elseif($i > 0) {\n      if($pos == null ||\
    \ $i < $pos) {\n        $pos = $i;\n      }\n    }\n  }\n  if(!$negs) {\n    return\
    \ [null, $pos];\n  }\n  rsort($negs);\n  return [$negs[0], $pos];\n}\n", "   \
    \ $result = array(NULL, NULL);\n    $positive = array();\n    $negative = array();\n\
    \    foreach ($lst as $val) {\n        if ($val > 0) {\n            $positive[]\
    \ = $val;\n        } elseif ($val < 0) {\n            $negative[] = $val;\n  \
    \      }\n    }\n    if (count($positive) > 0) {\n        $result[1] = min($positive);\n\
    \    }\n    if (count($negative) > 0) {\n        $result[0] = max($negative);\n\
    \    }\n    return $result;\n}\n\necho \"largest_smallest_integers([2, 4, 1, 3,\
    \ 5, 7]) == (\" . implode(', ', largest_smallest_integers([2, 4, 1, 3, 5, 7]))\
    \ . \")\\n\";\necho \"largest_smallest_integers([]) == (\" . implode(', ', largest_smallest_integers([]))\
    \ . \")\\n\";\necho \"largest_smallest_integers([0]) == (\" . implode(', ', largest_smallest_integers([0]))\
    \ . \")\\n\";", "    $pos = null;\n    $neg = null;\n    foreach ($lst as $el)\
    \ {\n        if ($el > 0) {\n            if ($pos === null || $el < $pos) {\n\
    \                $pos = $el;\n            }\n        } else if ($el < 0) {\n \
    \           if ($neg === null || $el > $neg) {\n                $neg = $el;\n\
    \            }\n        }\n    }\n    return [$neg, $pos];\n}\n", "    $pos =\
    \ NULL;\n    $neg = NULL;\n    foreach ($lst as $number) {\n        if ($number\
    \ > 0) {\n            if ($pos == NULL || $number < $pos) {\n                $pos\
    \ = $number;\n            }\n        } elseif ($number < 0) {\n            if\
    \ ($neg == NULL || $number > $neg) {\n                $neg = $number;\n      \
    \      }\n        }\n    }\n    return array($neg, $pos);\n}", "    $neg = $pos\
    \ = null;\n    foreach ($lst as $e) {\n        if ($e < 0) {\n            if ($neg\
    \ === null) {\n                $neg = $e;\n            } else {\n            \
    \    $neg = max($neg, $e);\n            }\n        } else if ($e > 0) {\n    \
    \        if ($pos === null) {\n                $pos = $e;\n            } else\
    \ {\n                $pos = min($pos, $e);\n            }\n        }\n    }\n\
    \    return [$neg, $pos];\n}\n\n$tests = [\n    [[2, 4, 1, 3, 5, 7], [null, 1]],\n\
    \    [[], [null, null]],\n    [[0], [null, null]],\n    [[-1, -2, -3, -4, 5, -6,\
    \ -7, -8, -9, -10], [-1, 5]],\n    [[1, 2, 3, 4, -5, 6, 7, 8, 9, 10], [-5, 1]],\n\
    \    [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], [-1, null]],\n    [[1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10], [null, 1]],\n];\n\necho '<pre>';\nforeach ($tests as\
    \ $test) {\n    $lst = $test[0];\n    $ret = largest_smallest_integers($lst);\n\
    \    echo 'Input: ' . join(', ', $lst) . PHP_EOL;\n    echo 'Expected: ' . join(',\
    \ ', $test[1]) . PHP_EOL;\n    echo 'Actual: ' . join(', ', $ret) . PHP_EOL;\n\
    \    echo 'Pass: ' . (join(', ', $ret) === join(', ', $test[1]) ? 'Yes' : 'No')\
    \ . PHP_EOL;\n    echo '===================================' . PHP_EOL;\n}\necho\
    \ '</pre>';", "\t$negative = [];\n\t$positive = [];\n\tforeach ($lst as $num)\
    \ {\n\t\tif ($num < 0) {\n\t\t\t$negative[] = $num;\n\t\t} else if ($num > 0)\
    \ {\n\t\t\t$positive[] = $num;\n\t\t}\n\t}\n\t$res = [max($negative), min($positive)];\n\
    \treturn $res;\n}\n", "    $a = NULL;\n    $b = NULL;\n    if(count($lst) != 0)\
    \ {\n        foreach($lst as $item) {\n            if($item < 0) {\n         \
    \       if($a == NULL) {\n                    $a = $item;\n                } else\
    \ {\n                    if($item > $a) {\n                        $a = $item;\n\
    \                    }\n                }\n            } else if($item > 0) {\n\
    \                if($b == NULL) {\n                    $b = $item;\n         \
    \       } else {\n                    if($item < $b) {\n                     \
    \   $b = $item;\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return array($a, $b);\n}\n", "\t$arr = array();\n\t$smallest\
    \ = INF;\n\t$largest = -INF;\n\tforeach ($lst as $elem) {\n\t\tif ($elem > 0)\
    \ {\n\t\t\tif ($elem < $smallest) {\n\t\t\t\t$smallest = $elem;\n\t\t\t}\n\t\t\
    } elseif ($elem < 0) {\n\t\t\tif ($elem > $largest) {\n\t\t\t\t$largest = $elem;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif ($smallest == INF) {\n\t\t$smallest = NULL;\n\t}\n\t\
    if ($largest == -INF) {\n\t\t$largest = NULL;\n\t}\n\treturn array($largest, $smallest);\n\
    }\n", "  $result = array(null, null);\n  $positive = null;\n  $negative = null;\n\
    \  foreach ($lst as $num) {\n    if ($num > 0) {\n      if ($positive === null\
    \ || $num < $positive) {\n        $positive = $num;\n      }\n    } elseif ($num\
    \ < 0) {\n      if ($negative === null || $num > $negative) {\n        $negative\
    \ = $num;\n      }\n    }\n  }\n  if ($positive !== null) {\n    $result[1] =\
    \ $positive;\n  }\n  if ($negative !== null) {\n    $result[0] = $negative;\n\
    \  }\n  return $result;\n}\necho largest_smallest_integers([2, 4, 1, 3, 5, 7])[0]\
    \ . PHP_EOL;\necho largest_smallest_integers([2, 4, 1, 3, 5, 7])[1] . PHP_EOL;\n\
    echo largest_smallest_integers([])[0] . PHP_EOL;\necho largest_smallest_integers([])[1]\
    \ . PHP_EOL;\necho largest_smallest_integers([0])[0] . PHP_EOL;\necho largest_smallest_integers([0])[1]\
    \ . PHP_EOL;\necho largest_smallest_integers([2, 3, -4, -2, 3, 5, 7])[0] . PHP_EOL;\n\
    echo largest_smallest_integers([2, 3, -4, -2, 3, 5, 7])[1] . PHP_EOL;", "\t$max_neg\
    \ = null;\n\t$min_pos = null;\n\tif (count($lst) > 0) {\n\t\tforeach ($lst as\
    \ $val) {\n\t\t\tif ($val < 0) {\n\t\t\t\tif ($max_neg === null) {\n\t\t\t\t\t\
    $max_neg = $val;\n\t\t\t\t} else {\n\t\t\t\t\t$max_neg = max($max_neg, $val);\n\
    \t\t\t\t}\n\t\t\t} else if ($val > 0) {\n\t\t\t\tif ($min_pos === null) {\n\t\t\
    \t\t\t$min_pos = $val;\n\t\t\t\t} else {\n\t\t\t\t\t$min_pos = min($min_pos, $val);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn array($max_neg, $min_pos);\n}\n\necho\
    \ \"largest_smallest_integers(array(2, 4, 1, 3, 5, 7)) = \";\nvar_dump(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\necho \"largest_smallest_integers(array()) = \";\nvar_dump(largest_smallest_integers(array()));\n\
    echo \"largest_smallest_integers(array(0)) = \";\nvar_dump(largest_smallest_integers(array(0)));\n\
    echo \"largest_smallest_integers(array(-2, -3, -5, -1)) = \";\nvar_dump(largest_smallest_integers(array(-2,\
    \ -3, -5, -1)));\necho \"largest_smallest_integers(array(1, 3, 5, 7)) = \";\n\
    var_dump(largest_smallest_integers(array(1, 3, 5, 7)));\necho \"largest_smallest_integers(array(-2,\
    \ -3, -5, -1, 1, 3, 5, 7)) = \";\nvar_dump(largest_smallest_integers(array(-2,\
    \ -3, -5, -1, 1, 3,", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $number)\
    \ {\n    if ($number < 0) {\n      $neg[] = $number;\n    } elseif ($number >\
    \ 0) {\n      $pos[] = $number;\n    }\n  }\n  if (empty($neg) && empty($pos))\
    \ {\n    return [null, null];\n  } elseif (empty($neg)) {\n    return [null, min($pos)];\n\
    \  } elseif (empty($pos)) {\n    return [max($neg), null];\n  } else {\n    return\
    \ [max($neg), min($pos)];\n  }\n}\n\nlargest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]); // => (None, 1)\nlargest_smallest_integers([]); // => (None, None)\nlargest_smallest_integers([0]);\
    \ // => (None, None)\nlargest_smallest_integers([-1, 2, 4, 1, 3, 5, 7]); // =>\
    \ (-1, 1)\nlargest_smallest_integers([-1, 2, 4, 1, 3, 5, 7, -2]); // => (-2, 1)\n\
    largest_smallest_integers([-1, 2, 4, 1, 3, 5, 7, -8]); // => (-8, 1)\nlargest_smallest_integers([-1,\
    \ 2, 4, 1, 3, 5, 7, -8, -9]); // => (-9, 1)\nlargest_smallest_integers([-1, 2,\
    \ 4, 1, 3, 5, 7, -8, -9, -10]); // => (-10, 1)\nlargest_smallest_integers([-1,\
    \ 2, 4, 1, 3, 5, 7, -8, -9, -10, -11]); // => (-11, 1)\nlargest_smallest_integers([-1,\
    \ 2, 4, 1, 3, 5, 7, -8, -9, -10, -11, -12]); // => (-12, 1)\nlargest_smallest_integers([-1,\
    \ 2, 4, 1, 3, 5, 7, -8", "    if (count($lst) == 0) {\n        return [null, null];\n\
    \    }\n    if (max($lst) > 0 && min($lst) < 0) {\n        $maxn = max(array_filter($lst,\
    \ function($x) { return $x < 0; }));\n        $minp = min(array_filter($lst, function($x)\
    \ { return $x > 0; }));\n        return [$maxn, $minp];\n    }\n    return [null,\
    \ null];\n}\n\necho \"\\n\";\necho \"[0, 1, -4, 5, -4, -1, -6, 0, -2] -> [null,\
    \ -6]\\n\";\nvar_dump(largest_smallest_integers([0, 1, -4, 5, -4, -1, -6, 0, -2]));\n\
    echo \"[0, 1, -4, 5, -4, -1, -6, 0, -2] -> [null, -6]\\n\";\necho \"[] -> [null,\
    \ null]\\n\";\nvar_dump(largest_smallest_integers([]));\necho \"[] -> [null, null]\\\
    n\";\necho \"[] -> [null, null]\\n\";\nvar_dump(largest_smallest_integers([]));\n\
    echo \"[] -> [null, null]\\n\";\necho \"[-4, -7, -8, -3, -2, -1] -> [-1, -8]\\\
    n\";\nvar_dump(largest_smallest_integers([-4, -7, -8, -3, -2, -1]));\necho \"\
    [-4, -7, -8, -3, -2, -1] -> [-1, -8]\\n\";\necho \"[-4, -7, -8, -3, -2, -1] ->\
    \ [-1, -8]\\n\";\nvar_dump(largest_smallest_integers([-4, -7, -8, -3, -2, -1]));\n\
    echo \"[-4, -7, -8, -3, -2, -1] -> [-1, -8]\\n\";\n", "    $negatives = array_filter($lst,\
    \ function($n) {\n        return $n < 0;\n    });\n    $positives = array_filter($lst,\
    \ function($n) {\n        return $n > 0;\n    });\n    $a = max($negatives);\n\
    \    $b = min($positives);\n    return array($a, $b);\n}\n", "  $negs = array_filter($lst,\
    \ function($i) { return $i < 0; });\n  $pos = array_filter($lst, function($i)\
    \ { return $i > 0; });\n  $neg = empty($negs) ? None : max($negs);\n  $pos = empty($pos)\
    \ ? None : min($pos);\n  return array($neg, $pos);\n}\n\nassert(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == array(None, 1));\nassert(largest_smallest_integers([]) ==\
    \ array(None, None));\nassert(largest_smallest_integers([0]) == array(None, None));\n",
  "    $sorted = sort($lst);\n    return array($sorted[0], $sorted[-1]);\n}", "  \
    \  $neg = null;\n    $pos = null;\n    foreach ($lst as $el) {\n        if ($el\
    \ < 0) {\n            if ($neg === null) {\n                $neg = $el;\n    \
    \        } else {\n                $neg = max($neg, $el);\n            }\n   \
    \     } else if ($el > 0) {\n            if ($pos === null) {\n              \
    \  $pos = $el;\n            } else {\n                $pos = min($pos, $el);\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\necho \"<pre>largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\\r\\n\";\nvar_dump(largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]));\necho \"</pre>\";\necho \"<pre>largest_smallest_integers([])\\r\\n\";\n\
    var_dump(largest_smallest_integers([]));\necho \"</pre>\";\necho \"<pre>largest_smallest_integers([0])\\\
    r\\n\";\nvar_dump(largest_smallest_integers([0]));\necho \"</pre>\";", "    $lst\
    \ = array_filter($lst, function($x) {\n        return $x != 0;\n    });\n    if\
    \ (count($lst) == 0) {\n        return [null, null];\n    }\n    sort($lst);\n\
    \    if ($lst[0] < 0) {\n        return [max($lst), min(array_filter($lst, function($x)\
    \ {\n            return $x > 0;\n        }))];\n    } else {\n        return [null,\
    \ min($lst)];\n    }\n}\n", "    $newArr = [];\n    $negative = [];\n    $positive\
    \ = [];\n    $newObj = new StdClass();\n    $newObj->a = null;\n    $newObj->b\
    \ = null;\n    if (empty($lst)) {\n        return $newObj;\n    }\n    foreach\
    \ ($lst as $item) {\n        if ($item > 0) {\n            $positive[] = $item;\n\
    \        } elseif ($item < 0) {\n            $negative[] = $item;\n        }\n\
    \    }\n    if (!empty($negative)) {\n        rsort($negative);\n        $newObj->a\
    \ = $negative[0];\n    }\n    if (!empty($positive)) {\n        sort($positive);\n\
    \        $newObj->b = $positive[0];\n    }\n    return $newObj;\n}", "    $negatives\
    \ = [];\n    $positives = [];\n    foreach ($lst as $number) {\n        if ($number\
    \ < 0) {\n            $negatives[] = $number;\n        } elseif ($number > 0)\
    \ {\n            $positives[] = $number;\n        }\n    }\n    return count($negatives)\
    \ === 0 ? (null, min($positives)) : (max($negatives), count($positives) === 0\
    \ ? null : min($positives));\n}\n", "    $positives = [];\n    $negatives = [];\n\
    \    foreach ($lst as $num) {\n        if ($num > 0) {\n            $positives[]\
    \ = $num;\n        } else if ($num < 0) {\n            $negatives[] = $num;\n\
    \        }\n    }\n    $positive = count($positives) > 0 ? min($positives) : null;\n\
    \    $negative = count($negatives) > 0 ? max($negatives) : null;\n    return [$negative,\
    \ $positive];\n}\necho (largest_smallest_integers([2, 4, 1, 3, 5, 7])[0] == null);\n\
    echo (largest_smallest_integers([2, 4, 1, 3, 5, 7])[1] == 1);\necho (largest_smallest_integers([])[0]\
    \ == null);\necho (largest_smallest_integers([])[1] == null);\necho (largest_smallest_integers([0])[0]\
    \ == null);\necho (largest_smallest_integers([0])[1] == null);\n", "    // your\
    \ code here\n}\n", "    $sorted = array_sort($lst);\n    $first = min($sorted);\n\
    \    $last = max($sorted);\n    $min = NULL;\n    $max = NULL;\n    foreach ($sorted\
    \ as $value) {\n        if ($value < 0) {\n            $max = $value;\n      \
    \  }\n        if ($value > 0) {\n            $min = $value;\n            break;\n\
    \        }\n    }\n    return array($max, $min);\n}\n", "\t$smallest = NULL;\n\
    \t$largest = NULL;\n\tforeach ($lst as $val) {\n\t\tif ($val < 0 && ($smallest\
    \ === NULL || $val > $smallest)) {\n\t\t\t$smallest = $val;\n\t\t}\n\t\tif ($val\
    \ > 0 && ($largest === NULL || $val < $largest)) {\n\t\t\t$largest = $val;\n\t\
    \t}\n\t}\n\treturn array($smallest, $largest);\n}\n", "  if (empty($lst)) {\n\
    \    return [null, null];\n  }\n  $lst = array_filter($lst, function($val) {\n\
    \    return $val >= 1;\n  });\n  $lst = array_filter($lst, function($val) {\n\
    \    return $val <= -1;\n  });\n  return [min($lst), max($lst)];\n}\n\necho \"\
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\\n\";\nvar_dump(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == [null, 1]);\necho \"largest_smallest_integers([]) == (None,\
    \ None)\\n\";\nvar_dump(largest_smallest_integers([]) == [null, null]);\necho\
    \ \"largest_smallest_integers([0]) == (None, None)\\n\";\nvar_dump(largest_smallest_integers([0])\
    \ == [null, null]);", "    $biggestNegative = null;\n    $smallestPositive = null;\n\
    \    foreach ($lst as $item) {\n        if ($item < 0) {\n            if ($biggestNegative\
    \ === null || $item > $biggestNegative) {\n                $biggestNegative =\
    \ $item;\n            }\n        } elseif ($item > 0) {\n            if ($smallestPositive\
    \ === null || $item < $smallestPositive) {\n                $smallestPositive\
    \ = $item;\n            }\n        }\n    }\n    return [$biggestNegative, $smallestPositive];\n\
    }\n", "\tif (count($lst) == 0) {\n\t\treturn [null, null];\n\t}\n\t$min = null;\n\
    \t$max = null;\n\tforeach ($lst as $num) {\n\t\tif ($num > 0) {\n\t\t\tif ($min\
    \ === null || $num < $min) {\n\t\t\t\t$min = $num;\n\t\t\t}\n\t\t} else if ($num\
    \ < 0) {\n\t\t\tif ($max === null || $num > $max) {\n\t\t\t\t$max = $num;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn [$max, $min];\n}\n\nif (count(debug_backtrace()) ==\
    \ 0) {\n\tvar_dump(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\n\tvar_dump(largest_smallest_integers([]));\n\
    \tvar_dump(largest_smallest_integers([0]));\n}", "    if (empty($lst)) {\n   \
    \     return [null, null];\n    }\n    $negs = array_filter($lst, function ($n)\
    \ {\n        return $n < 0;\n    });\n    $pos = array_filter($lst, function ($n)\
    \ {\n        return $n > 0;\n    });\n    if (empty($negs) || empty($pos)) {\n\
    \        return [null, null];\n    }\n    return [max($negs), min($pos)];\n}\n",
  "    $neg = [];\n    $pos = [];\n    foreach ($lst as $n) {\n        if ($n < 0)\
    \ $neg[] = $n;\n        if ($n > 0) $pos[] = $n;\n    }\n    if (empty($neg))\
    \ $neg = [NULL];\n    if (empty($pos)) $pos = [NULL];\n    return [max($neg),\
    \ min($pos)];\n}\n\nprint_r(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\n\
    print_r(largest_smallest_integers([]));\nprint_r(largest_smallest_integers([0]));",
  "    if (empty($lst)) {\n        return [null, null];\n    }\n\n    $largest_negative\
    \ = null;\n    $smallest_positive = null;\n\n    foreach ($lst as $num) {\n  \
    \      if ($num < 0) {\n            if ($largest_negative === null || $num > $largest_negative)\
    \ {\n                $largest_negative = $num;\n            }\n        } else\
    \ if ($num > 0) {\n            if ($smallest_positive === null || $num < $smallest_positive)\
    \ {\n                $smallest_positive = $num;\n            }\n        }\n  \
    \  }\n\n    return [$largest_negative, $smallest_positive];\n}\n", "\t$positives\
    \ = array_filter($lst, function($v) {\n\t\treturn $v > 0;\n\t});\n\t$negatives\
    \ = array_filter($lst, function($v) {\n\t\treturn $v < 0;\n\t});\n\tsort($positives);\n\
    \trsort($negatives);\n\t$positive = count($positives) > 0 ? $positives[0] : null;\n\
    \t$negative = count($negatives) > 0 ? $negatives[0] : null;\n\treturn array($negative,\
    \ $positive);\n}\n", "\n}", "    if (count($lst) == 0) {\n        return [null,\
    \ null];\n    }\n\n    $min = null;\n    $max = null;\n    foreach ($lst as $item)\
    \ {\n        if ($item < 0) {\n            if (is_null($max) || $item > $max)\
    \ {\n                $max = $item;\n            }\n        } else if ($item >\
    \ 0) {\n            if (is_null($min) || $item < $min) {\n                $min\
    \ = $item;\n            }\n        }\n    }\n\n    return [$max, $min];\n}\n",
  "    $smallest = null;\n    $largest = null;\n    if (empty($lst)) {\n        return\
    \ [$largest, $smallest];\n    }\n    foreach ($lst as $n) {\n        if ($n >=\
    \ 0) {\n            if ($smallest === null || $n < $smallest) {\n            \
    \    $smallest = $n;\n            }\n        } else {\n            if ($largest\
    \ === null || $n > $largest) {\n                $largest = $n;\n            }\n\
    \        }\n    }\n    return [$largest, $smallest];\n}\n", "    $pos = [];\n\
    \    $neg = [];\n    foreach ($lst as $value) {\n        if ($value > 0) {\n \
    \           $pos[] = $value;\n        } else if ($value < 0) {\n            $neg[]\
    \ = $value;\n        }\n    }\n    $pos_min = count($pos) ? min($pos) : null;\n\
    \    $neg_max = count($neg) ? max($neg) : null;\n    return [$neg_max, $pos_min];\n\
    }\n\nvar_dump(largest_smallest_integers([2, 4, 1, 3, 5, 7])); // (None, 1)\nvar_dump(largest_smallest_integers([]));\
    \ // (None, None)\nvar_dump(largest_smallest_integers([0])); // (None, None)",
  "\tif(in_array(0, $lst)){\n\t\treturn array(null, null);\n\t}\n\t$count = 0;\n\t\
    $positive = null;\n\t$negative = null;\n\t$array = $lst;\n\tforeach($array as\
    \ $value){\n\t\tif($value > 0){\n\t\t\t$positive = $value;\n\t\t\t$count++;\n\t\
    \t}\n\t\tif($value < 0){\n\t\t\t$negative = $value;\n\t\t\t$count++;\n\t\t}\n\t\
    }\n\tif($count == 0){\n\t\treturn array(null, null);\n\t}\n\t$max = max($lst);\n\
    \t$min = min($lst);\n\treturn array($max, $min);\n}\n", "  $pos = NULL;\n  $neg\
    \ = NULL;\n  foreach ($lst as $num) {\n    if ($num > 0) {\n      if ($pos ==\
    \ NULL) {\n        $pos = $num;\n      } else {\n        $pos = min($pos, $num);\n\
    \      }\n    } elseif ($num < 0) {\n      if ($neg == NULL) {\n        $neg =\
    \ $num;\n      } else {\n        $neg = max($neg, $num);\n      }\n    }\n  }\n\
    \  return [$neg, $pos];\n}\n\n$s = largest_smallest_integers([2, 4, 1, 3, 5, 7]);\n\
    print_r($s);", "  $neg = null;\n  $pos = null;\n  foreach ($lst as $i) {\n   \
    \ if ($i < 0) {\n      if ($neg === null || $i > $neg) {\n        $neg = $i;\n\
    \      }\n    } else if ($i > 0) {\n      if ($pos === null || $i < $pos) {\n\
    \        $pos = $i;\n      }\n    }\n  }\n  return [$neg, $pos];\n}\necho join(',\
    \ ', largest_smallest_integers([2, 4, 1, 3, 5, 7])) . \"\\n\";\necho join(', ',\
    \ largest_smallest_integers([])) . \"\\n\";\necho join(', ', largest_smallest_integers([0]))\
    \ . \"\\n\";\n", "  $a = null;\n  $b = null;\n  if (count($lst) == 0) {\n    return\
    \ [$a, $b];\n  }\n  foreach ($lst as $value) {\n    if ($value < 0) {\n      if\
    \ ($a == null) {\n        $a = $value;\n      } else {\n        $a = max($a, $value);\n\
    \      }\n    } elseif ($value > 0) {\n      if ($b == null) {\n        $b = $value;\n\
    \      } else {\n        $b = min($b, $value);\n      }\n    }\n  }\n  return\
    \ [$a, $b];\n}\necho largest_smallest_integers([2, 4, 1, 3, 5, 7]);", "    if\
    \ (count($lst) === 0) {\n        return [null, null];\n    }\n\n    $negativeLargest\
    \ = null;\n    $positiveSmallest = null;\n\n    foreach ($lst as $int) {\n   \
    \     if ($int < 0) {\n            if ($negativeLargest === null || $int > $negativeLargest)\
    \ {\n                $negativeLargest = $int;\n            }\n        } elseif\
    \ ($int > 0) {\n            if ($positiveSmallest === null || $int < $positiveSmallest)\
    \ {\n                $positiveSmallest = $int;\n            }\n        }\n   \
    \ }\n\n    return [$negativeLargest, $positiveSmallest];\n}\n", "  $min = null;\n\
    \  $max = null;\n  foreach ($lst as $n) {\n    if ($n < 0) {\n      if (is_null($max)\
    \ || $n > $max) $max = $n;\n    } else {\n      if (is_null($min) || $n < $min)\
    \ $min = $n;\n    }\n  }\n  return [$max, $min];\n}\n\nvar_dump(largest_smallest_integers([]));\n\
    var_dump(largest_smallest_integers([0]));\nvar_dump(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\n", "    $min = null;\n    $max = null;\n    foreach ($lst\
    \ as $val) {\n        if ($val < 0) {\n            if ($val > $max) $max = $val;\n\
    \        } else {\n            if ($val < $min || $min === null) $min = $val;\n\
    \        }\n    }\n    return [$max, $min];\n}", "    $smallest = NULL;\n    $largest\
    \ = NULL;\n    foreach ($lst as $n) {\n        if ($n > 0) {\n            if (isset($smallest))\
    \ {\n                $smallest = min($smallest, $n);\n            } else {\n \
    \               $smallest = $n;\n            }\n        } elseif ($n < 0) {\n\
    \            if (isset($largest)) {\n                $largest = max($largest,\
    \ $n);\n            } else {\n                $largest = $n;\n            }\n\
    \        }\n    }\n    return array($largest, $smallest);\n}\n", "    $smallest\
    \ = null;\n    $largest = null;\n    foreach ($lst as $value) {\n        if ($value\
    \ > 0) {\n            if ($smallest === null || $value < $smallest) {\n      \
    \          $smallest = $value;\n            }\n        } elseif ($value < 0) {\n\
    \            if ($largest === null || $value > $largest) {\n                $largest\
    \ = $value;\n            }\n        }\n    }\n    return [$largest, $smallest];\n\
    }\n", "    if (empty($lst)) {\n        return [null, null];\n    }\n    $neg =\
    \ [];\n    $pos = [];\n    foreach ($lst as $n) {\n        if ($n < 0) {\n   \
    \         $neg[] = $n;\n        } elseif ($n > 0) {\n            $pos[] = $n;\n\
    \        }\n    }\n    sort($neg);\n    rsort($pos);\n    return [empty($neg)\
    \ ? null : end($neg), empty($pos) ? null : end($pos)];\n}\n", "    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) === 0) {\n        $neg = None;\n    } else\
    \ {\n        $neg = max($neg);\n    }\n    if (count($pos) === 0) {\n        $pos\
    \ = None;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n", "  if (count($lst) == 0) {\n    return [NULL, NULL];\n  }\n  $neg_int =\
    \ NULL;\n  $pos_int = NULL;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n\
    \      if ($neg_int == NULL) {\n        $neg_int = $num;\n      } else if ($num\
    \ > $neg_int) {\n        $neg_int = $num;\n      }\n    } else if ($num > 0) {\n\
    \      if ($pos_int == NULL) {\n        $pos_int = $num;\n      } else if ($num\
    \ < $pos_int) {\n        $pos_int = $num;\n      }\n    }\n  }\n  return [$neg_int,\
    \ $pos_int];\n}\n\nclass LargestSmallestIntegersTest extends TestCase {\n  public\
    \ function testBasics() {\n    $this->assertEquals([NULL, 1], largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\n    $this->assertEquals([NULL, NULL], largest_smallest_integers([]));\n\
    \    $this->assertEquals([NULL, NULL], largest_smallest_integers([0]));\n    $this->assertEquals([-1,\
    \ 1], largest_smallest_integers([1, -1]));\n    $this->assertEquals([NULL, 2],\
    \ largest_smallest_integers([1, 2]));\n    $this->assertEquals([-2, 1], largest_smallest_integers([1,\
    \ -2]));\n    $this->assertEquals([-3, 1], largest_smallest_integers([1, -3]));\n\
    \    $this->assertEquals([-2, 1], largest_smallest_integers([1, -2]));\n    $this->assertEquals([-4,\
    \ 1], largest_smallest_integers([1, -4]));\n    $this->assertEquals([-3, 1], largest_smallest_integers([1,\
    \ -3]));\n    $this->assertEquals([-4, 1], largest_smallest_integers", "  $positive\
    \ = PHP_INT_MAX;\n  $negative = PHP_INT_MIN;\n  $positiveFound = false;\n  $negativeFound\
    \ = false;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $negativeFound\
    \ = true;\n      if ($num > $negative) {\n        $negative = $num;\n      }\n\
    \    } else if ($num > 0) {\n      $positiveFound = true;\n      if ($num < $positive)\
    \ {\n        $positive = $num;\n      }\n    }\n  }\n  return [\n    $negativeFound\
    \ ? $negative : null,\n    $positiveFound ? $positive : null\n  ];\n}\n", "  sort($lst);\n\
    \  if ($lst == []) {\n    return array_fill(0, 2, null);\n  } elseif ($lst[0]\
    \ >= 0) {\n    return array_fill(0, 2, null);\n  } elseif ($lst[count($lst) -\
    \ 1] <= 0) {\n    return array_fill(0, 2, null);\n  } else {\n    for ($i = 0;\
    \ $i < count($lst); $i++) {\n      if ($lst[$i] >= 0) {\n        $smallest = $lst[$i];\n\
    \        break;\n      }\n    }\n    $largest = $lst[0];\n    return array($largest,\
    \ $smallest);\n  }\n}", "  $lst = array_filter($lst, function($v) { return $v;\
    \ });\n  $lst = array_filter($lst, function($v) { return is_int($v); });\n  $lst\
    \ = array_filter($lst, function($v) { return $v != 0; });\n  return [max($lst),\
    \ min($lst)];\n}\n\nclass UnitTest extends PHPUnit_Framework_TestCase {\n  public\
    \ function testLargestSmallestIntegers() {\n    $cases = [\n      [[2, 4, 1, 3,\
    \ 5, 7], [None, 1]],\n      [[], [None, None]],\n      [[0], [None, None]],\n\
    \      [[2, 1, -5, 6, -9, -5, 4, 0, -1, -8], [-5, 1]],\n      [[-2, -5, -8, -5,\
    \ -1, -3, -6, -8, -3, -5], [-1, -5]],\n      [[-9, -5, -6, -7, -2, -1, -1, -6,\
    \ -3, -1], [-1, -9]],\n      [[-4, -4, -4, -4, -4, -4, -4, -4, -4, -4], [-4, -4]],\n\
    \      [[-4, -4, -4, -4, -4, -4, -4, -4, -4, 0], [-4, None]],\n      [[-4, -4,\
    \ -4, -4, -4, -4, -4, -4, 0, 0], [-4, None]],\n      [[0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0], [None, None]],\n      [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [None, 9]],\n\
    \      [[9, 9, 9, 9, 9, 9, 9, 9, 9, 0], [None, 9]],\n      [[-3, 2, -5, -9, 2,\
    \ -2, -2, 2, -7, 0", "    $nums = [null, null];\n    $vals = [-INF, INF];\n  \
    \  foreach ($lst as $num) {\n        if ($num < 0) {\n            if ($num > $vals[0])\
    \ {\n                $vals[0] = $num;\n                $nums[0] = $num;\n    \
    \        }\n        } elseif ($num > 0) {\n            if ($num < $vals[1]) {\n\
    \                $vals[1] = $num;\n                $nums[1] = $num;\n        \
    \    }\n        }\n    }\n    return $nums;\n}\necho 'largest_smallest_integers(['\
    \ . implode(', ', [2, 4, 1, 3, 5, 7]) . ']) == ' .\n    implode(', ', largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])) . \"\\n\";\necho 'largest_smallest_integers([' . implode(',\
    \ ', []) . ']) == ' .\n    implode(', ', largest_smallest_integers([])) . \"\\\
    n\";\necho 'largest_smallest_integers([' . implode(', ', [0]) . ']) == ' .\n \
    \   implode(', ', largest_smallest_integers([0])) . \"\\n\";\necho 'largest_smallest_integers(['\
    \ . implode(', ', [-3, -4, -1, -3, -5, -7]) . ']) == ' .\n    implode(', ', largest_smallest_integers([-3,\
    \ -4, -1, -3, -5, -7])) . \"\\n\";\necho 'largest_smallest_integers([' . implode(',\
    \ ', [1, 2, 3, 4, 5, 6]) . ']) == ' .\n    implode(', ', largest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6])) . \"\\n\";\necho 'largest_smallest_integers([' . implode(',\
    \ ', [-4, -4, -4, -4, -4, -4]) . ']) == ' .\n    implode(', ', largest_smallest",
  "  if(empty($lst)) return [null, null];\n  $negative = [];\n  $positive = [];\n\
    \  for($i = 0; $i < count($lst); $i++) {\n    if($lst[$i] < 0) {\n      array_push($negative,\
    \ $lst[$i]);\n    } elseif($lst[$i] > 0) {\n      array_push($positive, $lst[$i]);\n\
    \    }\n  }\n  if(empty($negative)) {\n    $negative = null;\n  } else {\n   \
    \ $negative = max($negative);\n  }\n  if(empty($positive)) {\n    $positive =\
    \ null;\n  } else {\n    $positive = min($positive);\n  }\n  return [$negative,\
    \ $positive];\n}\n", "    // Since this is returning a Tuple, we'll need a container\n\
    \    // for our values. We'll utilize the `$results` array for this.\n    $results\
    \ = array(null, null);\n    // First, we need to know if the array has anything\
    \ in it.\n    // If it doesn't, we can just return the results.\n    if (count($lst)\
    \ < 1) return $results;\n    // Otherwise, we can begin iterating through the\
    \ list of numbers.\n    foreach ($lst as $num) {\n        // First, we'll need\
    \ to determine if the number is positive or\n        // negative. We can do this\
    \ with the `>=` operator to see if it\n        // is greater than or equal to\
    \ zero.\n        // If it is greater than or equal to zero, we can then check\n\
    \        // to see if the `$results[1]` value is null or if `$num` is\n      \
    \  // less than `$results[1]`.\n        // If both of these are true, we can set\
    \ `$results[1]` to `$num`.\n        if ($num >= 0 && ($results[1] === null ||\
    \ $num < $results[1])) $results[1] = $num;\n        // We can do the same process\
    \ for a negative number, except we'll\n        // need to check if `$results[0]`\
    \ is null or if `$num` is greater\n        // than `$results[0]`.\n        if\
    \ ($num < 0 && ($results[0] === null || $num > $results[0])) $results[0] = $num;\n\
    \    }\n    // Finally, we can return the `$results` array.\n    return $results;\n\
    }", "  $negatives = [];\n  $positives = [];\n  foreach ($lst as $int) {\n    if\
    \ ($int > 0) {\n      $positives[] = $int;\n    } else if ($int < 0) {\n     \
    \ $negatives[] = $int;\n    }\n  }\n  if (empty($negatives) && empty($positives))\
    \ {\n    return [NULL, NULL];\n  } else if (empty($negatives)) {\n    return [NULL,\
    \ min($positives)];\n  } else if (empty($positives)) {\n    return [max($negatives),\
    \ NULL];\n  } else {\n    return [max($negatives), min($positives)];\n  }\n}",
  "    $smallest = NULL;\n    $largest = NULL;\n    foreach ($lst as $item) {\n  \
    \      if ($item >= 0 && ($smallest === NULL || $item < $smallest)) {\n      \
    \      $smallest = $item;\n        }\n        if ($item < 0 && ($largest === NULL\
    \ || $item > $largest)) {\n            $largest = $item;\n        }\n    }\n \
    \   return [$largest, $smallest];\n}\n$a = [2, 4, 1, 3, 5, 7];\nvar_dump(largest_smallest_integers($a));\n\
    $a = [];\nvar_dump(largest_smallest_integers($a));\n$a = [0];\nvar_dump(largest_smallest_integers($a));\n\
    $a = [-2, -4, -1, -3, -5, -7];\nvar_dump(largest_smallest_integers($a));\n$a =\
    \ [2, 4, 1, 3, 5, 7, -2, -4, -1, -3, -5, -7];\nvar_dump(largest_smallest_integers($a));",
  "    $negatives = [];\n    $positives = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] > 0) {\n            array_push($positives, $lst[$i]);\n\
    \        } elseif ($lst[$i] < 0) {\n            array_push($negatives, $lst[$i]);\n\
    \        }\n    }\n    if (count($negatives) > 0) {\n        $a = max($negatives);\n\
    \    } else {\n        $a = null;\n    }\n    if (count($positives) > 0) {\n \
    \       $b = min($positives);\n    } else {\n        $b = null;\n    }\n    $result\
    \ = [$a, $b];\n    return $result;\n}\n\n$tests = [\n    [[2, 4, 1, 3, 5, 7],\
    \ [null, 1]],\n    [[], [null, null]],\n    [[0], [null, null]],\n    [[1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10], [null, 1]],\n    [[-10, -5, 0, -1, 10, -20, -30, -1,\
    \ -3, -2], [-30, 10]],\n    [[-12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12],\
    \ [-12, 12]],\n    [[-1, 2, -3, 4, -5, 6, -7, 8, -9, 10], [-9, 10]],\n    [[10,\
    \ -10, -5, 0, 1, -1, -5, 0, -1, 10, -20, -30, -1, -3, -2], [-30, 10]],\n    [[-1,\
    \ 2, -3, 4, -5, 6, -7, 8, -9, 10, 10, -10, -5, 0, 1, -1, -5, 0, -1, 10, -20, -30,\
    \ -1, -3, -2], [-30, 10]],\n   ", "    $lng_pst = NULL;\n    $lng_nst = NULL;\n\
    \    foreach ($lst as $v) {\n        if ($v > 0) {\n            if ($lng_pst ===\
    \ NULL) {\n                $lng_pst = $v;\n            } else {\n            \
    \    $lng_pst = min($lng_pst, $v);\n            }\n        } elseif ($v < 0) {\n\
    \            if ($lng_nst === NULL) {\n                $lng_nst = $v;\n      \
    \      } else {\n                $lng_nst = max($lng_nst, $v);\n            }\n\
    \        }\n    }\n    return [$lng_nst, $lng_pst];\n}\necho \"Question 2:\\n\"\
    ;\nvar_dump(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\nvar_dump(largest_smallest_integers([]));\n\
    var_dump(largest_smallest_integers([0]));\necho \"\\n\\n\";\n", "  $min = $max\
    \ = null;\n  foreach ($lst as $v) {\n    if ($v < 0) {\n      if ($v > $max) $max\
    \ = $v;\n    } else {\n      if ($min === null || $v < $min) $min = $v;\n    }\n\
    \  }\n  return [$max, $min];\n}", "    $negatives = [];\n    $positives = [];\n\
    \    foreach ($lst as $num) {\n        if ($num < 0) {\n            $negatives[]\
    \ = $num;\n        } else if ($num > 0) {\n            $positives[] = $num;\n\
    \        }\n    }\n    $a = count($negatives) > 0 ? max($negatives) : null;\n\
    \    $b = count($positives) > 0 ? min($positives) : null;\n    return [$a, $b];\n\
    }\n", "    $smallest = null;\n    $largest = null;\n    $smallest_set = false;\n\
    \    $largest_set = false;\n    foreach ($lst as $int) {\n        if ($int < 0)\
    \ {\n            if (!$largest_set || $int > $largest) {\n                $largest\
    \ = $int;\n                $largest_set = true;\n            }\n        } elseif\
    \ ($int > 0) {\n            if (!$smallest_set || $int < $smallest) {\n      \
    \          $smallest = $int;\n                $smallest_set = true;\n        \
    \    }\n        }\n    }\n    return array($largest, $smallest);\n}\n", "\tif\
    \ (!$lst) return [null, null];\n\tsort($lst);\n\t$res = [];\n\tforeach ($lst as\
    \ $v) {\n\t\tif ($v < 0) $res[] = $v;\n\t\telse if ($v > 0) {\n\t\t\t$res[] =\
    \ $v;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn [$res[0] ?? null, $res[count($res) -\
    \ 1] ?? null];\n}\n$tests = [\n\t[[2, 4, 1, 3, 5, 7], [null, 1]],\n\t[[], [null,\
    \ null]],\n\t[[0], [null, null]],\n\t[[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],\
    \ [-5, 1]],\n\t[[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -6], [-6, 1]],\n\t[[0,\
    \ 1, 2, 3, 4, 5], [null, 1]],\n\t[[-1, -2, -3, -4, -5], [-1, null]],\n];\nforeach\
    \ ($tests as $test) {\n\t$res = largest_smallest_integers($test[0]);\n\tif ($res\
    \ === $test[1]) {\n\t\techo \"\u2705 {$test[0]}<br>\";\n\t} else {\n\t\techo \"\
    \U0001F534 {$test[0]}<br>\";\n\t\techo \"<i>Expected <b>{$test[1][0]}</b> and\
    \ <b>{$test[1][1]}</b>, but got <b>{$res[0]}</b> and <b>{$res[1]}</b></i><br>\"\
    ;\n\t}\n\techo \"<hr>\";\n}", "    $negs = array_filter($lst, function($v) { return\
    \ $v < 0; });\n    $poss = array_filter($lst, function($v) { return $v > 0; });\n\
    \    return [count($negs) ? max($negs) : null, count($poss) ? min($poss) : null];\n\
    }\nprint_r(largest_smallest_integers([2, 4, 1, 3, 5, 7]));", "\t$negatives = [];\n\
    \t$positives = [];\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < 0) {\n\t\t\tarray_push($negatives, $lst[$i]);\n\t\t} else if ($lst[$i] > 0)\
    \ {\n\t\t\tarray_push($positives, $lst[$i]);\n\t\t}\n\t}\n\t$neg = null;\n\t$pos\
    \ = null;\n\tif (count($negatives) != 0) {\n\t\t$neg = max($negatives);\n\t}\n\
    \tif (count($positives) != 0) {\n\t\t$pos = min($positives);\n\t}\n\treturn [$neg,\
    \ $pos];\n}\n\nprint_r(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\nprint_r(largest_smallest_integers([]));\n\
    print_r(largest_smallest_integers([0]));", "\t$neg = [];\n\t$pos = [];\n\tforeach\
    \ ($lst as $value) {\n\t\tif ($value < 0) {\n\t\t\t$neg[] = $value;\n\t\t} else\
    \ if ($value > 0) {\n\t\t\t$pos[] = $value;\n\t\t}\n\t}\n\tif (count($neg) ==\
    \ 0) {\n\t\t$neg = null;\n\t} else {\n\t\t$neg = max($neg);\n\t}\n\tif (count($pos)\
    \ == 0) {\n\t\t$pos = null;\n\t} else {\n\t\t$pos = min($pos);\n\t}\n\treturn\
    \ [$neg, $pos];\n}\n", "    $count = 0;\n    $a = null;\n    $b = null;\n    foreach\
    \ ($lst as $num) {\n        if ($num > 0) {\n            if ($count == 0) {\n\
    \                $b = $num;\n            } else {\n                if ($num <\
    \ $b) {\n                    $b = $num;\n                }\n            }\n  \
    \          $count++;\n        } elseif ($num < 0) {\n            if ($count ==\
    \ 0) {\n                $a = $num;\n            } else {\n                if ($num\
    \ > $a) {\n                    $a = $num;\n                }\n            }\n\
    \            $count++;\n        }\n    }\n    return array($a, $b);\n}", "  if\
    \ (count($lst) === 0) {\n    return array(null, null);\n  }\n  $l = $b = null;\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    if ($lst[$i] < 0) {\n      if ($l\
    \ === null || $lst[$i] > $l) {\n        $l = $lst[$i];\n      }\n    } else {\n\
    \      if ($b === null || $lst[$i] < $b) {\n        $b = $lst[$i];\n      }\n\
    \    }\n  }\n  return array($l, $b);\n}\n", "  $neg_max = $pos_min = $neg_max_isset\
    \ = $pos_min_isset = false;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n\
    \      if (!$neg_max_isset || $num > $neg_max) {\n        $neg_max = $num;\n \
    \       $neg_max_isset = true;\n      }\n    } else if ($num > 0) {\n      if\
    \ (!$pos_min_isset || $num < $pos_min) {\n        $pos_min = $num;\n        $pos_min_isset\
    \ = true;\n      }\n    }\n  }\n  return array($neg_max_isset ? $neg_max : null,\
    \ $pos_min_isset ? $pos_min : null);\n}\n\necho var_export(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]), true).\"\\n\";\necho var_export(largest_smallest_integers([]),\
    \ true).\"\\n\";\necho var_export(largest_smallest_integers([0]), true).\"\\n\"\
    ;", "\t$a = null;\n\t$b = null;\n\tforeach ($lst as $num) {\n\t\tif ($num > 0)\
    \ {\n\t\t\tif ($b === null || $num < $b) {\n\t\t\t\t$b = $num;\n\t\t\t}\n\t\t\
    } elseif ($num < 0) {\n\t\t\tif ($a === null || $num > $a) {\n\t\t\t\t$a = $num;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn [$a, $b];\n}\n\necho \"largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == (None, 1) ... \";\necho json_encode(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])) === json_encode([null, 1]) ? \"OK\" : \"FAIL\";\necho \"\\\
    n\";\necho \"largest_smallest_integers([]) == (None, None) ... \";\necho json_encode(largest_smallest_integers([]))\
    \ === json_encode([null, null]) ? \"OK\" : \"FAIL\";\necho \"\\n\";\necho \"largest_smallest_integers([0])\
    \ == (None, None) ... \";\necho json_encode(largest_smallest_integers([0])) ===\
    \ json_encode([null, null]) ? \"OK\" : \"FAIL\";\necho \"\\n\";", "    if (!count($lst))\
    \ {\n        return array(null, null);\n    }\n    $negatives = array();\n   \
    \ $positives = array();\n    foreach ($lst as $num) {\n        if ($num > 0) {\n\
    \            $positives[] = $num;\n        } else if ($num < 0) {\n          \
    \  $negatives[] = $num;\n        }\n    }\n    if (!count($negatives)) {\n   \
    \     $negatives[] = null;\n    }\n    if (!count($positives)) {\n        $positives[]\
    \ = null;\n    }\n    return array(max($negatives), min($positives));\n}\n\n$tests\
    \ = array(\n    array(\n        'input' => array(2, 4, 1, 3, 5, 7),\n        'expected'\
    \ => array(null, 1)\n    ),\n    array(\n        'input' => array(),\n       \
    \ 'expected' => array(null, null)\n    ),\n    array(\n        'input' => array(0),\n\
    \        'expected' => array(null, null)\n    ),\n    array(\n        'input'\
    \ => array(-1, -2, -3, -4, -5),\n        'expected' => array(-1, null)\n    ),\n\
    \    array(\n        'input' => array(1, 2, 3, 4, 5),\n        'expected' => array(null,\
    \ 1)\n    ),\n    array(\n        'input' => array(-1, -2, -3, 4, 5),\n      \
    \  'expected' => array(-1, 4)\n    ),\n    array(\n        'input' => array(-1,\
    \ 2, -3, 4, 5),\n        'expected' => array(-3, 2)\n    ),\n    array(\n    \
    \    'input' => array(-1, 2, 3, 4, -5),\n        'expected' => array(-5, 2)\n\
    \    ),\n    array(\n        'input' => array(-1, 2, 3, -4, -5),\n        'expected'\
    \ => array(-1, -4)\n    ),\n    array(\n        'input' => array(-10, -12, -3,",
  "\tif (!$lst) return [NULL, NULL];\n\t$negative = [];\n\t$positive = [];\n\tforeach\
    \ ($lst as $num) {\n\t\tif ($num < 0) {\n\t\t\t$negative[] = $num;\n\t\t} elseif\
    \ ($num > 0) {\n\t\t\t$positive[] = $num;\n\t\t}\n\t}\n\treturn [max($negative),\
    \ min($positive)];\n}\n", "    return [[max(array_filter($lst, function($v) {\
    \ return $v < 0; })), min(array_filter($lst, function($v) { return $v > 0; }))]];\n\
    }", "    $neg = array_filter($lst, function($e) { return $e < 0; });\n    $pos\
    \ = array_filter($lst, function($e) { return $e > 0; });\n    $a = count($neg)\
    \ > 0 ? max($neg) : null;\n    $b = count($pos) > 0 ? min($pos) : null;\n    return\
    \ [$a, $b];\n}", "  // iterate through the list, looking for positive and negative\
    \ integers\n  $lst_pos = [];\n  $lst_neg = [];\n  foreach ($lst as $number) {\n\
    \    if ($number > 0) {\n      $lst_pos[] = $number;\n    } elseif ($number <\
    \ 0) {\n      $lst_neg[] = $number;\n    }\n  }\n  // if we didn't find any, return\
    \ None\n  if (count($lst_pos) == 0 || count($lst_neg) == 0) {\n    return [null,\
    \ null];\n  }\n  // sort the lists and return the first of each as the answer\n\
    \  sort($lst_pos);\n  sort($lst_neg);\n  return [$lst_neg[0], $lst_pos[0]];\n\
    }\n", "  $largest = NULL;\n  $smallest = NULL;\n  $found = false;\n  for ($i =\
    \ 0; $i < count($lst); $i++) {\n    if ($lst[$i] < 0) {\n      if ($largest ==\
    \ NULL || $lst[$i] > $largest) {\n        $largest = $lst[$i];\n      }\n    }\
    \ else if ($lst[$i] > 0) {\n      if ($smallest == NULL || $lst[$i] < $smallest)\
    \ {\n        $smallest = $lst[$i];\n      }\n    }\n  }\n  return array($largest,\
    \ $smallest);\n}\n", "    $max = NULL;\n    $min = NULL;\n    foreach ($lst as\
    \ $elem) {\n        if (is_int($elem)) {\n            if ($elem < 0) {\n     \
    \           if ($max == NULL) {\n                    $max = $elem;\n         \
    \       } else {\n                    $max = $elem > $max ? $elem : $max;\n  \
    \              }\n            } else {\n                if ($min == NULL) {\n\
    \                    $min = $elem;\n                } else {\n               \
    \     $min = $elem < $min ? $elem : $min;\n                }\n            }\n\
    \        }\n    }\n    return array($max, $min);\n}\necho \"largest_smallest_integers\
    \ of [2, 4, 1, 3, 5, 7]: \";\nprint_r(largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]));\necho \"\\n\";\necho \"largest_smallest_integers of []: \";\nprint_r(largest_smallest_integers([]));\n\
    echo \"\\n\";\necho \"largest_smallest_integers of [0]: \";\nprint_r(largest_smallest_integers([0]));\n\
    echo \"\\n\";\n", "    if (empty($lst)) {\n        return [NULL, NULL];\n    }\n\
    \    $lst = array_filter($lst, function ($item) {\n        return $item != 0;\n\
    \    });\n    if (empty($lst)) {\n        return [NULL, NULL];\n    }\n    return\
    \ [min($lst), max($lst)];\n}\necho '<pre>';\nprint_r(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\necho '</pre>';\n\necho '<pre>';\nprint_r(largest_smallest_integers([]));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(largest_smallest_integers([0]));\necho\
    \ '</pre>';", "    // $count = count($lst);\n    // $i = 0;\n    // $a = None;\n\
    \    // $b = None;\n    // for ($i = 0; $i < $count; $i++) {\n    //     if ($lst[$i]\
    \ > 0) {\n    //         $b = $lst[$i];\n    //         break;\n    //     }\n\
    \    // }\n    // for ($i = 0; $i < $count; $i++) {\n    //     if ($lst[$i] <\
    \ 0) {\n    //         $a = $lst[$i];\n    //         break;\n    //     }\n \
    \   // }\n    // return array($a, $b);\n    $pos = $neg = NULL;\n    foreach ($lst\
    \ as $num) {\n        if ($num > 0) {\n            if (!$pos) $pos = $num;\n \
    \           elseif ($num < $pos) $pos = $num;\n        } elseif ($num < 0) {\n\
    \            if (!$neg) $neg = $num;\n            elseif ($num > $neg) $neg =\
    \ $num;\n        }\n    }\n    return array($neg, $pos);\n}\n", "    $negative\
    \ = null;\n    $positive = null;\n    for ($i = 0; $i < count($lst); $i++) {\n\
    \        if ($lst[$i] < 0) {\n            if ($negative == null) {\n         \
    \       $negative = $lst[$i];\n            } else {\n                $negative\
    \ = max($negative, $lst[$i]);\n            }\n        } else if ($lst[$i] > 0)\
    \ {\n            if ($positive == null) {\n                $positive = $lst[$i];\n\
    \            } else {\n                $positive = min($positive, $lst[$i]);\n\
    \            }\n        }\n    }\n    return array($negative, $positive);\n}\n\
    \necho implode(\"\\n\", largest_smallest_integers([2, 4, 1, 3, 5, 7]));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
