name: HumanEval_156_int_to_mini_roman
language: php
results:
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    //\n    // YOUR CODE GOES HERE\n    //\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp212lte64.php:22\n\
    Stack trace:\n#0 /tmp/tmp212lte64.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp212lte64.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number < 1 || $number > 1000) {\n        throw new Exception(\"\
    Invalid number.\");\n    }\n    $conversion = array(\n        array('I', 'V'),\n\
    \        array('X', 'L'),\n        array('C', 'D'),\n        array('M', '')\n\
    \    );\n    $result = '';\n    $i = 0;\n    while ($number > 0) {\n        $digit\
    \ = $number % 10;\n        if ($digit < 4) {\n            $result = str_repeat($conversion[$i][0],\
    \ $digit) . $result;\n        } else if ($digit == 4) {\n            $result =\
    \ $conversion[$i][0] . $conversion[$i][1] . $result;\n        } else if ($digit\
    \ < 9) {\n            $result = $conversion[$i][1] . str_repeat($conversion[$i][0],\
    \ $digit - 5) . $result;\n        } else {\n            $result = $conversion[$i][0]\
    \ . $conversion[$i + 1][0] . $result;\n        }\n        $number = floor($number\
    \ / 10);\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3vr9lb6.php:43\n\
    Stack trace:\n#0 /tmp/tmpm3vr9lb6.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpm3vr9lb6.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $table = array(\n    array(1000, 'm'),\n    array(900, 'cm'),\n    array(500,\
    \ 'd'),\n    array(400, 'cd'),\n    array(100, 'c'),\n    array(90, 'xc'),\n \
    \   array(50, 'l'),\n    array(40, 'xl'),\n    array(10, 'x'),\n    array(9, 'ix'),\n\
    \    array(5, 'v'),\n    array(4, 'iv'),\n    array(1, 'i')\n  );\n  $roman =\
    \ '';\n  foreach ($table as $row) {\n    while ($number >= $row[0]) {\n      $roman\
    \ .= $row[1];\n      $number -= $row[0];\n    }\n  }\n  return $roman;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = \"\";\n  if ($number == 1000) {\n    $result = \"m\";\n  } else\
    \ if ($number >= 900) {\n    $result = \"cm\";\n    $number -= 900;\n  } else\
    \ if ($number >= 500) {\n    $result = \"d\";\n    $number -= 500;\n  } else if\
    \ ($number >= 400) {\n    $result = \"cd\";\n    $number -= 400;\n  }\n  while\
    \ ($number >= 100) {\n    $result .= \"c\";\n    $number -= 100;\n  }\n  if ($number\
    \ >= 90) {\n    $result .= \"xc\";\n    $number -= 90;\n  } else if ($number >=\
    \ 50) {\n    $result .= \"l\";\n    $number -= 50;\n  } else if ($number >= 40)\
    \ {\n    $result .= \"xl\";\n    $number -= 40;\n  }\n  while ($number >= 10)\
    \ {\n    $result .= \"x\";\n    $number -= 10;\n  }\n  if ($number == 9) {\n \
    \   $result .= \"ix\";\n  } else if ($number >= 5) {\n    $result .= \"v\";\n\
    \    $number -= 5;\n  } else if ($number == 4) {\n    $result .= \"iv\";\n  }\n\
    \  while ($number > 0) {\n    $result .= \"i\";\n    $number -= 1;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwf6pjp_.php:61\n\
    Stack trace:\n#0 /tmp/tmpnwf6pjp_.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpnwf6pjp_.php\
    \ on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = [\n        1000 => 'm',\n      \
    \  900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n\
    \        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n\
    \        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n\
    \    ];\n    foreach ($roman_numerals as $decimal => $roman) {\n        $result\
    \ .= str_repeat($roman, (int) ($number / $decimal));\n        $number %= $decimal;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = [\n\t\t'I' => 1,\n\t\t'IV' => 4,\n\t\t'V' => 5,\n\t\t'IX' => 9,\n\
    \t\t'X' => 10,\n\t\t'XL' => 40,\n\t\t'L' => 50,\n\t\t'XC' => 90,\n\t\t'C' => 100,\n\
    \t\t'CD' => 400,\n\t\t'D' => 500,\n\t\t'CM' => 900,\n\t\t'M' => 1000\n\t];\n\t\
    if (array_key_exists($number, $roman)) {\n\t\treturn array_search($number, $roman);\n\
    \t}\n\t$result = '';\n\t$remainder = $number;\n\twhile ($remainder > 0) {\n\t\t\
    $max = 0;\n\t\tforeach ($roman as $key => $value) {\n\t\t\tif ($value <= $remainder)\
    \ {\n\t\t\t\t$max = $value;\n\t\t\t}\n\t\t}\n\t\t$result .= array_search($max,\
    \ $roman);\n\t\t$remainder -= $max;\n\t}\n\treturn $result;\n}\n\n$numbers = [1,\
    \ 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\nforeach ($numbers as $number)\
    \ {\n\tprintf(\"int_to_mini_roman(%d) == '%s'\\n\", $number, int_to_mini_roman($number));\n\
    }\n\n$numbers = [19, 152, 426];\nforeach ($numbers as $number) {\n\tprintf(\"\
    int_to_mini_roman(%d) == '%s'\\n\", $number, int_to_mini_roman($number));\n}\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "int_to_mini_roman(1) == 'I'\nint_to_mini_roman(4) == 'IV'\nint_to_mini_roman(5)\
    \ == 'V'\nint_to_mini_roman(9) == 'IX'\nint_to_mini_roman(10) == 'X'\nint_to_mini_roman(40)\
    \ == 'XL'\nint_to_mini_roman(50) == 'L'\nint_to_mini_roman(90) == 'XC'\nint_to_mini_roman(100)\
    \ == 'C'\nint_to_mini_roman(400) == 'CD'\nint_to_mini_roman(500) == 'D'\nint_to_mini_roman(900)\
    \ == 'CM'\nint_to_mini_roman(1000) == 'M'\nint_to_mini_roman(19) == 'XIX'\nint_to_mini_roman(152)\
    \ == 'CLII'\nint_to_mini_roman(426) == 'CDXXVI'\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpam1q9ooy.php:57\nStack trace:\n#0 /tmp/tmpam1q9ooy.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpam1q9ooy.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v',\
    \ 'iv', 'i'];\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1];\n    $s = '';\n    for ($i = 0; $i < count($numbers); $i++) {\n     \
    \   while ($number >= $numbers[$i]) {\n            $s .= $numerals[$i];\n    \
    \        $number -= $numbers[$i];\n        }\n    }\n    return $s;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $mini_roman_numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    $result = '';\n    foreach ($mini_roman_numerals as $key => $value)\
    \ {\n        while ($number >= $value) {\n            $result .= $key;\n     \
    \       $number -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $map = array(\n        \"M\"  => 1000,\n        \"CM\" => 900,\n    \
    \    \"D\"  => 500,\n        \"CD\" => 400,\n        \"C\"  => 100,\n        \"\
    XC\" => 90,\n        \"L\"  => 50,\n        \"XL\" => 40,\n        \"X\"  => 10,\n\
    \        \"IX\" => 9,\n        \"V\"  => 5,\n        \"IV\" => 4,\n        \"\
    I\"  => 1\n    );\n    $output = \"\";\n    foreach ($map as $roman => $int) {\n\
    \        $matches = intval($number / $int);\n        $output .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6elfwm6h.php:39\n\
    Stack trace:\n#0 /tmp/tmp6elfwm6h.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp6elfwm6h.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  // Your code here.\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl2vjyesn.php:18\n\
    Stack trace:\n#0 /tmp/tmpl2vjyesn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpl2vjyesn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'M'=>1000,\n        'CM'=>900,\n        'D'=>500,\n\
    \        'CD'=>400,\n        'C'=>100,\n        'XC'=>90,\n        'L'=>50,\n\
    \        'XL'=>40,\n        'X'=>10,\n        'IX'=>9,\n        'V'=>5,\n    \
    \    'IV'=>4,\n        'I'=>1\n    );\n    $result = '';\n    foreach ($numerals\
    \ as $numeral=>$limit) {\n        for (; $number >= $limit; $number -= $limit)\
    \ {\n            $result .= $numeral;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07bxsru8.php:39\n\
    Stack trace:\n#0 /tmp/tmp07bxsru8.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp07bxsru8.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $tens = (int) ($number / 10);\n  $ones = $number % 10;\n  $numeral = '';\n\
    \  if ($tens) {\n    $numeral .= str_repeat('x', $tens);\n  }\n  switch ($ones)\
    \ {\n    case 1: $numeral .= 'i'; break;\n    case 2: $numeral .= 'ii'; break;\n\
    \    case 3: $numeral .= 'iii'; break;\n    case 4: $numeral .= 'iv'; break;\n\
    \    case 5: $numeral .= 'v'; break;\n    case 6: $numeral .= 'vi'; break;\n \
    \   case 7: $numeral .= 'vii'; break;\n    case 8: $numeral .= 'viii'; break;\n\
    \    case 9: $numeral .= 'ix'; break;\n  }\n  return $numeral;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogxux46h.php:36\n\
    Stack trace:\n#0 /tmp/tmpogxux46h.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpogxux46h.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $conv_table = array(\n        1000 => 'm',\n        900 => 'cm',\n  \
    \      500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n\
    \        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n\
    \        5 => 'v',\n        4 => 'iv',\n        1 => 'i',\n    );\n    $rom =\
    \ '';\n    while ($number > 0) {\n        foreach ($conv_table as $decimal =>\
    \ $roman) {\n            if ($number >= $decimal) {\n                $number -=\
    \ $decimal;\n                $rom .= $roman;\n                break;\n       \
    \     }\n        }\n    }\n    return $rom;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman_numerals = [\n\t\t['m', 1000],\n\t\t['cm', 900],\n\t\t['d', 500],\n\
    \t\t['cd', 400],\n\t\t['c', 100],\n\t\t['xc', 90],\n\t\t['l', 50],\n\t\t['xl',\
    \ 40],\n\t\t['x', 10],\n\t\t['ix', 9],\n\t\t['v', 5],\n\t\t['iv', 4],\n\t\t['i',\
    \ 1]\n\t];\n\t$roman_string = '';\n\twhile ($number > 0) {\n\t\tforeach ($roman_numerals\
    \ as $key => $value) {\n\t\t\tif ($number >= $value[1]) {\n\t\t\t\t$number -=\
    \ $value[1];\n\t\t\t\t$roman_string .= $value[0];\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn $roman_string;\n}\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // check $number is integer and within constraints\n    if (!is_int($number)\
    \ || $number < 1 || $number > 1000) {\n        return false;\n    }\n    // Roman\
    \ numeral representations for numbers\n    $lookup = array(\n        'm'  => 1000,\n\
    \        'cm' => 900,\n        'd'  => 500,\n        'cd' => 400,\n        'c'\
    \  => 100,\n        'xc' => 90,\n        'l'  => 50,\n        'xl' => 40,\n  \
    \      'x'  => 10,\n        'ix' => 9,\n        'v'  => 5,\n        'iv' => 4,\n\
    \        'i'  => 1\n    );\n    // initialise result string\n    $result = '';\n\
    \    // calculate the result\n    foreach ($lookup as $roman => $value) {\n  \
    \      // determine the number of occurrences of this symbol in the result\n \
    \       $matches = intval($number / $value);\n        // update $number\n    \
    \    $number = $number % $value;\n        // concatenate roman symbol(s) to $result\n\
    \        $result .= str_repeat($roman, $matches);\n    }\n    // return the result\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numbers = array(1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1);\n  $romans = array('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i');\n  for ($i = 0; $i < 13; $i++) {\n    while ($number\
    \ >= $numbers[$i]) {\n      $result .= $romans[$i];\n      $number -= $numbers[$i];\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99ki8dw6.php:18\n\
    Stack trace:\n#0 /tmp/tmp99ki8dw6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp99ki8dw6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        1 => 'i',\n        5 => 'v',\n    \
    \    10 => 'x',\n        50 => 'l',\n        100 => 'c',\n        500 => 'd',\n\
    \        1000 => 'm'\n    );\n    if ($number == 1) {\n        return $roman_numerals[1];\n\
    \    }\n    $min_value = 1;\n    $max_value = 1000;\n    if ($number < $min_value\
    \ || $number > $max_value) {\n        throw new InvalidArgumentException(\"'number'\
    \ must be in the range [$min_value, $max_value]\");\n    }\n    $roman_numeral\
    \ = '';\n    $start = $number;\n    while ($start > 0) {\n        $highest_digit\
    \ = (int) ($start / 1000);\n        $hundreds_digit = (int) (($start % 1000) /\
    \ 100);\n        $tens_digit = (int) (($start % 100) / 10);\n        $ones_digit\
    \ = (int) ($start % 10);\n        if ($highest_digit > 0) {\n            $roman_numeral\
    \ .= str_repeat($roman_numerals[1000], $highest_digit);\n        }\n        if\
    \ ($hundreds_digit == 4) {\n            $roman_numeral .= $roman_numerals[100]\
    \ . $roman_numerals[500];\n        } else if ($hundreds_digit == 9) {\n      \
    \      $roman_numeral .= $roman_numerals[100] . $roman_numerals[1000];\n     \
    \   } else if ($hundreds_digit > 4) {\n            $roman_numeral .= $roman_numerals[500]\
    \ . str_repeat($roman_numerals[100], $hundreds_digit - 5);\n        } else {\n\
    \            $roman_numeral .= str_repeat($roman_numerals[100], $hundreds_digit);\n\
    \        }\n        if ($tens_digit == 4) {\n            $roman_numeral .= $roman_numerals[10]\
    \ . $roman_numerals[50];\n        } else if ($tens\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6rigoms5.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = \"\";\n  while ($number >= 1000) {\n    $result .= \"m\";\n \
    \   $number -= 1000;\n  }\n  if ($number >= 900) {\n    $result .= \"cm\";\n \
    \   $number -= 900;\n  }\n  if ($number >= 500) {\n    $result .= \"d\";\n   \
    \ $number -= 500;\n  }\n  if ($number >= 400) {\n    $result .= \"cd\";\n    $number\
    \ -= 400;\n  }\n  while ($number >= 100) {\n    $result .= \"c\";\n    $number\
    \ -= 100;\n  }\n  if ($number >= 90) {\n    $result .= \"xc\";\n    $number -=\
    \ 90;\n  }\n  if ($number >= 50) {\n    $result .= \"l\";\n    $number -= 50;\n\
    \  }\n  if ($number >= 40) {\n    $result .= \"xl\";\n    $number -= 40;\n  }\n\
    \  while ($number >= 10) {\n    $result .= \"x\";\n    $number -= 10;\n  }\n \
    \ if ($number >= 9) {\n    $result .= \"ix\";\n    $number -= 9;\n  }\n  if ($number\
    \ >= 5) {\n    $result .= \"v\";\n    $number -= 5;\n  }\n  if ($number >= 4)\
    \ {\n    $result .= \"iv\";\n    $number -= 4;\n  }\n  while ($number >= 1) {\n\
    \    $result .= \"i\";\n    $number -= 1;\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number < 1 || $number > 1000) {\n        return NULL;\n    }\n \
    \   $num_to_rom = array(\n        1 => 'i',\n        4 => 'iv',\n        5 =>\
    \ 'v',\n        9 => 'ix',\n        10 => 'x',\n        40 => 'xl',\n        50\
    \ => 'l',\n        90 => 'xc',\n        100 => 'c',\n        400 => 'cd',\n  \
    \      500 => 'd',\n        900 => 'cm',\n        1000 => 'm'\n    );\n    $result\
    \ = '';\n    $numbers = array_keys($num_to_rom);\n    $numbers = array_reverse($numbers);\n\
    \    foreach ($numbers as $num) {\n        while ($number >= $num) {\n       \
    \     $result .= $num_to_rom[$num];\n            $number -= $num;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $intToRomanArray = [\n        1 => 'i',\n        2 => 'ii',\n       \
    \ 3 => 'iii',\n        4 => 'iv',\n        5 => 'v',\n        6 => 'vi',\n   \
    \     7 => 'vii',\n        8 => 'viii',\n        9 => 'ix',\n        10 => 'x',\n\
    \        20 => 'xx',\n        30 => 'xxx',\n        40 => 'xl',\n        50 =>\
    \ 'l',\n        60 => 'lx',\n        70 => 'lxx',\n        80 => 'lxxx',\n   \
    \     90 => 'xc',\n        100 => 'c',\n        200 => 'cc',\n        300 => 'ccc',\n\
    \        400 => 'cd',\n        500 => 'd',\n        600 => 'dc',\n        700\
    \ => 'dcc',\n        800 => 'dccc',\n        900 => 'cm',\n        1000 => 'm',\n\
    \    ];\n    $result = '';\n    if ($number > 0 && $number <= 1000) {\n      \
    \  $hundreds = 0;\n        $tens = 0;\n        $ones = 0;\n        while ($number\
    \ > 0) {\n            if ($number >= 100) {\n                $hundreds++;\n  \
    \              $number -= 100;\n            } elseif ($number >= 10) {\n     \
    \           $tens++;\n                $number -= 10;\n            } else {\n \
    \               $ones = $number;\n                $number = 0;\n            }\n\
    \        }\n        if ($hundreds > 0) {\n            $result .= $intToRomanArray[$hundreds\
    \ * 100];\n        }\n        if ($tens > 0) {\n            $result .= $intToRomanArray[$tens\
    \ * 10];\n        }\n        if ($ones > 0) {\n            $result .= $intToRomanArray[$ones];\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $numeral = '';\n    $values = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($values as $numeral => $value)\
    \ {\n        $times = intval($number / $value);\n        $number %= $value;\n\
    \        $numeral .= str_repeat($numeral, $times);\n    }\n    return $numeral;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzikip0ng.php:32\n\
    Stack trace:\n#0 /tmp/tmpzikip0ng.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzikip0ng.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $flag = 0;\n  $tmp = $number;\n  while ($tmp > 0) {\n\
    \    if ($tmp >= 1000) {\n      $flag = 1;\n      $result .= 'm';\n      $tmp\
    \ -= 1000;\n    } elseif ($tmp >= 900) {\n      $flag = 1;\n      $result .= 'cm';\n\
    \      $tmp -= 900;\n    } elseif ($tmp >= 500) {\n      $flag = 1;\n      $result\
    \ .= 'd';\n      $tmp -= 500;\n    } elseif ($tmp >= 400) {\n      $flag = 1;\n\
    \      $result .= 'cd';\n      $tmp -= 400;\n    } elseif ($tmp >= 100) {\n  \
    \    $flag = 1;\n      $result .= 'c';\n      $tmp -= 100;\n    } elseif ($tmp\
    \ >= 90) {\n      $flag = 1;\n      $result .= 'xc';\n      $tmp -= 90;\n    }\
    \ elseif ($tmp >= 50) {\n      $flag = 1;\n      $result .= 'l';\n      $tmp -=\
    \ 50;\n    } elseif ($tmp >= 40) {\n      $flag = 1;\n      $result .= 'xl';\n\
    \      $tmp -= 40;\n    } elseif ($tmp >= 10) {\n      $flag = 1;\n      $result\
    \ .= 'x';\n      $tmp -= 10;\n    } elseif ($tmp >= 9) {\n      $flag = 1;\n \
    \     $result .= 'ix';\n      $tmp -= 9;\n    } elseif ($tmp >= 5) {\n      $flag\
    \ = 1;\n      $result .= 'v';\n      $tmp -= 5;\n    } elseif ($tmp >= 4) {\n\
    \      $flag = 1;\n      $result .= 'iv';\n      $tmp -= 4;\n    } elseif ($tmp\
    \ >= 1) {\n      $flag = 1;\n      $result .= 'i';\n      $tmp -= 1;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = '';\n\t\n\t$numToRoman = array(\n\t\t'M'  => 1000,\n\t\t'CM' =>\
    \ 900,\n\t\t'D'  => 500,\n\t\t'CD' => 400,\n\t\t'C'  => 100,\n\t\t'XC' => 90,\n\
    \t\t'L'  => 50,\n\t\t'XL' => 40,\n\t\t'X'  => 10,\n\t\t'IX' => 9,\n\t\t'V'  =>\
    \ 5,\n\t\t'IV' => 4,\n\t\t'I'  => 1,\n\t);\n\t\n\tforeach ($numToRoman as $key\
    \ => $value) {\n\t\twhile ($number >= $value) {\n\t\t\t$roman .= $key;\n\t\t\t\
    $number -= $value;\n\t\t}\n\t}\n\t\n\treturn $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40wuohbz.php:43\n\
    Stack trace:\n#0 /tmp/tmp40wuohbz.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp40wuohbz.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    while ($number >= 1000) {\n        $result .= 'm';\n\
    \        $number -= 1000;\n    }\n    if ($number >= 900) {\n        $result .=\
    \ 'cm';\n        $number -= 900;\n    }\n    if ($number >= 500) {\n        $result\
    \ .= 'd';\n        $number -= 500;\n    }\n    if ($number >= 400) {\n       \
    \ $result .= 'cd';\n        $number -= 400;\n    }\n    while ($number >= 100)\
    \ {\n        $result .= 'c';\n        $number -= 100;\n    }\n    if ($number\
    \ >= 90) {\n        $result .= 'xc';\n        $number -= 90;\n    }\n    if ($number\
    \ >= 50) {\n        $result .= 'l';\n        $number -= 50;\n    }\n    if ($number\
    \ >= 40) {\n        $result .= 'xl';\n        $number -= 40;\n    }\n    while\
    \ ($number >= 10) {\n        $result .= 'x';\n        $number -= 10;\n    }\n\
    \    if ($number >= 9) {\n        $result .= 'ix';\n        $number -= 9;\n  \
    \  }\n    if ($number >= 5) {\n        $result .= 'v';\n        $number -= 5;\n\
    \    }\n    if ($number >= 4) {\n        $result .= 'iv';\n        $number -=\
    \ 4;\n    }\n    while ($number >= 1) {\n        $result .= 'i';\n        $number\
    \ -= 1;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $ones = array(\n        1 => 'i',\n        2 => 'ii',\n        3 => 'iii',\n\
    \        4 => 'iv',\n        5 => 'v',\n        6 => 'vi',\n        7 => 'vii',\n\
    \        8 => 'viii',\n        9 => 'ix',\n    );\n    $tens = array(\n      \
    \  1 => 'x',\n        2 => 'xx',\n        3 => 'xxx',\n        4 => 'xl',\n  \
    \      5 => 'l',\n        6 => 'lx',\n        7 => 'lxx',\n        8 => 'lxxx',\n\
    \        9 => 'xc',\n    );\n    $hundreds = array(\n        1 => 'c',\n     \
    \   2 => 'cc',\n        3 => 'ccc',\n        4 => 'cd',\n        5 => 'd',\n \
    \       6 => 'dc',\n        7 => 'dcc',\n        8 => 'dccc',\n        9 => 'cm',\n\
    \    );\n    $thousands = array(\n        1 => 'm',\n        2 => 'mm',\n    \
    \    3 => 'mmm',\n    );\n    $thousands_str = $hundreds_str = $tens_str = $ones_str\
    \ = '';\n    if ($number >= 1000) {\n        $thousands_str = $thousands[$number\
    \ / 1000];\n        $number = $number % 1000;\n    }\n    if ($number >= 100)\
    \ {\n        $hundreds_str = $hundreds[$number / 100];\n        $number = $number\
    \ % 100;\n    }\n    if ($number >= 10) {\n        $tens_str = $tens[$number /\
    \ 10];\n        $number = $number % 10;\n    }\n    if ($number > 0) {\n     \
    \   $ones_str = $ones[$number];\n    }\n    return $thousands_str . $hundreds_str\
    \ . $tens_str . $ones_str;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$ones = array(\n\t\t1 => 'i',\n\t\t2 => 'ii',\n\t\t3 => 'iii',\n\t\t4 =>\
    \ 'iv',\n\t\t5 => 'v',\n\t\t6 => 'vi',\n\t\t7 => 'vii',\n\t\t8 => 'viii',\n\t\t\
    9 => 'ix',\n\t);\n\t$tens = array(\n\t\t1 => 'x',\n\t\t2 => 'xx',\n\t\t3 => 'xxx',\n\
    \t\t4 => 'xl',\n\t\t5 => 'l',\n\t\t6 => 'lx',\n\t\t7 => 'lxx',\n\t\t8 => 'lxxx',\n\
    \t\t9 => 'xc',\n\t);\n\t$hundreds = array(\n\t\t1 => 'c',\n\t\t2 => 'cc',\n\t\t\
    3 => 'ccc',\n\t\t4 => 'cd',\n\t\t5 => 'd',\n\t\t6 => 'dc',\n\t\t7 => 'dcc',\n\t\
    \t8 => 'dccc',\n\t\t9 => 'cm',\n\t);\n\t$thousands = array(\n\t\t1 => 'm',\n\t\
    \t2 => 'mm',\n\t\t3 => 'mmm',\n\t);\n\tif (!preg_match('/^[1-9][0-9]{0,3}$/',\
    \ $number)) {\n\t\tthrow new InvalidArgumentException('Number must be between\
    \ 1 and 1000');\n\t}\n\tif ($number == 1000) {\n\t\treturn 'm';\n\t}\n\t$number\
    \ = str_pad($number, 4, '0', STR_PAD_LEFT);\n\t$thousands_part = substr($number,\
    \ 0, 1);\n\t$hundreds_part = substr($number, 1, 1);\n\t$tens_part = substr($number,\
    \ 2, 1);\n\t$ones_part = substr($number, 3, 1);\n\t$string = '';\n\tif ($thousands_part)\
    \ {\n\t\t$string .= $thousands[$thousands_part];\n\t}\n\tif ($hundreds_part) {\n\
    \t\t$string .= $hundreds[$h\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplp05g54b.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = \"\";\n  if ($number >= 1000) {\n    $thousands = floor($number\
    \ / 1000);\n    $number -= ($thousands * 1000);\n    $result .= str_repeat(\"\
    m\", $thousands);\n  }\n  if ($number >= 900) {\n    $result .= \"cm\";\n    $number\
    \ -= 900;\n  }\n  if ($number >= 500) {\n    $result .= \"d\";\n    $number -=\
    \ 500;\n  }\n  if ($number >= 400) {\n    $result .= \"cd\";\n    $number -= 400;\n\
    \  }\n  if ($number >= 100) {\n    $hundreds = floor($number / 100);\n    $number\
    \ -= ($hundreds * 100);\n    $result .= str_repeat(\"c\", $hundreds);\n  }\n \
    \ if ($number >= 90) {\n    $result .= \"xc\";\n    $number -= 90;\n  }\n  if\
    \ ($number >= 50) {\n    $result .= \"l\";\n    $number -= 50;\n  }\n  if ($number\
    \ >= 40) {\n    $result .= \"xl\";\n    $number -= 40;\n  }\n  if ($number >=\
    \ 10) {\n    $tens = floor($number / 10);\n    $number -= ($tens * 10);\n    $result\
    \ .= str_repeat(\"x\", $tens);\n  }\n  if ($number >= 9) {\n    $result .= \"\
    ix\";\n    $number -= 9;\n  }\n  if ($number >= 5) {\n    $result .= \"v\";\n\
    \    $number -= 5;\n  }\n  if ($number >= 4) {\n    $result .= \"iv\";\n    $number\
    \ -= 4;\n  }\n  if ($number >= 1) {\n    $result .= str_repeat(\"i\", $number);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example: print \"Hello world!\";\n    $romanValues\
    \ = [\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n     \
    \   'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n\
    \        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    ];\n    $miniRoman = '';\n    while\
    \ ($number > 0) {\n        foreach ($romanValues as $roman => $value) {\n    \
    \        if ($number >= $value) {\n                $number -= $value;\n      \
    \          $miniRoman .= $roman;\n                break;\n            }\n    \
    \    }\n    }\n    print($miniRoman);\n}\n\nint_to_mini_roman(19);\necho \"\\\
    n\";\nint_to_mini_roman(152);\necho \"\\n\";\nint_to_mini_roman(426);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "XIX\nCLII\nCDXXVI\nXIX\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp9tre0qrp.php:52\nStack trace:\n#0 /tmp/tmp9tre0qrp.php(68): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9tre0qrp.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // establish roman numerals key\n    $lookup = array(\n        'M' =>\
    \ 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n   \
    \     'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n\
    \        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n\
    \        'I' => 1\n    );\n    // obtain remainder, then use to generate next\
    \ numeral\n    $roman = '';\n    foreach ($lookup as $key => $val) {\n       \
    \ $matches = intval($number / $val);\n        $roman .= str_repeat($key, $matches);\n\
    \        $number = $number % $val;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkljp7hza.php:41\n\
    Stack trace:\n#0 /tmp/tmpkljp7hza.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpkljp7hza.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$dictionnary = ['m' => 1000, 'cm' => 900, 'd' => 500, 'cd' => 400, 'c'\
    \ => 100, 'xc' => 90, 'l' => 50, 'xl' => 40, 'x' => 10, 'ix' => 9, 'v' => 5, 'iv'\
    \ => 4, 'i' => 1];\n\t$result = '';\n\tforeach ($dictionnary as $letter => $value)\
    \ {\n\t\t$result .= str_repeat($letter, (int) ($number / $value));\n\t\t$number\
    \ %= $value;\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  while ($number >= 1000) {\n    $result .= 'm';\n    $number\
    \ -= 1000;\n  }\n  if ($number >= 900) {\n    $result .= 'cm';\n    $number -=\
    \ 900;\n  }\n  if ($number >= 500) {\n    $result .= 'd';\n    $number -= 500;\n\
    \  }\n  if ($number >= 400) {\n    $result .= 'cd';\n    $number -= 400;\n  }\n\
    \  while ($number >= 100) {\n    $result .= 'c';\n    $number -= 100;\n  }\n \
    \ if ($number >= 90) {\n    $result .= 'xc';\n    $number -= 90;\n  }\n  if ($number\
    \ >= 50) {\n    $result .= 'l';\n    $number -= 50;\n  }\n  if ($number >= 40)\
    \ {\n    $result .= 'xl';\n    $number -= 40;\n  }\n  while ($number >= 10) {\n\
    \    $result .= 'x';\n    $number -= 10;\n  }\n  if ($number >= 9) {\n    $result\
    \ .= 'ix';\n    $number -= 9;\n  }\n  if ($number >= 5) {\n    $result .= 'v';\n\
    \    $number -= 5;\n  }\n  if ($number >= 4) {\n    $result .= 'iv';\n    $number\
    \ -= 4;\n  }\n  while ($number >= 1) {\n    $result .= 'i';\n    $number -= 1;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numeral_map = array(\n        10 => 'x',\n      \
    \  9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i',\n    );\n\
    \    foreach ($numeral_map as $limit => $glyph) {\n        while ($number >= $limit)\
    \ {\n            $result .= $glyph;\n            $number -= $limit;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe99hysqz.php:33\n\
    Stack trace:\n#0 /tmp/tmpe99hysqz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpe99hysqz.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz9o3n4la.php:18\n\
    Stack trace:\n#0 /tmp/tmpz9o3n4la.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpz9o3n4la.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman_numerals = array(\n\t\t100 => 'c',\n\t\t90 => 'xc',\n\t\t50 => 'l',\n\
    \t\t40 => 'xl',\n\t\t10 => 'x',\n\t\t9 => 'ix',\n\t\t5 => 'v',\n\t\t4 => 'iv',\n\
    \t\t1 => 'i'\n\t);\n\t$result = '';\n\tforeach ($roman_numerals as $num => $roman)\
    \ {\n\t\twhile ($number >= $num) {\n\t\t\t$result .= $roman;\n\t\t\t$number -=\
    \ $num;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho int_to_mini_roman(42);\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "xlii\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfl9u8vzq.php:40\n\
    Stack trace:\n#0 /tmp/tmpfl9u8vzq.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpfl9u8vzq.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$numeral = '';\n\t$number = (int) $number;\n\tif($number < 1 || $number\
    \ > 1000) {\n\t\tthrow new \\Exception('Only numbers between 1 and 1000 are accepted');\n\
    \t}\n\t$romans = [\n\t\t1 => 'i',\n\t\t4 => 'iv',\n\t\t5 => 'v',\n\t\t9 => 'ix',\n\
    \t\t10 => 'x',\n\t\t40 => 'xl',\n\t\t50 => 'l',\n\t\t90 => 'xc',\n\t\t100 => 'c',\n\
    \t\t400 => 'cd',\n\t\t500 => 'd',\n\t\t900 => 'cm',\n\t\t1000 => 'm'\n\t];\n\t\
    $numbers = array_keys($romans);\n\t$i = count($numbers) - 1;\n\twhile($number\
    \ > 0) {\n\t\tif($number >= $numbers[$i]) {\n\t\t\t$numeral .= $romans[$numbers[$i]];\n\
    \t\t\t$number -= $numbers[$i];\n\t\t} else {\n\t\t\t$i--;\n\t\t}\n\t}\n\treturn\
    \ $numeral;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $key = array('m'=>1000, 'cm'=>900, 'd'=>500, 'cd'=>400, 'c'=>100, 'xc'=>90,\
    \ 'l'=>50, 'xl'=>40, 'x'=>10, 'ix'=>9, 'v'=>5, 'iv'=>4, 'i'=>1);\n  $roman = '';\n\
    \  while($number > 0) {\n    foreach($key as $roman => $number) {\n      if($number\
    \ <= $number) {\n        $number -= $number;\n        $roman .= $roman;\n    \
    \    break;\n      }\n    }\n  }\n  return $roman;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpasddm9sd.php:28\n\
    Stack trace:\n#0 /tmp/tmpasddm9sd.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpasddm9sd.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman  = '';\n\t$roman_symbols = array( 'm' => 1000, 'd' => 500, 'c' =>\
    \ 100, 'l' => 50, 'x' => 10, 'v' => 5, 'i' => 1 );\n\tforeach ($roman_symbols\
    \ as $symbol => $value) {\n\t\twhile ( $number >= $value ) {\n\t\t\t$roman .=\
    \ $symbol;\n\t\t\t$number -= $value;\n\t\t}\n\t}\n\treturn $roman;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpekisl5bv.php:25\n\
    Stack trace:\n#0 /tmp/tmpekisl5bv.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpekisl5bv.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $conversion = array(\n        array(100, 'c'),\n        array(50, 'l'),\n\
    \        array(10, 'x'),\n        array(5, 'v'),\n        array(1, 'i')\n    );\n\
    \    $result = '';\n    foreach ($conversion as $c) {\n        $ones = $number\
    \ / $c[0];\n        $number = $number % $c[0];\n        if ($ones == 9) {\n  \
    \          $result .= $c[1] . $conversion[array_search($c, $conversion) - 2][1];\n\
    \        } elseif ($ones == 4) {\n            $result .= $c[1] . $conversion[array_search($c,\
    \ $conversion) - 1][1];\n        } else {\n            $result .= str_repeat($c[1],\
    \ $ones);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr7s3t0uu.php:37\n\
    Stack trace:\n#0 /tmp/tmpr7s3t0uu.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpr7s3t0uu.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$mini_roman = array(\n\t\t'm' => 1000,\n\t\t'd' => 500,\n\t\t'c' => 100,\n\
    \t\t'l' => 50,\n\t\t'x' => 10,\n\t\t'v' => 5,\n\t\t'i' => 1\n\t);\n\t$out = '';\n\
    \tforeach ($mini_roman as $letter => $val) {\n\t\t$count = floor($number / $val);\n\
    \t\t$out .= str_repeat($letter, $count);\n\t\t$number = $number % $val;\n\t}\n\
    \t$out = str_replace('dcccc', 'cm', $out);\n\t$out = str_replace('cccc', 'cd',\
    \ $out);\n\t$out = str_replace('lxxxx', 'xc', $out);\n\t$out = str_replace('xxxx',\
    \ 'xl', $out);\n\t$out = str_replace('viiii', 'ix', $out);\n\t$out = str_replace('iiii',\
    \ 'iv', $out);\n\treturn $out;\n}\n\nvar_dump(int_to_mini_roman(19) == 'xix');\n\
    var_dump(int_to_mini_roman(152) == 'clii');\nvar_dump(int_to_mini_roman(426) ==\
    \ 'cdxxvi');\n\necho '<h2>Task #4</h2>';\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bool(true)\nbool(true)\nbool(true)\n<h2>Task #4</h2>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $lookup = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n\
    \    );\n    foreach ($lookup as $rom => $arab) {\n        $matches = intval($number\
    \ / $arab);\n        $roman .= str_repeat($rom, $matches);\n        $number =\
    \ $number % $arab;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwk1f4hfc.php:39\n\
    Stack trace:\n#0 /tmp/tmpwk1f4hfc.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpwk1f4hfc.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_number = '';\n    $mappings = array(\n        array(100, 'c'),\n\
    \        array(50, 'l'),\n        array(10, 'x'),\n        array(5, 'v'),\n  \
    \      array(1, 'i'),\n    );\n    foreach ($mappings as $mapping) {\n       \
    \ $number_mappings = floor($number / $mapping[0]);\n        $number -= $number_mappings\
    \ * $mapping[0];\n        $roman_number .= str_repeat($mapping[1], $number_mappings);\n\
    \    }\n    return $roman_number;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9n34yuq.php:31\n\
    Stack trace:\n#0 /tmp/tmpe9n34yuq.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpe9n34yuq.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $firstDigit = floor($number / 100);\n  $secondDigit = floor(($number -\
    \ ($firstDigit * 100)) / 10);\n  $thirdDigit = $number - ($firstDigit * 100) -\
    \ ($secondDigit * 10);\n  $result = '';\n  $result .= miniRomanDigit($firstDigit,\
    \ 'c', 'd', 'm');\n  $result .= miniRomanDigit($secondDigit, 'x', 'l', 'c');\n\
    \  $result .= miniRomanDigit($thirdDigit, 'i', 'v', 'x');\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function miniRomanDigit()\
    \ in /tmp/tmph4mzeoub.php:14\nStack trace:\n#0 /tmp/tmph4mzeoub.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmph4mzeoub.php(25): candidate(19)\n#2 /tmp/tmph4mzeoub.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmph4mzeoub.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $conversion = [\n        900 => 'cm',\n        400 => 'cd',\n       \
    \ 90 => 'xc',\n        40 => 'xl',\n        9 => 'ix',\n        4 => 'iv',\n \
    \       1000 => 'm',\n        500 => 'd',\n        100 => 'c',\n        50 =>\
    \ 'l',\n        10 => 'x',\n        5 => 'v',\n        1 => 'i',\n    ];\n   \
    \ foreach ($conversion as $number_to_check => $roman_letter) {\n        if ($number\
    \ >= $number_to_check) {\n            return $roman_letter . int_to_mini_roman($number\
    \ - $number_to_check);\n        }\n    }\n    return '';\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjeg3__z.php:38\n\
    Stack trace:\n#0 /tmp/tmpyjeg3__z.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpyjeg3__z.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $romans = array(\n      'I' => 1,\n      'V' => 5,\n      'X' => 10,\n\
    \      'L' => 50,\n      'C' => 100,\n      'D' => 500,\n      'M' => 1000\n \
    \ );\n  $romans = array_reverse($romans);\n  $roman = '';\n  foreach ($romans\
    \ as $symbol => $value) {\n    if ($number >= $value) {\n      $factor = intval($number\
    \ / $value);\n      if ($factor < 4) {\n        for ($i = 0; $i < $factor; $i++)\
    \ {\n          $roman .= $symbol;\n        }\n      } else {\n        $next_symbol\
    \ = '';\n        foreach ($romans as $next_symbol => $next_value) {\n        \
    \  if ($next_value > $value) {\n            break;\n          }\n        }\n \
    \       if ($value - $next_value < $value / 2) {\n          $roman .= $symbol\
    \ . $next_symbol;\n        } else {\n          $roman .= $next_symbol . $symbol;\n\
    \        }\n      }\n      $number -= $factor * $value;\n    }\n  }\n  return\
    \ $roman;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dfsx3ez.php:51\n\
    Stack trace:\n#0 /tmp/tmp2dfsx3ez.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp2dfsx3ez.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman='';\n    $numbers=array(1000,900,500,400,100,90,50,40,10,9,5,4,1);\n\
    \    $romanNumerals=array('m','cm','d','cd','c','xc','l','xl','x','ix','v','iv','i');\n\
    \    for($i=0;$i<count($numbers);$i++){\n        while($number>=$numbers[$i]){\n\
    \            $number-=$numbers[$i];\n            $roman.=$romanNumerals[$i];\n\
    \        }\n    }\n    return $roman;\n}\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  // Fill in the code here.\n}\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvnvwriz.php:17\n\
    Stack trace:\n#0 /tmp/tmprvnvwriz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprvnvwriz.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $num_map = [\n        [1, 'i'],\n        [5, 'v'],\n        [10, 'x'],\n\
    \        [50, 'l'],\n        [100, 'c'],\n        [500, 'd'],\n        [1000,\
    \ 'm'],\n    ];\n    // TODO\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyobp42of.php:26\n\
    Stack trace:\n#0 /tmp/tmpyobp42of.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyobp42of.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$numerals = array(\n\t\t'M' => 1000,\n\t\t'D' => 500,\n\t\t'C' => 100,\n\
    \t\t'L' => 50,\n\t\t'X' => 10,\n\t\t'V' => 5,\n\t\t'I' => 1\n\t);\n\t$roman =\
    \ '';\n\twhile ($number) {\n\t\tforeach ($numerals as $numeral => $integer) {\n\
    \t\t\tif ($number >= $integer) {\n\t\t\t\t$number -= $integer;\n\t\t\t\t$roman\
    \ .= $numeral;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t$romans = array(\n\t\t\
    array('DCCCC', 'CM'),\n\t\tarray('CCCC', 'CD'),\n\t\tarray('LXXXX', 'XC'),\n\t\
    \tarray('XXXX', 'XL'),\n\t\tarray('VIIII', 'IX'),\n\t\tarray('IIII', 'IV')\n\t\
    );\n\t$roman = str_replace($romans[0][0], $romans[0][1], $roman);\n\t$roman =\
    \ str_replace($romans[1][0], $romans[1][1], $roman);\n\t$roman = str_replace($romans[2][0],\
    \ $romans[2][1], $roman);\n\t$roman = str_replace($romans[3][0], $romans[3][1],\
    \ $roman);\n\t$roman = str_replace($romans[4][0], $romans[4][1], $roman);\n\t\
    $roman = str_replace($romans[5][0], $romans[5][1], $roman);\n\treturn $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8wjrnba.php:51\n\
    Stack trace:\n#0 /tmp/tmpo8wjrnba.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpo8wjrnba.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $letters = array('m' => 1000, 'cm' => 900, 'd' => 500, 'cd' => 400, 'c'\
    \ => 100, 'xc' => 90, 'l' => 50, 'xl' => 40, 'x' => 10, 'ix' => 9, 'v' => 5, 'iv'\
    \ => 4, 'i' => 1);\n  $mini_roman = '';\n  while ($number > 0) {\n    foreach\
    \ ($letters as $letter => $num) {\n      if ($number >= $num) {\n        $number\
    \ -= $num;\n        $mini_roman .= $letter;\n        break;\n      }\n    }\n\
    \  }\n  return $mini_roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // Your code here!\n    $roman = array(\n        'm' => 1000,\n     \
    \   'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    $miniroman = \"\";\n    foreach ($roman as $key => $value)\
    \ {\n        $miniroman .= str_repeat($key, floor($number / $value));\n      \
    \  $number = $number % $value;\n    }\n    return $miniroman;\n}\n\nprint(int_to_mini_roman(5));\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: v
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $symbols = [\n        'M'  => 1000,\n        'CM' => 900,\n        'D'\
    \  => 500,\n        'CD' => 400,\n        'C'  => 100,\n        'XC' => 90,\n\
    \        'L'  => 50,\n        'XL' => 40,\n        'X'  => 10,\n        'IX' =>\
    \ 9,\n        'V'  => 5,\n        'IV' => 4,\n        'I'  => 1,\n    ];\n   \
    \ $result = '';\n    while ($number > 0) {\n        foreach ($symbols as $symbol\
    \ => $divisor) {\n            if ($number >= $divisor) {\n                $result\
    \ .= $symbol;\n                $number -= $divisor;\n                break;\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n$number = 426;\n$result\
    \ = int_to_mini_roman($number);\nvar_dump($result);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "string(6) \"CDXXVI\"\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpbrdw6kop.php:46\nStack trace:\n#0 /tmp/tmpbrdw6kop.php(62): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbrdw6kop.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // We return the number if the number is not a valid roman number\n \
    \   if ($number > 1000 || $number < 1) {\n        return $number;\n    }\n\n \
    \   // The roman digit is the letter of the digit * the digit\n    $roman = '';\n\
    \    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv',\
    \ 'i'];\n    $number_of_digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1];\n\n    for ($i = 0; $i < count($number_of_digits); $i++) {\n     \
    \   // How many times the current digit is in the number\n        $times = floor($number\
    \ / $number_of_digits[$i]);\n        $number -= $times * $number_of_digits[$i];\n\
    \        $roman .= str_repeat($romans[$i], $times);\n    }\n\n    return $roman;\n\
    }\n\necho '<pre>';\necho int_to_mini_roman(19) . \"\\n\";\necho int_to_mini_roman(152)\
    \ . \"\\n\";\necho int_to_mini_roman(426) . \"\\n\";\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>xix\nclii\ncdxxvi\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        \"m\" => 1000,\n        \"cm\" => 900,\n\
    \        \"d\" => 500,\n        \"cd\" => 400,\n        \"c\" => 100,\n      \
    \  \"xc\" => 90,\n        \"l\" => 50,\n        \"xl\" => 40,\n        \"x\" =>\
    \ 10,\n        \"ix\" => 9,\n        \"v\" => 5,\n        \"iv\" => 4,\n     \
    \   \"i\" => 1\n    );\n    $result = \"\";\n    foreach ($roman_numerals as $key\
    \ => $value) {\n        while ($number >= $value) {\n            $result .= $key;\n\
    \            $number -= $value;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    if($number >= 1000) {\n        return \"M\";\n    }\n    if($number >=\
    \ 900) {\n        return \"CM\";\n    }\n    if($number >= 500) {\n        return\
    \ \"D\" . int_to_mini_roman($number - 500);\n    }\n    if($number >= 400) {\n\
    \        return \"CD\";\n    }\n    if($number >= 100) {\n        return \"C\"\
    \ . int_to_mini_roman($number - 100);\n    }\n    if($number >= 90) {\n      \
    \  return \"XC\";\n    }\n    if($number >= 50) {\n        return \"L\" . int_to_mini_roman($number\
    \ - 50);\n    }\n    if($number >= 40) {\n        return \"XL\";\n    }\n    if($number\
    \ >= 10) {\n        return \"X\" . int_to_mini_roman($number - 10);\n    }\n \
    \   if($number >= 9) {\n        return \"IX\";\n    }\n    if($number >= 5) {\n\
    \        return \"V\" . int_to_mini_roman($number - 5);\n    }\n    if($number\
    \ >= 4) {\n        return \"IV\";\n    }\n    if($number >= 1) {\n        return\
    \ \"I\" . int_to_mini_roman($number - 1);\n    }\n    return \"\";\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxscj8t2.php:56\n\
    Stack trace:\n#0 /tmp/tmpjxscj8t2.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpjxscj8t2.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $numerals = [\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n  \
    \  400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n\
    \    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n\
    \  ];\n  $result = '';\n  foreach ($numerals as $i => $numeral) {\n    $result\
    \ .= str_repeat($numeral, $number / $i);\n    $number %= $i;\n  }\n  return $result;\n\
    }\n\necho int_to_mini_roman(426);\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: cdxxvi
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$lookup = array(\n\t\t'I' => 1,\n\t\t'IV' => 4,\n\t\t'V' => 5,\n\t\t'IX'\
    \ => 9,\n\t\t'X' => 10,\n\t\t'XL' => 40,\n\t\t'L' => 50,\n\t\t'XC' => 90,\n\t\t\
    'C' => 100,\n\t\t'CD' => 400,\n\t\t'D' => 500,\n\t\t'CM' => 900,\n\t\t'M' => 1000\n\
    \t);\n\t$final_numeral = '';\n\twhile ($number > 0) {\n\t\tforeach ($lookup as\
    \ $key => $value) {\n\t\t\tif ($number >= $value) {\n\t\t\t\t$number -= $value;\n\
    \t\t\t\t$final_numeral .= $key;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $final_numeral;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxrsm0tqf.php:43\n\
    Stack trace:\n#0 /tmp/tmpxrsm0tqf.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpxrsm0tqf.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_dict = array(\n    '1' => 'i',\n    '2' => 'ii',\n    '3' => 'iii',\n\
    \    '4' => 'iv',\n    '5' => 'v',\n    '6' => 'vi',\n    '7' => 'vii',\n    '8'\
    \ => 'viii',\n    '9' => 'ix',\n    '10' => 'x',\n    '20' => 'xx',\n    '30'\
    \ => 'xxx',\n    '40' => 'xl',\n    '50' => 'l',\n    '60' => 'lx',\n    '70'\
    \ => 'lxx',\n    '80' => 'lxxx',\n    '90' => 'xc',\n    '100' => 'c',\n    '200'\
    \ => 'cc',\n    '300' => 'ccc',\n    '400' => 'cd',\n    '500' => 'd',\n    '600'\
    \ => 'dc',\n    '700' => 'dcc',\n    '800' => 'dccc',\n    '900' => 'cm',\n  \
    \  '1000' => 'm',\n  );\n  // Find the highest value in the roman_dict that is\
    \ less than or equal to\n  // number\n  $key = 0;\n  foreach ($roman_dict as $digit\
    \ => $val) {\n    if ($digit <= $number) {\n      $key = $digit;\n    }\n  }\n\
    \  // If the highest value was zero, the number was too high\n  if ($key == 0)\
    \ {\n    return 'ERROR: number was too high';\n  }\n  $result = $roman_dict[$key];\n\
    \  $remainder = $number - $key;\n  // Recursively call int_to_mini_roman on the\
    \ remainder to find a roman\n  // numeral for it, then append it to the result\n\
    \  if ($remainder > 0) {\n    $result .= int_to_mini_roman($remainder);\n  }\n\
    \  return $result;\n}\n\necho int_to_mini_roman(19) . \"\\n\";\necho int_to_mini_roman(\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqdu7rmib.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $thousands = $number / 1000;\n    $number -= $thousands * 1000;\n   \
    \ $five_hundreds = $number / 500;\n    $number -= $five_hundreds * 500;\n    $hundreds\
    \ = $number / 100;\n    $number -= $hundreds * 100;\n    $fifties = $number /\
    \ 50;\n    $number -= $fifties * 50;\n    $tens = $number / 10;\n    $number -=\
    \ $tens * 10;\n    $fives = $number / 5;\n    $number -= $fives * 5;\n    $ones\
    \ = $number;\n\n    $result = \"\";\n    $result .= str_repeat(\"m\", $thousands);\n\
    \    $result .= str_repeat(\"d\", $five_hundreds);\n    $result .= str_repeat(\"\
    c\", $hundreds);\n    $result .= str_repeat(\"l\", $fifties);\n    $result .=\
    \ str_repeat(\"x\", $tens);\n    $result .= str_repeat(\"v\", $fives);\n    $result\
    \ .= str_repeat(\"i\", $ones);\n\n    $result = str_replace(\"dcccc\", \"cm\"\
    , $result);\n    $result = str_replace(\"cccc\", \"cd\", $result);\n    $result\
    \ = str_replace(\"lxxxx\", \"xc\", $result);\n    $result = str_replace(\"xxxx\"\
    , \"xl\", $result);\n    $result = str_replace(\"viiii\", \"ix\", $result);\n\
    \    $result = str_replace(\"iiii\", \"iv\", $result);\n\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv77nvfg2.php:48\n\
    Stack trace:\n#0 /tmp/tmpv77nvfg2.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpv77nvfg2.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $base = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    );\n    foreach ($base as $roman => $arabic) {\n        while ($number >=\
    \ $arabic) {\n            $result .= $roman;\n            $number -= $arabic;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3w_qokd8.php:39\n\
    Stack trace:\n#0 /tmp/tmp3w_qokd8.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp3w_qokd8.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'm' => 1000,\n        'd' => 500,\n     \
    \   'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n \
    \       'i' => 1\n    );\n    $result = '';\n    foreach ($numerals as $roman\
    \ => $int) {\n        $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dyzdat7.php:32\n\
    Stack trace:\n#0 /tmp/tmp2dyzdat7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2dyzdat7.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $basis = array('I' => 1, 'V' => 5, 'X' => 10, 'L' =>\
    \ 50, 'C' => 100, 'D' => 500, 'M' => 1000);\n    $basis = array_reverse($basis);\n\
    \    $x = 0;\n    $len = count($basis);\n    while ($number > 0) {\n        foreach\
    \ ($basis as $key => $val) {\n            $x = floor($number / $val);\n      \
    \      $number %= $val;\n            if ($x < 4) {\n                $roman .=\
    \ str_repeat($key, $x);\n            } else if ($x == 4) {\n                $roman\
    \ .= $key . $basis[array_keys($basis)[$len - 1]];\n            } else if ($x >\
    \ 4 && $x < 9) {\n                $roman .= $basis[array_keys($basis)[$len - 1]]\
    \ . str_repeat($key, $x - 5);\n            } else if ($x == 9) {\n           \
    \     $roman .= $key . $basis[array_keys($basis)[$len - 2]];\n            }\n\
    \            $len--;\n            break;\n        }\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $mini_roman_map = array(\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n\
    \    9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n\
    \    100 => 'c',\n    400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000\
    \ => 'm',\n  );\n  $result = '';\n  while ($number) {\n    $closest_key = closest_roman_key($number,\
    \ $mini_roman_map);\n    $closest_int = $closest_key['closest_int'];\n    $closest_roman\
    \ = $closest_key['closest_roman'];\n    $num_digits = strlen($closest_int);\n\
    \    $roman_chunk = str_repeat($closest_roman, intval($number / $closest_int));\n\
    \    $result .= $roman_chunk;\n    $number = substr($number, $num_digits);\n \
    \ }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function closest_roman_key()\
    \ in /tmp/tmpgfyd6ihb.php:27\nStack trace:\n#0 /tmp/tmpgfyd6ihb.php(39): int_to_mini_roman(19)\n\
    #1 /tmp/tmpgfyd6ihb.php(43): candidate(19)\n#2 /tmp/tmpgfyd6ihb.php(59): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgfyd6ihb.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $output = '';\n  $numeral_mapping = array(\n    50 => 'l',\n    40 => 'xl',\n\
    \    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i',\n\
    \  );\n  foreach ($numeral_mapping as $limit => $glyph) {\n    while ($number\
    \ >= $limit) {\n      $output .= $glyph;\n      $number -= $limit;\n    }\n  }\n\
    \  return $output;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3zajhosx.php:34\n\
    Stack trace:\n#0 /tmp/tmp3zajhosx.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3zajhosx.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $symbols = [\n    'm'  => 1000,\n    'cm' => 900,\n    'd'  => 500,\n \
    \   'cd' => 400,\n    'c'  => 100,\n    'xc' => 90,\n    'l'  => 50,\n    'xl'\
    \ => 40,\n    'x'  => 10,\n    'ix' => 9,\n    'v'  => 5,\n    'iv' => 4,\n  \
    \  'i'  => 1,\n  ];\n  $out = '';\n  foreach ($symbols as $roman => $arabic) {\n\
    \    if ($number >= $arabic) {\n      $out .= str_repeat($roman, $number / $arabic);\n\
    \      $number %= $arabic;\n    }\n  }\n  return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = \"\";\n\t$count = 0;\n\t$input = $number;\n\twhile($input > 0)\
    \ {\n\t\t$count++;\n\t\t$input = (int)($input / 10);\n\t}\n\t$input = $number;\n\
    \twhile($count > 0) {\n\t\t$current = $input % 10;\n\t\tif($current == 0) {\n\t\
    \t\t$count--;\n\t\t\t$input = (int)($input / 10);\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if($current < 4) {\n\t\t\tfor($i = 0; $i < $current; $i++) {\n\t\t\t\t$result\
    \ = $result . sym($count);\n\t\t\t}\n\t\t} else if($current == 4) {\n\t\t\t$result\
    \ = $result . sym($count) . sym($count + 1);\n\t\t} else if($current < 9) {\n\t\
    \t\t$result = $result . sym($count + 1);\n\t\t\tfor($i = 0; $i < $current - 5;\
    \ $i++) {\n\t\t\t\t$result = $result . sym($count);\n\t\t\t}\n\t\t} else {\n\t\
    \t\t$result = $result . sym($count) . sym($count + 2);\n\t\t}\n\t\t$count--;\n\
    \t\t$input = (int)($input / 10);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sym() in /tmp/tmpllgg9723.php:37\n\
    Stack trace:\n#0 /tmp/tmpllgg9723.php(46): int_to_mini_roman(19)\n#1 /tmp/tmpllgg9723.php(50):\
    \ candidate(19)\n#2 /tmp/tmpllgg9723.php(66): test()\n#3 {main}\n  thrown in /tmp/tmpllgg9723.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $numerals = [\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n   \
    \ 'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n  ];\n  $output = '';\n\
    \  foreach ($numerals as $numeral => $value) {\n    $num_letters = intval($number\
    \ / $value);\n    $output .= str_repeat($numeral, $num_letters);\n    $number\
    \ = $number % $value;\n  }\n  return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90cdd4km.php:32\n\
    Stack trace:\n#0 /tmp/tmp90cdd4km.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp90cdd4km.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $x = $number;\n    $roman .= getString($x, 100, 'c');\n\
    \    $x = $x % 100;\n    $roman .= getString($x, 90, 'xc');\n    $x = $x % 90;\n\
    \    $roman .= getString($x, 50, 'l');\n    $x = $x % 50;\n    $roman .= getString($x,\
    \ 40, 'xl');\n    $x = $x % 40;\n    $roman .= getString($x, 10, 'x');\n    $x\
    \ = $x % 10;\n    $roman .= getString($x, 9, 'ix');\n    $x = $x % 9;\n    $roman\
    \ .= getString($x, 5, 'v');\n    $x = $x % 5;\n    $roman .= getString($x, 4,\
    \ 'iv');\n    $x = $x % 4;\n    $roman .= getString($x, 1, 'i');\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getString() in\
    \ /tmp/tmpkiw4r9na.php:12\nStack trace:\n#0 /tmp/tmpkiw4r9na.php(33): int_to_mini_roman(19)\n\
    #1 /tmp/tmpkiw4r9na.php(37): candidate(19)\n#2 /tmp/tmpkiw4r9na.php(53): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkiw4r9na.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  // YOUR CODE HERE\n}\n\necho int_to_mini_roman(19) . \"\\n\";\necho int_to_mini_roman(152)\
    \ . \"\\n\";\necho int_to_mini_roman(426) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprl9dey8.php:21\n\
    Stack trace:\n#0 /tmp/tmpprl9dey8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpprl9dey8.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number > 1000 || $number < 1) {\n        return \"\";\n    }\n \
    \   $numerals = [\n        1000 => 'm',\n        900 => 'cm',\n        500 =>\
    \ 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n     \
    \   50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n\
    \        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n    $remainder\
    \ = $number;\n    $roman_string = \"\";\n    foreach ($numerals as $val => $char)\
    \ {\n        $num_of_chars = intval($remainder / $val);\n        $remainder =\
    \ $remainder % $val;\n        for ($i = 0; $i < $num_of_chars; $i++) {\n     \
    \       $roman_string .= $char;\n        }\n    }\n    return $roman_string;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$trans=array(\n\t\t'M'=>1000,\n\t\t'CM'=>900,\n\t\t'D'=>500,\n\t\t'CD'=>400,\n\
    \t\t'C'=>100,\n\t\t'XC'=>90,\n\t\t'L'=>50,\n\t\t'XL'=>40,\n\t\t'X'=>10,\n\t\t\
    'IX'=>9,\n\t\t'V'=>5,\n\t\t'IV'=>4,\n\t\t'I'=>1\n\t);\n\t$roman='';\n\tforeach($trans\
    \ as $key=>$value){\n\t\t$matches=intval($number/$value);\n\t\t$roman.=str_repeat($key,$matches);\n\
    \t\t$number=fmod($number,$value);\n\t}\n\treturn strtolower($roman);\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = [\n        1000 => 'm',\n        900 => 'cm',\n   \
    \     500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n\
    \        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n\
    \        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\n    $roman_number\
    \ = '';\n    foreach ($roman_numerals as $key => $value) {\n        if ($number\
    \ >= $key) {\n            $roman_number .= str_repeat($value, floor($number /\
    \ $key));\n            $number %= $key;\n        }\n    }\n\n    return $roman_number;\n\
    }\n\necho int_to_mini_roman(19);\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: xix
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$lookup = array(\n\t\t1 => 'i',\n\t\t4 => 'iv',\n\t\t5 => 'v',\n\t\t9 =>\
    \ 'ix',\n\t\t10 => 'x',\n\t\t40 => 'xl',\n\t\t50 => 'l',\n\t\t90 => 'xc',\n\t\t\
    100 => 'c',\n\t\t400 => 'cd',\n\t\t500 => 'd',\n\t\t900 => 'cm',\n\t\t1000 =>\
    \ 'm'\n\t);\n\t$result = '';\n\t$remainder = $number;\n\t$max_lookup = max(array_keys($lookup));\n\
    \twhile ($remainder > 0) {\n\t\t$factor = $max_lookup;\n\t\twhile ($factor > $remainder)\
    \ {\n\t\t\t$factor /= 10;\n\t\t}\n\t\t$quotient = floor($remainder / $factor);\n\
    \t\t$remainder = $remainder % $factor;\n\t\tif ($quotient <= 3) {\n\t\t\t$result\
    \ .= str_repeat($lookup[$factor], $quotient);\n\t\t} else if ($quotient == 4)\
    \ {\n\t\t\t$result .= $lookup[$factor] . $lookup[$factor * 5];\n\t\t} else if\
    \ ($quotient <= 8) {\n\t\t\t$result .= $lookup[$factor * 5] . str_repeat($lookup[$factor],\
    \ $quotient - 5);\n\t\t} else {\n\t\t\t$result .= $lookup[$factor] . $lookup[$factor\
    \ * 10];\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // TODO: implement me!\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpclcwcghm.php:18\n\
    Stack trace:\n#0 /tmp/tmpclcwcghm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpclcwcghm.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $number = str_split($number);\n  $num_count = count($number);\n  $mini_roman\
    \ = '';\n  for ($i = 0; $i < $num_count; $i++) {\n    if ($number[$i] == '0')\
    \ {\n      continue;\n    }\n    switch ($num_count - $i) {\n      case 4:\n \
    \       $mini_roman .= str_repeat('M', $number[$i]);\n        break;\n      case\
    \ 3:\n        $mini_roman .= str_repeat('C', $number[$i]);\n        break;\n \
    \     case 2:\n        $mini_roman .= str_repeat('X', $number[$i]);\n        break;\n\
    \      case 1:\n        $mini_roman .= str_repeat('I', $number[$i]);\n       \
    \ break;\n    }\n  }\n  $mini_roman = str_replace('DCCCC', 'CM', $mini_roman);\n\
    \  $mini_roman = str_replace('CCCC', 'CD', $mini_roman);\n  $mini_roman = str_replace('LXXXX',\
    \ 'XC', $mini_roman);\n  $mini_roman = str_replace('XXXX', 'XL', $mini_roman);\n\
    \  $mini_roman = str_replace('VIIII', 'IX', $mini_roman);\n  $mini_roman = str_replace('IIII',\
    \ 'IV', $mini_roman);\n  return $mini_roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4ux698e.php:46\n\
    Stack trace:\n#0 /tmp/tmpb4ux698e.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpb4ux698e.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  if($number > 1000 || $number < 1) return NULL;\n  $result = '';\n  if($number\
    \ >= 100) {\n    if($number >= 500) {\n      $result .= 'd';\n      $number -=\
    \ 500;\n    }\n    else {\n      $result .= 'c';\n      $number -= 100;\n    }\n\
    \  }\n  if($number >= 50) {\n    if($number >= 90) {\n      $result .= 'xc';\n\
    \      $number -= 90;\n    }\n    else {\n      $result .= 'l';\n      $number\
    \ -= 50;\n    }\n  }\n  if($number >= 10) {\n    if($number >= 40) {\n      $result\
    \ .= 'xl';\n      $number -= 40;\n    }\n    else {\n      $result .= 'x';\n \
    \     $number -= 10;\n    }\n  }\n  if($number >= 5) {\n    if($number >= 9) {\n\
    \      $result .= 'ix';\n      $number -= 9;\n    }\n    else {\n      $result\
    \ .= 'v';\n      $number -= 5;\n    }\n  }\n  if($number >= 1) {\n    if($number\
    \ >= 4) {\n      $result .= 'iv';\n      $number -= 4;\n    }\n    else {\n  \
    \    $result .= 'i';\n      $number -= 1;\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_75s9wqm.php:71\n\
    Stack trace:\n#0 /tmp/tmp_75s9wqm.php(86): test()\n#1 {main}\n  thrown in /tmp/tmp_75s9wqm.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $lookup = array(\n        '0' => '',\n        '1' => 'i',\n        '2'\
    \ => 'ii',\n        '3' => 'iii',\n        '4' => 'iv',\n        '5' => 'v',\n\
    \        '6' => 'vi',\n        '7' => 'vii',\n        '8' => 'viii',\n       \
    \ '9' => 'ix',\n        '10' => 'x',\n        '20' => 'xx',\n        '30' => 'xxx',\n\
    \        '40' => 'xl',\n        '50' => 'l',\n        '60' => 'lx',\n        '70'\
    \ => 'lxx',\n        '80' => 'lxxx',\n        '90' => 'xc',\n        '100' =>\
    \ 'c',\n        '200' => 'cc',\n        '300' => 'ccc',\n        '400' => 'cd',\n\
    \        '500' => 'd',\n        '600' => 'dc',\n        '700' => 'dcc',\n    \
    \    '800' => 'dccc',\n        '900' => 'cm',\n        '1000' => 'm',\n    );\n\
    \    $chars = str_split($number);\n    $length = count($chars);\n    $roman =\
    \ '';\n    foreach ($chars as $index => $num) {\n        $key = (pow(10, $length\
    \ - ($index + 1))) * $num;\n        $roman .= $lookup[$key];\n    }\n    return\
    \ $roman;\n}\n\n$count = 1;\n$max = 1000;\nwhile ($count <= $max) {\n    $mini_roman\
    \ = int_to_mini_roman($count);\n    echo $count . ': ' . $mini_roman . '<br />';\n\
    \    $count++;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '1: i<br />2: ii<br />3: iii<br />4: iv<br />5: v<br />6: vi<br />7: vii<br
    />8: viii<br />9: ix<br />10: x<br />11: xi<br />12: xii<br />13: xiii<br />14:
    xiv<br />15: xv<br />16: xvi<br />17: xvii<br />18: xviii<br />19: xix<br />20:
    xx<br />21: xxi<br />22: xxii<br />23: xxiii<br />24: xxiv<br />25: xxv<br />26:
    xxvi<br />27: xxvii<br />28: xxviii<br />29: xxix<br />30: xxx<br />31: xxxi<br
    />32: xxxii<br />33: xxxiii<br />34: xxxiv<br />35: xxxv<br />36: xxxvi<br />37:
    xxxvii<br />38: xxxviii<br />39: xxxix<br />40: xl<br />41: xli<br />42: xlii<br
    />43: xliii<br />44: xliv<br />45: xlv<br />46: xlvi<br />47: xlvii<br />48: xlviii<br
    />49: xlix<br />50: l<br />51: li<br />52: lii<br />53: liii<br />54: liv<br />55:
    lv<br />56: lvi<br />57: lvii<br />58: lviii<br />59: lix<br />60: lx<br />61:
    lxi<br />62: lxii<br />63: lxiii<br />64: lxiv<br />65: lxv<br />66: lxvi<br />67:
    lxvii<br />68: lxviii<br />69: lxix<br />70: lxx<br />71: lxxi<br />72: lxxii<br
    />73: lxxiii<br />74: lxxiv<br />75: lxxv<br />76: lxxvi<br />77: lxxvii<br />78:
    lxxviii<br />79: lxxix<br />80: lxxx<br />81: lxxxi<br />82: lxxxii<br />83: lxxxiii<br
    />84: lxxxiv<br />85: lxxxv<br />86: lxxxvi<br />87: lxxxvii<br />88: lxxxviii<br
    />89: lxxxix<br />90: xc<br />91: xci<br />92: xcii<br />93: xciii<br />94: xciv<br
    />95: xcv<br />96: xcvi<br />97: xcvii<br />98: xcviii<br />99: xcix<br />100:
    c<br />101: ci<br />102: cii<br />103: ciii<br />104: civ<br />105: cv<br />106:
    cvi<br />107: cvii<br />108: cviii<br />109: cix<br />110: cx<br />111: cxi<br
    />112: cxii<br />113: cxiii<br />114: cxiv<br />115: cxv<br />116: cxvi<br />117:
    cxvii<br />118: cxviii<br />119: cxix<br />120: cxx<br />121: cxxi<br />122: cxxii<br
    />123: cxxiii<br />124: cxxiv<br />125: cxxv<br />126: cxxvi<br />127: cxxvii<br
    />128: cxxviii<br />129: cxxix<br />130: cxxx<br />131: cxxxi<br />132: cxxxii<br
    />133: cxxxiii<br />134: cxxxiv<br />135: cxxxv<br />136: cxxxvi<br />137: cxxxvii<br
    />138: cxxxviii<br />139: cxxxix<br />140: cxl<br />141: cxli<br />142: cxlii<br
    />14'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $table = array(\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n\
    \    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 =>\
    \ 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1\
    \ => 'i',\n  );\n\n  $result = '';\n  foreach ($table as $n => $char) {\n    while\
    \ ($number >= $n) {\n      $result .= $char;\n      $number -= $n;\n    }\n  }\n\
    \  return $result;\n}\n\necho int_to_mini_roman(19) . PHP_EOL;\necho int_to_mini_roman(152)\
    \ . PHP_EOL;\necho int_to_mini_roman(426) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "xix\nclii\ncdxxvi\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $numeral = '';\n    $divisor = 1;\n    while ($number > 0) {\n      \
    \  $digit = $number % 10;\n        $number = (int)($number / 10);\n        switch\
    \ ($digit) {\n            case 1:\n                $numeral = \"i\" . $numeral;\n\
    \                break;\n            case 2:\n                $numeral = \"ii\"\
    \ . $numeral;\n                break;\n            case 3:\n                $numeral\
    \ = \"iii\" . $numeral;\n                break;\n            case 4:\n       \
    \         $numeral = \"iv\" . $numeral;\n                break;\n            case\
    \ 5:\n                $numeral = \"v\" . $numeral;\n                break;\n \
    \           case 6:\n                $numeral = \"vi\" . $numeral;\n         \
    \       break;\n            case 7:\n                $numeral = \"vii\" . $numeral;\n\
    \                break;\n            case 8:\n                $numeral = \"viii\"\
    \ . $numeral;\n                break;\n            case 9:\n                $numeral\
    \ = \"ix\" . $numeral;\n                break;\n        }\n        if ($divisor\
    \ == 10) {\n            switch ($number) {\n                case 1:\n        \
    \            $numeral = \"x\" . $numeral;\n                    break;\n      \
    \          case 2:\n                    $numeral = \"xx\" . $numeral;\n      \
    \              break;\n                case 3:\n                    $numeral =\
    \ \"xxx\" . $numeral;\n                    break;\n                case 4:\n \
    \                   $numeral = \"xl\" . $numeral;\n                    break;\n\
    \                case 5:\n                    $numeral = \"l\" . $numeral;\n \
    \                   break;\n                case 6:\n                    $numeral\
    \ = \"lx\" . $numeral;\n                    break;\n                case 7:\n\
    \                    $numeral = \"lxx\" . $numeral;\n                    break;\n\
    \                case 8:\n                    $numeral = \"lxxx\" . $numeral;\n\
    \                    break;\n                case 9:\n                    $numeral\
    \ = \"xc\" . $numeral;\n                    break;\n            }\n        }\n\
    \        if ($divisor == 100\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqhoykkqr.php on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\treturn '';\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hggqxfv.php:17\n\
    Stack trace:\n#0 /tmp/tmp6hggqxfv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6hggqxfv.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number < 1 || $number > 1000) {\n    throw new InvalidArgumentException();\n\
    \  }\n  $result = '';\n  while ($number >= 1000) {\n    $result .= 'm';\n    $number\
    \ -= 1000;\n  }\n  if ($number >= 900) {\n    $result .= 'cm';\n    $number -=\
    \ 900;\n  }\n  if ($number >= 500) {\n    $result .= 'd';\n    $number -= 500;\n\
    \  }\n  if ($number >= 400) {\n    $result .= 'cd';\n    $number -= 400;\n  }\n\
    \  while ($number >= 100) {\n    $result .= 'c';\n    $number -= 100;\n  }\n \
    \ if ($number >= 90) {\n    $result .= 'xc';\n    $number -= 90;\n  }\n  if ($number\
    \ >= 50) {\n    $result .= 'l';\n    $number -= 50;\n  }\n  if ($number >= 40)\
    \ {\n    $result .= 'xl';\n    $number -= 40;\n  }\n  while ($number >= 10) {\n\
    \    $result .= 'x';\n    $number -= 10;\n  }\n  if ($number >= 9) {\n    $result\
    \ .= 'ix';\n    $number -= 9;\n  }\n  if ($number >= 5) {\n    $result .= 'v';\n\
    \    $number -= 5;\n  }\n  if ($number >= 4) {\n    $result .= 'iv';\n    $number\
    \ -= 4;\n  }\n  while ($number >= 1) {\n    $result .= 'i';\n    $number -= 1;\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $numerals = array(1 => 'i', 4 => 'iv', 5 => 'v', 9 => 'ix', 10 => 'x',\
    \ 40 => 'xl', 50 => 'l', 90 => 'xc', 100 => 'c', 400 => 'cd', 500 => 'd', 900\
    \ => 'cm', 1000 => 'm');\n  $result = '';\n  $keys = array_keys($numerals);\n\
    \  for ($i = count($keys) - 1; $i >= 0; $i--) {\n    $numeral = $numerals[$keys[$i]];\n\
    \    $count = floor($number / $keys[$i]);\n    if ($count == 0) {\n      continue;\n\
    \    }\n    $result .= str_repeat($numeral, $count);\n    $number -= $count *\
    \ $keys[$i];\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number < 1) {\n        return null;\n    }\n    $number_to_roman\
    \ = [\n        1 => 'i',\n        2 => 'ii',\n        3 => 'iii',\n        4 =>\
    \ 'iv',\n        5 => 'v',\n        6 => 'vi',\n        7 => 'vii',\n        8\
    \ => 'viii',\n        9 => 'ix',\n        10 => 'x',\n        20 => 'xx',\n  \
    \      30 => 'xxx',\n        40 => 'xl',\n        50 => 'l',\n        60 => 'lx',\n\
    \        70 => 'lxx',\n        80 => 'lxxx',\n        90 => 'xc',\n        100\
    \ => 'c',\n        200 => 'cc',\n        300 => 'ccc',\n        400 => 'cd',\n\
    \        500 => 'd',\n        600 => 'dc',\n        700 => 'dcc',\n        800\
    \ => 'dccc',\n        900 => 'cm',\n        1000 => 'm',\n    ];\n    $roman =\
    \ '';\n    foreach ($number_to_roman as $key => $value) {\n        if ($number\
    \ >= $key) {\n            $roman .= $value;\n            $number -= $key;\n  \
    \      }\n    }\n    return $roman;\n}\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplsxu7_jo.php:57\n\
    Stack trace:\n#0 /tmp/tmplsxu7_jo.php(73): test()\n#1 {main}\n  thrown in /tmp/tmplsxu7_jo.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t// define the symbol values\n\t$mini_roman_symbols = array(\n\t\t'i'=>1,\n\
    \t\t'v'=>5,\n\t\t'x'=>10,\n\t\t'l'=>50,\n\t\t'c'=>100,\n\t\t'd'=>500,\n\t\t'm'=>1000\n\
    \t);\n\t$mini_roman_digits = array(\n\t\t1=>'i',\n\t\t5=>'v',\n\t\t10=>'x',\n\t\
    \t50=>'l',\n\t\t100=>'c',\n\t\t500=>'d',\n\t\t1000=>'m'\n\t);\n\t$mini_roman_numerals\
    \ = array(\n\t\t'IV'=>4,\n\t\t'IX'=>9,\n\t\t'XL'=>40,\n\t\t'XC'=>90,\n\t\t'CD'=>400,\n\
    \t\t'CM'=>900\n\t);\n\t// sort the symbol values from largest to smallest\n\t\
    krsort($mini_roman_symbols);\n\t// obtain the number of each digit (10's, 100's,\
    \ 1000's)\n\t$thousands = floor($number / 1000);\n\t$hundreds = floor(($number\
    \ - $thousands * 1000) / 100);\n\t$tens = floor(($number - $thousands * 1000 -\
    \ $hundreds * 100) / 10);\n\t$ones = $number - $thousands * 1000 - $hundreds *\
    \ 100 - $tens * 10;\n\t// convert to roman numerals\n\t$roman_numeral = '';\n\t\
    $roman_numeral .= str_repeat($mini_roman_digits[1000], $thousands);\n\t$roman_numeral\
    \ .= str_repeat($mini_roman_digits[100], $hundreds);\n\t$roman_numeral .= str_repeat($mini_roman_digits[10],\
    \ $tens);\n\t$roman_numeral .= str_repeat($mini_roman_digits[1], $ones);\n\t//\
    \ reduce by subtraction\n\t$mini_roman_symbols_copy = $mini_roman_symbols;\n\t\
    foreach ($mini_roman_\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6hqo874l.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$romans = [\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t'D' => 500,\n\t\t\
    'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\t\t'XL' => 40,\n\
    \t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\t\t'I' => 1\n\t\
    ];\n\t$result = '';\n\twhile ($number > 0) {\n\t\tforeach ($romans as $roman =>\
    \ $int) {\n\t\t\tif ($number >= $int) {\n\t\t\t\t$number -= $int;\n\t\t\t\t$result\
    \ .= $roman;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn strtolower($result);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $int2rom = [\n        'm'  => 1000,\n        'cm' => 900,\n        'd'\
    \  => 500,\n        'cd' => 400,\n        'c'  => 100,\n        'xc' => 90,\n\
    \        'l'  => 50,\n        'xl' => 40,\n        'x'  => 10,\n        'ix' =>\
    \ 9,\n        'v'  => 5,\n        'iv' => 4,\n        'i'  => 1,\n    ];\n   \
    \ $roman = '';\n    foreach ($int2rom as $char => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $char;\n            $number -= $value;\n\
    \        }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $num_to_roman = array(\n    1 => 'i',\n    2 => 'ii',\n    3 => 'iii',\n\
    \    4 => 'iv',\n    5 => 'v',\n    6 => 'vi',\n    7 => 'vii',\n    8 => 'viii',\n\
    \    9 => 'ix',\n    10 => 'x',\n    20 => 'xx',\n    30 => 'xxx',\n    40 =>\
    \ 'xl',\n    50 => 'l',\n    60 => 'lx',\n    70 => 'lxx',\n    80 => 'lxxx',\n\
    \    90 => 'xc',\n    100 => 'c',\n    200 => 'cc',\n    300 => 'ccc',\n    400\
    \ => 'cd',\n    500 => 'd',\n    600 => 'dc',\n    700 => 'dcc',\n    800 => 'dccc',\n\
    \    900 => 'cm',\n    1000 => 'm',\n  );\n  $roman = '';\n  $num_str = (string)$number;\n\
    \  for ($i = 0; $i < strlen($num_str); $i++) {\n    $digit = $num_str[$i];\n \
    \   $position = strlen($num_str) - $i;\n    $tens = pow(10, $position - 1);\n\
    \    $roman = $roman . $num_to_roman[$digit * $tens];\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $digits = str_split($number);\n    $digits = array_reverse($digits);\n\
    \    $length = count($digits);\n    for ($i = 0; $i < $length; $i++) {\n     \
    \   $digit = $digits[$i];\n        $new_roman = '';\n        switch ($i) {\n \
    \           case 0:\n                for ($j = 0; $j < $digit; $j++) {\n     \
    \               $new_roman .= 'i';\n                }\n                break;\n\
    \            case 1:\n                switch ($digit) {\n                    case\
    \ 1:\n                        $new_roman = 'x';\n                        break;\n\
    \                    case 2:\n                        $new_roman = 'xx';\n   \
    \                     break;\n                    case 3:\n                  \
    \      $new_roman = 'xxx';\n                        break;\n                 \
    \   case 4:\n                        $new_roman = 'xl';\n                    \
    \    break;\n                    case 5:\n                        $new_roman =\
    \ 'l';\n                        break;\n                    case 6:\n        \
    \                $new_roman = 'lx';\n                        break;\n        \
    \            case 7:\n                        $new_roman = 'lxx';\n          \
    \              break;\n                    case 8:\n                        $new_roman\
    \ = 'lxxx';\n                        break;\n                    case 9:\n   \
    \                     $new_roman = 'xc';\n                        break;\n   \
    \             }\n                break;\n            case 2:\n               \
    \ switch ($digit) {\n                    case 1:\n                        $new_roman\
    \ = 'c';\n                        break;\n                    case 2:\n      \
    \                  $new_roman = 'cc';\n                        break;\n      \
    \              case 3:\n                        $new_roman = 'ccc';\n        \
    \                break;\n                    case 4:\n                       \
    \ $new_roman = 'cd';\n                        break;\n                    case\
    \ 5:\n                        $new_roman = 'd';\n                        break;\n\
    \                    case 6:\n                        $new_roman = 'dc';\n   \
    \                     break;\n                    case 7:\n                  \
    \      $new_roman = 'dcc';\n                        break;\n                 \
    \   case 8:\n                        $new_roman = 'dccc';\n                  \
    \      break;\n                    case 9:\n                        $new_roman\
    \ = 'cm';\n                        break;\n               \nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyk82hy9b.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // Complete this function\n}\n\nif (isset($_SERVER['PATH_INFO'])) {\n\
    \    echo int_to_mini_roman(intval(substr($_SERVER['PATH_INFO'], 1)));\n} else\
    \ {\n    die('usage: php mini_roman.php /{positive integer}');\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 'usage: php mini_roman.php /{positive integer}'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $lookup = [\n        1000 => 'm',\n        900 =>\
    \ 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n    \
    \    90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n\
    \        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n\
    \    ];\n    foreach ($lookup as $limit => $glyph) {\n        while ($number >=\
    \ $limit) {\n            $result .= $glyph;\n            $number -= $limit;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $base = [\n        1 => 'i',\n        5 => 'v',\n        10 => 'x',\n\
    \        50 => 'l',\n        100 => 'c',\n        500 => 'd',\n        1000 =>\
    \ 'm'\n    ];\n    if ($number == 0) {\n        return '';\n    }\n    if ($number\
    \ < 5) {\n        if ($number == 4) {\n            return 'iv';\n        }\n \
    \       return str_repeat($base[1], $number);\n    }\n    if ($number < 10) {\n\
    \        if ($number == 9) {\n            return 'ix';\n        }\n        return\
    \ $base[5] . str_repeat($base[1], $number - 5);\n    }\n    if ($number < 50)\
    \ {\n        if ($number == 40) {\n            return 'xl';\n        }\n     \
    \   $mod = $number % 10;\n        $tens = floor($number / 10);\n        if ($mod\
    \ == 0) {\n            return str_repeat($base[10], $tens);\n        }\n     \
    \   return str_repeat($base[10], $tens) . int_to_mini_roman($mod);\n    }\n  \
    \  if ($number < 100) {\n        if ($number == 90) {\n            return 'xc';\n\
    \        }\n        $mod = $number % 50;\n        $fifties = floor($number / 50);\n\
    \        if ($mod == 0) {\n            return str_repeat($base[50], $fifties);\n\
    \        }\n        return str_repeat($base[50], $fifties) . int_to_mini_roman($mod);\n\
    \    }\n    if ($number < 500) {\n        if ($number == 400) {\n            return\
    \ 'cd';\n        }\n        $mod = $number % 100;\n        $hundreds = floor($number\
    \ / 100);\n        if ($mod == 0) {\n            return str_repeat($base[100],\
    \ $hundreds);\n        }\n        return str_repeat($base[100], $hundreds) . int_to_mini_roman($mod);\n\
    \    }\n    if ($number < 1000) {\n        if ($number == 900) {\n           \
    \ return '\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyvr9ffrv.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$numerals = array(\n\t\t'0' => '',\n\t\t'1' => 'i',\n\t\t'2' => 'ii',\n\
    \t\t'3' => 'iii',\n\t\t'4' => 'iv',\n\t\t'5' => 'v',\n\t\t'6' => 'vi',\n\t\t'7'\
    \ => 'vii',\n\t\t'8' => 'viii',\n\t\t'9' => 'ix',\n\t\t'10' => 'x',\n\t\t'20'\
    \ => 'xx',\n\t\t'30' => 'xxx',\n\t\t'40' => 'xl',\n\t\t'50' => 'l',\n\t\t'60'\
    \ => 'lx',\n\t\t'70' => 'lxx',\n\t\t'80' => 'lxxx',\n\t\t'90' => 'xc',\n\t\t'100'\
    \ => 'c',\n\t\t'200' => 'cc',\n\t\t'300' => 'ccc',\n\t\t'400' => 'cd',\n\t\t'500'\
    \ => 'd',\n\t\t'600' => 'dc',\n\t\t'700' => 'dcc',\n\t\t'800' => 'dccc',\n\t\t\
    '900' => 'cm',\n\t\t'1000' => 'm',\n\t\t'2000' => 'mm',\n\t\t'3000' => 'mmm',\n\
    \t\t'4000' => 'mmv',\n\t\t'5000' => 'mv',\n\t\t'6000' => 'mvm',\n\t\t'7000' =>\
    \ 'mvmm',\n\t\t'8000' => 'mvmmm',\n\t\t'9000' => 'mxm',\n\t\t'10000' => 'xm',\n\
    \t\t'20000' => 'xxm',\n\t\t'30000' => 'xxxm',\n\t\t'40000' => 'xlm',\n\t\t'50000'\
    \ => 'lm',\n\t\t'60000' => 'lxm',\n\t\t'70000' => 'lxxm',\n\t\t'80000' => 'lxxxm',\n\
    \t\t'90000' => 'xcm',\n\t\t\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwbbnduod.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t// decimal number to roman number array\n\t$d2r = array(\n\t\t1000 => 'm',\
    \ 900 => 'cm', 500 => 'd', 400 => 'cd',\n\t\t100 => 'c', 90 => 'xc', 50 => 'l',\
    \ 40 => 'xl',\n\t\t10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv',\n\t\t1 => 'i'\n\t\
    );\n\t// check if number is in range\n\tif (1 > $number || $number > 1000) {\n\
    \t\treturn 'ERR: input number out of range';\n\t}\n\t// decimal to roman function\n\
    \t$result = '';\n\tforeach ($d2r as $decimal => $roman) {\n\t\t$result .= str_repeat($roman,\
    \ (int) ($number / $decimal));\n\t\t$number %= $decimal;\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = [\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n\
    \    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n  ];\n  $result\
    \ = '';\n  foreach ($roman_numerals as $letter => $value) {\n    $result .= str_repeat($letter,\
    \ intval($number / $value));\n    $number %= $value;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx5kwi7yx.php:32\n\
    Stack trace:\n#0 /tmp/tmpx5kwi7yx.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpx5kwi7yx.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $romans = array(\n        'm'  => 1000,\n        'cm' => 900,\n     \
    \   'd'  => 500,\n        'cd' => 400,\n        'c'  => 100,\n        'xc' =>\
    \ 90,\n        'l'  => 50,\n        'xl' => 40,\n        'x'  => 10,\n       \
    \ 'ix' => 9,\n        'v'  => 5,\n        'iv' => 4,\n        'i'  => 1,\n   \
    \ );\n    $roman_number = '';\n    foreach ($romans as $roman => $decimal) {\n\
    \        $matches = intval($number / $decimal);\n        $roman_number .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $decimal;\n    }\n    return $roman_number;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $map = array(1 => 'i', 2 => 'ii', 3 => 'iii', 4 => 'iv', 5 => 'v', 6\
    \ => 'vi', 7 => 'vii', 8 => 'viii', 9 => 'ix', 10 => 'x', 20 => 'xx', 30 => 'xxx',\
    \ 40 => 'xl', 50 => 'l', 60 => 'lx', 70 => 'lxx', 80 => 'lxxx', 90 => 'xc', 100\
    \ => 'c', 200 => 'cc', 300 => 'ccc', 400 => 'cd', 500 => 'd', 600 => 'dc', 700\
    \ => 'dcc', 800 => 'dccc', 900 => 'cm', 1000 => 'm');\n    $roman = \"\";\n  \
    \  $i = 0;\n    while ($number > 0) {\n        if ($number < 10) {\n         \
    \   $roman .= $map[$number];\n            $number = 0;\n        } else {\n   \
    \         $pow = pow(10, $i);\n            $quotient = floor($number / $pow);\n\
    \            $number = $number % $pow;\n            $i++;\n            $roman\
    \ .= $map[$quotient * $pow];\n        }\n    }\n    return $roman;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzi9z5vdb.php:32\n\
    Stack trace:\n#0 /tmp/tmpzi9z5vdb.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzi9z5vdb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $val) {\n        $matches = intval($number\
    \ / $val);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $val;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3urzjlxi.php:39\n\
    Stack trace:\n#0 /tmp/tmp3urzjlxi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp3urzjlxi.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = \"\";\n  while ($number > 0) {\n    if ($number >= 1000) {\n\
    \      $result .= \"m\";\n      $number -= 1000;\n    } elseif ($number >= 900)\
    \ {\n      $result .= \"cm\";\n      $number -= 900;\n    } elseif ($number >=\
    \ 500) {\n      $result .= \"d\";\n      $number -= 500;\n    } elseif ($number\
    \ >= 400) {\n      $result .= \"cd\";\n      $number -= 400;\n    } elseif ($number\
    \ >= 100) {\n      $result .= \"c\";\n      $number -= 100;\n    } elseif ($number\
    \ >= 90) {\n      $result .= \"xc\";\n      $number -= 90;\n    } elseif ($number\
    \ >= 50) {\n      $result .= \"l\";\n      $number -= 50;\n    } elseif ($number\
    \ >= 40) {\n      $result .= \"xl\";\n      $number -= 40;\n    } elseif ($number\
    \ >= 10) {\n      $result .= \"x\";\n      $number -= 10;\n    } elseif ($number\
    \ >= 9) {\n      $result .= \"ix\";\n      $number -= 9;\n    } elseif ($number\
    \ >= 5) {\n      $result .= \"v\";\n      $number -= 5;\n    } elseif ($number\
    \ >= 4) {\n      $result .= \"iv\";\n      $number -= 4;\n    } elseif ($number\
    \ >= 1) {\n      $result .= \"i\";\n      $number -= 1;\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $table = [\n        1000 => 'm',\n        900 => 'cm',\n        500 =>\
    \ 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n     \
    \   50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n\
    \        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n    $result\
    \ = '';\n    foreach ($table as $value => $numeral) {\n        for (; $number\
    \ >= $value; $number -= $value) {\n            $result .= $numeral;\n        }\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $number_copy = $number;\n  $result = '';\n  $i = 0;\n  while ($number_copy\
    \ > 0) {\n    $count = floor($number_copy / 10);\n    $number_copy -= $count *\
    \ 10;\n    $number_string = (string)$number_copy;\n    switch ($number_string)\
    \ {\n      case '1':\n        $result .= 'i';\n        break;\n      case '2':\n\
    \        $result .= 'ii';\n        break;\n      case '3':\n        $result .=\
    \ 'iii';\n        break;\n      case '4':\n        $result .= 'iv';\n        break;\n\
    \      case '5':\n        $result .= 'v';\n        break;\n      case '6':\n \
    \       $result .= 'vi';\n        break;\n      case '7':\n        $result .=\
    \ 'vii';\n        break;\n      case '8':\n        $result .= 'viii';\n      \
    \  break;\n      case '9':\n        $result .= 'ix';\n        break;\n    }\n\
    \    $number_copy = $count;\n    $number_string = (string)$number_copy;\n    switch\
    \ ($number_string) {\n      case '1':\n        $result .= 'x';\n        break;\n\
    \      case '2':\n        $result .= 'xx';\n        break;\n      case '3':\n\
    \        $result .= 'xxx';\n        break;\n      case '4':\n        $result .=\
    \ 'xl';\n        break;\n      case '5':\n        $result .= 'l';\n        break;\n\
    \      case '6':\n        $result .= 'lx';\n        break;\n      case '7':\n\
    \        $result .= 'lxx';\n        break;\n      case '8':\n        $result .=\
    \ 'lxxx';\n        break;\n      case '9':\n        $result .= 'xc';\n       \
    \ break;\n    }\n    $number_copy = $count;\n    $number_string = (string)$number_copy;\n\
    \    switch ($number_string) {\n      case '1':\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp41v948ua.php on line 102\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $values = array(1000, 500, 100, 50, 10, 5, 1);\n  $letters\
    \ = array('m', 'd', 'c', 'l', 'x', 'v', 'i');\n  while ($number) {\n    foreach\
    \ ($values as $index => $value) {\n      if ($number >= $value) {\n        $result\
    \ .= $letters[$index];\n        $number -= $value;\n        break;\n      }\n\
    \    }\n  }\n  return str_replace(array('i', 'v', 'x', 'l', 'c', 'd', 'm'),\n\
    \                     array('j', 'k', 'u', 'n', 'b', 'o', 'p'),\n            \
    \         $result);\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_xz79vr5.php:32\n\
    Stack trace:\n#0 /tmp/tmp_xz79vr5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_xz79vr5.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $ones = array('', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix');\n\
    \  $tens = array('', 'x', 'xx', 'xxx', 'xl', 'l', 'lx', 'lxx', 'lxxx', 'xc');\n\
    \  $hund = array('', 'c', 'cc', 'ccc', 'cd', 'd', 'dc', 'dcc', 'dccc', 'cm');\n\
    \  $ths  = array('', 'm', 'mm', 'mmm');\n  $out = '';\n  $num_thousands = intval($number\
    \ / 1000);\n  $number = $number % 1000;\n  $out .= $ths[$num_thousands];\n  $num_hundreds\
    \ = intval($number / 100);\n  $number = $number % 100;\n  $out .= $hund[$num_hundreds];\n\
    \  $num_tens = intval($number / 10);\n  $number = $number % 10;\n  $out .= $tens[$num_tens];\n\
    \  $out .= $ones[$number];\n  return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // Enter code here...\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy2z9fz63.php:18\n\
    Stack trace:\n#0 /tmp/tmpy2z9fz63.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpy2z9fz63.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  if ($number > 1000) {\n    return 'Number is too large.';\n  }\n\n  $index\
    \ = 0;\n  $result = '';\n  $roman_numerals = array(\n    \"M\" => 1000,\n    \"\
    CM\" => 900,\n    \"D\" => 500,\n    \"CD\" => 400,\n    \"C\" => 100,\n    \"\
    XC\" => 90,\n    \"L\" => 50,\n    \"XL\" => 40,\n    \"X\" => 10,\n    \"IX\"\
    \ => 9,\n    \"V\" => 5,\n    \"IV\" => 4,\n    \"I\" => 1,\n  );\n\n  foreach\
    \ ($roman_numerals as $roman => $value) {\n    $matches = intval($number / $value);\n\
    \    $result .= str_repeat($roman, $matches);\n    $number = $number % $value;\n\
    \  }\n\n  return $result;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfao61qlb.php:45\n\
    Stack trace:\n#0 /tmp/tmpfao61qlb.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpfao61qlb.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $decimal = array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1);\n    $roman = array('m', 'cm', 'd', 'cd', 'c', 'xc', 'l',\
    \ 'xl', 'x', 'ix', 'v', 'iv', 'i');\n    for ($i = 0; $i < count($decimal); $i++)\
    \ {\n        while ($number >= $decimal[$i]) {\n            $number -= $decimal[$i];\n\
    \            $result .= $roman[$i];\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $values = array(\n    \"I\" => 1,\n    \"IV\" => 4,\n    \"V\" => 5,\n\
    \    \"IX\" => 9,\n    \"X\" => 10,\n    \"XL\" => 40,\n    \"L\" => 50,\n   \
    \ \"XC\" => 90,\n    \"C\" => 100,\n    \"CD\" => 400,\n    \"D\" => 500,\n  \
    \  \"CM\" => 900,\n    \"M\" => 1000\n  );\n  $result = '';\n  foreach ($values\
    \ as $letter => $value) {\n    if ($number >= $value) {\n      $num = floor($number\
    \ / $value);\n      $number -= $num * $value;\n      $result .= str_repeat($letter,\
    \ $num);\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe5ff_w2a.php:40\n\
    Stack trace:\n#0 /tmp/tmpe5ff_w2a.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpe5ff_w2a.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = '';\n\t$roman = [\n\t\t1 => 'i',\n\t\t4 => 'iv',\n\t\t5 => 'v',\n\
    \t\t9 => 'ix',\n\t\t10 => 'x',\n\t\t40 => 'xl',\n\t\t50 => 'l',\n\t\t90 => 'xc',\n\
    \t\t100 => 'c',\n\t\t400 => 'cd',\n\t\t500 => 'd',\n\t\t900 => 'cm',\n\t\t1000\
    \ => 'm'\n\t];\n\t// Define the  values of roman numerals in ascending order and\
    \ their\n\t// coresponding integers in $roman variable\n\twhile ($number > 0)\
    \ {\n\t\t$roman_numeral = array_reverse($roman);\n\t\tforeach ($roman_numeral\
    \ as $key => $value) {\n\t\t\t// Start from the highest value of roman numeral\n\
    \t\t\tif($number >= $key) {\n\t\t\t\t$result .= $value;\n\t\t\t\t$number -= $key;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$res = \"\";\n\twhile ($number >= 1000) {\n\t\t$res .= \"m\";\n\t\t$number\
    \ -= 1000;\n\t}\n\tif ($number >= 900) {\n\t\t$res .= \"cm\";\n\t\t$number -=\
    \ 900;\n\t}\n\tif ($number >= 500) {\n\t\t$res .= \"d\";\n\t\t$number -= 500;\n\
    \t}\n\tif ($number >= 400) {\n\t\t$res .= \"cd\";\n\t\t$number -= 400;\n\t}\n\t\
    while ($number >= 100) {\n\t\t$res .= \"c\";\n\t\t$number -= 100;\n\t}\n\tif ($number\
    \ >= 90) {\n\t\t$res .= \"xc\";\n\t\t$number -= 90;\n\t}\n\tif ($number >= 50)\
    \ {\n\t\t$res .= \"l\";\n\t\t$number -= 50;\n\t}\n\tif ($number >= 40) {\n\t\t\
    $res .= \"xl\";\n\t\t$number -= 40;\n\t}\n\twhile ($number >= 10) {\n\t\t$res\
    \ .= \"x\";\n\t\t$number -= 10;\n\t}\n\tif ($number >= 9) {\n\t\t$res .= \"ix\"\
    ;\n\t\t$number -= 9;\n\t}\n\tif ($number >= 5) {\n\t\t$res .= \"v\";\n\t\t$number\
    \ -= 5;\n\t}\n\tif ($number >= 4) {\n\t\t$res .= \"iv\";\n\t\t$number -= 4;\n\t\
    }\n\twhile ($number >= 1) {\n\t\t$res .= \"i\";\n\t\t$number -= 1;\n\t}\n\treturn\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $numerals = [\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n  \
    \  400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n\
    \    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n\
    \  ];\n  $output = '';\n  foreach ($numerals as $limit => $glyph) {\n    for (;\
    \ $number >= $limit; $number -= $limit) {\n      $output .= $glyph;\n    }\n \
    \ }\n  return $output;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $str = '';\n  $nums = [\n    1 => 'i',\n    5 => 'v',\n    10 => 'x',\n\
    \    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 => 'm'\n  ];\n  $num_keys\
    \ = array_keys($nums);\n  $num_keys = array_reverse($num_keys);\n  foreach ($num_keys\
    \ as $key) {\n    $val = floor($number / $key);\n    if ($val > 0) {\n      if\
    \ ($val === 4) {\n        $str .= $nums[$key] . $nums[$key * 5];\n      } elseif\
    \ ($val === 9) {\n        $str .= $nums[$key] . $nums[$key * 10];\n      } else\
    \ {\n        if ($val >= 5) {\n          $str .= $nums[$key * 5];\n          $val\
    \ -= 5;\n        }\n        for ($i = 0; $i < $val; $i++) {\n          $str .=\
    \ $nums[$key];\n        }\n      }\n      $number -= $val * $key;\n    }\n  }\n\
    \  return $str;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_2jmmqg.php:48\n\
    Stack trace:\n#0 /tmp/tmp7_2jmmqg.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp7_2jmmqg.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = [];\n    $roman[1] = 'i';\n    $roman[5] = 'v';\n    $roman[10]\
    \ = 'x';\n    $roman[50] = 'l';\n    $roman[100] = 'c';\n    $roman[500] = 'd';\n\
    \    $roman[1000] = 'm';\n    $arabic = array_reverse(array_keys($roman));\n \
    \   $roman_numeral = '';\n    foreach ($arabic as $i) {\n        if ($number >=\
    \ $i) {\n            $n = intval($number / $i);\n            $number -= $n * $i;\n\
    \            $roman_numeral .= str_repeat($roman[$i], $n);\n        }\n    }\n\
    \    return $roman_numeral;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75ct91e0.php:34\n\
    Stack trace:\n#0 /tmp/tmp75ct91e0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp75ct91e0.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $map = [\n        'I' => 1,\n        'V' => 5,\n        'X' => 10,\n\
    \        'L' => 50,\n        'C' => 100,\n        'D' => 500,\n        'M' =>\
    \ 1000,\n    ];\n    $temp = array_reverse($map);\n    $result = '';\n    foreach\
    \ ($temp as $roman => $val) {\n        $result .= str_repeat($roman, floor($number\
    \ / $val));\n        $number %= $val;\n    }\n    return $result;\n}\n\nassert(int_to_mini_roman(19)\
    \ == 'xix');\nassert(int_to_mini_roman(152) == 'clii');\nassert(int_to_mini_roman(426)\
    \ == 'cdxxvi');\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert(int_to_mini_roman(19) == 'xix') failed in /tmp/tmppbp59w83.php\
    \ on line 28\n\nWarning: assert(): assert(int_to_mini_roman(152) == 'clii') failed\
    \ in /tmp/tmppbp59w83.php on line 29\n\nWarning: assert(): assert(int_to_mini_roman(426)\
    \ == 'cdxxvi') failed in /tmp/tmppbp59w83.php on line 30\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppbp59w83.php:37\nStack trace:\n#0 /tmp/tmppbp59w83.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppbp59w83.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $romans = [\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd'\
    \ => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n\
    \    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n\
    \  ];\n  $result = '';\n  foreach ($romans as $letter => $value) {\n    $n = floor($number\
    \ / $value);\n    $result .= str_repeat($letter, $n);\n    $number %= $value;\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = \"\";\n\tif($number < 1 || $number > 1000) {\n\t\treturn $result;\n\
    \t}\n\t$value = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n\t$symbol\
    \ = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"];\n\tfor($i = 0; $i < count($value); $i++) {\n\t\twhile($number\
    \ >= $value[$i]) {\n\t\t\t$number -= $value[$i];\n\t\t\t$result .= $symbol[$i];\n\
    \t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = \"\";\n    $roman_numerals = [\n        1000 => \"m\",\n  \
    \      900 => \"cm\",\n        500 => \"d\",\n        400 => \"cd\",\n       \
    \ 100 => \"c\",\n        90 => \"xc\",\n        50 => \"l\",\n        40 => \"\
    xl\",\n        10 => \"x\",\n        9 => \"ix\",\n        5 => \"v\",\n     \
    \   4 => \"iv\",\n        1 => \"i\"\n    ];\n    foreach ($roman_numerals as\
    \ $key => $value) {\n        if ($number >= $key) {\n            $result .= str_repeat($value,\
    \ floor($number / $key));\n            $number %= $key;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$romanNumerals = ['i', 'v', 'x', 'l', 'c', 'd', 'm'];\n\t$place = 0;\n\t\
    $result = \"\";\n\twhile($number>0) {\n\t\t$remainder = $number % 10;\n\t\t$number\
    \ = $number / 10;\n\t\tif($remainder < 4) {\n\t\t\t$result = str_repeat($romanNumerals[$place],\
    \ $remainder) . $result;\n\t\t} elseif($remainder == 4) {\n\t\t\t$result = $romanNumerals[$place]\
    \ . $romanNumerals[$place+1] . $result;\n\t\t} elseif($remainder == 5) {\n\t\t\
    \t$result = $romanNumerals[$place+1] . $result;\n\t\t} elseif($remainder == 9)\
    \ {\n\t\t\t$result = $romanNumerals[$place] . $romanNumerals[$place+2] . $result;\n\
    \t\t} else {\n\t\t\t$result = $romanNumerals[$place+1] . str_repeat($romanNumerals[$place],\
    \ $remainder-5) . $result;\n\t\t}\n\t\t$place += 2;\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number == 0) {\n        return \"\";\n    }\n    if ($number >=\
    \ 1000) {\n        return \"m\" . int_to_mini_roman($number - 1000);\n    }\n\
    \    if ($number >= 900) {\n        return \"cm\" . int_to_mini_roman($number\
    \ - 900);\n    }\n    if ($number >= 500) {\n        return \"d\" . int_to_mini_roman($number\
    \ - 500);\n    }\n    if ($number >= 400) {\n        return \"cd\" . int_to_mini_roman($number\
    \ - 400);\n    }\n    if ($number >= 100) {\n        return \"c\" . int_to_mini_roman($number\
    \ - 100);\n    }\n    if ($number >= 90) {\n        return \"xc\" . int_to_mini_roman($number\
    \ - 90);\n    }\n    if ($number >= 50) {\n        return \"l\" . int_to_mini_roman($number\
    \ - 50);\n    }\n    if ($number >= 40) {\n        return \"xl\" . int_to_mini_roman($number\
    \ - 40);\n    }\n    if ($number >= 10) {\n        return \"x\" . int_to_mini_roman($number\
    \ - 10);\n    }\n    if ($number >= 9) {\n        return \"ix\" . int_to_mini_roman($number\
    \ - 9);\n    }\n    if ($number >= 5) {\n        return \"v\" . int_to_mini_roman($number\
    \ - 5);\n    }\n    if ($number >= 4) {\n        return \"iv\" . int_to_mini_roman($number\
    \ - 4);\n    }\n    if ($number >= 1) {\n        return \"i\" . int_to_mini_roman($number\
    \ - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $romans = [\n        'm' => 1000,\n        'cm' => 900,\n        'd'\
    \ => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n  \
    \      'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n\
    \        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    ];\n    $result\
    \ = '';\n    while ($number > 0) {\n        foreach ($romans as $key => $value)\
    \ {\n            if ($number >= $value) {\n                $number -= $value;\n\
    \                $result .= $key;\n                break;\n            }\n   \
    \     }\n    }\n    return $result;\n}\nprint(int_to_mini_roman(19));\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: xix
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $i = 0;\n  $result = '';\n  $symbols = ['i', 'v', 'x', 'l', 'c', 'd', 'm'];\n\
    \  $dividers = [1, 5, 10, 50, 100, 500, 1000];\n  $divider_differences = [4, 4,\
    \ 9, 40, 90, 400, 900];\n  $divider_indices = [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5,\
    \ 5, 6, 6];\n  while ($number > 0) {\n    $divider_index = $divider_indices[$number\
    \ % 14];\n    $divider = $dividers[$divider_index];\n    $divider_difference =\
    \ $divider_differences[$divider_index];\n    $symbol = $symbols[$divider_index];\n\
    \    $amount = intval($number / $divider);\n    $number = $number % $divider;\n\
    \    if ($amount == 4) {\n      $result = $symbol . $symbols[$divider_index +\
    \ 1] . $result;\n    } elseif ($amount == 9) {\n      $result = $symbol . $symbols[$divider_index\
    \ + 2] . $result;\n    } else {\n      if ($amount >= 5) {\n        $result =\
    \ $symbols[$divider_index + 1] . $result;\n        $amount -= 5;\n      }\n  \
    \    $result = str_repeat($symbol, $amount) . $result;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$lookup = [\n\t\t['m', 1000],\n\t\t['d', 500],\n\t\t['c', 100],\n\t\t['l',\
    \ 50],\n\t\t['x', 10],\n\t\t['v', 5],\n\t\t['i', 1]\n\t];\n\t$result = '';\n\t\
    $repeats = 0;\n\tforeach ($lookup as $pair) {\n\t\t$number_of_repeats = floor($number\
    \ / $pair[1]);\n\t\tif ($number_of_repeats == 4) {\n\t\t\t$result .= $lookup[$repeats][0]\
    \ . $pair[0];\n\t\t} else {\n\t\t\t$result .= str_repeat($pair[0], $number_of_repeats);\n\
    \t\t}\n\t\t$number %= $pair[1];\n\t\t$repeats++;\n\t}\n\treturn $result;\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfrbm6j5.php:39\n\
    Stack trace:\n#0 /tmp/tmpdfrbm6j5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpdfrbm6j5.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $mini_symbols = array(\n        'm' => 1000,\n    \
    \    'd' => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n\
    \        'v' => 5,\n        'i' => 1\n    );\n    while ($number > 0) {\n    \
    \    foreach ($mini_symbols as $key => $val) {\n            if ($number >= $val)\
    \ {\n                $number -= $val;\n                $roman .= $key;\n     \
    \           break;\n            }\n        }\n    }\n    return $roman;\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzrc86rrr.php:37\n\
    Stack trace:\n#0 /tmp/tmpzrc86rrr.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpzrc86rrr.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // your code here\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjb99_t7.php:17\n\
    Stack trace:\n#0 /tmp/tmpnjb99_t7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnjb99_t7.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $matches = array(\n        'M' => 1000,\n        'CM' => 900,\n     \
    \   'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($matches as $symbol => $value) {\n        while ($number\
    \ >= $value) {\n            $result .= $symbol;\n            $number -= $value;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8cm0dloo.php:39\n\
    Stack trace:\n#0 /tmp/tmp8cm0dloo.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp8cm0dloo.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7t6ljosx.php:18\n\
    Stack trace:\n#0 /tmp/tmp7t6ljosx.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7t6ljosx.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$arr = [1 => 'i', 5 => 'v', 10 => 'x', 50 => 'l', 100 => 'c', 500 => 'd',\
    \ 1000 => 'm'];\n\t$roman = '';\n\t$pow = 0;\n\t$prev = 0;\n\twhile ($number >\
    \ 0) {\n\t\t$last = $number % 10;\n\t\t$number = (int)($number / 10);\n\t\t$pow++;\n\
    \t\tif ($last <= 3) {\n\t\t\t$roman = str_repeat($arr[(int)pow(10, $pow - 1)],\
    \ $last) . $roman;\n\t\t} elseif ($last == 4) {\n\t\t\t$roman = $arr[(int)pow(10,\
    \ $pow - 1)] . $arr[(int)pow(10, $pow)] . $roman;\n\t\t} elseif ($last <= 8) {\n\
    \t\t\t$roman = $arr[(int)pow(10, $pow)] . str_repeat($arr[(int)pow(10, $pow -\
    \ 1)], $last - 5) . $roman;\n\t\t} else {\n\t\t\t$roman = $arr[(int)pow(10, $pow\
    \ - 1)] . $arr[(int)pow(10, $pow + 1)] . $roman;\n\t\t}\n\t}\n\treturn $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqag71v3e.php:36\n\
    Stack trace:\n#0 /tmp/tmpqag71v3e.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqag71v3e.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $convert = array(\n        500 => 'd',\n        100 => 'c',\n       \
    \ 50 => 'l',\n        10 => 'x',\n        5 => 'v',\n        1 => 'i'\n    );\n\
    \    $return_string = '';\n    foreach ($convert as $value => $roman) {\n    \
    \    $occurrences = floor($number / $value);\n        $return_string .= str_repeat($roman,\
    \ $occurrences);\n        $number = $number % $value;\n    }\n    $return_string\
    \ = str_replace('dd', 'm', $return_string);\n    $return_string = str_replace('ccc',\
    \ 'm', $return_string);\n    $return_string = str_replace('ll', 'd', $return_string);\n\
    \    $return_string = str_replace('xxx', 'c', $return_string);\n    $return_string\
    \ = str_replace('vv', 'x', $return_string);\n    $return_string = str_replace('ii',\
    \ 'v', $return_string);\n    return $return_string;\n}\necho int_to_mini_roman(105);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "cv\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5_kuq5b.php:38\n\
    Stack trace:\n#0 /tmp/tmpt5_kuq5b.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpt5_kuq5b.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $romans = [\n        'm' => 1000,\n        'cm' => 900,\n        'd'\
    \ => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n  \
    \      'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n\
    \        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    ];\n    $result\
    \ = '';\n    foreach ($romans as $roman => $number_corresponding) {\n        $result\
    \ .= str_repeat($roman, intval($number / $number_corresponding));\n        $number\
    \ %= $number_corresponding;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $nums_to_romans = array(1000 => 'm', 900 => 'cm', 500 => 'd', 400 =>\
    \ 'cd', 100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl', 10 => 'x', 9 => 'ix', 5\
    \ => 'v', 4 => 'iv', 1 => 'i');\n    $result = '';\n    foreach ($nums_to_romans\
    \ as $num => $roman) {\n        while ($number >= $num) {\n            $result\
    \ .= $roman;\n            $number -= $num;\n        }\n    }\n    return $result;\n\
    }\n\necho int_to_mini_roman(19).\"\\n\";\necho int_to_mini_roman(152).\"\\n\"\
    ;\necho int_to_mini_roman(426).\"\\n\";\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "xix\nclii\ncdxxvi\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $romanNumerals = array(\n    \"M\"  => 1000,\n    \"CM\" => 900,\n    \"\
    D\"  => 500,\n    \"CD\" => 400,\n    \"C\"  => 100,\n    \"XC\" => 90,\n    \"\
    L\"  => 50,\n    \"XL\" => 40,\n    \"X\"  => 10,\n    \"IX\" => 9,\n    \"V\"\
    \  => 5,\n    \"IV\" => 4,\n    \"I\"  => 1\n  );\n  $result = \"\";\n  foreach\
    \ ($romanNumerals as $roman => $arabic) {\n    $result .= str_repeat($roman, $number\
    \ / $arabic);\n    $number %= $arabic;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpboo8nr2c.php:38\n\
    Stack trace:\n#0 /tmp/tmpboo8nr2c.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpboo8nr2c.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $input = $number;\n  $result = '';\n  $lookup = array(\n    'M' => 1000,\n\
    \    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n    'C' => 100,\n    'XC'\
    \ => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' => 10,\n    'IX' => 9,\n  \
    \  'V' => 5,\n    'IV' => 4,\n    'I' => 1\n  );\n  foreach ($lookup as $roman\
    \ => $value) {\n    $matches = intval($input / $value);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $input = $input % $value;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvd05r_iq.php:40\n\
    Stack trace:\n#0 /tmp/tmpvd05r_iq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpvd05r_iq.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$output = '';\n\t\n\tif ($number > 999) {\n\t\t$numberOfThous = floor($number\
    \ / 1000);\n\t\t$number = $number % 1000;\n\t\t$output .= str_repeat('m', $numberOfThous);\n\
    \t}\n\t\n\tif ($number > 899) {\n\t\t$output .= 'cm';\n\t\t$number = $number %\
    \ 900;\n\t}\n\t\n\tif ($number > 499) {\n\t\t$output .= 'd';\n\t\t$number = $number\
    \ % 500;\n\t}\n\t\n\tif ($number > 399) {\n\t\t$output .= 'cd';\n\t\t$number =\
    \ $number % 400;\n\t}\n\t\n\tif ($number > 99) {\n\t\t$numberOfHun = floor($number\
    \ / 100);\n\t\t$number = $number % 100;\n\t\t$output .= str_repeat('c', $numberOfHun);\n\
    \t}\n\t\n\tif ($number > 89) {\n\t\t$output .= 'xc';\n\t\t$number = $number %\
    \ 90;\n\t}\n\t\n\tif ($number > 49) {\n\t\t$output .= 'l';\n\t\t$number = $number\
    \ % 50;\n\t}\n\t\n\tif ($number > 39) {\n\t\t$output .= 'xl';\n\t\t$number = $number\
    \ % 40;\n\t}\n\t\n\tif ($number > 9) {\n\t\t$numberOfTens = floor($number / 10);\n\
    \t\t$number = $number % 10;\n\t\t$output .= str_repeat('x', $numberOfTens);\n\t\
    }\n\t\n\tif ($number > 8) {\n\t\t$output .= 'ix';\n\t\t$number = $number % 9;\n\
    \t}\n\t\n\tif ($number > 4) {\n\t\t$output .= 'v';\n\t\t$number = $number % 5;\n\
    \t}\n\t\n\tif ($number > 3) {\n\t\t$output .= 'iv';\n\t\t$number = $number % 4;\n\
    \t}\n\t\n\t$output .= str_repeat('i\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfesacfvj.php on line 75\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = \"\";\n    $numeral = array(10 => \"x\", 9 => \"ix\", 5 =>\
    \ \"v\", 4 => \"iv\", 1 => \"i\");\n    foreach ($numeral as $key => $value) {\n\
    \        while ($number >= $key) {\n            $result .= $value;\n         \
    \   $number -= $key;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmperk47rhl.php:26\n\
    Stack trace:\n#0 /tmp/tmperk47rhl.php(41): test()\n#1 {main}\n  thrown in /tmp/tmperk47rhl.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  // Write your code here!\n  $answer = \"\";\n  $biggest_valid_integer =\
    \ 1000;\n  $valid_roman_numerals = array(\"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\");\n  $valid_integer_equivalents\
    \ = array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n  while ($number\
    \ > 0) {\n    if ($number >= $biggest_valid_integer) {\n      $biggest_valid_integer_key\
    \ = array_search($biggest_valid_integer, $valid_integer_equivalents);\n      $answer\
    \ .= $valid_roman_numerals[$biggest_valid_integer_key];\n      $number -= $biggest_valid_integer;\n\
    \    } else {\n      $biggest_valid_integer_key = array_search($biggest_valid_integer,\
    \ $valid_integer_equivalents);\n      $biggest_valid_integer = $valid_integer_equivalents[$biggest_valid_integer_key\
    \ - 1];\n    }\n  }\n  return $answer;\n}\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $mini_roman_numerals = array(\n        'm'  => 1000,\n        'cm' =>\
    \ 900,\n        'd'  => 500,\n        'cd' => 400,\n        'c'  => 100,\n   \
    \     'xc' => 90,\n        'l'  => 50,\n        'xl' => 40,\n        'x'  => 10,\n\
    \        'ix' => 9,\n        'v'  => 5,\n        'iv' => 4,\n        'i'  => 1,\n\
    \    );\n\n    $mini_roman_string = '';\n    foreach ($mini_roman_numerals as\
    \ $mini_roman => $int) {\n        $repeat = intval($number / $int);\n        $number\
    \ -= $repeat * $int;\n        $mini_roman_string .= str_repeat($mini_roman, $repeat);\n\
    \    }\n\n    return $mini_roman_string;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $symbols = array('m' => 1000, 'cm' => 900, 'd' => 500, 'cd' => 400,\n \
    \   'c' => 100, 'xc' => 90, 'l' => 50, 'xl' => 40, 'x' => 10, 'ix' => 9,\n   \
    \ 'v' => 5, 'iv' => 4, 'i' => 1);\n  $mini_roman = '';\n  foreach ($symbols as\
    \ $symbol => $value) {\n    while ($number >= $value) {\n      $mini_roman .=\
    \ $symbol;\n      $number -= $value;\n    }\n  }\n  return $mini_roman;\n}\n$roman\
    \ = int_to_mini_roman(19);\necho $roman;\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: xix
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $map = [\n        'M' => 1000,\n        'CM' => 900,\n\
    \        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC'\
    \ => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n      \
    \  'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    ];\n\
    \    while ($number > 0) {\n        foreach ($map as $roman => $int) {\n     \
    \       if ($number >= $int) {\n                $number -= $int;\n           \
    \     $result .= $roman;\n                break;\n            }\n        }\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3pcaddzm.php:43\n\
    Stack trace:\n#0 /tmp/tmp3pcaddzm.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp3pcaddzm.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $mini_romans = [\n    1 => 'i',\n    2 => 'ii',\n    3 => 'iii',\n    4\
    \ => 'iv',\n    5 => 'v',\n    6 => 'vi',\n    7 => 'vii',\n    8 => 'viii',\n\
    \    9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n\
    \    100 => 'c',\n    400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000\
    \ => 'm'\n  ];\n  $roman = '';\n  $i = 0;\n  $length = count($mini_romans);\n\
    \  while ($number > 0) {\n    $i++;\n    if ($i >= $length) {\n      // Handle\
    \ numbers >= 4000\n      $divisor = floor($number / 1000);\n      $remainder =\
    \ $number % 1000;\n      $roman .= str_repeat('m', $divisor);\n      $number =\
    \ $remainder;\n    } else {\n      $divisor = floor($number / array_keys($mini_romans)[$i]);\n\
    \      $remainder = $number % array_keys($mini_romans)[$i];\n      if ($divisor\
    \ == 1) {\n        $roman .= $mini_romans[array_keys($mini_romans)[$i]];\n   \
    \   }\n      $number = $remainder;\n    }\n  }\n  return $roman;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $number_integer = (int) $number;\n  if ($number_integer < 1 || $number_integer\
    \ > 1000) {\n    throw new Exception('Number must be between 1 and 1000.');\n\
    \  }\n  $roman_numerals = [\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n\
    \    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 =>\
    \ 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1\
    \ => 'i',\n  ];\n  $result = '';\n  foreach ($roman_numerals as $roman_value =>\
    \ $roman_numeral) {\n    while ($number_integer >= $roman_value) {\n      $result\
    \ .= $roman_numeral;\n      $number_integer -= $roman_value;\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  // First define your digits\n  $digits = array('M' => 1000, 'CM' => 900,\
    \ 'D' => 500, 'CD' => 400, 'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X'\
    \ => 10, 'IX' => 9, 'V' => 5, 'IV' => 4, 'I' => 1);\n  // Then start the output\
    \ string\n  $result = '';\n  // Then go through each digit\n  foreach ($digits\
    \ as $roman => $value) {\n    // See how many times it goes into the number\n\
    \    $matches = intval($number / $value);\n    // Add it to the output string\
    \ that many times\n    $result .= str_repeat($roman, $matches);\n    // Set the\
    \ number to be the remainder of the original number and the value\n    $number\
    \ = $number % $value;\n  }\n  // Finally, return the lowercase of the output string\n\
    \  return strtolower($result);\n}\n$number = rand(1,1000);\necho \"$number = \"\
    \ . int_to_mini_roman($number) . PHP_EOL;\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "177 = clxxvii\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        \"I\" => 1,\n        \"IV\" => 4,\n\
    \        \"V\" => 5,\n        \"IX\" => 9,\n        \"X\" => 10,\n        \"XL\"\
    \ => 40,\n        \"L\" => 50,\n        \"XC\" => 90,\n        \"C\" => 100,\n\
    \        \"CD\" => 400,\n        \"D\" => 500,\n        \"CM\" => 900,\n     \
    \   \"M\" => 1000\n    );\n    $roman_numerals = array_reverse($roman_numerals);\n\
    \    $result = \"\";\n    foreach ($roman_numerals as $roman => $integer) {\n\
    \        while ($number >= $integer) {\n            $result .= $roman;\n     \
    \       $number -= $integer;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbjtvdg4j.php:41\n\
    Stack trace:\n#0 /tmp/tmpbjtvdg4j.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpbjtvdg4j.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // Your code here.\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgb489dof.php:17\n\
    Stack trace:\n#0 /tmp/tmpgb489dof.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgb489dof.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$output = '';\n\t$lookup = array(1000 => 'm', 900 => 'cm', 500 => 'd',\
    \ 400 => 'cd', 100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl', 10 => 'x', 9 =>\
    \ 'ix', 5 => 'v', 4 => 'iv', 1 => 'i');\n\tforeach ($lookup as $key => $value)\
    \ {\n\t\twhile ($number >= $key) {\n\t\t\t$output .= $value;\n\t\t\t$number -=\
    \ $key;\n\t\t}\n\t}\n\treturn $output;\n}\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $conversion = array(\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n\
    \    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 =>\
    \ 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1\
    \ => 'i'\n  );\n  $roman = '';\n  foreach ($conversion as $key => $value) {\n\
    \    $count = (int) ($number / $key);\n    $roman .= str_repeat($value, $count);\n\
    \    $number = $number % $key;\n  }\n  return $roman;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $int_to_mini_roman = array(\n        1 => 'i',\n        2 => 'ii',\n\
    \        3 => 'iii',\n        4 => 'iv',\n        5 => 'v',\n        6 => 'vi',\n\
    \        7 => 'vii',\n        8 => 'viii',\n        9 => 'ix',\n        10 =>\
    \ 'x',\n        20 => 'xx',\n        30 => 'xxx',\n        40 => 'xl',\n     \
    \   50 => 'l',\n        60 => 'lx',\n        70 => 'lxx',\n        80 => 'lxxx',\n\
    \        90 => 'xc',\n        100 => 'c',\n        200 => 'cc',\n        300 =>\
    \ 'ccc',\n        400 => 'cd',\n        500 => 'd',\n        600 => 'dc',\n  \
    \      700 => 'dcc',\n        800 => 'dccc',\n        900 => 'cm',\n        1000\
    \ => 'm',\n    );\n    $num_length = strlen($number);\n    $length = strlen($number);\n\
    \    $num = 0;\n    $result = '';\n    while ($length > 0) {\n        $num +=\
    \ (int) $number[$length - 1] * pow(10, $num_length - $length);\n        $num_length--;\n\
    \        $length--;\n    }\n    foreach ($int_to_mini_roman as $int => $rom) {\n\
    \        if ($num > $int) {\n            $number -= $int;\n            $result\
    \ .= $rom;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9tjt1wd1.php:62\n\
    Stack trace:\n#0 /tmp/tmp9tjt1wd1.php(78): test()\n#1 {main}\n  thrown in /tmp/tmp9tjt1wd1.php\
    \ on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $numberToRoman = array(\n    1 => 'i',\n    2 => 'ii',\n    3 => 'iii',\n\
    \    4 => 'iv',\n    5 => 'v',\n    6 => 'vi',\n    7 => 'vii',\n    8 => 'viii',\n\
    \    9 => 'ix',\n    10 => 'x',\n    20 => 'xx',\n    30 => 'xxx',\n    40 =>\
    \ 'xl',\n    50 => 'l',\n    60 => 'lx',\n    70 => 'lxx',\n    80 => 'lxxx',\n\
    \    90 => 'xc',\n    100 => 'c',\n    200 => 'cc',\n    300 => 'ccc',\n    400\
    \ => 'cd',\n    500 => 'd',\n    600 => 'dc',\n    700 => 'dcc',\n    800 => 'dccc',\n\
    \    900 => 'cm',\n    1000 => 'm',\n  );\n  $digits = str_split($number);\n \
    \ $place_values = array_reverse(array_map(function($digit, $place) {\n    return\
    \ $digit * pow(10, $place);\n  }, $digits, array_keys($digits)));\n  $mini_roman\
    \ = array_map(function($place_value) use ($numberToRoman) {\n    return $numberToRoman[$place_value];\n\
    \  }, $place_values);\n  return implode('', $mini_roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp54iavepy.php:55\n\
    Stack trace:\n#0 /tmp/tmp54iavepy.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp54iavepy.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpan3ryoag.php:16\n\
    Stack trace:\n#0 /tmp/tmpan3ryoag.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpan3ryoag.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$romans = array(\n\t\tarray(1000, 'm'),\n\t\tarray(900, 'cm'),\n\t\tarray(500,\
    \ 'd'),\n\t\tarray(400, 'cd'),\n\t\tarray(100, 'c'),\n\t\tarray(90, 'xc'),\n\t\
    \tarray(50, 'l'),\n\t\tarray(40, 'xl'),\n\t\tarray(10, 'x'),\n\t\tarray(9, 'ix'),\n\
    \t\tarray(5, 'v'),\n\t\tarray(4, 'iv'),\n\t\tarray(1, 'i')\n\t);\n\t$roman = '';\n\
    \twhile ($number > 0) {\n\t\tforeach ($romans as $value) {\n\t\t\tif ($number\
    \ >= $value[0]) {\n\t\t\t\t$number -= $value[0];\n\t\t\t\t$roman .= $value[1];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $roman;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = \"\";\n\twhile($number > 0) {\n\t\tif($number >= 100) {\n\t\t\
    \t$result .= \"c\";\n\t\t\t$number -= 100;\n\t\t} else if($number >= 90) {\n\t\
    \t\t$result .= \"xc\";\n\t\t\t$number -= 90;\n\t\t} else if($number >= 50) {\n\
    \t\t\t$result .= \"l\";\n\t\t\t$number -= 50;\n\t\t} else if($number >= 40) {\n\
    \t\t\t$result .= \"xl\";\n\t\t\t$number -= 40;\n\t\t} else if($number >= 10) {\n\
    \t\t\t$result .= \"x\";\n\t\t\t$number -= 10;\n\t\t} else if($number >= 9) {\n\
    \t\t\t$result .= \"ix\";\n\t\t\t$number -= 9;\n\t\t} else if($number >= 5) {\n\
    \t\t\t$result .= \"v\";\n\t\t\t$number -= 5;\n\t\t} else if($number >= 4) {\n\t\
    \t\t$result .= \"iv\";\n\t\t\t$number -= 4;\n\t\t} else if($number >= 1) {\n\t\
    \t\t$result .= \"i\";\n\t\t\t$number -= 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpey3356wg.php:51\n\
    Stack trace:\n#0 /tmp/tmpey3356wg.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpey3356wg.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $numeral = '';\n    $dictionary = ['m' => 1000, 'd' => 500, 'c' => 100,\
    \ 'l' => 50, 'x' => 10, 'v' => 5, 'i' => 1];\n    foreach ($dictionary as $symbol\
    \ => $value) {\n        $numeral .= str_repeat($symbol, floor($number / $value));\n\
    \        $number %= $value;\n    }\n    return $numeral;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoh20vykm.php:23\n\
    Stack trace:\n#0 /tmp/tmpoh20vykm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpoh20vykm.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $numerals = array(\n    1 => 'i',\n    5 => 'v',\n    10 => 'x',\n    50\
    \ => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 => 'm'\n  );\n  $mini_roman\
    \ = '';\n  foreach (array_reverse($numerals, true) as $value => $numeral) {\n\
    \    $multiples = (int) floor($number / $value);\n    $number -= $multiples *\
    \ $value;\n    if ($value == 1) {\n      $next_numerals = $numerals[5];\n    \
    \  $next_value = 5;\n    } else if ($value == 5) {\n      $next_numerals = $numerals[10];\n\
    \      $next_value = 10;\n    } else if ($value == 10) {\n      $next_numerals\
    \ = $numerals[50];\n      $next_value = 50;\n    } else if ($value == 50) {\n\
    \      $next_numerals = $numerals[100];\n      $next_value = 100;\n    } else\
    \ if ($value == 100) {\n      $next_numerals = $numerals[500];\n      $next_value\
    \ = 500;\n    } else if ($value == 500) {\n      $next_numerals = $numerals[1000];\n\
    \      $next_value = 1000;\n    }\n    if ($multiples == 9) {\n      $mini_roman\
    \ .= $numeral . $next_numerals;\n    } else if ($multiples >= 5) {\n      $mini_roman\
    \ .= $next_numerals;\n      $multiples -= 5;\n      while ($multiples--) {\n \
    \       $mini_roman .= $numeral;\n      }\n    } else if ($multiples == 4) {\n\
    \      $mini_roman .= $numeral . $next_numerals;\n    } else {\n      while ($multiples--)\
    \ {\n        $mini_roman .= $numeral;\n      }\n    }\n  }\n  return $mini_roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78nk0tgh.php:66\n\
    Stack trace:\n#0 /tmp/tmp78nk0tgh.php(82): test()\n#1 {main}\n  thrown in /tmp/tmp78nk0tgh.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$digits = [];\n\t$numeral = '';\n\t$ones = ['', 'i', 'ii', 'iii', 'iv',\
    \ 'v', 'vi', 'vii', 'viii', 'ix'];\n\t$tens = ['', 'x', 'xx', 'xxx', 'xl', 'l',\
    \ 'lx', 'lxx', 'lxxx', 'xc'];\n\t$hundreds = ['', 'c', 'cc', 'ccc', 'cd', 'd',\
    \ 'dc', 'dcc', 'dccc', 'cm'];\n\t$thousands = ['', 'm', 'mm', 'mmm', 'mmv', 'mv',\
    \ 'mvi', 'mvii', 'mviii', 'mix'];\n\t$result = '';\n\t$numeral = str_split($number);\n\
    \tforeach ($numeral as $digit) {\n\t\t$digits[] = $digit;\n\t}\n\t$count = count($digits);\n\
    \tswitch ($count) {\n\t\tcase 1:\n\t\t\t$result = $ones[$digits[0]];\n\t\t\tbreak;\n\
    \t\tcase 2:\n\t\t\t$result = $tens[$digits[0]] . $ones[$digits[1]];\n\t\t\tbreak;\n\
    \t\tcase 3:\n\t\t\t$result = $hundreds[$digits[0]] . $tens[$digits[1]] . $ones[$digits[2]];\n\
    \t\t\tbreak;\n\t\tcase 4:\n\t\t\t$result = $thousands[$digits[0]] . $hundreds[$digits[1]]\
    \ . $tens[$digits[2]] . $ones[$digits[3]];\n\t\t\tbreak;\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $mini_roman_numerals = array(\n        1 => 'i', 2 => 'ii', 3 => 'iii',\
    \ 4 => 'iv', 5 => 'v',\n        6 => 'vi', 7 => 'vii', 8 => 'viii', 9 => 'ix',\
    \ 10 => 'x',\n        20 => 'xx', 30 => 'xxx', 40 => 'xl', 50 => 'l',\n      \
    \  60 => 'lx', 70 => 'lxx', 80 => 'lxxx', 90 => 'xc', 100 => 'c',\n        200\
    \ => 'cc', 300 => 'ccc', 400 => 'cd', 500 => 'd',\n        600 => 'dc', 700 =>\
    \ 'dcc', 800 => 'dccc', 900 => 'cm', 1000 => 'm');\n    $result = '';\n    $order\
    \ = array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    foreach\
    \ ($order as $key) {\n        while ($number >= $key) {\n            $result .=\
    \ $mini_roman_numerals[$key];\n            $number -= $key;\n        }\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0_fvg13.php:18\n\
    Stack trace:\n#0 /tmp/tmpc0_fvg13.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpc0_fvg13.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd',\
    \ 'cm', 'm'];\n    $decimals = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900,\
    \ 1000];\n    $return_string = '';\n    $index = count($decimals) - 1;\n    while\
    \ ($number > 0) {\n        if ($number >= $decimals[$index]) {\n            $return_string\
    \ .= $numerals[$index];\n            $number -= $decimals[$index];\n        }\
    \ else {\n            $index--;\n        }\n    }\n    return $return_string;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $literals = [\n        'm' => 1000,\n        'd' => 500,\n        'c'\
    \ => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n       \
    \ 'i' => 1\n    ];\n    $result = '';\n    while ($number > 0) {\n        foreach\
    \ ($literals as $symbol => $value) {\n            if ($number >= $value) {\n \
    \               $number -= $value;\n                $result .= $symbol;\n    \
    \            break;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93n0380c.php:37\n\
    Stack trace:\n#0 /tmp/tmp93n0380c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp93n0380c.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = \"\";\n\t$numeral_map = array(\n\t\t1000 => \"m\",\n\t\t900 =>\
    \ \"cm\",\n\t\t500 => \"d\",\n\t\t400 => \"cd\",\n\t\t100 => \"c\",\n\t\t90 =>\
    \ \"xc\",\n\t\t50 => \"l\",\n\t\t40 => \"xl\",\n\t\t10 => \"x\",\n\t\t9 => \"\
    ix\",\n\t\t5 => \"v\",\n\t\t4 => \"iv\",\n\t\t1 => \"i\",\n\t);\n\tforeach ($numeral_map\
    \ as $limit => $glyph) {\n\t\twhile ($number >= $limit) {\n\t\t\t$roman .= $glyph;\n\
    \t\t\t$number -= $limit;\n\t\t}\n\t}\n\treturn $roman;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $value = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n  \
    \  $char = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm',\
    \ 'm'];\n    $result = \"\";\n    while ($number > 0) {\n        for ($i = sizeof($value)\
    \ - 1; $i >= 0; $i--) {\n            if ($number >= $value[$i]) {\n          \
    \      $number -= $value[$i];\n                $result .= $char[$i];\n       \
    \         break;\n            }\n        }\n    }\n    return $result;\n}\necho\
    \ \"int_to_mini_roman(19) == 'xix'  \" . (int_to_mini_roman(19) == 'xix') . \"\
    \\n\";\necho \"int_to_mini_roman(152) == 'clii'  \" . (int_to_mini_roman(152)\
    \ == 'clii') . \"\\n\";\necho \"int_to_mini_roman(426) == 'cdxxvi'  \" . (int_to_mini_roman(426)\
    \ == 'cdxxvi') . \"\\n\";\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "int_to_mini_roman(19) == 'xix'  1\nint_to_mini_roman(152) == 'clii'  1\n\
    int_to_mini_roman(426) == 'cdxxvi'  1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = \"\";\n    $numerals = [\n        1 => \"i\",\n        4 =>\
    \ \"iv\",\n        5 => \"v\",\n        9 => \"ix\",\n        10 => \"x\",\n \
    \       40 => \"xl\",\n        50 => \"l\",\n        90 => \"xc\",\n        100\
    \ => \"c\",\n        400 => \"cd\",\n        500 => \"d\",\n        900 => \"\
    cm\",\n        1000 => \"m\"\n    ];\n    foreach (array_reverse(array_keys($numerals))\
    \ as $key) {\n        while ($number >= $key) {\n            $result .= $numerals[$key];\n\
    \            $number -= $key;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $values = [1 => 'i', 5 => 'v', 10 => 'x', 50 => 'l', 100 => 'c', 500 =>\
    \ 'd', 1000 => 'm'];\n  $result = '';\n  foreach ($values as $value => $char)\
    \ {\n    $result .= str_repeat($char, floor($number / $value));\n    $number %=\
    \ $value;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq3kkzq1e.php:24\n\
    Stack trace:\n#0 /tmp/tmpq3kkzq1e.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq3kkzq1e.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $translation = array(\n    'M'  => 1000,\n    'CM' => 900,\n    'D'  =>\
    \ 500,\n    'CD' => 400,\n    'C'  => 100,\n    'XC' => 90,\n    'L'  => 50,\n\
    \    'XL' => 40,\n    'X'  => 10,\n    'IX' => 9,\n    'V'  => 5,\n    'IV' =>\
    \ 4,\n    'I'  => 1\n  );\n  $result = '';\n  foreach ($translation as $key =>\
    \ $value) {\n    while ($number >= $value) {\n      $result .= $key;\n      $number\
    \ -= $value;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanky9kl0.php:40\n\
    Stack trace:\n#0 /tmp/tmpanky9kl0.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpanky9kl0.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtp_9rq3.php:18\n\
    Stack trace:\n#0 /tmp/tmpqtp_9rq3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqtp_9rq3.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$conversion = [\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t'D' => 500,\n\t\
    \t'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\t\t'XL' =>\
    \ 40,\n\t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\t\t'I'\
    \ => 1\n\t];\n\t$mini_roman = '';\n\twhile ($number > 0) {\n\t\tforeach ($conversion\
    \ as $roman => $value) {\n\t\t\tif ($number >= $value) {\n\t\t\t\t$number -= $value;\n\
    \t\t\t\t$mini_roman .= $roman;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $mini_roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3i9trq4.php:43\n\
    Stack trace:\n#0 /tmp/tmpx3i9trq4.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpx3i9trq4.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$map = [\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t'D' => 500,\n\t\t'CD'\
    \ => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\t\t'XL' => 40,\n\
    \t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\t\t'I' => 1\n\t\
    ];\n\t$return = '';\n\twhile ($number > 0) {\n\t\tforeach ($map as $roman => $int)\
    \ {\n\t\t\tif ($number >= $int) {\n\t\t\t\t$number -= $int;\n\t\t\t\t$return .=\
    \ $roman;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $return;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpputlz0pe.php:43\n\
    Stack trace:\n#0 /tmp/tmpputlz0pe.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpputlz0pe.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $units = array(\n    1 => 'i', 2 => 'ii', 3 => 'iii', 4 => 'iv', 5 => 'v',\n\
    \    6 => 'vi', 7 => 'vii', 8 => 'viii', 9 => 'ix'\n  );\n  $tens = array(\n \
    \   1 => 'x', 2 => 'xx', 3 => 'xxx', 4 => 'xl', 5 => 'l',\n    6 => 'lx', 7 =>\
    \ 'lxx', 8 => 'lxxx', 9 => 'xc'\n  );\n  $hundreds = array(\n    1 => 'c', 2 =>\
    \ 'cc', 3 => 'ccc', 4 => 'cd', 5 => 'd',\n    6 => 'dc', 7 => 'dcc', 8 => 'dccc',\
    \ 9 => 'cm'\n  );\n  $result = '';\n  $number = (string) $number;\n  if (strlen($number)\
    \ == 3) {\n    $result .= $hundreds[(int) $number[0]];\n    $number = substr($number,\
    \ 1);\n  }\n  if (strlen($number) == 2) {\n    $result .= $tens[(int) $number[0]];\n\
    \    $number = substr($number, 1);\n  }\n  if (strlen($number) == 1) {\n    $result\
    \ .= $units[(int) $number[0]];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80pg2rsg.php:56\n\
    Stack trace:\n#0 /tmp/tmp80pg2rsg.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp80pg2rsg.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = \"\";\n    $table = [\n        1 => \"i\",\n        4 => \"\
    iv\",\n        5 => \"v\",\n        9 => \"ix\",\n        10 => \"x\",\n     \
    \   40 => \"xl\",\n        50 => \"l\",\n        90 => \"xc\",\n        100 =>\
    \ \"c\",\n        400 => \"cd\",\n        500 => \"d\",\n        900 => \"cm\"\
    ,\n        1000 => \"m\"\n    ];\n    $max = 1000;\n    foreach ($table as $decimal\
    \ => $roman) {\n        while ($number >= $decimal) {\n            $result .=\
    \ $roman;\n            $number -= $decimal;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputzkohmo.php:40\n\
    Stack trace:\n#0 /tmp/tmputzkohmo.php(56): test()\n#1 {main}\n  thrown in /tmp/tmputzkohmo.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $numeral_symbols = array('i', 'v', 'x', 'l', 'c', 'd', 'm');\n  $numeral_values\
    \ = array(1, 5, 10, 50, 100, 500, 1000);\n  $converted_string = '';\n  while($number\
    \ > 0) {\n    $max_numeral_index = sizeof($numeral_values) - 1;\n    $high_numeral_index\
    \ = $max_numeral_index;\n    while ($number < $numeral_values[$high_numeral_index])\
    \ {\n      $high_numeral_index -= 1;\n    }\n    $base_number = $numeral_values[$high_numeral_index];\n\
    \    $number_to_convert = $number;\n    $number_prefix = 0;\n    if ($number >\
    \ ($base_number * 4) - 1) {\n      if ($number < ($base_number * 9)) {\n     \
    \   $number_prefix = intval($number / $base_number);\n        $number_to_convert\
    \ = $number % $base_number;\n      } else {\n        $number_prefix = 9;\n   \
    \     $number_to_convert = $number - ($base_number * 9);\n      }\n    }\n   \
    \ $converted_string .= str_repeat($numeral_symbols[$high_numeral_index], $number_prefix);\n\
    \    $number = $number_to_convert;\n  }\n  return $converted_string;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $romans = [\n        'm' => 1000,\n        'cm' => 900,\n        'd'\
    \ => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n  \
    \      'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n\
    \        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    ];\n    $roman_num\
    \ = '';\n    foreach ($romans as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman_num .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman_num;\n}\necho int_to_mini_roman(426);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: cdxxvi
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = [\n        'm' => 1000,\n        'cm' => 900,\n   \
    \     'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' =>\
    \ 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix'\
    \ => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    ];\n   \
    \ $result = '';\n    foreach ($roman_numerals as $numeral => $integer) {\n   \
    \     $result .= str_repeat($numeral, $number / $integer);\n        $number %=\
    \ $integer;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // Complete this function.\n    $integer = (int) $number;\n    $romans\
    \ = array('m' => 1000, 'd' => 500, 'c' => 100, 'l' => 50, 'x' => 10, 'v' => 5,\
    \ 'i' => 1);\n    $mini_roman = '';\n    foreach ($romans as $roman => $value)\
    \ {\n        $matches = intval($integer / $value);\n        $mini_roman .= str_repeat($roman,\
    \ $matches);\n        $integer = $integer % $value;\n    }\n    return $mini_roman;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjil3ct4c.php:26\n\
    Stack trace:\n#0 /tmp/tmpjil3ct4c.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjil3ct4c.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'M' => 1000,\n    'CM' => 900,\n\
    \    'D' => 500,\n    'CD' => 400,\n    'C' => 100,\n    'XC' => 90,\n    'L'\
    \ => 50,\n    'XL' => 40,\n    'X' => 10,\n    'IX' => 9,\n    'V' => 5,\n   \
    \ 'IV' => 4,\n    'I' => 1,\n  );\n  foreach ($numerals as $numeral => $value)\
    \ {\n    $count = intval($number / $value);\n    $result .= str_repeat($numeral,\
    \ $count);\n    $number = $number % $value;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcu7shxix.php:39\n\
    Stack trace:\n#0 /tmp/tmpcu7shxix.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpcu7shxix.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$romans = array(\n\t\tarray('m', 1000),\n\t\tarray('d', 500),\n\t\tarray('c',\
    \ 100),\n\t\tarray('l', 50),\n\t\tarray('x', 10),\n\t\tarray('v', 5),\n\t\tarray('i',\
    \ 1),\n\t);\n\t$result = '';\n\tforeach ($romans as $roman) {\n\t\tlist($char,\
    \ $value) = $roman;\n\t\t$add_char = '';\n\t\twhile ($number >= $value) {\n\t\t\
    \t$add_char .= $char;\n\t\t\t$number -= $value;\n\t\t}\n\t\t$result .= $add_char;\n\
    \t}\n\t$result = str_replace('iiii', 'iv', $result);\n\t$result = str_replace('iv',\
    \ 'iv', $result);\n\t$result = str_replace('viiii', 'ix', $result);\n\t$result\
    \ = str_replace('ix', 'ix', $result);\n\t$result = str_replace('xxxx', 'xl', $result);\n\
    \t$result = str_replace('xl', 'xl', $result);\n\t$result = str_replace('lxxxx',\
    \ 'xc', $result);\n\t$result = str_replace('xc', 'xc', $result);\n\t$result =\
    \ str_replace('cccc', 'cd', $result);\n\t$result = str_replace('cd', 'cd', $result);\n\
    \t$result = str_replace('dcccc', 'cm', $result);\n\t$result = str_replace('cm',\
    \ 'cm', $result);\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_i67dod.php:49\n\
    Stack trace:\n#0 /tmp/tmp0_i67dod.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp0_i67dod.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // Define an array that maps each number to it's mini roman equivalent\n\
    \    $romans = [\n        \"0\" => \"\",\n        \"1\" => \"i\",\n        \"\
    2\" => \"ii\",\n        \"3\" => \"iii\",\n        \"4\" => \"iv\",\n        \"\
    5\" => \"v\",\n        \"6\" => \"vi\",\n        \"7\" => \"vii\",\n        \"\
    8\" => \"viii\",\n        \"9\" => \"ix\",\n        \"10\" => \"x\",\n       \
    \ \"20\" => \"xx\",\n        \"30\" => \"xxx\",\n        \"40\" => \"xl\",\n \
    \       \"50\" => \"l\",\n        \"60\" => \"lx\",\n        \"70\" => \"lxx\"\
    ,\n        \"80\" => \"lxxx\",\n        \"90\" => \"xc\",\n        \"100\" =>\
    \ \"c\",\n        \"200\" => \"cc\",\n        \"300\" => \"ccc\",\n        \"\
    400\" => \"cd\",\n        \"500\" => \"d\",\n        \"600\" => \"dc\",\n    \
    \    \"700\" => \"dcc\",\n        \"800\" => \"dccc\",\n        \"900\" => \"\
    cm\",\n        \"1000\" => \"m\"\n    ];\n\n    // Break the number into two parts\n\
    \    $ones = $number % 10;\n    $tens = ($number - $ones) % 100;\n    $hundreds\
    \ = ($number - $tens - $ones) % 1000;\n    $thousands = ($number - $hundreds -\
    \ $tens - $ones) % 10000;\n\n    // Return the mini roman number\n    return $romans[$thousands]\
    \ . $romans[$hundreds] . $romans[$tens] . $romans[$ones];\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4krknxr.php:18\n\
    Stack trace:\n#0 /tmp/tmpl4krknxr.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpl4krknxr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $rome = array(\n            'M'  => 1000,\n            'CM' => 900,\n\
    \            'D'  => 500,\n            'CD' => 400,\n            'C'  => 100,\n\
    \            'XC' => 90,\n            'L'  => 50,\n            'XL' => 40,\n \
    \           'X'  => 10,\n            'IX' => 9,\n            'V'  => 5,\n    \
    \        'IV' => 4,\n            'I'  => 1,\n        );\n    $roman = '';\n  \
    \  while ($number > 0) {\n        foreach ($rome as $r => $n) {\n            if\
    \ ($number >= $n) {\n                $number -= $n;\n                $roman .=\
    \ $r;\n                break;\n            }\n        }\n    }\n    return $roman;\n\
    }\n\necho int_to_mini_roman(19);\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "XIX\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjx175114.php:44\n\
    Stack trace:\n#0 /tmp/tmpjx175114.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpjx175114.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $output = '';\n  while ($number > 0) {\n    $roman = '';\n    if ($number\
    \ >= 1000) {\n      $number -= 1000;\n      $roman = 'm';\n    } elseif ($number\
    \ >= 900) {\n      $number -= 900;\n      $roman = 'cm';\n    } elseif ($number\
    \ >= 500) {\n      $number -= 500;\n      $roman = 'd';\n    } elseif ($number\
    \ >= 400) {\n      $number -= 400;\n      $roman = 'cd';\n    } elseif ($number\
    \ >= 100) {\n      $number -= 100;\n      $roman = 'c';\n    } elseif ($number\
    \ >= 90) {\n      $number -= 90;\n      $roman = 'xc';\n    } elseif ($number\
    \ >= 50) {\n      $number -= 50;\n      $roman = 'l';\n    } elseif ($number >=\
    \ 40) {\n      $number -= 40;\n      $roman = 'xl';\n    } elseif ($number >=\
    \ 10) {\n      $number -= 10;\n      $roman = 'x';\n    } elseif ($number >= 9)\
    \ {\n      $number -= 9;\n      $roman = 'ix';\n    } elseif ($number >= 5) {\n\
    \      $number -= 5;\n      $roman = 'v';\n    } elseif ($number >= 4) {\n   \
    \   $number -= 4;\n      $roman = 'iv';\n    } elseif ($number >= 1) {\n     \
    \ $number -= 1;\n      $roman = 'i';\n    }\n    $output .= $roman;\n  }\n  return\
    \ $output;\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number < 1 || $number > 1000) {\n        throw new RangeException('The\
    \ number must be in the range [1, 1000]');\n    }\n\n    $mini_roman_numerals\
    \ = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n\
    \        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\n    $roman_numeral =\
    \ '';\n    foreach ($mini_roman_numerals as $key => $value) {\n        while ($number\
    \ >= $value) {\n            $roman_numeral .= $key;\n            $number -= $value;\n\
    \        }\n    }\n\n    return $roman_numeral;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number > 1000 || $number < 1) return false;\n    $numbers = [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 50, 100, 500, 1000];\n    $tens = [\n        1 =>\
    \ 'i',\n        2 => 'ii',\n        3 => 'iii',\n        4 => 'iv',\n        5\
    \ => 'v',\n        6 => 'vi',\n        7 => 'vii',\n        8 => 'viii',\n   \
    \     9 => 'ix',\n        10 => 'x',\n        50 => 'l',\n        100 => 'c',\n\
    \        500 => 'd',\n        1000 => 'm'\n    ];\n    $half = intval($number\
    \ / 2);\n    $numbers_reverse = array_reverse($numbers);\n    $mini_roman = '';\n\
    \    foreach ($numbers_reverse as $key => $val) {\n        $x = intval($number\
    \ / $val);\n        if ($x >= 1) {\n            $mini_roman .= str_repeat($tens[$val],\
    \ $x);\n            $number = $number % $val;\n        }\n    }\n    return $mini_roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzj2avekm.php:49\n\
    Stack trace:\n#0 /tmp/tmpzj2avekm.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpzj2avekm.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $remainder = $number;\n  $result = '';\n  $key_list = array(1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n  $value_list = array(\n    1000\
    \ => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n\
    \    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i',\n  );\n  for ($i = 0; $i < sizeof($key_list);\
    \ $i++) {\n    $key = $key_list[$i];\n    $value = $value_list[$key];\n    $result\
    \ .= str_repeat($value, intval($remainder / $key));\n    $remainder = $remainder\
    \ % $key;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = \"\";\n  $romans = [\n    'M' => 1000,\n    'CM' => 900,\n   \
    \ 'D' => 500,\n    'CD' => 400,\n    'C' => 100,\n    'XC' => 90,\n    'L' =>\
    \ 50,\n    'XL' => 40,\n    'X' => 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV'\
    \ => 4,\n    'I' => 1\n  ];\n  foreach ($romans as $key => $value) {\n    $roman\
    \ .= str_repeat($key, (int)($number / $value));\n    $number = $number % $value;\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3uyl8pg.php:38\n\
    Stack trace:\n#0 /tmp/tmpr3uyl8pg.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpr3uyl8pg.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $map = array('m' => 1000, 'cm' => 900, 'd' => 500, 'cd' => 400, 'c' =>\
    \ 100, 'xc' => 90,\n        'l' => 50, 'xl' => 40, 'x' => 10, 'ix' => 9, 'v' =>\
    \ 5, 'iv' => 4, 'i' => 1);\n    $returnValue = '';\n    while ($number > 0) {\n\
    \        foreach ($map as $roman => $int) {\n            if($number >= $int) {\n\
    \                $number -= $int;\n                $returnValue .= $roman;\n \
    \               break;\n            }\n        }\n    }\n    return $returnValue;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    // Create an array that represents each roman numeral,\
    \ starting with the\n    // largest.\n    $romans = array(1000, 'm', 900, 'cm',\
    \ 500, 'd', 400, 'cd', 100, 'c', 90, 'xc',\n                    50, 'l', 40, 'xl',\
    \ 10, 'x', 9, 'ix', 5, 'v', 4, 'iv', 1, 'i');\n    foreach ($romans as $decimal\
    \ => $numeral) {\n        while ($number >= $decimal) {\n            $roman .=\
    \ $numeral;\n            $number -= $decimal;\n        }\n    }\n    return $roman;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 130023432 bytes) in /tmp/tmpb8bu1_7l.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = [\n        '',\n        'c',\n        'cc',\n        'ccc',\n\
    \        'cd',\n        'd',\n        'dc',\n        'dcc',\n        'dccc',\n\
    \        'cm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'md',\n        'd',\n        'dc',\n        'dcc',\n        'dccc',\n\
    \        'dm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        'm',\n        'mc',\n        'mcc',\n        'mccc',\n\
    \        'mm',\n        '\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpku2ezmap.php on line 101\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $translation_table = array(\n    'M' => 1000,\n    'CM' => 900,\n    'D'\
    \ => 500,\n    'CD' => 400,\n    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n\
    \    'XL' => 40,\n    'X' => 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n\
    \    'I' => 1,\n  );\n  $result = '';\n  foreach ($translation_table as $roman\
    \ => $value) {\n    while ($number >= $value) {\n      $result .= $roman;\n  \
    \    $number -= $value;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7u5_ky2o.php:39\n\
    Stack trace:\n#0 /tmp/tmp7u5_ky2o.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp7u5_ky2o.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = \"\";\n  $numerals = array(\n    'm'=>1000,\n    'cm'=>900,\n\
    \    'd'=>500,\n    'cd'=>400,\n    'c'=>100,\n    'xc'=>90,\n    'l'=>50,\n \
    \   'xl'=>40,\n    'x'=>10,\n    'ix'=>9,\n    'v'=>5,\n    'iv'=>4,\n    'i'=>1,\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $num_matches = floor($number\
    \ / $value);\n    $roman .= str_repeat($numeral, $num_matches);\n    $number =\
    \ $number % $value;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    if ($number < 1 || $number > 1000) {\n        throw new Exception('Number\
    \ out of range: ' . $number);\n    }\n    $roman_numeral = '';\n    while ($number\
    \ > 0) {\n        if ($number >= 100) {\n            $roman_numeral .= 'c';\n\
    \            $number -= 100;\n        } elseif ($number >= 90) {\n           \
    \ $roman_numeral .= 'xc';\n            $number -= 90;\n        } elseif ($number\
    \ >= 50) {\n            $roman_numeral .= 'l';\n            $number -= 50;\n \
    \       } elseif ($number >= 40) {\n            $roman_numeral .= 'xl';\n    \
    \        $number -= 40;\n        } elseif ($number >= 10) {\n            $roman_numeral\
    \ .= 'x';\n            $number -= 10;\n        } elseif ($number >= 9) {\n   \
    \         $roman_numeral .= 'ix';\n            $number -= 9;\n        } elseif\
    \ ($number >= 5) {\n            $roman_numeral .= 'v';\n            $number -=\
    \ 5;\n        } elseif ($number >= 4) {\n            $roman_numeral .= 'iv';\n\
    \            $number -= 4;\n        } else {\n            $roman_numeral .= 'i';\n\
    \            $number -= 1;\n        }\n    }\n    return $roman_numeral;\n}\n\
    echo int_to_mini_roman(19) . \"\\n\";\necho int_to_mini_roman(152) . \"\\n\";\n\
    echo int_to_mini_roman(426) . \"\\n\";\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "xix\nclii\nccccxxvi\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpfs05r1ee.php:58\nStack trace:\n#0 /tmp/tmpfs05r1ee.php(71): test()\n\
    #1 {main}\n  thrown in /tmp/tmpfs05r1ee.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // YOUR CODE HERE\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yg92epu.php:18\n\
    Stack trace:\n#0 /tmp/tmp3yg92epu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3yg92epu.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $number = (int) $number;\n    if ($number <= 0 || $number > 1000) {\n\
    \        return NULL;\n    }\n    $solution = '';\n    $map = [\n        1   \
    \ => 'i',\n        4    => 'iv',\n        5    => 'v',\n        9    => 'ix',\n\
    \        10   => 'x',\n        40   => 'xl',\n        50   => 'l',\n        90\
    \   => 'xc',\n        100  => 'c',\n        400  => 'cd',\n        500  => 'd',\n\
    \        900  => 'cm',\n        1000 => 'm',\n    ];\n    $divisor = 1;\n    while\
    \ ($number > 0) {\n        $digit = ($number % 10) * $divisor;\n        $solution\
    \ = str_replace(array_keys($map), array_values($map), $digit) . $solution;\n \
    \       $number = (int) ($number / 10);\n        $divisor *= 10;\n    }\n    return\
    \ $solution;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpm4coen.php:45\n\
    Stack trace:\n#0 /tmp/tmpvpm4coen.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpvpm4coen.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $lookup = [\n        1 => 'i',\n        5 => 'v',\n        10 => 'x',\n\
    \        50 => 'l',\n        100 => 'c',\n        500 => 'd',\n        1000 =>\
    \ 'm',\n    ];\n    // Reverse sort keys.\n    krsort($lookup);\n    $output =\
    \ '';\n    foreach ($lookup as $decimal => $roman) {\n        // For each digit\
    \ in the decimal number, find the largest roman numeral\n        // in $lookup\
    \ that will fit in the decimal digit and append it to the\n        // output string.\n\
    \        while ($number - $decimal >= 0) {\n            $output .= $roman;\n \
    \           $number -= $decimal;\n        }\n    }\n    return $output;\n}\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpys8nxtwt.php:38\n\
    Stack trace:\n#0 /tmp/tmpys8nxtwt.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpys8nxtwt.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $res = '';\n    $conv = array(\n        '1000' => 'm',\n        '900'\
    \ => 'cm',\n        '500' => 'd',\n        '400' => 'cd',\n        '100' => 'c',\n\
    \        '90' => 'xc',\n        '50' => 'l',\n        '40' => 'xl',\n        '10'\
    \ => 'x',\n        '9' => 'ix',\n        '5' => 'v',\n        '4' => 'iv',\n \
    \       '1' => 'i'\n    );\n    foreach ($conv as $num => $rom) {\n        $matches\
    \ = intval($number / $num);\n        $res .= str_repeat($rom, $matches);\n   \
    \     $number = $number % $num;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t// Here is the roman numberal pattern\n\t$lookup = array('m' => 1000, 'cm'\
    \ => 900, 'd' => 500, 'cd' => 400,\n\t\t'c' => 100, 'xc' => 90, 'l' => 50, 'xl'\
    \ => 40,\n\t\t'x' => 10, 'ix' => 9, 'v' => 5, 'iv' => 4, 'i' => 1);\n\t$roman\
    \ = '';\n\twhile ($number > 0) {\n\t\tforeach ($lookup as $roman => $int) {\n\t\
    \t\tif ($number >= $int) {\n\t\t\t\t$number -= $int;\n\t\t\t\t$result .= $roman;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$num_length = strlen($number);\n\t$digit = substr($number, -1);\n\t$num_tens\
    \ = $num_length - 1;\n\t$tens = 10 ** $num_tens;\n\t$hundreds = $tens * 10;\n\t\
    $thousands = $hundreds * 10;\n\t$string = \"\";\n\t\n\t//  If $number is a multiple\
    \ of $thousands\n\tif ($number % $thousands == 0) {\n\t\tfor ($i = 0; $i < ($number\
    \ / $thousands); $i++) {\n\t\t\t$string .= \"m\";\n\t\t}\n\t\treturn $string;\n\
    \t}\n\t// If $number is a multiple of $hundreds\n\telseif ($number % $hundreds\
    \ == 0) {\n\t\tfor ($i = 0; $i < ($number / $hundreds); $i++) {\n\t\t\t$string\
    \ .= \"c\";\n\t\t}\n\t\treturn $string;\n\t}\n\t// If $number is a multiple of\
    \ $tens\n\telseif ($number % $tens == 0) {\n\t\tfor ($i = 0; $i < ($number / $tens);\
    \ $i++) {\n\t\t\t$string .= \"x\";\n\t\t}\n\t\treturn $string;\n\t}\n\t// If $number\
    \ is a multiple of ones\n\telseif ($number % $digit == 0) {\n\t\tfor ($i = 0;\
    \ $i < ($number / $digit); $i++) {\n\t\t\t$string .= \"i\";\n\t\t}\n\t\treturn\
    \ $string;\n\t}\n\t\n\t\n\t// If $number is not a multiple of $thousands\n\t$thousands_count\
    \ = floor($number / $thousands);\n\tfor ($i = 0; $i < $thousands_count; $i++)\
    \ {\n\t\t$string .= \"m\";\n\t}\n\t$number = $number - ($thousands_count * $thousands);\n\
    \t\n\t// If $number is not a multiple of $hundreds\n\t$hundreds_count = floor($number\
    \ / $hundreds);\n\tif ($hundreds_count == 9) {\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppjvbf7py.php on line 79\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $matches = array(1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd', 100\
    \ => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl', 10 => 'x', 9 => 'ix', 5 => 'v', 4\
    \ => 'iv', 1 => 'i');\n    $result = '';\n    while ($number > 0) {\n        foreach\
    \ ($matches as $key => $value) {\n            if ($number >= $key) {\n       \
    \         $number -= $key;\n                $result .= $value;\n             \
    \   break;\n            }\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // Implement me!\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyid55adw.php:17\n\
    Stack trace:\n#0 /tmp/tmpyid55adw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyid55adw.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $units = array(1 => 'i', 5 => 'v', 10 => 'x');\n  $tens = array(1 => 'x',\
    \ 5 => 'l', 10 => 'c');\n  $hundreds = array(1 => 'c', 5 => 'd', 10 => 'm');\n\
    \  $thousands = array(1 => 'm');\n\n  $number = str_split(strrev(strval($number)));\n\
    \  $converted = '';\n  for ($i = 0; $i < count($number); $i++) {\n    $num = $number[$i];\n\
    \    $num = intval($num);\n    if ($i == 0) {\n      if ($num < 4) {\n       \
    \ $converted = str_repeat($units[1], $num);\n      } else if ($num == 4) {\n \
    \       $converted = $units[1] . $units[5];\n      } else if ($num == 5) {\n \
    \       $converted = $units[5];\n      } else if ($num < 9) {\n        $converted\
    \ = $units[5] . str_repeat($units[1], $num - 5);\n      } else {\n        $converted\
    \ = $units[1] . $units[10];\n      }\n    } else if ($i == 1) {\n      if ($num\
    \ < 4) {\n        $converted = str_repeat($tens[1], $num) . $converted;\n    \
    \  } else if ($num == 4) {\n        $converted = $tens[1] . $tens[5] . $converted;\n\
    \      } else if ($num == 5) {\n        $converted = $tens[5] . $converted;\n\
    \      } else if ($num < 9) {\n        $converted = $tens[5] . str_repeat($tens[1],\
    \ $num - 5) . $converted;\n      } else {\n        $converted = $tens[1] . $tens[10]\
    \ . $converted;\n      }\n    } else if ($i == 2) {\n      if ($num < 4) {\n \
    \       $converted = str_repeat($hundreds[1], $num)\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphc_hzs1s.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $numeral_values = array(100, 90, 50, 40, 10, 9, 5, 4, 1);\n  $numeral_values_length\
    \ = count($numeral_values);\n  $numeral_symbols = array('c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i');\n  $result = '';\n  for ($i = 0; $i < $numeral_values_length;\
    \ $i++) {\n    while ($number >= $numeral_values[$i]) {\n      $result .= $numeral_symbols[$i];\n\
    \      $number -= $numeral_values[$i];\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8fl17s1.php:31\n\
    Stack trace:\n#0 /tmp/tmps8fl17s1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmps8fl17s1.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    // TODO: implement me!\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg62v64v6.php:18\n\
    Stack trace:\n#0 /tmp/tmpg62v64v6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpg62v64v6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $numeral = array(\n    0 => array('','i','ii','iii','iv','v','vi','vii','viii','ix'),\n\
    \    1 => array('','x','xx','xxx','xl','l','lx','lxx','lxxx','xc'),\n    2 =>\
    \ array('','c','cc','ccc','cd','d','dc','dcc','dccc','cm'),\n    3 => array('','m','mm','mmm')\n\
    \  );\n  // Iterate through our numerals array from 3 to 0\n  for ($level = 3;\
    \ $level >= 0; $level--) {\n    // Get the decimal value of the current $level's\
    \ position\n    $value = pow(10, $level);\n    // Determine the decimal index\
    \ of our $number in the current $level\n    $idx = (int) ($number / $value);\n\
    \    // Add the appropriate numeral to our roman numeral string\n    $roman .=\
    \ $numeral[$level][$idx];\n    // Determine the remainder left over from our $number\n\
    \    $number = $number % $value;\n  }\n  return $roman;\n}\n\necho int_to_mini_roman(19)\
    \ . \"\\n\";\necho int_to_mini_roman(152) . \"\\n\";\necho int_to_mini_roman(426)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "xix\nclii\ncdxxvi\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numeral_values = array(\n    1000 => 'm',\n    900 =>\
    \ 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n\
    \    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n\
    \    4 => 'iv',\n    1 => 'i'\n  );\n  foreach ($numeral_values as $value => $numeral)\
    \ {\n    while ($number >= $value) {\n      $result .= $numeral;\n      $number\
    \ -= $value;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
