name: HumanEval_68_pluck
language: php
results:
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (!$arr) {\n \
    \       return [];\n    }\n    $output = [];\n    $smallestValue = PHP_INT_MAX;\n\
    \    $smallestIndex = 0;\n    foreach ($arr as $index => $val) {\n        if ($val\
    \ % 2 === 0 && $val < $smallestValue) {\n            $smallestValue = $val;\n\
    \            $smallestIndex = $index;\n        }\n    }\n    if ($smallestValue\
    \ !== PHP_INT_MAX) {\n        $output[] = $smallestValue;\n        $output[] =\
    \ $smallestIndex;\n    }\n    return $output;\n}\n\n$test = [[4,2,3], [1,2,3],\
    \ [], [5, 0, 3, 0, 4, 2]];\n\nforeach ($test as $value) {\n    echo '[' . implode(',\
    \ ', $value) . '] => [' . implode(', ', pluck($value)) . ']' . PHP_EOL;\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[4, 2, 3] => [2, 1]\n[1, 2, 3] => [2, 1]\n[] => []\n[5, 0, 3, 0, 4, 2]\
    \ => [0, 1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    //1.Loop trhough\
    \ array.\n    //2.Check if value is even.\n    //3.Return [even value, index]\n\
    \    //4.Else return []\n    $evens = [];\n    $indexes = [];\n    $even_indexes\
    \ = [];\n    $smallest_even = null;\n    $smallest_index = null;\n    $result\
    \ = [];\n    for($i = 0; $i < count($arr); $i++) {\n        if($arr[$i] % 2 ==\
    \ 0) {\n            $evens[] = $arr[$i];\n            $indexes[] = $i;\n     \
    \   }\n    }\n    for($i = 0; $i < count($evens); $i++) {\n        if($evens[$i]\
    \ < $smallest_even || $smallest_even == null) {\n            $smallest_even =\
    \ $evens[$i];\n            $smallest_index = $indexes[$i];\n        }\n    }\n\
    \    if($smallest_even != null) {\n        $result[] = $smallest_even;\n     \
    \   $result[] = $smallest_index;\n    }\n    return $result;\n}\n\n$test1 = [1,2,3];\n\
    $test2 = [5,0,3,0,4,2];\n$test3 = [];\n$test4 = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpay2c2x0f.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // Write your code\
    \ here\n    // To print results to the standard output you can use print\n   \
    \ // Example: print \"Hello world!\";\n    $smallest_even = PHP_INT_MAX;\n   \
    \ $index = PHP_INT_MAX;\n    $found = false;\n    $arr = array_values($arr);\n\
    \    foreach ($arr as $i => $v) {\n        if ($v > 0 && $v % 2 == 0) {\n    \
    \        if ($v < $smallest_even) {\n                $found = true;\n        \
    \        $smallest_even = $v;\n                $index = $i;\n            }\n \
    \       }\n    }\n    if ($found) {\n        return [$smallest_even, $index];\n\
    \    }\n    return [];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1aykv4nu.php:57\n\
    Stack trace:\n#0 /tmp/tmp1aykv4nu.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp1aykv4nu.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if(empty($arr))\
    \ return [];\n    $isFound = false;\n    $result = [];\n    foreach($arr as $index\
    \ => $num) {\n        if($num % 2 == 0) {\n            if(!$isFound) {\n     \
    \           $result = [$num, $index];\n                $isFound = true;\n    \
    \        }\n            else {\n                if($num < $result[0]) {\n    \
    \                $result = [$num, $index];\n                }\n            }\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallest = null;\n\
    \    $index = null;\n    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0)\
    \ {\n            if ($smallest === null || $v < $smallest) {\n               \
    \ $smallest = $v;\n                $index = $i;\n            }\n        }\n  \
    \  }\n    if ($smallest === null) {\n        return [];\n    }\n    return [$smallest,\
    \ $index];\n}\nassert(pluck([4,2,3]) == [2, 1]);\nassert(pluck([1,2,3]) == [2,\
    \ 1]);\nassert(pluck([]) == []);\nassert(pluck([5, 0, 3, 0, 4, 2]) == [0, 1]);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $evenNumbers = [];\n\
    \  $evenIndexes = [];\n  foreach ($arr as $index => $value) {\n    if ($value\
    \ % 2 === 0) {\n      $evenNumbers[] = $value;\n      $evenIndexes[] = $index;\n\
    \    }\n  }\n  if (empty($evenNumbers)) {\n    return [];\n  } else {\n    $min\
    \ = min($evenNumbers);\n    $key = array_search($min, $evenNumbers);\n    return\
    \ [$min, $evenIndexes[$key]];\n  }\n}\n\n$tests = [];\n$tests[] = ['input' =>\
    \ [4, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [1, 2, 3], 'expect'\
    \ => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n$tests[] = ['input'\
    \ => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as $index =>\
    \ $test) {\n  $result = pluck($test['input']);\n  if ($test['expect'] !== $result)\
    \ {\n    echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n    exit;\n  }\n\
    }\n\necho 'Test good!' . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Test good!\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = PHP_INT_MAX;\n\
    \    $min_idx = PHP_INT_MAX;\n    $min_cnt = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] % 2 == 0) {\n            if ($arr[$i] < $min)\
    \ {\n                $min = $arr[$i];\n                $min_idx = $i;\n      \
    \          $min_cnt = 1;\n            } else if ($arr[$i] == $min) {\n       \
    \         $min_cnt++;\n            }\n        }\n    }\n    if ($min_cnt == 0)\
    \ {\n        return [];\n    }\n    return [$min, $min_idx];\n}\n$arr = [4,2,3];\n\
    $res = pluck($arr);\necho $res[0] . \",\" . $res[1] . PHP_EOL;\n$arr = [1,2,3];\n\
    $res = pluck($arr);\necho $res[0] . \",\" . $res[1] . PHP_EOL;\n$arr = [];\n$res\
    \ = pluck($arr);\necho $res[0] . \",\" . $res[1] . PHP_EOL;\n$arr = [5, 0, 3,\
    \ 0, 4, 2];\n$res = pluck($arr);\necho $res[0] . \",\" . $res[1] . PHP_EOL;\n\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2,1\n2,1\n,\n0,1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $even = [];\n  $even_index\
    \ = [];\n  foreach ($arr as $key => $value) {\n    if ($value % 2 == 0) {\n  \
    \    $even[] = $value;\n      $even_index[] = $key;\n    }\n  }\n  $min = min($even);\n\
    \  $min_key = array_search($min, $even);\n  return [$min, $even_index[$min_key]];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmpkn48biql.php\
    \ on line 36\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn48biql.php:48\n\
    Stack trace:\n#0 /tmp/tmpkn48biql.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpkn48biql.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    $result = null;\n    $result_pos = 0;\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 === 0) {\n     \
    \       if ($result === null) {\n                $result = $value;\n         \
    \       $result_pos = $key;\n            } else {\n                if ($value\
    \ < $result) {\n                    $result = $value;\n                    $result_pos\
    \ = $key;\n                }\n            }\n        }\n    }\n    if ($result\
    \ === null) {\n        return [];\n    }\n    return [$result, $result_pos];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (count($arr)\
    \ === 0) {\n        return [];\n    }\n    $even = [];\n    $r = [];\n    foreach\
    \ ($arr as $k => $v) {\n        if ($v % 2 === 0) {\n            $even[] = $v;\n\
    \            $r[$v] = $k;\n        }\n    }\n    if (count($even) === 0) {\n \
    \       return [];\n    }\n    $even = min($even);\n    return [$even, $r[$even]];\n\
    }\n\n$arr = [4,2,3];\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwx7u_kd.php:55\n\
    Stack trace:\n#0 /tmp/tmpzwx7u_kd.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpzwx7u_kd.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = INF;\n \
    \   $even_idx = -1;\n    foreach ($arr as $idx => $val) {\n        if ($val >\
    \ 0 && $val % 2 == 0 && $val < $even) {\n            $even = $val;\n         \
    \   $even_idx = $idx;\n        }\n    }\n    return $even_idx < 0 ? [] : [$even,\
    \ $even_idx];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd21lui_a.php:47\n\
    Stack trace:\n#0 /tmp/tmpd21lui_a.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpd21lui_a.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = null;\n \
    \   $idx = null;\n    foreach ($arr as $i => $num) {\n        if ($num % 2 ===\
    \ 0) {\n            if ($min === null || $num < $min) {\n                $min\
    \ = $num;\n                $idx = $i;\n            }\n        }\n    }\n    return\
    \ $min !== null ? [$min, $idx] : [];\n}\n\n$inputs = [\n    [4,2,3],\n    [1,2,3],\n\
    \    [],\n    [5, 0, 3, 0, 4, 2],\n];\n\nforeach ($inputs as $input) {\n    echo\
    \ json_encode(pluck($input)), PHP_EOL;\n}\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[2,1]\n[2,1]\n[]\n[0,1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $min_value = PHP_INT_MAX;\n    foreach ($arr as $i => $value) {\n       \
    \ if (($value % 2 == 0) && ($value < $min_value)) {\n            $min_value =\
    \ $value;\n            $result = [$value, $i];\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallestEven =\
    \ PHP_INT_MAX;\n    $smallestEvenPos = 0;\n    foreach ($arr as $pos => $value)\
    \ {\n        if ($value % 2 == 0 && $value < $smallestEven) {\n            $smallestEven\
    \ = $value;\n            $smallestEvenPos = $pos;\n        }\n    }\n    if ($smallestEven\
    \ == PHP_INT_MAX) {\n        return [];\n    }\n    return [$smallestEven, $smallestEvenPos];\n\
    }\n$input1 = [4,2,3];\n$input2 = [1,2,3];\n$input3 = [];\n$input4 = [5, 0, 3,\
    \ 0, 4, 2];\n$input5 = [2,1,0,3,4,0,7,6,8,9,10,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv4vpyjhk.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = INF;\n  \
    \  $minIndex = -1;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ % 2 == 0 && $arr[$i] < $min) {\n            $min = $arr[$i];\n            $minIndex\
    \ = $i;\n        }\n    }\n    if ($minIndex == -1) return [];\n    return [$min,\
    \ $minIndex];\n}\n$arr1 = [4,2,3];\n$arr2 = [1,2,3];\n$arr3 = [];\n$arr4 = [5,\
    \ 0, 3, 0, 4, 2];\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\nprint_r(pluck($arr3));\n\
    print_r(pluck($arr4));\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // edge cases\n\
    \    if (!$arr) return [];\n    // init variables\n    $sm_idx = null;\n    $sm_val\
    \ = null;\n    // loop through arr, keep track of smallest idx, and smallest value\n\
    \    foreach ($arr as $idx => $val) {\n        if ($val % 2 === 0) {\n       \
    \     if ($sm_val === null || $val < $sm_val) {\n                $sm_val = $val;\n\
    \                $sm_idx = $idx;\n            }\n        }\n    }\n    // return\
    \ result\n    return $sm_val === null ? [] : [$sm_val, $sm_idx];\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallestEven =\
    \ null;\n    $smallestEvenIndex = null;\n    foreach ($arr as $index => $value)\
    \ {\n        if ($value % 2 == 0) {\n            if ($smallestEven === null ||\
    \ $value < $smallestEven) {\n                $smallestEven = $value;\n       \
    \         $smallestEvenIndex = $index;\n            }\n        }\n    }\n    if\
    \ ($smallestEven === null) {\n        return [];\n    }\n    return [$smallestEven,\
    \ $smallestEvenIndex];\n}\n$tests = [];\n$tests[] = ['input' => [4,2,3], 'expect'\
    \ => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' => [2, 1]];\n$tests[]\
    \ = ['input' => [], 'expect' => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4, 2],\
    \ 'expect' => [0, 1]];\nforeach ($tests as $index => $test) {\n    $result = pluck($test['input']);\n\
    \    if ($test['expect'] != $result) {\n        echo 'Test fail at test' . ($index\
    \ + 1) . PHP_EOL;\n        exit;\n    }\n}\necho 'Test good!' . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Test good!\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $evens = [];\n  foreach\
    \ ($arr as $i => $val) {\n    if ($val % 2 === 0) {\n      $evens[] = [$val, $i];\n\
    \    }\n  }\n  if (empty($evens)) {\n    return [];\n  }\n  usort($evens, function($a,\
    \ $b) {\n    if ($a[0] > $b[0]) {\n      return 1;\n    } else if ($a[0] < $b[0])\
    \ {\n      return -1;\n    } else {\n      if ($a[1] > $b[1]) {\n        return\
    \ 1;\n      } else if ($a[1] < $b[1]) {\n        return -1;\n      } else {\n\
    \        return 0;\n      }\n    }\n  });\n  return $evens[0];\n}\n$ip1 = [4,2,3];\n\
    $op1 = [2, 1];\n$ip2 = [1,2,3];\n$op2 = [2, 1];\n$ip3 = [];\n$op3 = [];\n$ip4\
    \ = [5, 0, 3, 0, 4, 2];\n$op4 = [0, 1];\n$tests = [\n  [$ip1, $op1],\n  [$ip2,\
    \ $op2],\n  [$ip3, $op3],\n  [$ip4, $op4],\n];\n\nforeach ($tests as [$ip, $op])\
    \ {\n  $r = pluck($ip);\n  echo \"Input: \\n\";\n  echo json_encode($ip);\n  echo\
    \ \"\\nOutput: \\n\";\n  echo json_encode($r);\n  echo \"\\nExpected: \\n\";\n\
    \  echo json_encode($op);\n  echo \"\\n\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Input: \n[4,2,3]\nOutput: \n[2,1]\nExpected: \n[2,1]\n\nInput: \n[1,2,3]\n\
    Output: \n[2,1]\nExpected: \n[2,1]\n\nInput: \n[]\nOutput: \n[]\nExpected: \n\
    []\n\nInput: \n[5,0,3,0,4,2]\nOutput: \n[0,1]\nExpected: \n[0,1]\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallest_even =\
    \ null;\n    $smallest_even_idx = -1;\n    for ($i = 0; $i < count($arr); $i++)\
    \ {\n        if ($arr[$i] % 2 == 0) {\n            if (is_null($smallest_even))\
    \ {\n                $smallest_even = $arr[$i];\n                $smallest_even_idx\
    \ = $i;\n            } else if ($arr[$i] < $smallest_even) {\n               \
    \ $smallest_even = $arr[$i];\n                $smallest_even_idx = $i;\n     \
    \       }\n        }\n    }\n    if ($smallest_even_idx == -1) {\n        return\
    \ [];\n    }\n    return [$smallest_even, $smallest_even_idx];\n}\n\nclass PluckTest\
    \ extends TestCase {\n    public function test_examples() {\n        $this->assertEquals([2,\
    \ 1], pluck([4,2,3]));\n        $this->assertEquals([2, 1], pluck([1,2,3]));\n\
    \        $this->assertEquals([], pluck([]));\n        $this->assertEquals([0,\
    \ 1], pluck([5, 0, 3, 0, 4, 2]));\n    }\n}\n\n$t = new PluckTest();\n$t->test_examples();\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'TestCase' not found in /tmp/tmpozhb7aq0.php:47\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmpozhb7aq0.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $even = [];\n  $j\
    \ = 0;\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] % 2 == 0) {\n\
    \      $even[$j] = $arr[$i];\n      $j++;\n    }\n  }\n  $num = min($even);\n\
    \  $index = array_search($num, $arr);\n  return [$num, $index];\n}\n\nclass PluckTest\
    \ extends TestCase {\n  public function testPluck() {\n    $arr = [4, 2, 3];\n\
    \    $this->assertEquals([2, 1], pluck($arr));\n    $arr = [1, 2, 3];\n    $this->assertEquals([2,\
    \ 1], pluck($arr));\n    $arr = [];\n    $this->assertEquals([], pluck($arr));\n\
    \    $arr = [5, 0, 3, 0, 4, 2];\n    $this->assertEquals([0, 1], pluck($arr));\n\
    \  }\n}\n$t = new PluckTest();\n$t->testPluck();\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'TestCase' not found in /tmp/tmp1h78e3d0.php:41\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmp1h78e3d0.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallest = -1;\n\
    \    $index = -1;\n    $count = 0;\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            if ($smallest == -1) {\n         \
    \       $smallest = $value;\n                $index = $key;\n            } else\
    \ if ($value < $smallest) {\n                $smallest = $value;\n           \
    \     $index = $key;\n            }\n            $count++;\n        }\n    }\n\
    \    if ($count == 0) {\n        return [];\n    }\n    return [$smallest, $index];\n\
    }\n\necho json_encode(pluck([4,2,3])) . PHP_EOL;\necho json_encode(pluck([1,2,3]))\
    \ . PHP_EOL;\necho json_encode(pluck([])) . PHP_EOL;\necho json_encode(pluck([5,\
    \ 0, 3, 0, 4, 2])) . PHP_EOL;\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[2,1]\n[2,1]\n[]\n[0,1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (sizeof($arr)\
    \ === 0) return [];\n    $min = max($arr);\n    $smallest_index = 0;\n    $smallest_value\
    \ = 0;\n    foreach ($arr as $index => $value) {\n        if ($value % 2 === 0\
    \ && $value < $min) {\n            $min = $value;\n            $smallest_index\
    \ = $index;\n            $smallest_value = $value;\n        }\n    }\n    if ($smallest_value\
    \ === 0) return [];\n    return [$smallest_value, $smallest_index];\n}\necho '<pre>pluck([4,2,3])';\n\
    print_r(pluck([4,2,3]));\necho '</pre>';\necho '<pre>pluck([1,2,3])';\nprint_r(pluck([1,2,3]));\n\
    echo '</pre>';\necho '<pre>pluck([])';\nprint_r(pluck([]));\necho '</pre>';\n\
    echo '<pre>pluck([5, 0, 3, 0, 4, 2])';\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>pluck([4,2,3])Array\n(\n    [0] => 2\n    [1] => 1\n)\n</pre><pre>pluck([1,2,3])Array\n\
    (\n    [0] => 2\n    [1] => 1\n)\n</pre><pre>pluck([])Array\n(\n)\n</pre><pre>pluck([5,\
    \ 0, 3, 0, 4, 2])Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpyukf3pz0.php:62\nStack trace:\n#0 /tmp/tmpyukf3pz0.php(69): test()\n\
    #1 {main}\n  thrown in /tmp/tmpyukf3pz0.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $sorted = [];\n\
    \    $evens = [];\n    foreach ($arr as $val) {\n        if ($val % 2 == 0) {\n\
    \            $evens[] = $val;\n        }\n    }\n    if (count($evens) == 0) {\n\
    \        return [];\n    }\n    $lowest = min($evens);\n    foreach ($arr as $index\
    \ => $val) {\n        if ($val == $lowest) {\n            $sorted[] = $index;\n\
    \        }\n    }\n    return [$lowest, min($sorted)];\n}\necho 'Test 1:' . \"\
    \\n\";\necho var_export(pluck([4,2,3]), true) . \"\\n\";\necho 'Test 2:' . \"\\\
    n\";\necho var_export(pluck([1,2,3]), true) . \"\\n\";\necho 'Test 3:' . \"\\\
    n\";\necho var_export(pluck([]), true) . \"\\n\";\necho 'Test 4:' . \"\\n\";\n\
    echo var_export(pluck([5, 0, 3, 0, 4, 2]), true) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Test 1:\narray (\n  0 => 2,\n  1 => 1,\n)\nTest 2:\narray (\n  0 => 2,\n\
    \  1 => 1,\n)\nTest 3:\narray (\n)\nTest 4:\narray (\n  0 => 0,\n  1 => 1,\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if(empty($arr)){\n\
    \        return [];\n    }\n    sort($arr);\n    foreach($arr as $k => $v){\n\
    \        if($v % 2 == 0){\n            return [$v, $k];\n        }\n    }\n  \
    \  return [];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1g08og14.php:45\n\
    Stack trace:\n#0 /tmp/tmp1g08og14.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp1g08og14.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$min = $minIndex =\
    \ 0;\n\t$minExists = false;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value\
    \ % 2 == 0) {\n\t\t\tif (!$minExists) {\n\t\t\t\t$min = $value;\n\t\t\t\t$minIndex\
    \ = $key;\n\t\t\t\t$minExists = true;\n\t\t\t} else if ($value < $min) {\n\t\t\
    \t\t$min = $value;\n\t\t\t\t$minIndex = $key;\n\t\t\t}\n\t\t}\n\t}\n\tif ($minExists)\
    \ {\n\t\treturn [$min, $minIndex];\n\t} else {\n\t\treturn [];\n\t}\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $retArr = array();\n\
    \    $resIdx = 0;\n    if (empty($arr)) return $retArr;\n    $nArr = array_values($arr);\n\
    \    // print_r($nArr);\n    $idx = 0;\n    foreach ($nArr as $val) {\n      \
    \  if ($val % 2 == 0) {\n            $retArr[$resIdx++] = $val;\n            $retArr[$resIdx++]\
    \ = $idx;\n            break;\n        }\n        $idx++;\n    }\n    if ($resIdx\
    \ == 0) return $retArr;\n    $n = count($nArr);\n    for ($i = $idx + 1; $i <\
    \ $n; $i++) {\n        if ($nArr[$i] % 2 == 0 && $nArr[$i] < $retArr[0]) {\n \
    \           $retArr[0] = $nArr[$i];\n            $retArr[1] = $i;\n        }\n\
    \    }\n    return $retArr;\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $evenArr = [];\n \
    \ for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] % 2 == 0) {\n     \
    \ $evenArr[] = $arr[$i];\n    }\n  }\n  if (count($evenArr) == 0) {\n    return\
    \ [];\n  } else {\n    $smallestEven = min($evenArr);\n    $smallestEvenKey =\
    \ array_search($smallestEven, $arr);\n    return [$smallestEven, $smallestEvenKey];\n\
    \  }\n}\n$example1 = [4,2,3];\n$example2 = [1,2,3];\n$example3 = [];\n$example4\
    \ = [5, 0, 3, 0, 4, 2];\n\nprint_r(pluck($example1));\nprint_r(pluck($example2));\n\
    print_r(pluck($example3));\nprint_r(pluck($example4));\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = [];\n \
    \   foreach ($arr as $i => $el) {\n        if ($el % 2 === 0) {\n            $evens[]\
    \ = [$el, $i];\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    usort($evens, function ($a, $b) {\n        if ($a[0] === $b[0]) {\n\
    \            return $a[1] <=> $b[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $evens[0];\n}\necho implode(', ', pluck([4,2,3])) . PHP_EOL;\n\
    echo implode(', ', pluck([1,2,3])) . PHP_EOL;\necho implode(', ', pluck([])) .\
    \ PHP_EOL;\necho implode(', ', pluck([5, 0, 3, 0, 4, 2])) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2, 1\n2, 1\n\n0, 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = [];\n \
    \   $indexes = [];\n    foreach ($arr as $index => $el) {\n        if ($el % 2\
    \ === 0) {\n            $evens[] = $el;\n            $indexes[] = $index;\n  \
    \      }\n    }\n    if (count($evens) === 0) {\n        return [];\n    }\n \
    \   $index = 0;\n    $min = PHP_INT_MAX;\n    foreach ($evens as $i => $el) {\n\
    \        if ($el < $min) {\n            $min = $el;\n            $index = $i;\n\
    \        }\n    }\n    return [$min, $indexes[$index]];\n}\necho '<pre>';\nprint_r(pluck([4,2,3]));\n\
    print_r(pluck([1,2,3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\n\
    print_r(pluck([]));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n\
    \    [1] => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n\
    (\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // most efficient\
    \ and optimized version\n    if(!count($arr))\n        return [];\n    sort($arr);\n\
    \    foreach($arr as $k => $v) {\n        if($v % 2 == 0)\n            return\
    \ [$v, $k];\n    }\n    return [];\n    // my first version\n    // $minEven =\
    \ null;\n    // $minEvenIndex = null;\n    // foreach($arr as $k => $v) {\n  \
    \  //     if($v % 2 == 0) {\n    //         if($minEven == null || $v < $minEven)\
    \ {\n    //             $minEven = $v;\n    //             $minEvenIndex = $k;\n\
    \    //         }\n    //     }\n    // }\n    // if($minEven == null)\n    //\
    \     return [];\n    // return [$minEven, $minEvenIndex];\n}\necho \"[5, 0, 3,\
    \ 0, 4, 2] => \";\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\necho \"[] => \";\nprint_r(pluck([]));\n\
    echo \"[4,2,3] => \";\nprint_r(pluck([4,2,3]));\necho \"[1,2,3] => \";\nprint_r(pluck([1,2,3]));\n\
    echo \"[4,4,4] => \";\nprint_r(pluck([4,4,4]));\necho \"[4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxgnt_e73.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (count($arr)\
    \ == 0) return [];\n    $best = ['index' => PHP_INT_MAX, 'value' => PHP_INT_MAX];\n\
    \    foreach ($arr as $k => $v) {\n        if ($v % 2 == 0 && $v < $best['value'])\
    \ {\n            $best['index'] = $k;\n            $best['value'] = $v;\n    \
    \    }\n    }\n    if ($best['index'] == PHP_INT_MAX) return [];\n    return [$best['value'],\
    \ $best['index']];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$smallest = PHP_INT_MAX;\n\
    \t$smallestIndex = PHP_INT_MAX;\n\t$smallestValue = PHP_INT_MAX;\n\tforeach ($arr\
    \ as $index => $value) {\n\t\tif ($value % 2 == 0 && $value < $smallest) {\n\t\
    \t\t$smallest = $value;\n\t\t\t$smallestIndex = $index;\n\t\t\t$smallestValue\
    \ = $value;\n\t\t}\n\t}\n\tif ($smallestValue != PHP_INT_MAX) {\n\t\treturn [$smallestValue,\
    \ $smallestIndex];\n\t}\n\treturn [];\n}\n\necho \"FINAL: \" . print_r(pluck([4,2,3]),\
    \ true) . \"\\n\";\necho \"FINAL: \" . print_r(pluck([1,2,3]), true) . \"\\n\"\
    ;\necho \"FINAL: \" . print_r(pluck([]), true) . \"\\n\";\necho \"FINAL: \" .\
    \ print_r(pluck([5, 0, 3, 0, 4, 2]), true) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "FINAL: Array\n(\n    [0] => 2\n    [1] => 1\n)\n\nFINAL: Array\n(\n   \
    \ [0] => 2\n    [1] => 1\n)\n\nFINAL: Array\n(\n)\n\nFINAL: Array\n(\n    [0]\
    \ => 0\n    [1] => 1\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (count($arr)\
    \ < 1) return [];\n    $evens = [];\n    foreach ($arr as $idx => $item) {\n \
    \       if ($item % 2 == 0) {\n            $evens[] = [$item, $idx];\n       \
    \ }\n    }\n    if (count($evens) < 1) return [];\n    sort($evens);\n    return\
    \ array_shift($evens);\n}\n\ndo {\n    $len = mt_rand(1, 200);\n    $arr = [];\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $arr[] = mt_rand(0, 100000);\n \
    \   }\n    $len = mt_rand(1, 200);\n    $arr2 = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $arr2[] = mt_rand(0, 100000);\n    }\n    $res = pluck($arr);\n\
    \    echo \"Result: [{$res[0]}, {$res[1]}]\\n\";\n} while (true);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "b'Result: [1094, 14]\\nResult: [, ]\\nResult: [210, 56]\\nResult: [600,\
    \ 9]\\nResult: [4352, 0]\\nResult: [3432, 2]\\nResult: [4868, 41]\\nResult: [6846,\
    \ 10]\\nResult: [2520, 83]\\nResult: [84, 5]\\nResult: [3716, 72]\\nResult: [1042,\
    \ 8]\\nResult: [17840, 24]\\nResult: [728, 10]\\nResult: [3742, 109]\\nResult:\
    \ [8, 121]\\nResult: [12628, 24]\\nResult: [4522, 10]\\nResult: [1516, 33]\\nResult:\
    \ [1998, 3]\\nResult: [1790, 62]\\nResult: [5642, 56]\\nResult: [190, 33]\\nResult:\
    \ [1784, 0]\\nResult: [1366, 44]\\nResult: [39056, 2]\\nResult: [5006, 16]\\nResult:\
    \ [1734, 19]\\nResult: [848, 66]\\nResult: [3570, 107]\\nResult: [976, 144]\\\
    nResult: [206, 32]\\nResult: [1498, 56]\\nResult: [1536, 11]\\nResult: [8456,\
    \ 31]\\nResult: [502, 50]\\nResult: [1420, 47]\\nResult: [710, 2]\\nResult: [,\
    \ ]\\nResult: [2092, 10]\\nResult: [944, 72]\\nResult: [1460, 170]\\nResult: [472,\
    \ 16]\\nResult: [572, 64]\\nResult: [1124, 8]\\nResult: [2152, 112]\\nResult:\
    \ [396, 125]\\nResult: [2952, 58]\\nResult: [1406, 40]\\nResult: [264, 2]\\nResult:\
    \ [1274, 13]\\nResult: [722, 13]\\nResult: [1588, 132]\\nResult: [1098, 42]\\\
    nResult: [4318, 75]\\nResult: [1448, 5]\\nResult: [886, 69]\\nResult: [510, 128]\\\
    nResult: [250, 60]\\nResult: [10298, 3]\\nResult: [1638, 78]\\nResult: [296, 89]\\\
    nResult: [776, 84]\\nResult: [714, 47]\\nResult: [10180, 2]\\nResult: [4716, 101]\\\
    nResult: [492, 70]\\nResult: [4868, 10]\\nResult: [748, 7]\\nResult: [8740, 9]\\\
    nResult: [534, 18]\\nResult: [17816, 35]\\nResult: [2034, 40]\\nResult: [336,\
    \ 34]\\nResult: [11884, 1]\\nResult: [372, 33]\\nResult: [896, 49]\\nResult: [3144,\
    \ 64]\\nResult: [18684, 7]\\nResult: [1672, 101]\\nResult: [1084, 92]\\nResult:\
    \ [404, 101]\\nResult: [5972, 74]\\nResult: [628, 70]\\nResult: [6384, 7]\\nResult:\
    \ [2080, 36]\\nResult: [1690, 103]\\nResult: [7754, 1]\\nResult: [64, 41]\\nResult:\
    \ [1514, 3]\\nResult: [2118, 69]\\nResult: [23832, 10]\\nResult: [21498, 11]\\\
    nResult: [582, 133]\\nResult: [76556, 0]\\nResult: [5262, 21]\\nResult: [1964,\
    \ 127]\\nResult: [78, 90]\\nResult: [10560, 10]\\nResult: [3748, 12]\\nResult:\
    \ [2976, 12]\\nResult: [58986, 5]\\nResult: [596, 31]\\nResult: [248, 28]\\nResult:\
    \ [1446,"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  // your code here\n\
    \  $evens = [];\n  foreach ($arr as $key => $value) {\n    if ($value % 2 == 0)\
    \ {\n      $evens[] = [$value, $key];\n    }\n  }\n  if (count($evens) == 0) {\n\
    \    return [];\n  }\n  $smallest = $evens[0];\n  foreach ($evens as $key => $value)\
    \ {\n    if ($value[0] < $smallest[0]) {\n      $smallest = $value;\n    }\n \
    \ }\n  return $smallest;\n}\n$a = [4,2,3];\n$e = [2, 1];\necho \"Expected: \"\
    ;\nvar_dump($e);\necho \"Actual: \";\nvar_dump(pluck($a));\n$a = [1,2,3];\n$e\
    \ = [2, 1];\necho \"Expected: \";\nvar_dump($e);\necho \"Actual: \";\nvar_dump(pluck($a));\n\
    $a = [];\n$e = [];\necho \"Expected: \";\nvar_dump($e);\necho \"Actual: \";\n\
    var_dump(pluck($a));\n$a = [5, 0, 3, 0, 4, 2];\n$e = [0, 1];\necho \"Expected:\
    \ \";\nvar_dump($e);\necho \"Actual: \";\nvar_dump(pluck($a));\necho \"Done!\\\
    n\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Expected: array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\nActual:\
    \ array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\nExpected: array(2) {\n\
    \  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\nActual: array(2) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(1)\n}\nExpected: array(0) {\n}\nActual: array(0) {\n}\nExpected:\
    \ array(2) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n}\nActual: array(2) {\n  [0]=>\n\
    \  int(0)\n  [1]=>\n  int(1)\n}\nDone!\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            return [$value,\
    \ $key];\n        }\n    }\n    return [];\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1s7a5t_t.php:40\n\
    Stack trace:\n#0 /tmp/tmp1s7a5t_t.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1s7a5t_t.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  // your code here\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm95a3qfu.php:36\n\
    Stack trace:\n#0 /tmp/tmpm95a3qfu.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpm95a3qfu.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $small = null;\n \
    \ $index = null;\n  foreach ($arr as $key => $value) {\n    if ($value % 2 ==\
    \ 0) {\n      if ($small === null) {\n        $small = $value;\n        $index\
    \ = $key;\n      } else {\n        if ($value < $small) {\n          $small =\
    \ $value;\n          $index = $key;\n        }\n      }\n    }\n  }\n  if ($small\
    \ === null) {\n    return [];\n  }\n  return [$small, $index];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $arr_len = count($arr);\n\
    \    $even_nums = [];\n    $even_nums_indices = [];\n    $smallest_even_val =\
    \ null;\n    $smallest_even_idx = null;\n    if ($arr_len == 0) {\n        return\
    \ [];\n    }\n    for ($i = 0; $i < $arr_len; $i++) {\n        if ($arr[$i] %\
    \ 2 == 0) {\n            $even_nums[] = $arr[$i];\n            $even_nums_indices[]\
    \ = $i;\n        }\n    }\n    if (count($even_nums) == 0) {\n        return [];\n\
    \    }\n    $smallest_even_val = min($even_nums);\n    $smallest_even_idx = array_search($smallest_even_val,\
    \ $arr);\n    return [$smallest_even_val, $smallest_even_idx];\n}\n$res = pluck([4,2,3]);\n\
    var_dump($res);\n$res = pluck([1,2,3]);\nvar_dump($res);\n$res = pluck([]);\n\
    var_dump($res);\n$res = pluck([5, 0, 3, 0, 4, 2]);\nvar_dump($res);\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\narray(2) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(1)\n}\narray(0) {\n}\narray(2) {\n  [0]=>\n  int(0)\n\
    \  [1]=>\n  int(1)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $idx = array_search(min(array_filter($arr,\
    \ function($item) {\n        return ($item % 2 == 0);\n    })), $arr);\n    return\
    \ $idx !== false ? [$arr[$idx], $idx] : [];\n}\n\necho PHP_EOL;\nprint_r(pluck([4,2,3]));\n\
    print_r(pluck([1,2,3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\n\
    echo PHP_EOL;\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nArray\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n   \
    \ [1] => 1\n)\n\nWarning: min(): Array must contain at least one element in /tmp/tmprhmsn0k3.php\
    \ on line 30\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n\n\nWarning:\
    \ min(): Array must contain at least one element in /tmp/tmprhmsn0k3.php on line\
    \ 30\n\nWarning: min(): Array must contain at least one element in /tmp/tmprhmsn0k3.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    if (count($arr) == 0) {\n        return $result;\n    }\n    for ($i = 0;\
    \ $i < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0) {\n            if\
    \ (count($result) == 0) {\n                $result[] = $arr[$i];\n           \
    \     $result[] = $i;\n            } else {\n                if ($arr[$i] < $result[0])\
    \ {\n                    $result[0] = $arr[$i];\n                    $result[1]\
    \ = $i;\n                }\n            }\n        }\n    }\n    return $result;\n\
    }\n\necho implode(\" \", pluck([5, 0, 3, 0, 4, 2]));\necho \"\\n\";\necho implode(\"\
    \ \", pluck([4, 2, 3]));\necho \"\\n\";\necho implode(\" \", pluck([1, 2, 3]));\n\
    echo \"\\n\";\necho implode(\" \", pluck([]));\necho \"\\n\";\necho implode(\"\
    \ \", pluck([1, 4, 0, 3, 5, 0, 4, 2]));\necho \"\\n\";\necho implode(\" \", pluck([3,\
    \ 5, 0, 4, 2]));\necho \"\\n\";\necho implode(\" \", pluck([1, 4, 0, 3, 5, 0,\
    \ 4, 2, 1, 4, 0, 3, 5, 0, 4, 2]));\necho \"\\n\";\necho implode(\" \", pluck([1,\
    \ 4, 0, 3, 5, 0, 4, 2, 1, 4, 0, 3, 5, 0, 4, 2, 1, 4, 0, 3, 5, 0, 4, 2]));\necho\
    \ \"\\n\";\necho implode(\" \", pluck([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1,\
    \ 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3,\
    \ 2, 1, 2, 3, 2, 1, 2\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkb5dc1b6.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $len = count($arr);\n\
    \    $minEven = INF;\n    $minIndex = INF;\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if (($arr[$i] % 2 == 0) && ($arr[$i] < $minEven)) {\n           \
    \ $minEven = $arr[$i];\n            $minIndex = $i;\n        }\n    }\n    if\
    \ ($minEven == INF) {\n        return [];\n    }\n    return [$minEven, $minIndex];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = $odd = [];\n\
    \    $idx = -1;\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            if ($idx == -1) {\n                $idx = $key;\n   \
    \         }\n            $even[] = $value;\n        } else {\n            $odd[]\
    \ = $value;\n        }\n    }\n    if ($idx == -1) {\n        return [];\n   \
    \ }\n    sort($even);\n    $min_even = $even[0];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value == $min_even) {\n            return [$value, $key];\n\
    \        }\n    }\n}\n\n$array = [4, 2, 3];\nprint_r(pluck($array));\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // Write your code\
    \ here\n    // To print results to the standard output you can use print\n   \
    \ // Example: print \"Hello world!\";\n    \n    $smallestEven = PHP_INT_MAX;\n\
    \    $index = PHP_INT_MAX;\n    for ($i = 0; $i < count($arr); $i++) {\n     \
    \   if ($arr[$i] % 2 == 0 && $arr[$i] < $smallestEven) {\n            $smallestEven\
    \ = $arr[$i];\n            $index = $i;\n        }\n    }\n    if ($smallestEven\
    \ == PHP_INT_MAX) {\n        return [];\n    }\n    return [$smallestEven, $index];\n\
    }\n\n$arr = [1,2,3];\nprint_r(pluck($arr));\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$evens = [];\n\tforeach\
    \ ($arr as $idx => $val) {\n\t\tif ($val % 2 == 0) {\n\t\t\t$evens[] = [ $val,\
    \ $idx ];\n\t\t}\n\t}\n\tusort($evens, function($a, $b) {\n\t\tif ($a[0] == $b[0])\
    \ {\n\t\t\treturn $a[1] - $b[1];\n\t\t}\n\t\treturn $a[0] - $b[0];\n\t});\n\t\
    return empty($evens) ? [] : $evens[0];\n}\n\necho implode(', ', pluck([4,2,3]))\
    \ . \"\\n\";\necho implode(', ', pluck([1,2,3])) . \"\\n\";\necho implode(', ',\
    \ pluck([])) . \"\\n\";\necho implode(', ', pluck([5, 0, 3, 0, 4, 2])) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2, 1\n2, 1\n\n0, 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ return [];\n    $even = [];\n    foreach ($arr as $i => $v) {\n        if ($v\
    \ % 2 == 0) $even[] = [$v, $i];\n    }\n    if (empty($even)) return [];\n   \
    \ usort($even, function($a, $b) {\n        if ($a[0] == $b[0]) return $a[1] -\
    \ $b[1];\n        return $a[0] - $b[0];\n    });\n    return $even[0];\n}\n\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if(empty($arr)){\n\
    \        return [];\n    }\n    $smallestEven = PHP_INT_MAX;\n    $smallestEvenIndex\
    \ = 0;\n    for($i = 0; $i < count($arr); $i++){\n        if($arr[$i] % 2 == 0\
    \ && $arr[$i] < $smallestEven){\n            $smallestEven = $arr[$i];\n     \
    \       $smallestEvenIndex = $i;\n        }\n    }\n    if($smallestEven == PHP_INT_MAX){\n\
    \        return [];\n    }\n    return [$smallestEven, $smallestEvenIndex];\n\
    }\n\necho pluck([4,2,3]) . PHP_EOL;\necho pluck([1,2,3]) . PHP_EOL;\necho pluck([])\
    \ . PHP_EOL;\necho pluck([5, 0, 3, 0, 4, 2]) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nArray\nArray\nArray\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // YOUR CODE HERE\n\
    \    // [ 1 ]\n    // [ 1, 2, 3 ]\n    // []\n    // [ 5, 0, 3, 0, 4, 2 ]\n  \
    \  $smallestIndex = [];\n    $smallestEven = null;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $value = $arr[$i];\n        if ($value % 2 == 0) {\n      \
    \      if ($smallestEven == null) {\n                $smallestEven = $value;\n\
    \                $smallestIndex[] = $i;\n            } else {\n              \
    \  if ($value < $smallestEven) {\n                    $smallestEven = $value;\n\
    \                    $smallestIndex = [$i];\n                } else if ($value\
    \ == $smallestEven) {\n                    $smallestIndex[] = $i;\n          \
    \      }\n            }\n        }\n    }\n    $smallest = $smallestIndex[0];\n\
    \    if (count($smallestIndex) > 1) {\n        for ($i = 1; $i < count($smallestIndex);\
    \ $i++) {\n            if ($smallestIndex[$i] < $smallest) {\n               \
    \ $smallest = $smallestIndex[$i];\n            }\n        }\n    }\n    return\
    \ [$smallestEven, $smallest];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2v4_ijw.php:68\n\
    Stack trace:\n#0 /tmp/tmpq2v4_ijw.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpq2v4_ijw.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ return [];\n    sort($arr);\n    $result = [];\n    foreach ($arr as $k => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $result = [$value, $k];\n   \
    \         break;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhle9jll.php:45\n\
    Stack trace:\n#0 /tmp/tmpqhle9jll.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqhle9jll.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $minEven = null;\n\
    \    $minIndex = null;\n    foreach ($arr as $i => $num) {\n        if ($num %\
    \ 2 === 0) {\n            if ($minEven === null || $num < $minEven) {\n      \
    \          $minEven = $num;\n                $minIndex = $i;\n            }\n\
    \        }\n    }\n    if ($minEven === null) {\n        return [];\n    }\n \
    \   return [$minEven, $minIndex];\n}\n\necho implode(\", \", pluck([4,2,3])) .\
    \ \"\\n\";\necho implode(\", \", pluck([1,2,3])) . \"\\n\";\necho implode(\",\
    \ \", pluck([])) . \"\\n\";\necho implode(\", \", pluck([5, 0, 3, 0, 4, 2])) .\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2, 1\n2, 1\n\n0, 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    $result = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $result[] = [$value,\
    \ $key];\n        }\n    }\n    if (empty($result)) {\n        return [];\n  \
    \  }\n    $min = $result[0][0];\n    $pos = 0;\n    foreach ($result as $k =>\
    \ $val) {\n        if ($val[0] < $min) {\n            $min = $val[0];\n      \
    \      $pos = $k;\n        }\n    }\n    return $result[$pos];\n}\nprint_r(pluck([4,2,3]));\n\
    print_r(pluck([1,2,3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    $res = [];\n    $index = 0;\n    foreach ($arr\
    \ as $val) {\n        if ($val % 2 == 0) {\n            $res[$index] = $val;\n\
    \        }\n        $index++;\n    }\n    $keys = array_keys($res);\n    if (empty($res))\
    \ {\n        return [];\n    }\n    $final_key = array_search(min($res), $res);\n\
    \    $final_value = min($res);\n    return [$final_value, $final_key];\n}\nprint_r(pluck([4,2,3]));\n\
    print_r(pluck([1,2,3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smalestEvenValue\
    \ = null;\n    $arrIndex = null;\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            if ($smalestEvenValue === null) {\n\
    \                $smalestEvenValue = $value;\n                $arrIndex = $key;\n\
    \            } else {\n                if ($value < $smalestEvenValue) {\n   \
    \                 $smalestEvenValue = $value;\n                    $arrIndex =\
    \ $key;\n                }\n            }\n        }\n    }\n    if ($smalestEvenValue\
    \ === null) {\n        return [];\n    }\n    return [$smalestEvenValue, $arrIndex];\n\
    }\n\necho json_encode(pluck([4, 2, 3])); // [2, 1]\necho \"\\n\";\necho json_encode(pluck([1,\
    \ 2, 3])); // [2, 1]\necho \"\\n\";\necho json_encode(pluck([])); // []\necho\
    \ \"\\n\";\necho json_encode(pluck([5, 0, 3, 0, 4, 2])); // [0, 1]\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[2,1]\n[2,1]\n[]\n[0,1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $sorted = [];\n\
    \    $smallest = null;\n    $index = null;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] % 2 == 0) {\n            $sorted[] = $arr[$i];\n\
    \        }\n    }\n    if (!count($sorted)) {\n        return [];\n    }\n   \
    \ for ($i = 0; $i < count($sorted); $i++) {\n        if ($smallest == null ||\
    \ $sorted[$i] < $smallest) {\n            $smallest = $sorted[$i];\n         \
    \   $index = $i;\n        }\n    }\n    return [$smallest, $index];\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98z4h6qg.php:53\n\
    Stack trace:\n#0 /tmp/tmp98z4h6qg.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp98z4h6qg.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$plucked = [];\n\t\
    $even = false;\n\t$smallest = null;\n\t$index = -1;\n\tforeach ($arr as $key =>\
    \ $value) {\n\t\tif ($value % 2 == 0) {\n\t\t\t$even = true;\n\t\t\tif ($smallest\
    \ == null || $value < $smallest) {\n\t\t\t\t$smallest = $value;\n\t\t\t\t$index\
    \ = $key;\n\t\t\t}\n\t\t}\n\t}\n\tif ($even) {\n\t\t$plucked[] = $smallest;\n\t\
    \t$plucked[] = $index;\n\t}\n\treturn $plucked;\n}\n\n$arr = [4,2,3];\n$arr =\
    \ [1,2,3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(5)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpu_pu6im_.php:61\nStack trace:\n#0 /tmp/tmpu_pu6im_.php(68):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu_pu6im_.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $a = array_filter($arr,\
    \ function($i) {\n        return $i % 2 == 0;\n    });\n    if(!$a) {\n      \
    \  return [];\n    }\n    $b = array_search(min($a), $arr);\n    return [min($a),\
    \ $b];\n}\n\n$a = [4,2,3];\n$a = [1,2,3];\n$a = [];\n$a = [5, 0, 3, 0, 4, 2];\n\
    \nprint_r(pluck($a));\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallestEven =\
    \ PHP_INT_MAX;\n    $smallestIndex = PHP_INT_MAX;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] % 2 == 0 && $arr[$i] < $smallestEven) {\n    \
    \        $smallestEven = $arr[$i];\n            $smallestIndex = $i;\n       \
    \ }\n    }\n    if ($smallestEven == PHP_INT_MAX) {\n        return [];\n    }\n\
    \    return [$smallestEven, $smallestIndex];\n}\necho '<pre>'; print_r(pluck([4,2,3]));\
    \ echo '</pre>';\necho '<pre>'; print_r(pluck([1,2,3])); echo '</pre>';\necho\
    \ '<pre>'; print_r(pluck([])); echo '</pre>';\necho '<pre>'; print_r(pluck([5,\
    \ 0, 3, 0, 4, 2])); echo '</pre>';\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 1\n)\n</pre><pre>Array\n(\n   \
    \ [0] => 2\n    [1] => 1\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n   \
    \ [0] => 0\n    [1] => 1\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if(sizeof($arr)\
    \ == 0){\n        return [];\n    }\n    $evens = [];\n    $min = 0;\n    for($i\
    \ = 0; $i < sizeof($arr); $i++){\n        if($arr[$i] % 2 == 0){\n           \
    \ array_push($evens, $arr[$i]);\n        }\n    }\n    if(sizeof($evens) == 0){\n\
    \        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n$tests = [\n    [[4,2,3], [2, 1]],\n\
    \    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n  \
    \  [[2, 4, 0, 6, 8, 10], [0, 2]],\n    [[2, 1, 0, 6, 8, 10], [0, 2]],\n    [[1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 1]],\n    [[1, 3, 5, 7, 9], []],\n    [[2,\
    \ 3, 0, 6, 8, 10], [0, 2]],\n    [[8, 1, 7, 5, 6, 9, 4, 0, 2, 3], [0, 8]],\n \
    \   [[-2, -4, 0, -6, -8, -10], [0, 2]],\n    [[-2, -4, 0, -6, -8, -10], [0, 2]],\n\
    \    [[-2, -4, 0, -6, -8, -10], [0, 2]],\n    [[-2, -4, 0, -6, -8, -10], [0, 2]],\n\
    \    [[-2, -4, 0, -6, -8, -10], [0, 2]],\n    [[-2, -4, 0, -6, -8, -10], [0, 2]],\n\
    \    [[-2, -4, 0, -6, -\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4mbg28uq.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (!$arr) {\n \
    \       return [];\n    }\n    $even = [];\n    $odd = [];\n    foreach ($arr\
    \ as $i => $v) {\n        if ($v % 2 == 0) {\n            $even[] = $v;\n    \
    \    } else {\n            $odd[] = $v;\n        }\n    }\n    if (!$even) {\n\
    \        return [];\n    }\n    if (!$odd) {\n        return [min($even), array_search(min($even),\
    \ $arr)];\n    }\n    if (min($even) < min($odd)) {\n        return [min($even),\
    \ array_search(min($even), $arr)];\n    } else {\n        return [min($odd), array_search(min($odd),\
    \ $arr)];\n    }\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjvlm12rn.php:59\n\
    Stack trace:\n#0 /tmp/tmpjvlm12rn.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpjvlm12rn.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = array_filter($arr,\
    \ function($x) { return $x % 2 == 0; });\n    if (count($even) > 0) {\n      \
    \  asort($even);\n        $res = array_search(reset($even), $arr);\n        return\
    \ [reset($even), $res];\n    }\n    return [];\n}\n$arr = [1,2,3];\necho print_r(pluck($arr),\
    \ true).\"\\n\"; // [2, 1]\n$arr = [4,2,3];\necho print_r(pluck($arr), true).\"\
    \\n\"; // [2, 1]\n$arr = [5, 0, 3, 0, 4, 2];\necho print_r(pluck($arr), true).\"\
    \\n\"; // [0, 1]\n$arr = [];\necho print_r(pluck($arr), true).\"\\n\"; // []\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n\nArray\n(\n    [0] => 2\n   \
    \ [1] => 1\n)\n\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n\nArray\n(\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$min = null;\n\t$index\
    \ = null;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value % 2 == 0) {\n\t\
    \t\tif ($min == null) {\n\t\t\t\t$min = $value;\n\t\t\t\t$index = $key;\n\t\t\t\
    } else if ($value < $min) {\n\t\t\t\t$min = $value;\n\t\t\t\t$index = $key;\n\t\
    \t\t}\n\t\t}\n\t}\n\tif ($min == null) {\n\t\treturn [];\n\t}\n\treturn [$min,\
    \ $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9nr5gjj.php:55\n\
    Stack trace:\n#0 /tmp/tmpf9nr5gjj.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpf9nr5gjj.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallestEvenValue\
    \ = -1;\n    $currentIndex = -1;\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            if ($smallestEvenValue == -1) {\n  \
    \              $smallestEvenValue = $value;\n                $currentIndex = $key;\n\
    \            } else if ($value < $smallestEvenValue) {\n                $smallestEvenValue\
    \ = $value;\n                $currentIndex = $key;\n            }\n        }\n\
    \    }\n    if ($smallestEvenValue == -1) {\n        return [];\n    }\n    return\
    \ [$smallestEvenValue, $currentIndex];\n}\necho var_export(pluck([4,2,3]), true).\"\
    \\n\"; // [2, 1]\necho var_export(pluck([1,2,3]), true).\"\\n\"; // [2, 1]\necho\
    \ var_export(pluck([]), true).\"\\n\"; // []\necho var_export(pluck([5, 0, 3,\
    \ 0, 4, 2]), true).\"\\n\"; // [0, 1]\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array (\n  0 => 2,\n  1 => 1,\n)\narray (\n  0 => 2,\n  1 => 1,\n)\narray\
    \ (\n)\narray (\n  0 => 0,\n  1 => 1,\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $min = PHP_INT_MAX;\n    $min_idx = -1;\n    foreach ($arr as $idx => $val)\
    \ {\n        if ($val % 2 === 0 && $val < $min) {\n            $min = $val;\n\
    \            $min_idx = $idx;\n        }\n    }\n    if ($min_idx !== -1) {\n\
    \        $result = [$min, $min_idx];\n    }\n    return $result;\n}\necho \"Test\
    \ 1: \" . (implode(\",\", pluck([4,2,3])) === \"2,1\" ? \"Pass\" : \"Fail\") .\
    \ \"\\n\";\necho \"Test 2: \" . (implode(\",\", pluck([1,2,3])) === \"2,1\" ?\
    \ \"Pass\" : \"Fail\") . \"\\n\";\necho \"Test 3: \" . (implode(\",\", pluck([]))\
    \ === \"\" ? \"Pass\" : \"Fail\") . \"\\n\";\necho \"Test 4: \" . (implode(\"\
    ,\", pluck([5, 0, 3, 0, 4, 2])) === \"0,1\" ? \"Pass\" : \"Fail\") . \"\\n\";\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Test 1: Pass\nTest 2: Pass\nTest 3: Pass\nTest 4: Pass\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    $res = [];\n    $minEven = PHP_INT_MAX;\n\
    \    $minEvenIndex = PHP_INT_MAX;\n    foreach ($arr as $index => $value) {\n\
    \        if (is_even($value) && $value < $minEven) {\n            $minEven = $value;\n\
    \            $minEvenIndex = $index;\n        }\n    }\n    if ($minEven === PHP_INT_MAX)\
    \ {\n        return [];\n    }\n    return [$minEven, $minEvenIndex];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_even() in\
    \ /tmp/tmpnchqu4vc.php:35\nStack trace:\n#0 /tmp/tmpnchqu4vc.php(47): pluck(Array)\n\
    #1 /tmp/tmpnchqu4vc.php(51): candidate(Array)\n#2 /tmp/tmpnchqu4vc.php(61): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnchqu4vc.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$n = count($arr);\n\
    \tif ($n == 0) {\n\t\treturn [];\n\t}\n\t$idx = -1;\n\t$min = PHP_INT_MAX;\n\t\
    for ($i = 0; $i < $n; $i++) {\n\t\tif ($arr[$i] % 2 == 0 && $arr[$i] < $min) {\n\
    \t\t\t$min = $arr[$i];\n\t\t\t$idx = $i;\n\t\t}\n\t}\n\tif ($idx == -1) {\n\t\t\
    return [];\n\t}\n\treturn [$min, $idx];\n}\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = PHP_INT_MAX;\n\
    \    $index = 0;\n    $found = false;\n    $minIndex = 0;\n    for ($i = 0; $i\
    \ < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0) {\n            $found\
    \ = true;\n            if ($arr[$i] < $min) {\n                $min = $arr[$i];\n\
    \                $minIndex = $i;\n            }\n        }\n    }\n    if ($found)\
    \ {\n        return [$min, $minIndex];\n    }\n    return [];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $output = [];\n  $min\
    \ = PHP_INT_MAX;\n  $is_found = false;\n  for ($i = 0; $i < count($arr); $i++)\
    \ {\n    if ($arr[$i] % 2 == 0) {\n      if ($arr[$i] < $min) {\n        $output\
    \ = [$arr[$i], $i];\n        $min = $arr[$i];\n        $is_found = true;\n   \
    \   }\n    }\n  }\n  if ($is_found) {\n    return $output;\n  } else {\n    return\
    \ [];\n  }\n}\n\n$a = pluck([4,2,3]);\n$b = pluck([1,2,3]);\n$c = pluck([]);\n\
    $d = pluck([5, 0, 3, 0, 4, 2]);\nprint_r($a);\nprint_r($b);\nprint_r($c);\nprint_r($d);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $r = [];\n    $s\
    \ = null;\n    $min = PHP_INT_MAX;\n    foreach ($arr as $k => $v) {\n       \
    \ if ($v % 2 == 0 && $v < $min) {\n            $min = $v;\n            $s = $k;\n\
    \        }\n    }\n    if ($s !== null) {\n        $r[] = $min;\n        $r[]\
    \ = $s;\n    }\n    return $r;\n}\n$tests = [];\n$tests[] = ['input' => [4,2,3],\
    \ 'expect' => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expect' => [2, 1]];\n\
    $tests[] = ['input' => [], 'expect' => []];\n$tests[] = ['input' => [5, 0, 3,\
    \ 0, 4, 2], 'expect' => [0, 1]];\nforeach ($tests as $i => $test) {\n    $result\
    \ = pluck($test['input']);\n    if ($test['expect'] !== $result) {\n        echo\
    \ \"Test{$i} failed.\\n\";\n        echo \"Expect:\\n\";\n        print_r($test['expect']);\n\
    \        echo \"Result:\\n\";\n        print_r($result);\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $length = count($arr);\n\
    \    $returnArr = [];\n    $indexOfMinEven = -1;\n    $minEven = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $length; $i++) {\n        if ($arr[$i] % 2 == 0 && $arr[$i]\
    \ < $minEven) {\n            $minEven = $arr[$i];\n            $indexOfMinEven\
    \ = $i;\n        }\n    }\n    if ($indexOfMinEven != -1) {\n        $returnArr[]\
    \ = $minEven;\n        $returnArr[] = $indexOfMinEven;\n    }\n    return $returnArr;\n\
    }\n$input = [4,2,3];\n$ret = pluck($input);\necho \"Input: \", json_encode($input),\
    \ \"\\n\";\necho \"Output: \", json_encode($ret), \"\\n\";\n\n$input = [1,2,3];\n\
    $ret = pluck($input);\necho \"Input: \", json_encode($input), \"\\n\";\necho \"\
    Output: \", json_encode($ret), \"\\n\";\n\n$input = [];\n$ret = pluck($input);\n\
    echo \"Input: \", json_encode($input), \"\\n\";\necho \"Output: \", json_encode($ret),\
    \ \"\\n\";\n\n$input = [5, 0, 3, 0, 4, 2];\n$ret = pluck($input);\necho \"Input:\
    \ \", json_encode($input), \"\\n\";\necho \"Output: \", json_encode($ret), \"\\\
    n\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Input: [4,2,3]\nOutput: [2,1]\nInput: [1,2,3]\nOutput: [2,1]\nInput: []\n\
    Output: []\nInput: [5,0,3,0,4,2]\nOutput: [0,1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $sorted = sort($arr);\n\
    \    $arr = [];\n    foreach ($sorted as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            array_push($arr, $value);\n        }\n    }\n    return\
    \ $arr;\n}\n\n$result = pluck([4,2,3]);\necho implode(', ', $result);\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpawwq85mf.php\
    \ on line 30\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpawwq85mf.php\
    \ on line 30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawwq85mf.php:45\n\
    Stack trace:\n#0 /tmp/tmpawwq85mf.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpawwq85mf.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $even_arr = [];\n\
    \  foreach ($arr as $key => $value) {\n    if (is_even($value)) {\n      $even_arr[]\
    \ = [$value, $key];\n    }\n  }\n  // get first element and sort by value\n  usort($even_arr,\
    \ function($a, $b) {\n    if ($a[0] === $b[0]) {\n      return 0;\n    }\n   \
    \ return ($a[0] < $b[0]) ? -1 : 1;\n  });\n  if (count($even_arr) > 0) {\n   \
    \ return array_shift($even_arr);\n  }\n  return [];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_even() in\
    \ /tmp/tmpy40hmunv.php:30\nStack trace:\n#0 /tmp/tmpy40hmunv.php(47): pluck(Array)\n\
    #1 /tmp/tmpy40hmunv.php(51): candidate(Array)\n#2 /tmp/tmpy40hmunv.php(61): test()\n\
    #3 {main}\n  thrown in /tmp/tmpy40hmunv.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $arrEven = array_filter($arr,\
    \ function($x) {\n        return $x % 2 == 0;\n    });\n    $smallestEvenValue\
    \ = min($arrEven);\n    $index = array_search($smallestEvenValue, $arr);\n   \
    \ return [$smallestEvenValue, $index];\n}\n$arr1 = [4,2,3];\n$arr2 = [1,2,3];\n\
    $arr3 = [];\n$arr4 = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\n\
    print_r(pluck($arr3));\nprint_r(pluck($arr4));\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\n\nWarning: min(): Array must contain at least one element in /tmp/tmp9oy5xzed.php\
    \ on line 31\nArray\n(\n    [0] => \n    [1] => \n)\nArray\n(\n    [0] => 0\n\
    \    [1] => 1\n)\n\nWarning: min(): Array must contain at least one element in\
    \ /tmp/tmp9oy5xzed.php on line 31\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9oy5xzed.php:51\nStack trace:\n#0 /tmp/tmp9oy5xzed.php(59): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9oy5xzed.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    $min = PHP_INT_MAX;\n    $idx = 0;\n    foreach\
    \ ($arr as $i => $v) {\n        if ($v % 2 == 0 && $v < $min) {\n            $min\
    \ = $v;\n            $idx = $i;\n        }\n    }\n    if ($min == PHP_INT_MAX)\
    \ {\n        return [];\n    }\n    return [$min, $idx];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    $smallestEven = null;\n    $evenIdx = null;\n\
    \    foreach ($arr as $idx => $val) {\n        if ($val % 2 == 0) {\n        \
    \    if ($smallestEven === null || $val < $smallestEven) {\n                $smallestEven\
    \ = $val;\n                $evenIdx = $idx;\n            }\n        }\n    }\n\
    \    if ($smallestEven === null) {\n        return [];\n    }\n    return [$smallestEven,\
    \ $evenIdx];\n}\n\n$tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n\
    \    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as [$input,\
    \ $expected]) {\n    $result = pluck($input);\n    echo \"input = \", implode(',\
    \ ', $input), \"\\n\";\n    echo \"result = \", implode(', ', $result), \"\\n\"\
    ;\n    echo \"expected = \", implode(', ', $expected), \"\\n\";\n    if ($result\
    \ === $expected) {\n        echo \"OK\\n\";\n    } else {\n        echo \"ERROR\\\
    n\";\n    }\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "input = 4, 2, 3\nresult = 2, 1\nexpected = 2, 1\nOK\ninput = 1, 2, 3\n\
    result = 2, 1\nexpected = 2, 1\nOK\ninput = \nresult = \nexpected = \nOK\ninput\
    \ = 5, 0, 3, 0, 4, 2\nresult = 0, 1\nexpected = 0, 1\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallest_even =\
    \ PHP_INT_MAX;\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        if ($arr[$i] % 2 == 0 && $arr[$i] < $smallest_even) {\n            $smallest_even\
    \ = $arr[$i];\n            $result = [$smallest_even, $i];\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$length = count($arr);\n\
    \t$result = [];\n\tif ($length == 0) {\n\t\treturn $result;\n\t}\n\t$min = $arr[0];\n\
    \t$minIndex = 0;\n\t$isFound = false;\n\tfor ($i = 0; $i < $length; $i++) {\n\t\
    \tif ($arr[$i] % 2 == 0) {\n\t\t\tif (!$isFound) {\n\t\t\t\t$min = $arr[$i];\n\
    \t\t\t\t$minIndex = $i;\n\t\t\t\t$isFound = true;\n\t\t\t} else {\n\t\t\t\tif\
    \ ($arr[$i] < $min) {\n\t\t\t\t\t$min = $arr[$i];\n\t\t\t\t\t$minIndex = $i;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ($isFound) {\n\t\t$result[0] = $min;\n\t\t\
    $result[1] = $minIndex;\n\t}\n\treturn $result;\n}\n\n$arr = [4, 2, 3];\n$result\
    \ = pluck($arr);\nprint_r($result);\necho PHP_EOL;\n\n$arr = [1, 2, 3];\n$result\
    \ = pluck($arr);\nprint_r($result);\necho PHP_EOL;\n\n$arr = [];\n$result = pluck($arr);\n\
    print_r($result);\necho PHP_EOL;\n\n$arr = [5, 0, 3, 0, 4, 2];\n$result = pluck($arr);\n\
    print_r($result);\necho PHP_EOL;\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n\nArray\n(\n    [0] => 2\n   \
    \ [1] => 1\n)\n\nArray\n(\n)\n\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallest = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        if (count($smallest) == 0) {\n                $smallest = [$value, $key];\n\
    \            } else {\n                if ($value < $smallest[0]) {\n        \
    \            $smallest = [$value, $key];\n                }\n            }\n \
    \       }\n    }\n    return $smallest;\n}\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    $arr = [4, 2, 3];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    $arr = [];\nprint_r(pluck($arr));\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    //$arr = [4,2,3];\n\
    \    //$arr = [5, 0, 3, 0, 4, 2];\n    //$arr = [1,2,3];\n    //$arr = [];\n \
    \   $smallest_even = null;\n    $smallest_even_index = null;\n    $first_even_found\
    \ = false;\n    foreach ($arr as $k => $v) {\n        if ($v % 2 == 0) {\n   \
    \         if (!$first_even_found) {\n                $smallest_even = $v;\n  \
    \              $smallest_even_index = $k;\n                $first_even_found =\
    \ true;\n            } else {\n                if ($v < $smallest_even) {\n  \
    \                  $smallest_even = $v;\n                    $smallest_even_index\
    \ = $k;\n                }\n            }\n        }\n    }\n    return $first_even_found\
    \ ? [$smallest_even, $smallest_even_index] : [];\n}\necho implode(', ', pluck([4,2,3]));\n\
    echo implode(', ', pluck([1,2,3]));\necho implode(', ', pluck([]));\necho implode(',\
    \ ', pluck([5, 0, 3, 0, 4, 2]));\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 2, 12, 10, 1
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($el) {\n        return $el % 2 == 0;\n    });\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $smallestEven = min($evens);\n    $indexOfSmallestEven\
    \ = array_search($smallestEven, $arr);\n    return [$smallestEven, $indexOfSmallestEven];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if(empty($arr)){\n\
    \        return [];\n    }\n    $evens = array_filter($arr, function($item){\n\
    \        return $item % 2 == 0;\n    });\n    if(empty($evens)){\n        return\
    \ [];\n    }\n    asort($evens);\n    $smallest = reset($evens);\n    $key = array_search($smallest,\
    \ $arr);\n    return [$smallest, $key];\n}\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even_arr = array_filter($arr,\
    \ function($item) {\n        return $item % 2 == 0;\n    });\n    if (count($even_arr)\
    \ > 0) {\n        $min_value = min($even_arr);\n        return [$min_value, array_search($min_value,\
    \ $arr)];\n    }\n    return [];\n}\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $copy_arr = $arr;\n\
    \    $min_val = min($copy_arr);\n    $min_key = array_search($min_val, $copy_arr);\n\
    \    $copy_arr[$min_key] = PHP_INT_MAX;\n    $second_min_val = min($copy_arr);\n\
    \    $second_min_key = array_search($second_min_val, $copy_arr);\n    $copy_arr[$second_min_key]\
    \ = PHP_INT_MAX;\n    $third_min_val = min($copy_arr);\n    $third_min_key = array_search($third_min_val,\
    \ $copy_arr);\n    echo \"first_min_val: \" . $min_val . \", first_min_key: \"\
    \ . $min_key . \"\\n\";\n    echo \"second_min_val: \" . $second_min_val . \"\
    , second_min_key: \" . $second_min_key . \"\\n\";\n    echo \"third_min_val: \"\
    \ . $third_min_val . \", third_min_key: \" . $third_min_key . \"\\n\";\n    if\
    \ ($min_val < $second_min_val && $min_val < $third_min_val) {\n        if ($min_val\
    \ % 2 == 0) {\n            return array($min_val, $min_key);\n        } else {\n\
    \            if ($second_min_val % 2 == 0) {\n                return array($second_min_val,\
    \ $second_min_key);\n            } else {\n                return array($third_min_val,\
    \ $third_min_key);\n            }\n        }\n    } else if ($second_min_val <\
    \ $min_val && $second_min_val < $third_min_val) {\n        if ($second_min_val\
    \ % 2 == 0) {\n            return array($second_min_val, $second_min_key);\n \
    \       } else {\n            if ($min_val % 2 == 0) {\n                return\
    \ array($min_val, $min_key);\n            } else {\n                return array($third_min_val,\
    \ $third_min_key\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphnd22c64.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $evenArr = [];\n \
    \ foreach ($arr as $key => $value) {\n    if ($value % 2 == 0) {\n      $evenArr[]\
    \ = $value;\n    }\n  }\n  if (!$evenArr) {\n    return [];\n  }\n  $minVal =\
    \ min($evenArr);\n  $idx = array_search($minVal, $arr);\n  return [$minVal, $idx];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // Your code here\n\
    }\n\npluck([4,2,3]); // [2, 1]\npluck([1,2,3]); // [2, 1]\npluck([]); // []\n\
    pluck([5, 0, 3, 0, 4, 2]); // [0, 1]\npluck([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa234m8s5.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (count($arr)\
    \ == 0) {\n        return [];\n    }\n    // find smallest even value\n    $min_even\
    \ = -1;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2\
    \ == 0) {\n            if ($min_even == -1) {\n                $min_even = $arr[$i];\n\
    \            } else if ($arr[$i] < $min_even) {\n                $min_even = $arr[$i];\n\
    \            }\n        }\n    }\n    if ($min_even == -1) {\n        return [];\n\
    \    }\n    // find index of smallest even value\n    $min_even_idx = -1;\n  \
    \  for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] == $min_even)\
    \ {\n            if ($min_even_idx == -1) {\n                $min_even_idx = $i;\n\
    \            } else if ($i < $min_even_idx) {\n                $min_even_idx =\
    \ $i;\n            }\n        }\n    }\n    if ($min_even_idx == -1) {\n     \
    \   return [];\n    }\n    return [$min_even, $min_even_idx];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $result = [];\n  $evens\
    \ = [];\n  $count = 0;\n  foreach ($arr as $value) {\n    if ($value % 2 == 0)\
    \ {\n      $evens[] = $value;\n    }\n  }\n  if (empty($evens)) {\n    return\
    \ $result;\n  }\n  $min = min($evens);\n  foreach ($arr as $key => $value) {\n\
    \    if ($value == $min) {\n      $result[] = $value;\n      $result[] = $key;\n\
    \      break;\n    }\n  }\n  return $result;\n}\n\nprint_r(pluck([4,2,3]));\n\
    print_r(pluck([1,2,3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (!$arr) {\n \
    \       return [];\n    }\n    $smallestValue = -1;\n    $smallestIndex = -1;\n\
    \    foreach ($arr as $i => $value) {\n        if ($value % 2 == 0) {\n      \
    \      if ($smallestValue == -1 || $value < $smallestValue) {\n              \
    \  $smallestValue = $value;\n                $smallestIndex = $i;\n          \
    \  }\n        }\n    }\n    if ($smallestValue == -1) {\n        return [];\n\
    \    }\n    return [$smallestValue, $smallestIndex];\n}\n\n$input = [4,2,3];\n\
    $result = pluck($input);\nprint_r($result);\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallestEven =\
    \ null;\n    $smallestEvenIndex = null;\n    for ($i = 0; $i < count($arr); $i++)\
    \ {\n        if ($arr[$i] % 2 == 0) {\n            if ($smallestEven === null\
    \ || $arr[$i] < $smallestEven) {\n                $smallestEven = $arr[$i];\n\
    \                $smallestEvenIndex = $i;\n            }\n        }\n    }\n \
    \   if ($smallestEven === null) {\n        return [];\n    }\n    return [$smallestEven,\
    \ $smallestEvenIndex];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $min = PHP_INT_MAX;\n\
    \  $index = NULL;\n  foreach ($arr as $key => $value) {\n    if ($value % 2 ==\
    \ 0 && $value < $min) {\n      $min = $value;\n      $index = $key;\n    }\n \
    \ }\n  if (is_null($index)) {\n    return [];\n  }\n  return [$min, $index];\n\
    }\n\n$test_cases = [\n  [\n    'input' => [4, 2, 3],\n    'output' => [2, 1],\n\
    \  ],\n  [\n    'input' => [1, 2, 3],\n    'output' => [2, 1],\n  ],\n  [\n  \
    \  'input' => [],\n    'output' => [],\n  ],\n  [\n    'input' => [5, 0, 3, 0,\
    \ 4, 2],\n    'output' => [0, 1],\n  ],\n];\n\nforeach ($test_cases as $test_case)\
    \ {\n  $input = $test_case['input'];\n  $output = $test_case['output'];\n  assert_options(ASSERT_BAIL,\
    \ 1);\n  assert(pluck($input) === $output);\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    // $min = min($arr);\n    $even = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n      \
    \      $even[] = $value;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $keys = array_keys($arr, $min);\n  \
    \  return [$min, $keys[0]];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    $smallestValue = PHP_INT_MAX;\n    $smallestIndex\
    \ = 0;\n    foreach ($arr as $index => $value) {\n        if ($value % 2 === 0\
    \ && $value < $smallestValue) {\n            $smallestValue = $value;\n      \
    \      $smallestIndex = $index;\n        }\n    }\n    if ($smallestValue ===\
    \ PHP_INT_MAX) {\n        return [];\n    }\n    return [$smallestValue, $smallestIndex];\n\
    }\necho \"</pre>\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: </pre>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = null;\n \
    \   $index = null;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ % 2 == 0) {\n            if (is_null($min)) {\n                $min = $arr[$i];\n\
    \                $index = $i;\n            } else {\n                if ($arr[$i]\
    \ < $min) {\n                    $min = $arr[$i];\n                    $index\
    \ = $i;\n                }\n            }\n        }\n    }\n    if (is_null($min))\
    \ {\n        return [];\n    }\n    return [$min, $index];\n}\n\necho json_encode(pluck([4,2,3]));\n\
    echo json_encode(pluck([1,2,3]));\necho json_encode(pluck([]));\necho json_encode(pluck([5,\
    \ 0, 3, 0, 4, 2]));\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '[2,1][2,1][][0,1]'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // time: nlogn\n\
    \    // space: nlogn\n    $n = count($arr);\n    if ($n == 0) {\n        return\
    \ [];\n    }\n    $tree = constructTree($arr);\n    $valueIndexMap = [];\n   \
    \ pluckValue($tree, $valueIndexMap);\n    ksort($valueIndexMap);\n    foreach\
    \ ($valueIndexMap as $value => $indexes) {\n        if ($value % 2 == 0) {\n \
    \           return [$value, $indexes[0]];\n        }\n    }\n    return [];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function constructTree()\
    \ in /tmp/tmpkd0dbrp7.php:34\nStack trace:\n#0 /tmp/tmpkd0dbrp7.php(46): pluck(Array)\n\
    #1 /tmp/tmpkd0dbrp7.php(50): candidate(Array)\n#2 /tmp/tmpkd0dbrp7.php(60): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkd0dbrp7.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$even = [];\n\t$odd\
    \ = [];\n\tforeach ($arr as $k => $v) {\n\t\tif ($v % 2 == 0) {\n\t\t\t$even[$k]\
    \ = $v;\n\t\t} else {\n\t\t\t$odd[$k] = $v;\n\t\t}\n\t}\n\tsort($even);\n\tsort($odd);\n\
    \tif (!empty($even)) {\n\t\treturn [\n\t\t\t$even[0],\n\t\t\tarray_search($even[0],\
    \ $arr)\n\t\t];\n\t} else if (!empty($odd)) {\n\t\treturn [\n\t\t\t$odd[0],\n\t\
    \t\tarray_search($odd[0], $arr)\n\t\t];\n\t} else {\n\t\treturn [];\n\t}\n}\n\
    $arr1 = [\n\t4,\n\t2,\n\t3\n];\n$arr2 = [\n\t1,\n\t2,\n\t3\n];\n$arr3 = [];\n\
    $arr4 = [\n\t5,\n\t0,\n\t3,\n\t0,\n\t4,\n\t2\n];\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\n\
    print_r(pluck($arr3));\nprint_r(pluck($arr4));\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp7yb3ykaj.php:88\nStack trace:\n\
    #0 /tmp/tmp7yb3ykaj.php(91): test()\n#1 {main}\n  thrown in /tmp/tmp7yb3ykaj.php\
    \ on line 88\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n// $arr = [5, 0, 3,\
    \ 0, 4, 2];\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkzp2hrzm.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $small_index = null;\n\
    \    $small_value = PHP_INT_MAX;\n    foreach ($arr as $i => $value) {\n     \
    \   if ($value % 2 == 0 && $value < $small_value) {\n            $small_index\
    \ = $i;\n            $small_value = $value;\n        }\n    }\n    if ($small_index\
    \ === null) {\n        return [];\n    }\n    return [$small_value, $small_index];\n\
    }\n\necho json_encode(pluck([4,2,3])) . \"\\n\";\necho json_encode(pluck([1,2,3]))\
    \ . \"\\n\";\necho json_encode(pluck([])) . \"\\n\";\necho json_encode(pluck([5,\
    \ 0, 3, 0, 4, 2])) . \"\\n\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[2,1]\n[2,1]\n[]\n[0,1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $even_index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $even_index[] = $key;\n\
    \        }\n    }\n    $min = min($even);\n    if (in_array($min, $even)) {\n\
    \        $index = array_search($min, $even);\n        return [$min, $even_index[$index]];\n\
    \    }\n    return [];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: min(): Array must contain at least one element in /tmp/tmpti5mj4in.php\
    \ on line 36\n\nWarning: min(): Array must contain at least one element in /tmp/tmpti5mj4in.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallestIndex =\
    \ null;\n    $smallestValue = null;\n    foreach ($arr as $index => $value) {\n\
    \        if ($value % 2 === 0) {\n            if ($smallestValue === null || $value\
    \ < $smallestValue) {\n                $smallestValue = $value;\n            \
    \    $smallestIndex = $index;\n            }\n        }\n    }\n    if ($smallestValue\
    \ === null) {\n        return [];\n    }\n    return [$smallestValue, $smallestIndex];\n\
    }\n\nvar_dump(pluck([4,2,3]));\nvar_dump(pluck([1,2,3]));\nvar_dump(pluck([]));\n\
    var_dump(pluck([5, 0, 3, 0, 4, 2]));\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\narray(2) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(1)\n}\narray(0) {\n}\narray(2) {\n  [0]=>\n  int(0)\n\
    \  [1]=>\n  int(1)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$small_even = null;\n\
    \t$small_even_idx = null;\n\t$idx = 0;\n\tforeach ($arr as $v) {\n\t\tif ($v %\
    \ 2 == 0) {\n\t\t\tif ($small_even == null || $v < $small_even) {\n\t\t\t\t$small_even\
    \ = $v;\n\t\t\t\t$small_even_idx = $idx;\n\t\t\t}\n\t\t}\n\t\t$idx++;\n\t}\n\t\
    return $small_even_idx == null ? [] : [$small_even, $small_even_idx];\n}\n\n$inputs\
    \ = [\n\t[4,2,3],\n\t[1,2,3],\n\t[],\n\t[5, 0, 3, 0, 4, 2],\n];\n\nforeach ($inputs\
    \ as $input) {\n\techo \"Input: \" . implode(',', $input) . \"\\n\";\n\techo \"\
    Output: \" . implode(',', pluck($input)) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Input: 4,2,3\nOutput: 2,1\nInput: 1,2,3\nOutput: 2,1\nInput: \nOutput:\
    \ \nInput: 5,0,3,0,4,2\nOutput: 2,5\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpkmb942tx.php:62\nStack trace:\n#0 /tmp/tmpkmb942tx.php(69): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkmb942tx.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $even_value = [];\n\
    \  $even_index = [];\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i]\
    \ % 2 == 0) {\n      array_push($even_value, $arr[$i]);\n      array_push($even_index,\
    \ $i);\n    }\n  }\n  if (count($even_value) == 0) {\n    return [];\n  }\n  else\
    \ {\n    $result = array_combine($even_index, $even_value);\n    asort($result);\n\
    \    $arr1 = [];\n    foreach ($result as $key => $value) {\n      array_push($arr1,\
    \ $key);\n      array_push($arr1, $value);\n      break;\n    }\n    return $arr1;\n\
    \  }\n}\n\n$arr = [0, 3, 2, 4, 5, 1];\nprint_r(pluck($arr));\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjblra5l8.php:59\nStack trace:\n#0 /tmp/tmpjblra5l8.php(69):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjblra5l8.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$even = function($val)\
    \ {\n\t\treturn $val % 2 == 0;\n\t};\n\t$idx = false;\n\t$min = PHP_INT_MAX;\n\
    \tforeach ($arr as $i => $val) {\n\t\tif ($even($val) && $val < $min) {\n\t\t\t\
    $min = $val;\n\t\t\t$idx = $i;\n\t\t}\n\t}\n\treturn $idx !== false ? [$min, $idx]\
    \ : [];\n}\n\n$arr = [];\necho '[' . implode(', ', pluck($arr)) . ']' . PHP_EOL;\n\
    $arr = [1, 2, 3];\necho '[' . implode(', ', pluck($arr)) . ']' . PHP_EOL;\n$arr\
    \ = [4, 2, 3];\necho '[' . implode(', ', pluck($arr)) . ']' . PHP_EOL;\n$arr =\
    \ [5, 0, 3, 0, 4, 2];\necho '[' . implode(', ', pluck($arr)) . ']' . PHP_EOL;\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[]\n[2, 1]\n[2, 1]\n[0, 1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    \n}\n\n$case1 =\
    \ [4,2,3];\necho json_encode(pluck($case1)) . \"\\n\";\n$case2 = [1,2,3];\necho\
    \ json_encode(pluck($case2)) . \"\\n\";\n$case3 = [];\necho json_encode(pluck($case3))\
    \ . \"\\n\";\n$case4 = [5, 0, 3, 0, 4, 2];\necho json_encode(pluck($case4)) .\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "null\nnull\nnull\nnull\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp3026gwoq.php:44\nStack trace:\n#0 /tmp/tmp3026gwoq.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3026gwoq.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // add code here\n\
    \    $arr2 = array_filter($arr, function($a) {\n        return $a % 2 == 0;\n\
    \    });\n    if (count($arr2) == 0) {\n        return [];\n    }\n    $min =\
    \ min($arr2);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\necho implode(', ', pluck([4,2,3])).PHP_EOL;\necho implode(', ', pluck([1,2,3])).PHP_EOL;\n\
    echo implode(', ', pluck([])).PHP_EOL;\necho implode(', ', pluck([5, 0, 3, 0,\
    \ 4, 2])).PHP_EOL;\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2, 1\n2, 1\n\n0, 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallestEven =\
    \ $smallestEvenIndex = null;\n    foreach ($arr as $index => $val) {\n       \
    \ if ($val % 2 == 0) {\n            if ($smallestEven == null || $val < $smallestEven)\
    \ {\n                $smallestEven = $val;\n                $smallestEvenIndex\
    \ = $index;\n            }\n        }\n    }\n    return [$smallestEven, $smallestEvenIndex];\n\
    }\necho \"Example 1: \" . implode(\", \", pluck([4,2,3])) . \"\\n\";\necho \"\
    Example 2: \" . implode(\", \", pluck([1,2,3])) . \"\\n\";\necho \"Example 3:\
    \ \" . implode(\", \", pluck([])) . \"\\n\";\necho \"Example 4: \" . implode(\"\
    , \", pluck([5, 0, 3, 0, 4, 2])) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Example 1: 2, 1\nExample 2: 2, 1\nExample 3: , \nExample 4: 2, 5\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpiw5viske.php:50\nStack trace:\n\
    #0 /tmp/tmpiw5viske.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpiw5viske.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$smallest = PHP_INT_MAX;\n\
    \t$index = -1;\n\tforeach ($arr as $k => $v) {\n\t\tif ($v & 1) {\n\t\t\tcontinue;\n\
    \t\t}\n\t\tif ($v < $smallest) {\n\t\t\t$smallest = $v;\n\t\t\t$index = $k;\n\t\
    \t}\n\t}\n\tif ($index == -1) {\n\t\treturn [];\n\t}\n\treturn [$smallest, $index];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $evens = [];\n  $even_numbers\
    \ = [];\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] % 2 == 0)\
    \ {\n      $evens[] = $arr[$i];\n      $even_numbers[] = $i;\n    }\n  }\n  if\
    \ (count($evens) > 0) {\n    return [min($evens), $even_numbers[array_search(min($evens),\
    \ $evens)]];\n  }\n  return [];\n}\n\n$arr = [4,2,3];\nvar_dump(pluck($arr));\n\
    $arr = [1,2,3];\nvar_dump(pluck($arr));\n$arr = [];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\narray(2) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(1)\n}\narray(0) {\n}\narray(2) {\n  [0]=>\n  int(0)\n\
    \  [1]=>\n  int(1)\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $evens = [];\n  foreach\
    \ ($arr as $i => $n) {\n    if ($n % 2 == 0) $evens[] = [$n, $i];\n  }\n  if (empty($evens))\
    \ return [];\n  usort($evens, function($a, $b) {\n    if ($a[0] == $b[0]) return\
    \ $a[1] - $b[1];\n    return $a[0] - $b[0];\n  });\n  return array_shift($evens);\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = [];\n \
    \   for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0) {\n\
    \            $evens[] = [$arr[$i], $i];\n        }\n    }\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $min = $evens[0];\n    for ($i = 1;\
    \ $i < count($evens); $i++) {\n        if ($evens[$i][0] < $min[0]) {\n      \
    \      $min = $evens[$i];\n        }\n    }\n    return $min;\n}\n\n$tests = [\n\
    \    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3,\
    \ 0, 4, 2], [0, 1]],\n];\n\nfor ($i = 0; $i < count($tests); $i++) {\n    $input\
    \ = $tests[$i][0];\n    $expected = $tests[$i][1];\n    $output = pluck($input);\n\
    \    if ($expected === $output) {\n        echo \"Test $i: Correct!\\n\";\n  \
    \  } else {\n        echo \"Test $i: Incorrect!\\n\";\n        echo \"Input: $input\\\
    n\";\n        echo \"Expected: $expected\\n\";\n        echo \"Output: $output\\\
    n\";\n    }\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Test 0: Correct!\nTest 1: Correct!\nTest 2: Correct!\nTest 3: Correct!\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even_values = [];\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0) {\n\
    \            $even_values[] = $arr[$i];\n        }\n    }\n    if (count($even_values)\
    \ == 0) {\n        return [];\n    }\n    sort($even_values);\n    $smallest_even_value\
    \ = $even_values[0];\n    $index_of_smallest_even_value = 0;\n    for ($i = 0;\
    \ $i < count($arr); $i++) {\n        if ($arr[$i] == $smallest_even_value) {\n\
    \            $index_of_smallest_even_value = $i;\n            break;\n       \
    \ }\n    }\n    return [$smallest_even_value, $index_of_smallest_even_value];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // Write your code\
    \ here\n    $even = [];\n    $evenIndex = [];\n    for($i = 0; $i < count($arr);\
    \ $i++){\n        if($arr[$i] % 2 == 0){\n            array_push($even, $arr[$i]);\n\
    \            array_push($evenIndex, $i);\n        }\n    }\n    if(count($even)\
    \ == 0){\n        return [];\n    }\n    return [min($even), min($evenIndex)];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgkkvtgl.php:47\n\
    Stack trace:\n#0 /tmp/tmpvgkkvtgl.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpvgkkvtgl.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ fn($x) => $x % 2 === 0);\n    if (count($evens) === 0) {\n        return [];\n\
    \    }\n    return [ min($evens), array_search(min($evens), $arr) ];\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $x = [];\n  foreach\
    \ ($arr as $key => $value) {\n    if ($value % 2 == 0) $x[] = $value;\n  }\n \
    \ if (empty($x)) return [];\n  $a = $x[0];\n  $b = array_search($a, $arr);\n \
    \ foreach ($x as $key => $value) {\n    if ($value < $a) {\n      $a = $value;\n\
    \      $b = array_search($a, $arr);\n    }\n  }\n  return [$a, $b];\n}\n$tests\
    \ = [];\n$tests[] = ['input' => [4, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input'\
    \ => [1, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n\
    $tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\nforeach ($tests\
    \ as $index => $test) {\n  $result = pluck($test['input']);\n  if ($test['expect']\
    \ != $result) {\n    echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n    exit;\n\
    \  }\n}\necho 'Test good!' . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Test good!\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $smallest = null;\n\
    \  $smallestIndex = null;\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i]\
    \ % 2 === 0) {\n      if ($smallest === null || $arr[$i] < $smallest) {\n    \
    \    $smallest = $arr[$i];\n        $smallestIndex = $i;\n      }\n    }\n  }\n\
    \  if ($smallest !== null) {\n    return [$smallest, $smallestIndex];\n  }\n \
    \ return [];\n}\n\n$example1 = [4, 2, 3];\nprint_r(pluck($example1));\n\n$example2\
    \ = [1, 2, 3];\nprint_r(pluck($example2));\n\n$example3 = [];\nprint_r(pluck($example3));\n\
    \n$example4 = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($example4));\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallest_even =\
    \ PHP_INT_MAX;\n    $smallest_even_index = -1;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] % 2 == 0 && $arr[$i] < $smallest_even) {\n   \
    \         $smallest_even = $arr[$i];\n            $smallest_even_index = $i;\n\
    \        }\n    }\n    if ($smallest_even_index == -1) {\n        return [];\n\
    \    }\n    return [$smallest_even, $smallest_even_index];\n}\n\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\necho implode(\",\", pluck($arr)) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0,1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$smallestEven = null;\n\
    \t$smallestEvenIndex = null;\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif\
    \ ($arr[$i] % 2 == 0) {\n\t\t\tif ($smallestEven == null) {\n\t\t\t\t$smallestEven\
    \ = $arr[$i];\n\t\t\t\t$smallestEvenIndex = $i;\n\t\t\t} else {\n\t\t\t\tif ($arr[$i]\
    \ < $smallestEven) {\n\t\t\t\t\t$smallestEven = $arr[$i];\n\t\t\t\t\t$smallestEvenIndex\
    \ = $i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ($smallestEven == null) {\n\t\t\
    return [];\n\t}\n\treturn [$smallestEven, $smallestEvenIndex];\n}\n\nclass PluckTest\
    \ extends TestCase {\n\tpublic function testPluck() {\n\t\t$this->assertEquals([2,\
    \ 1], pluck([4, 2, 3]));\n\t\t$this->assertEquals([2, 1], pluck([1, 2, 3]));\n\
    \t\t$this->assertEquals([], pluck([]));\n\t\t$this->assertEquals([0, 1], pluck([5,\
    \ 0, 3, 0, 4, 2]));\n\t}\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'TestCase' not found in /tmp/tmppoc64mmr.php:49\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmppoc64mmr.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallest = PHP_INT_MAX;\n\
    \    $index = -1;\n    foreach ($arr as $i => $val) {\n        if ($val % 2 ==\
    \ 0 && $val < $smallest) {\n            $smallest = $val;\n            $index\
    \ = $i;\n        }\n    }\n    if ($index >= 0) {\n        return [$smallest,\
    \ $index];\n    }\n    return [];\n}\n\necho json_encode(pluck([4,2,3]));\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '[2,1]'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even_min = 0;\n\
    \    $index = 0;\n    foreach ($arr as $key => $val) {\n        if ($val % 2 ==\
    \ 0) {\n            if (!$even_min) {\n                $even_min = $val;\n   \
    \             $index = $key;\n            } else {\n                if ($val <\
    \ $even_min) {\n                    $even_min = $val;\n                    $index\
    \ = $key;\n                }\n            }\n        }\n    }\n    return ($even_min)\
    \ ? [$even_min, $index] : [];\n}\n\necho \"<pre>\";\nprint_r(pluck([4,2,3]));\n\
    print_r(pluck([1,2,3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n\
    \    [1] => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpu29xya6c.php:60\nStack\
    \ trace:\n#0 /tmp/tmpu29xya6c.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpu29xya6c.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = [];\n \
    \   $index = 0;\n    foreach ($arr as $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n        }\n    }\n    if (!$evens) {\n  \
    \      return [];\n    }\n    sort($evens);\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value == $evens[0]) {\n            $index = $key;\n        \
    \    break;\n        }\n    }\n    return [$evens[0], $index];\n}\n$arr = [4,2,3];\n\
    print_r(pluck($arr));\n$arr = [1,2,3];\nprint_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $len = count($arr);\n\
    \    if ($len === 0) {\n        return [];\n    }\n    $minIdx = PHP_INT_MAX;\n\
    \    $minEven = PHP_INT_MAX;\n    for ($i = 0; $i < $len; $i++) {\n        if\
    \ ($arr[$i] % 2 === 0 && $arr[$i] < $minEven) {\n            $minEven = $arr[$i];\n\
    \            $minIdx = $i;\n        }\n    }\n    if ($minIdx === PHP_INT_MAX)\
    \ {\n        return [];\n    }\n    return [$minEven, $minIdx];\n}\necho '<pre>';\n\
    var_dump(pluck([4,2,3]));\necho '</pre>';\necho '<pre>';\nvar_dump(pluck([1,2,3]));\n\
    echo '</pre>';\necho '<pre>';\nvar_dump(pluck([]));\necho '</pre>';\necho '<pre>';\n\
    var_dump(pluck([5, 0, 3, 0, 4, 2]));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\n</pre><pre>array(2)\
    \ {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\n</pre><pre>array(0) {\n}\n</pre><pre>array(2)\
    \ {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n}\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $res = [];\n   \
    \ $even = 0;\n    foreach ($arr as $i => $v) {\n        if (!$even) {\n      \
    \      if ($v % 2 == 0) {\n                $even = $v;\n                $res =\
    \ [$v, $i];\n            }\n        } else {\n            if ($v % 2 == 0 && $v\
    \ < $even) {\n                $even = $v;\n                $res = [$v, $i];\n\
    \            }\n        }\n    }\n    return $res;\n}\necho '<pre>pluck([4,2,3])';\n\
    print_r(pluck([4,2,3]));\necho '</pre>';\necho '<pre>pluck([1,2,3])';\nprint_r(pluck([1,2,3]));\n\
    echo '</pre>';\necho '<pre>pluck([])';\nprint_r(pluck([]));\necho '</pre>';\n\
    echo '<pre>pluck([5, 0, 3, 0, 4, 2])';\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>pluck([4,2,3])Array\n(\n    [0] => 2\n    [1] => 1\n)\n</pre><pre>pluck([1,2,3])Array\n\
    (\n    [0] => 2\n    [1] => 1\n)\n</pre><pre>pluck([])Array\n(\n)\n</pre><pre>pluck([5,\
    \ 0, 3, 0, 4, 2])Array\n(\n    [0] => 2\n    [1] => 5\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpcnuz4vje.php:65\nStack trace:\n\
    #0 /tmp/tmpcnuz4vje.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpcnuz4vje.php\
    \ on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (!$arr) {\n \
    \       return [];\n    }\n    $evens = [];\n    foreach ($arr as $i => $val)\
    \ {\n        if ($val % 2 === 0) {\n            $evens[] = [$val, $i];\n     \
    \   }\n    }\n    if (!$evens) {\n        return [];\n    }\n    usort($evens,\
    \ function ($a, $b) {\n        if ($a[0] === $b[0]) {\n            return $a[1]\
    \ <=> $b[1];\n        }\n        return $a[0] <=> $b[0];\n    });\n    return\
    \ $evens[0];\n}\n$tests = [];\n$tests[] = ['input' => [], 'expected' => []];\n\
    $tests[] = ['input' => [0], 'expected' => [0, 0]];\n$tests[] = ['input' => [0,\
    \ 1], 'expected' => [0, 0]];\n$tests[] = ['input' => [1, 0], 'expected' => [0,\
    \ 1]];\n$tests[] = ['input' => [0, 0], 'expected' => [0, 0]];\n$tests[] = ['input'\
    \ => [0, 0, 1], 'expected' => [0, 0]];\n$tests[] = ['input' => [0, 1, 0], 'expected'\
    \ => [0, 1]];\n$tests[] = ['input' => [0, 2, 1], 'expected' => [0, 0]];\n$tests[]\
    \ = ['input' => [2, 0, 1], 'expected' => [0, 1]];\n$tests[] = ['input' => [2,\
    \ 1, 0], 'expected' => [0, 2]];\n$tests[] = ['input' => [1, 2, 0], 'expected'\
    \ => [0, 2]];\n$tests[] = ['input' => [0, 1, 0, 2], 'expected' => [0, 1]];\n$tests[]\
    \ = ['input' => [1, 0, 0, 2], 'expected' => [0, 1]];\n$tests[] = ['input' => [0,\
    \ 0, 1, 2], 'expected' => [\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfs8fl14e.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // your code here\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmhydk6v2.php:36\n\
    Stack trace:\n#0 /tmp/tmpmhydk6v2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmhydk6v2.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = [];\n \
    \   foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n     \
    \       $evens[] = $value;\n        }\n    }\n    if (!$evens) {\n        return\
    \ [];\n    }\n    $minEven = min($evens);\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value == $minEven) {\n            return [$value, $key];\n \
    \       }\n    }\n}\n\ndo {\n    echo 'Enter input array: ';\n    $input = trim(fgets(STDIN));\n\
    \    $arr = explode(',', $input);\n    foreach ($arr as $key => $value) {\n  \
    \      $arr[$key] = (int) $value;\n    }\n    var_dump(pluck($arr));\n} while\
    \ ($input != 'quit');\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "b'Enter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\n  [0]=>\\n  int(0)\\n  [1]=>\\n  int(0)\\\
    n}\\nEnter input array: array(2) {\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if(!$arr) {\n  \
    \      return [];\n    }\n    $index = -1;\n    $smallestEvenValue = PHP_INT_MAX;\n\
    \    for($i = 0; $i < count($arr); $i++) {\n        if($arr[$i] % 2 == 0 && $arr[$i]\
    \ < $smallestEvenValue) {\n            $smallestEvenValue = $arr[$i];\n      \
    \      $index = $i;\n        }\n    }\n    if($index == -1) {\n        return\
    \ [];\n    }\n    return [$smallestEvenValue, $index];\n}\n$arr = [4,2,3];\n$result\
    \ = pluck($arr);\necho var_export($result, true) . \"\\n\";\n$arr = [1,2,3];\n\
    $result = pluck($arr);\necho var_export($result, true) . \"\\n\";\n$arr = [];\n\
    $result = pluck($arr);\necho var_export($result, true) . \"\\n\";\n$arr = [5,\
    \ 0, 3, 0, 4, 2];\n$result = pluck($arr);\necho var_export($result, true) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array (\n  0 => 2,\n  1 => 1,\n)\narray (\n  0 => 2,\n  1 => 1,\n)\narray\
    \ (\n)\narray (\n  0 => 0,\n  1 => 1,\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  if (empty($arr)) return\
    \ [];\n  foreach ($arr as $k => $v) {\n    if ($v % 2 == 0) {\n      return [$v,\
    \ $k];\n    }\n  }\n  return [];\n}\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptujfgzkp.php:41\n\
    Stack trace:\n#0 /tmp/tmptujfgzkp.php(51): test()\n#1 {main}\n  thrown in /tmp/tmptujfgzkp.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $minEven = PHP_INT_MAX;\n\
    \    $index = -1;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ != 0 && $arr[$i] % 2 == 0 && $arr[$i] < $minEven) {\n            $minEven =\
    \ $arr[$i];\n            $index = $i;\n        }\n    }\n    if ($index == -1)\
    \ {\n        return [];\n    }\n    return [$minEven, $index];\n}\n\nprint_r(pluck([4,2,3]));\n\
    print_r(pluck([1,2,3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpbe8uqkt0.php:54\nStack trace:\n\
    #0 /tmp/tmpbe8uqkt0.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpbe8uqkt0.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = PHP_INT_MAX;\n\
    \    $i = -1;\n    $j = -1;\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0 && $value < $min) {\n            $min = $value;\n         \
    \   $i = $key;\n            $j = $value;\n        }\n    }\n    if ($j == -1)\
    \ return [];\n    return [$j, $i];\n}\n\n$test_case = [\n    \"test1\" => [[4,2,3],\
    \ [2, 1]],\n    \"test2\" => [[1,2,3], [2, 1]],\n    \"test3\" => [[], []],\n\
    \    \"test4\" => [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = [];\n \
    \   foreach ($arr as $i => $el) {\n        if ($el % 2 === 0) $evens[] = [$el,\
    \ $i];\n    }\n    usort($evens, function ($a, $b) {\n        return $a[0] <=>\
    \ $b[0];\n    });\n    return $evens[0] ?? [];\n}\n\n$tests = [];\n$tests[] =\
    \ ['input' => [4, 2, 3], 'expect' => [2, 1]];\n$tests[] = ['input' => [1, 2, 3],\
    \ 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n$tests[]\
    \ = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests as\
    \ $i => $test) {\n    $result = pluck($test['input']);\n    if ($test['expect']\
    \ !== $result) {\n        echo \"Test $i fails.\\nExpected: \" . implode(', ',\
    \ $test['expect']) . \"\\nResult: \" . implode(', ', $result) . \"\\n\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  //coding and coding....\n\
    \  if(empty($arr)) return [];\n  $res = [];\n  foreach($arr as $key => $value)\
    \ {\n      if($value % 2 == 0) {\n          if(empty($res)) {\n              $res\
    \ = [$value, $key];\n          }\n          else {\n              if($value <\
    \ $res[0]) {\n                  $res = [$value, $key];\n              }\n    \
    \      }\n      }\n  }\n  return $res;\n}\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    $even = function ($num) {\n        return\
    \ $num % 2 == 0;\n    };\n    $evens = array_filter($arr, $even);\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $smallestEven = min($evens);\n    $smallestEvenIndex\
    \ = array_search($smallestEven, $arr);\n    return [$smallestEven, $smallestEvenIndex];\n\
    }\n$tests = [\n    [\n        \"input\" => [4, 2, 3],\n        \"output\" => [2,\
    \ 1]\n    ],\n    [\n        \"input\" => [1, 2, 3],\n        \"output\" => [2,\
    \ 1]\n    ],\n    [\n        \"input\" => [],\n        \"output\" => []\n    ],\n\
    \    [\n        \"input\" => [5, 0, 3, 0, 4, 2],\n        \"output\" => [0, 1]\n\
    \    ],\n];\nforeach ($tests as $test) {\n    $input = $test[\"input\"];\n   \
    \ $output = $test[\"output\"];\n    $result = pluck($input);\n    if ($result\
    \ === $output) {\n        echo \"CORRECT\";\n    } else {\n        echo \"FAIL\"\
    ;\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "CORRECT\nCORRECT\nCORRECT\nCORRECT\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$evens = [];\n\tforeach\
    \ ($arr as $i => $n) {\n\t\tif ($n % 2 == 0) {\n\t\t\t$evens[] = $n;\n\t\t}\n\t\
    }\n\tif (empty($evens)) {\n\t\treturn [];\n\t}\n\treturn min($evens);\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4qe1tvss.php:45\n\
    Stack trace:\n#0 /tmp/tmp4qe1tvss.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp4qe1tvss.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$temp =[];\n\t$output\
    \ = [];\n\t$evens = [];\n\t$even_index = [];\n\t\n\tfor($i = 0; $i < count($arr);\
    \ $i++) {\n\t\tif($arr[$i] % 2 == 0) {\n\t\t\t$evens[] = $arr[$i];\n\t\t\t$even_index[]\
    \ = $i;\n\t\t}\n\t}\n\tsort($evens);\n\t// echo \"<pre>\";\n\t// print_r($evens);\n\
    \t// echo \"</pre>\";\n\t// echo \"<pre>\";\n\t// print_r($even_index);\n\t//\
    \ echo \"</pre>\";\n\tif(count($evens) > 0) {\n\t\t// $temp[] = $evens[0];\n\t\
    \t// $temp[] = $even_index[0];\n\t\t$output[] = $evens[0];\n\t\t$output[] = $even_index[0];\n\
    \t}\n\treturn $output;\n}\n$test = [5, 0, 3, 0, 4, 2];\necho \"<pre>\";\nprint_r(pluck($test));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 1\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp9eazrc67.php:63\nStack trace:\n#0 /tmp/tmp9eazrc67.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9eazrc67.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  foreach ($arr as $key => $val) {\n        if ($val % 2 == 0) {\n          \
    \  $even[] = [$val, $key];\n        }\n    }\n    if (empty($even)) {\n      \
    \  return [];\n    }\n    sort($even);\n    return $even[0];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  // TODO\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65273gej.php:36\n\
    Stack trace:\n#0 /tmp/tmp65273gej.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp65273gej.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = array_filter($arr,\
    \ function($item) {\n        return $item % 2 == 0;\n    });\n    if (count($even)\
    \ == 0) {\n        return [];\n    }\n    $min = min($even);\n    $idx = array_search($min,\
    \ $arr);\n    return [$min, $idx];\n}\necho json_encode(pluck([4,2,3]));\necho\
    \ PHP_EOL;\necho json_encode(pluck([1,2,3]));\necho PHP_EOL;\necho json_encode(pluck([]));\n\
    echo PHP_EOL;\necho json_encode(pluck([5, 0, 3, 0, 4, 2]));\necho PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[2,1]\n[2,1]\n[]\n[0,1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ return [];\n    $even = PHP_INT_MAX;\n    $index = -1;\n    foreach ($arr as\
    \ $i => $v) {\n        if ($v % 2 == 0 && $v < $even) {\n            $even = $v;\n\
    \            $index = $i;\n        }\n    }\n    if ($index < 0) return [];\n\
    \    return [$even, $index];\n}\necho implode(', ', pluck([4,2,3])) . PHP_EOL;\n\
    echo implode(', ', pluck([1,2,3])) . PHP_EOL;\necho implode(', ', pluck([])) .\
    \ PHP_EOL;\necho implode(', ', pluck([5, 0, 3, 0, 4, 2])) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2, 1\n2, 1\n\n0, 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    if (empty($arr)) {\n        return $result;\n    }\n    $even = [];\n   \
    \ $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 ==\
    \ 0) {\n            $even[] = $value;\n        } else {\n            $odd[] =\
    \ $value;\n        }\n    }\n    if (empty($even)) {\n        return $result;\n\
    \    }\n    sort($even);\n    $even = array_flip($even);\n    $even = array_slice($even,\
    \ 0, 1, true);\n    foreach ($even as $key => $value) {\n        $result[] = $key;\n\
    \        $result[] = $value;\n    }\n    return $result;\n}\n\n$arr = [4,2,3];\n\
    print_r(pluck($arr));\n\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\n\
    print_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 0\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 0\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp8o3usode.php:70\nStack trace:\n\
    #0 /tmp/tmp8o3usode.php(80): test()\n#1 {main}\n  thrown in /tmp/tmp8o3usode.php\
    \ on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $map = [];\n  for\
    \ ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] % 2 == 0) {\n      $map[$arr[$i]]\
    \ = $i;\n    }\n  }\n  sort($map);\n  print_r($map);\n  if (count($map) == 0)\
    \ {\n    return [];\n  }\n  $key = array_keys($map)[0];\n  return [$key, $map[$key]];\n\
    }\n\nprint_r(pluck([4,2,3]));\nprint_r(pluck([1,2,3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n)\nArray\n(\n    [0] => 0\n    [1]\
    \ => 0\n)\nArray\n(\n    [0] => 1\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n\
    Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => 3\n    [1] => 4\n    [2] => 5\n\
    )\nArray\n(\n    [0] => 0\n    [1] => 3\n)\nArray\n(\n    [0] => 0\n    [1] =>\
    \ 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4c56rpo.php:52\n\
    Stack trace:\n#0 /tmp/tmpj4c56rpo.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpj4c56rpo.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $even_nums = array_filter($arr,\
    \ function($num) {\n    return $num % 2 == 0;\n  });\n  if (empty($even_nums))\
    \ {\n    return [];\n  }\n  $min_even = min($even_nums);\n  $min_even_key = array_search($min_even,\
    \ $arr);\n  return [$min_even, $min_even_key];\n}\n\n$inputs = [\n  [[4,2,3],\
    \ [2, 1]],\n  [[1,2,3], [2, 1]],\n  [[], []],\n  [[5, 0, 3, 0, 4, 2], [0, 1]],\n\
    ];\n\nforeach ($inputs as $input) {\n  $result = pluck($input[0]);\n  echo \"\
    Pluck: \" . implode(\", \", $input[0]) . \"\\n\";\n  echo \"Output: \" . implode(\"\
    , \", $result) . \"\\n\";\n  echo \"Expected: \" . implode(\", \", $input[1])\
    \ . \"\\n\";\n  echo $result == $input[1] ? \"\u2705\\n\" : \"\U0001F534\\n\"\
    ;\n  echo \"\\n\";\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Pluck: 4, 2, 3\nOutput: 2, 1\nExpected: 2, 1\n\u2705\n\nPluck: 1, 2, 3\n\
    Output: 2, 1\nExpected: 2, 1\n\u2705\n\nPluck: \nOutput: \nExpected: \n\u2705\n\
    \nPluck: 5, 0, 3, 0, 4, 2\nOutput: 0, 1\nExpected: 0, 1\n\u2705\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ return [];\n    $smallestEven = null;\n    $smallestIndex = null;\n    for ($i\
    \ = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0) {\n         \
    \   if (is_null($smallestEven) || $arr[$i] < $smallestEven) {\n              \
    \  $smallestEven = $arr[$i];\n                $smallestIndex = $i;\n         \
    \   }\n        }\n    }\n    if (is_null($smallestEven)) return [];\n    return\
    \ [$smallestEven, $smallestIndex];\n}\n\n$inputs = [\n    [[4,2,3], [2, 1]],\n\
    \    [[1,2,3], [2, 1]],\n    [[], []],\n    [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\
    \nforeach ($inputs as $input) {\n    $result = pluck($input[0]);\n    echo \"\
    Input: \" . implode(',', $input[0]) . \"\\n\";\n    echo \"Output: \" . implode(',',\
    \ $result) . \"\\n\";\n    echo \"Expected: \" . implode(',', $input[1]) . \"\\\
    n\";\n    if ($result == $input[1]) {\n        echo \"PASSED\\n\";\n    } else\
    \ {\n        echo \"FAILED\\n\";\n    }\n    echo \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Input: 4,2,3\nOutput: 2,1\nExpected: 2,1\nPASSED\n\nInput: 1,2,3\nOutput:\
    \ 2,1\nExpected: 2,1\nPASSED\n\nInput: \nOutput: \nExpected: \nPASSED\n\nInput:\
    \ 5,0,3,0,4,2\nOutput: 0,1\nExpected: 0,1\nPASSED\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $evens = array_filter($arr, function($val) {\n        return $val % 2 ==\
    \ 0;\n    });\n    if (!count($evens)) {\n        return $result;\n    }\n   \
    \ $min = min($evens);\n    $result[] = $min;\n    $index = array_search($min,\
    \ $arr);\n    $result[] = $index;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  // Write your code\
    \ here.\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_8lnqdd.php:36\n\
    Stack trace:\n#0 /tmp/tmpx_8lnqdd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpx_8lnqdd.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // your code here\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuhluywb5.php:35\n\
    Stack trace:\n#0 /tmp/tmpuhluywb5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpuhluywb5.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\tif (empty($arr)) {\n\
    \t\treturn [];\n\t}\n\t$smallest = null;\n\t$smallestIndex = null;\n\tforeach\
    \ ($arr as $index => $num) {\n\t\tif ($num % 2 === 0) {\n\t\t\tif ($smallest ===\
    \ null || $num < $smallest) {\n\t\t\t\t$smallest = $num;\n\t\t\t\t$smallestIndex\
    \ = $index;\n\t\t\t}\n\t\t}\n\t}\n\tif ($smallest === null) {\n\t\treturn [];\n\
    \t}\n\treturn [$smallest, $smallestIndex];\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  foreach ($arr as $key => $val) {\n        if ($val % 2 == 0) $even[] = [$val,\
    \ $key];\n    }\n    if (!$even) return [];\n    usort($even, function($a, $b)\
    \ {\n        return $a[0] <=> $b[0];\n    });\n    return $even[0];\n}\n\n$tests\
    \ = [];\n$tests[] = ['input' => [4,2,3], 'expect' => [2, 1]];\n$tests[] = ['input'\
    \ => [1,2,3], 'expect' => [2, 1]];\n$tests[] = ['input' => [], 'expect' => []];\n\
    $tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expect' => [0, 1]];\n\nforeach ($tests\
    \ as $index => $test) {\n    $result = pluck($test['input']);\n    if ($test['expect']\
    \ != $result) {\n        echo 'Test fail at test' . ($index + 1) . PHP_EOL;\n\
    \        exit;\n    }\n}\n\necho 'Test good!' . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Test good!\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // BEGIN (write\
    \ your solution here)\n    $ev = [];\n    foreach ($arr as $index => $item) {\n\
    \        if ($item % 2 == 0) {\n            $ev[] = [$item, $index];\n       \
    \ }\n    }\n    $ev = array_column($ev, 0);\n    if (empty($ev)) {\n        return\
    \ [];\n    }\n    $ind = array_search(min($ev), $ev);\n    return $ev[$ind];\n\
    \    // END\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qckcv0b.php:48\n\
    Stack trace:\n#0 /tmp/tmp1qckcv0b.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp1qckcv0b.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (!count($arr))\
    \ {\n        return [];\n    }\n    $evens = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $evens[] = [$value, $key];\n\
    \        }\n    }\n    usort($evens, function($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $a[1] <=> $b[1];\n        }\n        return $a[0]\
    \ <=> $b[0];\n    });\n    return array_shift($evens);\n}\n\nif (defined('STDIN'))\
    \ {\n    $arr = explode(',', trim(fgets(STDIN)));\n    echo '[' . implode(', ',\
    \ pluck($arr)) . ']' . PHP_EOL;\n} else {\n    echo '[' . implode(', ', pluck([4,2,3]))\
    \ . ']' . PHP_EOL;\n    echo '[' . implode(', ', pluck([1,2,3])) . ']' . PHP_EOL;\n\
    \    echo '[' . implode(', ', pluck([])) . ']' . PHP_EOL;\n    echo '[' . implode(',\
    \ ', pluck([5, 0, 3, 0, 4, 2])) . ']' . PHP_EOL;\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmphnz0xoxi.php on line\
    \ 33\n[, 0]\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphnz0xoxi.php:67\n\
    Stack trace:\n#0 /tmp/tmphnz0xoxi.php(70): test()\n#1 {main}\n  thrown in /tmp/tmphnz0xoxi.php\
    \ on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // TODO\n}\necho\
    \ json_encode(pluck([4,2,3]));\necho \"\\n\";\necho json_encode(pluck([1,2,3]));\n\
    echo \"\\n\";\necho json_encode(pluck([]));\necho \"\\n\";\necho json_encode(pluck([5,\
    \ 0, 3, 0, 4, 2]));\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "null\nnull\nnull\nnull\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpfx65f0h3.php:44\nStack trace:\n#0 /tmp/tmpfx65f0h3.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmpfx65f0h3.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // take care of\
    \ empty arrays\n    if (empty($arr)) {\n        return [];\n    }\n    // setup\
    \ our smallest even integer\n    $smallest_even = null;\n    // loop through our\
    \ array\n    foreach ($arr as $index => $value) {\n        // if the value is\
    \ even and not smaller than our smallest even integer\n        if ($value % 2\
    \ == 0 && ($smallest_even === null || $value < $smallest_even)) {\n          \
    \  // update our smallest even integer and its index\n            $smallest_even\
    \ = $value;\n            $smallest_even_index = $index;\n        }\n    }\n  \
    \  // if we have a smallest even integer\n    if ($smallest_even !== null) {\n\
    \        // return our smallest even integer and its index\n        return [$smallest_even,\
    \ $smallest_even_index];\n    }\n    // we have no smallest even integer so return\
    \ nothing\n    return [];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (count($arr)\
    \ == 0) {\n        return [];\n    }\n    $sm = null;\n    $idx = null;\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            if ($sm\
    \ == null) {\n                $sm = $value;\n                $idx = $key;\n  \
    \          } else {\n                if ($value < $sm) {\n                   \
    \ $sm = $value;\n                    $idx = $key;\n                }\n       \
    \     }\n        }\n    }\n    if ($sm == null) {\n        return [];\n    }\n\
    \    return [$sm, $idx];\n}\n\n$arr = [4,2,3];\nvar_dump(pluck($arr));\n\n$arr\
    \ = [1,2,3];\nvar_dump(pluck($arr));\n\n$arr = [];\nvar_dump(pluck($arr));\n\n\
    $arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\narray(2) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(1)\n}\narray(0) {\n}\narray(2) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7tgi6wm.php:71\n\
    Stack trace:\n#0 /tmp/tmpp7tgi6wm.php(78): test()\n#1 {main}\n  thrown in /tmp/tmpp7tgi6wm.php\
    \ on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min_index = 0;\n\
    \    $min_value = 0;\n    $found = false;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] % 2 == 0) {\n            if (!$found) {\n    \
    \            $min_index = $i;\n                $min_value = $arr[$i];\n      \
    \          $found = true;\n            } else if ($arr[$i] < $min_value) {\n \
    \               $min_index = $i;\n                $min_value = $arr[$i];\n   \
    \         }\n        }\n    }\n    if ($found)\n        return [$min_value, $min_index];\n\
    \    return [];\n}\n\nif (require '../vendor/autoload.php') {\n    $arr = [4,\
    \ 2, 3];\n    $output = pluck($arr);\n    dump($output);\n    $arr = [1, 2, 3];\n\
    \    $output = pluck($arr);\n    dump($output);\n    $arr = [];\n    $output =\
    \ pluck($arr);\n    dump($output);\n    $arr = [5, 0, 3, 0, 4, 2];\n    $output\
    \ = pluck($arr);\n    dump($output);\n}\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: require(../vendor/autoload.php): failed to open stream: No such\
    \ file or directory in /tmp/tmp2ucj820o.php on line 48\n\nFatal error: require():\
    \ Failed opening required '../vendor/autoload.php' (include_path='.:') in /tmp/tmp2ucj820o.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = null;\n\
    \    $index = 10001;\n    foreach ($arr as $k => $v) {\n        if ($v % 2 ==\
    \ 0) {\n            if ($even === null) {\n                $even = $v;\n     \
    \           $index = $k;\n            } else {\n                if ($v < $even)\
    \ {\n                    $even = $v;\n                    $index = $k;\n     \
    \           }\n            }\n        }\n    }\n    if ($even === null) {\n  \
    \      return [];\n    }\n    return [$even, $index];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $result = [];\n  $currentSmallestValue\
    \ = null;\n  $currentSmallestIndex = null;\n  foreach ($arr as $index => $value)\
    \ {\n    if ($value % 2 == 0) {\n      if ($currentSmallestValue === null || $value\
    \ < $currentSmallestValue) {\n        $currentSmallestValue = $value;\n      \
    \  $currentSmallestIndex = $index;\n      }\n    }\n  }\n  if ($currentSmallestValue\
    \ === null) {\n    return [];\n  }\n  return [$currentSmallestValue, $currentSmallestIndex];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (count($arr)\
    \ == 0) {\n        return [];\n    }\n    $smallest = null;\n    $smallestIndex\
    \ = null;\n    foreach ($arr as $i => $val) {\n        if ($val % 2 == 0) {\n\
    \            if ($smallest == null) {\n                $smallest = $val;\n   \
    \             $smallestIndex = $i;\n            } else {\n                if ($val\
    \ < $smallest) {\n                    $smallest = $val;\n                    $smallestIndex\
    \ = $i;\n                }\n            }\n        }\n    }\n    if ($smallest\
    \ == null) {\n        return [];\n    }\n    return [$smallest, $smallestIndex];\n\
    }\n\n$test = [4,2,3];\necho \"Input: [4,2,3] Output: \".print_r(pluck($test)).\"\
    \\n\";\n$test = [1,2,3];\necho \"Input: [1,2,3] Output: \".print_r(pluck($test)).\"\
    \\n\";\n$test = [];\necho \"Input: [] Output: \".print_r(pluck($test)).\"\\n\"\
    ;\n$test = [5, 0, 3, 0, 4, 2];\necho \"Input: [5, 0, 3, 0, 4, 2] Output: \".print_r(pluck($test)).\"\
    \\n\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nInput: [4,2,3] Output: 1\nArray\n\
    (\n    [0] => 2\n    [1] => 1\n)\nInput: [1,2,3] Output: 1\nArray\n(\n)\nInput:\
    \ [] Output: 1\nArray\n(\n    [0] => 2\n    [1] => 5\n)\nInput: [5, 0, 3, 0, 4,\
    \ 2] Output: 1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwbm7hzq.php:68\n\
    Stack trace:\n#0 /tmp/tmpnwbm7hzq.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpnwbm7hzq.php\
    \ on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $elements = array_filter($arr,\
    \ function($element) {\n        return ($element % 2 == 0);\n    });\n    sort($elements);\n\
    \    if (empty($elements)) {\n        return [];\n    }\n    $val = $elements[0];\n\
    \    $index = array_search($val, $arr);\n    return [$val, $index];\n}\n$a = [4,2,3];\n\
    print_r(pluck($a));\necho \"\\n\";\n$a = [1,2,3];\nprint_r(pluck($a));\necho \"\
    \\n\";\n$a = [];\nprint_r(pluck($a));\necho \"\\n\";\n$a = [5, 0, 3, 0, 4, 2];\n\
    print_r(pluck($a));\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n\nArray\n(\n    [0] => 2\n   \
    \ [1] => 1\n)\n\nArray\n(\n)\n\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ return [];\n    $even = null;\n    $index = null;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            if (is_null($even))\
    \ {\n                $even = $value;\n                $index = $key;\n       \
    \     } elseif ($value < $even) {\n                $even = $value;\n         \
    \       $index = $key;\n            }\n        }\n    }\n    if (is_null($even))\
    \ return [];\n    return [$even, $index];\n}\n\n$a = [4,2,3];\nprint_r(pluck($a));\n\
    \n$a = [1,2,3];\nprint_r(pluck($a));\n\n$a = [];\nprint_r(pluck($a));\n\n$a =\
    \ [5, 0, 3, 0, 4, 2];\nprint_r(pluck($a));\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = [];\n \
    \   $evenIndexes = [];\n    foreach ($arr as $i => $val) {\n        if ($val %\
    \ 2 === 0) {\n            $evens[] = $val;\n            $evenIndexes[] = $i;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $minVal\
    \ = min($evens);\n    $minIndex = min($evenIndexes);\n    return [$minVal, $minIndex];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsawkz78p.php:48\n\
    Stack trace:\n#0 /tmp/tmpsawkz78p.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpsawkz78p.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min_even = PHP_INT_MAX;\n\
    \    $min_index = PHP_INT_MAX;\n    foreach ($arr as $i => $val) {\n        if\
    \ ($val < $min_even && $val % 2 == 0) {\n            $min_even = $val;\n     \
    \       $min_index = $i;\n        }\n    }\n    if ($min_even == PHP_INT_MAX)\
    \ {\n        return [];\n    }\n    return [$min_even, $min_index];\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ return [];\n    $evens = [];\n    foreach ($arr as $i => $v) {\n        if ($v\
    \ % 2 == 0) $evens[] = [$v, $i];\n    }\n    if (empty($evens)) return [];\n \
    \   array_multisort(array_column($evens, 0), SORT_ASC, $evens);\n    return $evens[0];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // your code here\n\
    }\n\"\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_d99oxk5.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  if (empty($arr)) return\
    \ [];\n  $evenNums = [];\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ % 2 === 0) $evenNums[$key] = $value;\n  }\n  if (empty($evenNums)) return [];\n\
    \  sort($evenNums);\n  $num = array_shift($evenNums);\n  $key = array_search($num,\
    \ $arr);\n  return [$num, $key];\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n//     if($arr == [])\
    \ {\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprpm3xgpj.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // your code here\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9pbm3zd.php:36\n\
    Stack trace:\n#0 /tmp/tmpp9pbm3zd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpp9pbm3zd.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $minValue = NULL;\n    $minIndex = NULL;\n    foreach ($arr as $index =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            if ($minValue === NULL\
    \ || $value < $minValue) {\n                $minValue = $value;\n            \
    \    $minIndex = $index;\n            }\n        }\n    }\n    if ($minValue !==\
    \ NULL) {\n        $result = [$minValue, $minIndex];\n    }\n    return $result;\n\
    }\n\n$output_array = array();\n\n$output_array[] = pluck(array(4,2,3));\n$output_array[]\
    \ = pluck(array(1,2,3));\n$output_array[] = pluck(array());\n$output_array[] =\
    \ pluck(array(5, 0, 3, 0, 4, 2));\n\necho json_encode($output_array);\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '[[2,1],[2,1],[],[0,1]]'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (!$arr) return\
    \ [];\n    $even = null;\n    $even_i = null;\n    foreach ($arr as $i => $v)\
    \ {\n        if ($v % 2 == 0) {\n            if (!$even || $v < $even) {\n   \
    \             $even = $v;\n                $even_i = $i;\n            }\n    \
    \    }\n    }\n    if ($even) return [$even, $even_i];\n    return [];\n}\n\n\
    $tests = [\n    [[4,2,3], [2, 1]],\n    [[1,2,3], [2, 1]],\n    [[], []],\n  \
    \  [[5, 0, 3, 0, 4, 2], [0, 1]],\n];\n\nforeach ($tests as [$in, $out]) {\n  \
    \  if (pluck($in) != $out) {\n        echo \"ERROR: pluck($in) != $out\\n\";\n\
    \    }\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "ERROR: pluck(Array) != Array\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpscrnsdds.php:63\nStack trace:\n#0 /tmp/tmpscrnsdds.php(70): test()\n\
    #1 {main}\n  thrown in /tmp/tmpscrnsdds.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $ret = [];\n  $min_idx\
    \ = PHP_INT_MAX;\n  $min_val = PHP_INT_MAX;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] % 2 === 0 && $arr[$i] < $min_val) {\n      $min_val\
    \ = $arr[$i];\n      $min_idx = $i;\n    }\n  }\n  if ($min_idx === PHP_INT_MAX)\
    \ return [];\n  return [$min_val, $min_idx];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $minEven = 99999999999999999999999999;\n\
    \  $minEvenIdx = 99999999999999999999999999;\n  foreach ($arr as $i => $node)\
    \ {\n    if ($node > 0 && $node % 2 == 0 && $node < $minEven) {\n      $minEven\
    \ = $node;\n      $minEvenIdx = $i;\n    }\n  }\n  if ($minEvenIdx === 99999999999999999999999999)\
    \ {\n    return [];\n  }\n  return [$minEven, $minEvenIdx];\n}\n\n$res = pluck([1,2,3]);\n\
    $res = pluck([5, 0, 3, 0, 4, 2]);\nprint_r($res);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpkbha6btr.php:53\nStack trace:\n#0 /tmp/tmpkbha6btr.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkbha6btr.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  // This is your job.\
    \ :)\n}\n\nprint_r(pluck([4,2,3]));\nprint_r(pluck([1,2,3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppc13fjfx.php:40\n\
    Stack trace:\n#0 /tmp/tmppc13fjfx.php(50): test()\n#1 {main}\n  thrown in /tmp/tmppc13fjfx.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$min_even = 0;\n\t\
    $min_index = 0;\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif ($arr[$i] %\
    \ 2 == 0) {\n\t\t\tif ($min_even == 0 || $arr[$i] < $min_even) {\n\t\t\t\t$min_even\
    \ = $arr[$i];\n\t\t\t\t$min_index = $i;\n\t\t\t}\n\t\t}\n\t}\n\tif ($min_even\
    \ == 0) return [];\n\treturn [$min_even, $min_index];\n}\n\n$tests = [\n\t[4,2,3],\n\
    \t[1,2,3],\n\t[],\n\t[5, 0, 3, 0, 4, 2],\n];\n\nforeach ($tests as $test) {\n\t\
    print_r(pluck($test));\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp0zr3ho64.php:60\nStack trace:\n\
    #0 /tmp/tmp0zr3ho64.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp0zr3ho64.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    $even = [];\n    foreach ($arr as $key =>\
    \ $val) {\n        if ($val % 2 == 0) {\n            $even[$key] = $val;\n   \
    \     }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    asort($even);\n\
    \    $index = key($even);\n    $value = array_shift($even);\n    return [$value,\
    \ $index];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  if(!$arr) return [];\n\
    \  foreach($arr as $value) {\n    if($value%2 === 0) {\n      $smallest = $value;\n\
    \      break;\n    }\n  }\n  if(!isset($smallest)) return [];\n  $smallestIndex\
    \ = 0;\n  foreach($arr as $i => $value) {\n    if($value%2 === 0 && $value < $smallest)\
    \ {\n      $smallest = $value;\n      $smallestIndex = $i;\n    }\n  }\n  return\
    \ [$smallest, $smallestIndex];\n}\n\n$arr = [4,2,3];\nvar_dump(pluck($arr));\n\
    $arr = [1,2,3];\nvar_dump(pluck($arr));\n$arr = [];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\narray(2) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(0)\n}\narray(0) {\n}\narray(2) {\n  [0]=>\n  int(0)\n\
    \  [1]=>\n  int(0)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp906fsazo.php:60\n\
    Stack trace:\n#0 /tmp/tmp906fsazo.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp906fsazo.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $nums = array_filter($arr,\
    \ function($n) { return $n % 2 == 0; });\n    if (count($nums) == 0) {\n     \
    \   return [];\n    }\n    $minVal = min($nums);\n    $idx = array_search($minVal,\
    \ $arr);\n    return [$minVal, $idx];\n}\nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // get the even\
    \ numbers in the array\n    $even_numbers = array_filter($arr, function($elem)\
    \ {\n        return $elem % 2 == 0;\n    });\n    if (count($even_numbers) ==\
    \ 0) {\n        return [];\n    }\n    // get the smallest even number\n    $smallest_even_number\
    \ = min($even_numbers);\n    // get the index of the smallest even number\n  \
    \  $index = array_search($smallest_even_number, $arr);\n    return [$smallest_even_number,\
    \ $index];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    $smallestEven = PHP_INT_MAX;\n    foreach ($arr as $key\
    \ => $val) {\n        if ($val % 2 == 0) {\n            $even[] = $val;\n    \
    \        if ($val < $smallestEven) {\n                $smallestEven = $val;\n\
    \            }\n        }\n    }\n    if (!empty($even)) {\n        if (count($even)\
    \ == 1) {\n            return [$even[0], array_search($even[0], $arr)];\n    \
    \    } else {\n            foreach ($even as $key => $val) {\n               \
    \ if ($val == $smallestEven) {\n                    return [$smallestEven, array_search($smallestEven,\
    \ $arr)];\n                }\n            }\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = [];\n \
    \   foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n     \
    \       $evens[] = $value;\n        }\n    }\n    if (!$evens) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $min_key = array_search($min, $arr);\n\
    \    return [$min, $min_key];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $smallest = 10001;\n\
    \    $index = 0;\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0 && $value < $smallest) {\n            $smallest = $value;\n         \
    \   $index = $key;\n        }\n    }\n    if ($smallest == 10001) {\n        return\
    \ [];\n    }\n    return [$smallest, $index];\n}\n\n$arr = [4,2,3];\nprint_r(pluck($arr));\n\
    \n$arr = [1,2,3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  foreach ($arr as $index => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = [$value, $index];\n        }\n    }\n    if (empty($even))\
    \ {\n        return [];\n    }\n    usort($even, function ($a, $b) {\n       \
    \ if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n        }\n      \
    \  return $a[0] - $b[0];\n    });\n    return $even[0];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // your code here\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7fpewcs.php:36\n\
    Stack trace:\n#0 /tmp/tmpq7fpewcs.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpq7fpewcs.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  // determine if there\
    \ are any even numbers\n  // if not return []\n  $even = false;\n  $even_index\
    \ = 0;\n  foreach ($arr as $key => $value) {\n    if ($value % 2 == 0) {\n   \
    \   $even = true;\n      $even_index = $key;\n      break;\n    }\n  }\n  if (!$even)\
    \ {\n    return [];\n  }\n  // determine the minimum even value\n  $min = PHP_INT_MAX;\n\
    \  foreach ($arr as $key => $value) {\n    if ($value % 2 == 0 && $value < $min)\
    \ {\n      $min = $value;\n      $min_index = $key;\n    }\n  }\n  return [$min,\
    \ $min_index];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $arr_2 = [];\n \
    \   $arr_2[] = 0;\n    $arr_2[] = -1;\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0 && $value <= $arr_2[0]) {\n            $arr_2[0]\
    \ = $value;\n            $arr_2[1] = $key;\n        }\n    }\n    if ($arr_2[1]\
    \ == -1) {\n        return [];\n    }\n    return $arr_2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp17k1lf6v.php:48\n\
    Stack trace:\n#0 /tmp/tmp17k1lf6v.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp17k1lf6v.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $evens = array_filter($arr, function($val) {\n        return ($val % 2 ==\
    \ 0);\n    });\n    if(empty($evens)) {\n        return $result;\n    }\n    $min\
    \ = min($evens);\n    $result = [$min, array_search($min, $arr)];\n    return\
    \ $result;\n}\n\n$arr = [1,2,3];\necho implode(', ', pluck($arr)) . PHP_EOL;\n\
    \n$arr = [4,2,3];\necho implode(', ', pluck($arr)) . PHP_EOL;\n\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\necho implode(', ', pluck($arr)) . PHP_EOL;\n\n$arr = [];\necho\
    \ implode(', ', pluck($arr)) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2, 1\n2, 1\n0, 1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $count = count($arr);\n\
    \  $smallest = -1;\n  $index = -1;\n  for ($i = 0; $i < $count; $i++) {\n    if\
    \ ($arr[$i] % 2 == 0) {\n      if ($smallest == -1) {\n        $smallest = $arr[$i];\n\
    \        $index = $i;\n      } else {\n        if ($arr[$i] < $smallest) {\n \
    \         $smallest = $arr[$i];\n          $index = $i;\n        }\n      }\n\
    \    }\n  }\n  if ($smallest == -1) {\n    return [];\n  }\n  return [$smallest,\
    \ $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evenVal = null;\n\
    \    $evenValIndex = null;\n    foreach ($arr as $key => $val) {\n        if ($val\
    \ % 2 == 0) {\n            if (is_null($evenVal)) {\n                $evenVal\
    \ = $val;\n                $evenValIndex = $key;\n            } else {\n     \
    \           if ($val < $evenVal) {\n                    $evenVal = $val;\n   \
    \                 $evenValIndex = $key;\n                }\n            }\n  \
    \      }\n    }\n    if (!is_null($evenVal)) {\n        return [$evenVal, $evenValIndex];\n\
    \    } else {\n        return [];\n    }\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($val) {\n        return $val % 2 == 0;\n    });\n    $min = min($evens);\n\
    \    $key = array_search($min, $arr);\n    return [$min, $key];\n}\n\n$tests =\
    \ [\n    [4,2,3],\n    [1,2,3],\n    [],\n    [5, 0, 3, 0, 4, 2],\n];\n\nforeach\
    \ ($tests as $test) {\n    $res = pluck($test);\n    echo implode(', ', $res)\
    \ . \"\\n\";\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2, 1\n2, 1\n\nWarning: min(): Array must contain at least one element in\
    \ /tmp/tmp70p6nvkz.php on line 31\n, \n0, 1\n\nWarning: min(): Array must contain\
    \ at least one element in /tmp/tmp70p6nvkz.php on line 31\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp70p6nvkz.php:54\nStack trace:\n#0 /tmp/tmp70p6nvkz.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp70p6nvkz.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    $zero = [];\n    $zeros = [];\n    $evens = [];\n    $odds\
    \ = [];\n    foreach ($arr as $i => $v) {\n        switch ($v) {\n           \
    \ case 0:\n                $zero[] = $i;\n                break;\n           \
    \ case ($v % 2 == 0):\n                $even[] = $i;\n                break;\n\
    \            case ($v % 2 == 1):\n                $odd[] = $i;\n             \
    \   break;\n        }\n    }\n    if (!empty($zero)) {\n        $zeros = [\n \
    \           [0, min($zero)],\n        ];\n    }\n    if (!empty($even)) {\n  \
    \      $evens = [\n            [\n                $arr[min($even)],\n        \
    \        min($even),\n            ],\n        ];\n    }\n    if (!empty($odd))\
    \ {\n        $odds = [\n            [\n                $arr[min($odd)],\n    \
    \            min($odd),\n            ],\n        ];\n    }\n    if (empty($even)\
    \ && empty($odd) && empty($zero)) {\n        return [];\n    }\n    return min($zeros,\
    \ $evens, $odds);\n}\n\nclass PluckCest\n{\n    public function _before(UnitTester\
    \ $I)\n    {\n    }\n\n    public function pluck1(UnitTester $I)\n    {\n    \
    \    $I->assertEquals(pluck([4, 2, 3]), [2, 1]);\n    }\n    public function pluck2(UnitTester\
    \ $I)\n    {\n        $I->assertEquals(pluck([1, 2, 3]), [2, 1]);\n    }\n   \
    \ public function pluck3(UnitTester $I)\n    {\n        $I->assertEquals(pluck([]),\
    \ []);\n    }\n    public function pluck4(UnitTester $I)\n    {\n        $I->assertEquals(pluck([5,\
    \ 0, 3, 0, 4, 2]), [0, 1]);\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4vikkkbp.php:102\n\
    Stack trace:\n#0 /tmp/tmp4vikkkbp.php(112): test()\n#1 {main}\n  thrown in /tmp/tmp4vikkkbp.php\
    \ on line 102\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $arrCpy = $arr;\n\
    \    rsort($arrCpy);\n    $returnArr = [];\n    foreach ($arrCpy as $value) {\n\
    \        if ($value % 2 == 0) {\n            $returnArr[] = $value;\n        \
    \    $returnArr[] = array_search($value, $arr);\n            return $returnArr;\n\
    \        }\n    }\n    return $returnArr;\n}\necho var_export(pluck([4,2,3]),\
    \ true); // should be [2, 1]\necho var_export(pluck([1,2,3]), true); // should\
    \ be [2, 1]\necho var_export(pluck([]), true); // should be []\necho var_export(pluck([5,\
    \ 0, 3, 0, 4, 2]), true); // should be [0, 1]\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array (\n  0 => 4,\n  1 => 0,\n)array (\n  0 => 2,\n  1 => 1,\n)array (\n\
    )array (\n  0 => 4,\n  1 => 4,\n)\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpkppx8r0t.php:49\nStack trace:\n#0 /tmp/tmpkppx8r0t.php(59): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkppx8r0t.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (count($arr)\
    \ === 0) return [];\n    $min_even = INF;\n    $min_even_idx = 0;\n    for ($i\
    \ = 0; $i < count($arr); $i++) {\n        if ($arr[$i] % 2 === 0 && $arr[$i] <\
    \ $min_even) {\n            $min_even = $arr[$i];\n            $min_even_idx =\
    \ $i;\n        }\n    }\n    if ($min_even === INF) return [];\n    return [$min_even,\
    \ $min_even_idx];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    $evens = [];\n    $even_count = 0;\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $even_count++;\n        }\n    }\n    if ($even_count\
    \ == 0) {\n        return [];\n    }\n    sort($evens);\n    $sml_even = $evens[0];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value == $sml_even) {\n\
    \            return [$value, $key];\n        }\n    }\n}\n$input1 = [4,2,3];\n\
    $input2 = [1,2,3];\n$input3 = [];\n$input4 = [5, 0, 3, 0, 4, 2];\n\nprint_r(pluck($input1));\n\
    print_r(pluck($input2));\nprint_r(pluck($input3));\nprint_r(pluck($input4));\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n)\nArray\n(\n)\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\t$smallestEven = null;\n\
    \t$smallestEvenIndex = PHP_INT_MAX;\n\t$arrSize = count($arr);\n\tfor ($i = 0;\
    \ $i < $arrSize; $i++) {\n\t\tif ($arr[$i] % 2 == 0) {\n\t\t\tif ($smallestEven\
    \ == null || $arr[$i] < $smallestEven) {\n\t\t\t\t$smallestEven = $arr[$i];\n\t\
    \t\t\t$smallestEvenIndex = $i;\n\t\t\t}\n\t\t}\n\t}\n\tif ($smallestEven == null)\
    \ {\n\t\treturn [];\n\t}\n\treturn [$smallestEven, $smallestEvenIndex];\n}\n\n\
    $a = [4,2,3];\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_efeg5j_.php:54\n\
    Stack trace:\n#0 /tmp/tmp_efeg5j_.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp_efeg5j_.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $curMin = -1;\n\
    \    $index = -1;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ % 2 == 0) {\n            if ($curMin == -1) {\n                $curMin = $arr[$i];\n\
    \                $index = $i;\n            } else {\n                if ($arr[$i]\
    \ < $curMin) {\n                    $curMin = $arr[$i];\n                    $index\
    \ = $i;\n                }\n            }\n        }\n    }\n    if ($curMin ==\
    \ -1) {\n        return [];\n    }\n    return [$curMin, $index];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $res = [];\n   \
    \ $even = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ % 2 == 0) {\n            $even[] = $arr[$i];\n        }\n    }\n    if (!empty($even))\
    \ {\n        $min = min($even);\n        $key = array_search($min, $arr);\n  \
    \      $res[] = $min;\n        $res[] = $key;\n    }\n    return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    // BEGIN (write\
    \ your solution here)\n    $result = [];\n    $resultEven = [];\n    $resultIndex\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $resultEven[] = $value;\n            $resultIndex[] = $key;\n\
    \        }\n    }\n    if (empty($resultEven)) {\n        return [];\n    }\n\
    \    $min = min($resultEven);\n    $result = [$min, $resultIndex[array_search($min,\
    \ $resultEven)]];\n    return $result;\n    // END\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $plucked = [];\n \
    \ foreach ($arr as $i => $v) {\n    if ($v % 2 == 0) {\n      if (empty($plucked))\
    \ {\n        $plucked = [$v, $i];\n      } else {\n        if ($v < $plucked[0])\
    \ {\n          $plucked = [$v, $i];\n        }\n      }\n    }\n  }\n  return\
    \ $plucked;\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\necho implode(', ', pluck($arr));\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 0, 1
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  if (empty($arr)) return\
    \ [];\n  $evens = [];\n  $i = 0;\n  foreach ($arr as $key => $val) {\n    if ($val\
    \ % 2 == 0) {\n      $evens[$key] = $val;\n    }\n  }\n  if (empty($evens)) return\
    \ [];\n  $min = min($evens);\n  $ret = [$min, array_search($min, $evens)];\n \
    \ return $ret;\n}\n\nclass PluckTest extends TestCase {\n  public function testPluck()\
    \ {\n    $this->assertEquals([2, 1], pluck([4,2,3]));\n    $this->assertEquals([2,\
    \ 1], pluck([1,2,3]));\n    $this->assertEquals([], pluck([]));\n    $this->assertEquals([0,\
    \ 1], pluck([5, 0, 3, 0, 4, 2]));\n  }\n}\n\n(new PluckTest)->run();\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'TestCase' not found in /tmp/tmpxpgezj0w.php:42\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmpxpgezj0w.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $evenIndexes = [];\n\
    \  $min = 0;\n  foreach ($arr as $index => $value) {\n    if ($value % 2 === 0)\
    \ {\n      $evenIndexes[] = $index;\n      if ($min === 0 || $value < $min) {\n\
    \        $min = $value;\n      }\n    }\n  }\n  $minIndex = PHP_INT_MAX;\n  foreach\
    \ ($evenIndexes as $evenIndex) {\n    if ($evenIndex < $minIndex) {\n      $minIndex\
    \ = $evenIndex;\n    }\n  }\n  return $minIndex === PHP_INT_MAX ? [] : [$min,\
    \ $minIndex];\n}\n$tests = [];\n$tests[] = ['input' => [4, 2, 3], 'expected' =>\
    \ [2, 1]];\n$tests[] = ['input' => [1, 2, 3], 'expected' => [2, 1]];\n$tests[]\
    \ = ['input' => [], 'expected' => []];\n$tests[] = ['input' => [5, 0, 3, 0, 4,\
    \ 2], 'expected' => [0, 1]];\nforeach ($tests as $index => $test) {\n  $result\
    \ = pluck($test['input']);\n  if ($test['expected'] !== $result) {\n    echo 'Error\
    \ at test' . ($index + 1) . PHP_EOL;\n    exit(1);\n  }\n}\necho 'Test OK!' .\
    \ PHP_EOL;\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Error at test1\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = INF;\n  \
    \  $index = -1;\n    $hasEven = false;\n    foreach ($arr as $i => $v) {\n   \
    \     if ($v % 2 == 0) {\n            $hasEven = true;\n            if ($v < $min)\
    \ {\n                $min = $v;\n                $index = $i;\n            }\n\
    \        }\n    }\n    if ($hasEven) {\n        return [$min, $index];\n    }\n\
    \    return [];\n}\n\necho '<pre> pluck([1,2,3])        : '; print_r(pluck([1,2,3]));\n\
    echo '<pre> pluck([4,2,3])        : '; print_r(pluck([4,2,3]));\necho '<pre> pluck([5,\
    \ 0, 3, 0, 4, 2]) : '; print_r(pluck([5, 0, 3, 0, 4, 2]));\necho '<pre> pluck([])\
    \             : '; print_r(pluck([]));\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre> pluck([1,2,3])        : Array\n(\n    [0] => 2\n    [1] => 1\n)\n\
    <pre> pluck([4,2,3])        : Array\n(\n    [0] => 2\n    [1] => 1\n)\n<pre> pluck([5,\
    \ 0, 3, 0, 4, 2]) : Array\n(\n    [0] => 0\n    [1] => 1\n)\n<pre> pluck([]) \
    \            : Array\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $minVal = PHP_INT_MAX;\n\
    \    $minIndex = -1;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ % 2 == 0 && $arr[$i] < $minVal) {\n            $minVal = $arr[$i];\n       \
    \     $minIndex = $i;\n        }\n    }\n    if ($minIndex > -1) {\n        return\
    \ [$minVal, $minIndex];\n    }\n    return [];\n}\necho implode(\", \", pluck([4,2,3]))\
    \ . PHP_EOL;\necho implode(\", \", pluck([1,2,3])) . PHP_EOL;\necho implode(\"\
    , \", pluck([])) . PHP_EOL;\necho implode(\", \", pluck([5, 0, 3, 0, 4, 2])) .\
    \ PHP_EOL;\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2, 1\n2, 1\n\n0, 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\tif (empty($arr)) {\n\
    \t\treturn [];\n\t}\n\t$arrEven = [];\n\tforeach ($arr as $key => $value) {\n\t\
    \tif ($value % 2 == 0) {\n\t\t\t$arrEven[$key] = $value;\n\t\t}\n\t}\n\tif (empty($arrEven))\
    \ {\n\t\treturn [];\n\t}\n\tasort($arrEven);\n\treset($arrEven);\n\t$newKey =\
    \ key($arrEven);\n\t$newValue = current($arrEven);\n\treturn [$newValue, $newKey];\n\
    }\necho '<pre>';\nprint_r(pluck([4,2,3]));\necho '</pre>';\necho '<pre>';\nprint_r(pluck([1,2,3]));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(pluck([]));\necho '</pre>';\necho '<pre>';\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 1\n)\n</pre><pre>Array\n(\n   \
    \ [0] => 2\n    [1] => 1\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n   \
    \ [0] => 0\n    [1] => 1\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n  $evens = [];\n  for\
    \ ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] % 2 == 0) {\n      $evens[]\
    \ = [$arr[$i], $i];\n    }\n  }\n  if (count($evens) == 0) {\n    return [];\n\
    \  }\n  usort($evens, function($a, $b) {\n    if ($a[0] < $b[0]) {\n      return\
    \ -1;\n    } else if ($a[0] > $b[0]) {\n      return 1;\n    } else {\n      if\
    \ ($a[1] < $b[1]) {\n        return -1;\n      } else if ($a[1] > $b[1]) {\n \
    \       return 1;\n      } else {\n        return 0;\n      }\n    }\n  });\n\
    \  return $evens[0];\n}\n\n$tests = [];\n$tests[] = ['input' => [], 'expected'\
    \ => []];\n$tests[] = ['input' => [1,3,5], 'expected' => []];\n$tests[] = ['input'\
    \ => [2,4,6], 'expected' => [2, 0]];\n$tests[] = ['input' => [1,3,5,7], 'expected'\
    \ => []];\n$tests[] = ['input' => [2,4,6,8], 'expected' => [2, 0]];\n$tests[]\
    \ = ['input' => [2,4,6,8,10], 'expected' => [2, 0]];\n$tests[] = ['input' => [4,2,3],\
    \ 'expected' => [2, 1]];\n$tests[] = ['input' => [1,2,3], 'expected' => [2, 1]];\n\
    $tests[] = ['input' => [5, 0, 3, 0, 4, 2], 'expected' => [0, 1]];\n$tests[] =\
    \ ['input' => [5, 0, 3, 0, 4, 1], 'expected' => [0, 1]];\n$tests[] = ['input'\
    \ => [5, 0, 3, 0, 4, 0],\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4k3x2_dt.php on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    if (empty($arr))\
    \ {\n        return [];\n    }\n    $min = null;\n    $min_index = null;\n   \
    \ foreach ($arr as $index => $value) {\n        if ($value % 2 === 0) {\n    \
    \        if ($min === null || $value < $min) {\n                $min = $value;\n\
    \                $min_index = $index;\n            }\n        }\n    }\n    if\
    \ ($min === null) {\n        return [];\n    }\n    return [$min, $min_index];\n\
    }\n$arr = [4,2,3];\nprint_r(pluck($arr));\necho PHP_EOL;\n$arr = [1,2,3];\nprint_r(pluck($arr));\n\
    echo PHP_EOL;\n$arr = [];\nprint_r(pluck($arr));\necho PHP_EOL;\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n\nArray\n(\n    [0] => 2\n   \
    \ [1] => 1\n)\n\nArray\n(\n)\n\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkkqrjvq8.php:36\n\
    Stack trace:\n#0 /tmp/tmpkkqrjvq8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpkkqrjvq8.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
