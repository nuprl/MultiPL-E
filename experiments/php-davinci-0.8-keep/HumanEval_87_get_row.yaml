name: HumanEval_87_get_row
language: php
prompt: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
  \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
  \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
  // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
  \ by rows in ascending order.\n// Also, sort coordinates of the row by columns in\
  \ descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n\
  // [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([],\
  \ 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row($lst,\
  \ $x) {\n"
tests: "function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
  \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
  \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
  \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
  \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1,\
  \ 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2,\
  \ 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5,\
  \ 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)),\
  \ 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $indexes = [];\n    $rowCount = count($lst);\n    $columnCount\
    \ = 0;\n    for ($i = 0; $i < $rowCount; $i++) {\n        $columnCount = count($lst[$i]);\n\
    \        for ($j = 0; $j < $columnCount; $j++) {\n            if ($lst[$i][$j]\
    \ == $x) {\n                $indexes[] = array($i, $j);\n            }\n     \
    \   }\n    }\n    usort($indexes, function ($a, $b) {\n        return $a[0] ==\
    \ $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n    });\n    return $indexes;\n}\n",
  "    $coordinates = [];\n    foreach ($lst as $row => $columns) {\n        $res\
    \ = [];\n        foreach ($columns as $col => $item) {\n            if ($item\
    \ == $x) {\n                $res[] = [$row, $col];\n            }\n        }\n\
    \        if ($res) {\n            $coordinates = array_merge($coordinates, $res);\n\
    \        }\n    }\n    foreach ($coordinates as $key => $value) {\n        $sort[$key]\
    \ = $value[0];\n    }\n    array_multisort($sort, SORT_ASC, $coordinates);\n \
    \   foreach ($coordinates as $key => $value) {\n        $sort[$key] = $value[1];\n\
    \    }\n    array_multisort($sort, SORT_DESC, $coordinates);\n    return $coordinates;\n\
    }\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3,\
    \ 4, 5, 1]\n];\n$x = 1;\nprint_r(get_row($lst, $x));", "  $res = [];\n  for ($i\
    \ = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n      if ($lst[$i][$j] == $x) {\n        $res[] = [$i, $j];\n      }\n  \
    \  }\n  }\n  usort($res, function($a, $b) {\n    if ($a[0] < $b[0]) {\n      return\
    \ -1;\n    } elseif ($a[0] > $b[0]) {\n      return 1;\n    } else {\n      if\
    \ ($a[1] < $b[1]) {\n        return 1;\n      } elseif ($a[1] > $b[1]) {\n   \
    \     return -1;\n      } else {\n        return 0;\n      }\n    }\n  });\n \
    \ return $res;\n}\n", "    $res = [];\n    foreach ($lst as $i => $row) {\n  \
    \      $sub = array_keys($row, $x);\n        if (!empty($sub)) {\n           \
    \ foreach ($sub as $s) {\n                $res[] = [$i, $s];\n            }\n\
    \        }\n    }\n    sort($res);\n    return $res;\n}\nprint_r(get_row([\n \
    \   [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1));", "    $result\
    \ = [];\n    foreach ($lst as $k => $v) {\n        $r = array_search($x, $v);\n\
    \        if ($r !== false) {\n            $result[] = [$k, $r];\n        }\n \
    \   }\n    uasort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return ($a[1] < $b[1]) ? 1 : -1;\n        }\n        return ($a[0]\
    \ < $b[0]) ? -1 : 1;\n    });\n    return $result;\n}", "    $res = [];\n    foreach\
    \ ($lst as $key => $l) {\n        foreach ($l as $k => $s) {\n            if ($s\
    \ == $x) {\n                $res[] = [$key, $k];\n            }\n        }\n \
    \   }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n  \
    \          return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $res;\n}", "    $res = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if\
    \ ($lst[$i][$j] == $x) {\n                $res[] = [$i, $j];\n            }\n\
    \        }\n    }\n    sort($res);\n    usort($res, function ($a, $b) {\n    \
    \    if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n   \
    \     return $a[0] - $b[0];\n    });\n    return $res;\n}", "  $result = [];\n\
    \  for ($row = 0; $row < count($lst); $row++) {\n    for ($col = 0; $col < count($lst[$row]);\
    \ $col++) {\n      if ($lst[$row][$col] == $x) {\n        $result[] = [$row, $col];\n\
    \      }\n    }\n  }\n  return $result;\n}\n", "    $output = [];\n    foreach\
    \ ($lst as $key => $l) {\n        foreach ($l as $subKey => $subL) {\n       \
    \     if ($subL == $x) {\n                $output[] = [$key, $subKey];\n     \
    \       }\n        }\n    }\n    usort($output, function ($a, $b) {\n        if\
    \ ($a[0] > $b[0]) {\n            return 1;\n        } elseif ($a[0] < $b[0]) {\n\
    \            return -1;\n        } else {\n            if ($a[1] > $b[1]) {\n\
    \                return -1;\n            } elseif ($a[1] < $b[1]) {\n        \
    \        return 1;\n            } else {\n                return 0;\n        \
    \    }\n        }\n    });\n    return $output;\n}\n", "    $result = [];\n  \
    \  foreach ($lst as $i => $row) {\n        if (in_array($x, $row)) {\n       \
    \     foreach ($row as $j => $v) {\n                if ($v == $x) $result[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    usort($result, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) return $b[1] - $a[1];\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\n$test = [\n    [[1,2,3,4,5,6],\n\
    \    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]], 1,\n    [[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]]\n];\n\n$result = get_row($test[0], $test[1]);\necho \"\\nresult\
    \ is \" . (print_r($result, true) == print_r($test[2], true) ? 'pass' : 'fail');",
  "    $sort = [];\n    foreach ($lst as $y => $row) {\n        foreach ($row as $x2\
    \ => $val) {\n            if ($val == $x) {\n                $sort[] = [$y, $x2];\n\
    \            }\n        }\n    }\n    sort($sort);\n    foreach ($sort as $coord)\
    \ {\n        $sort2[$coord[0]][] = $coord[1];\n    }\n    foreach ($sort2 as $key\
    \ => $val) {\n        rsort($sort2[$key]);\n    }\n    $res = [];\n    foreach\
    \ ($sort2 as $y => $row) {\n        foreach ($row as $x) {\n            $res[]\
    \ = [$y, $x];\n        }\n    }\n    return $res;\n}\n", "  $coordinates = [];\n\
    \  foreach ($lst as $row_index => $row) {\n    foreach ($row as $column_index\
    \ => $number) {\n      if ($number == $x) {\n        $coordinates[] = [$row_index,\
    \ $column_index];\n      }\n    }\n  }\n  // Sort rows by rows in ascending order\n\
    \  usort($coordinates, function($a, $b) {\n    return $a[0] - $b[0];\n  });\n\
    \  // Sort columns in descending order\n  $sorted_coordinates = [];\n  foreach\
    \ ($coordinates as $coordinate) {\n    // Check if there are any rows with same\
    \ value\n    if (isset($sorted_coordinates[$coordinate[0]])) {\n      // There\
    \ is a row with same value\n      $sorted_coordinates[$coordinate[0]][] = $coordinate[1];\n\
    \    } else {\n      // No rows with same value\n      $sorted_coordinates[$coordinate[0]]\
    \ = [$coordinate[1]];\n    }\n  }\n  // Sort columns in descending order\n  foreach\
    \ ($sorted_coordinates as $row_index => $columns) {\n    rsort($sorted_coordinates[$row_index]);\n\
    \  }\n  $final_coordinates = [];\n  foreach ($sorted_coordinates as $row_index\
    \ => $columns) {\n    foreach ($columns as $column_index) {\n      $final_coordinates[]\
    \ = [$row_index, $column_index];\n    }\n  }\n  return $final_coordinates;\n}\n",
  "    $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $result[] = [$i, $j];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        return $a[0] <=> $b[0];\n    });\n    usort($result,\
    \ function ($a, $b) {\n        return $b[1] <=> $a[1];\n    });\n    return $result;\n\
    }", "  $r = [];\n  foreach ($lst as $i => $row) {\n    if ($i) {\n      $r[$i\
    \ - 1] = array_filter($row, function($v) use ($x) { return $v == $x; });\n   \
    \ }\n  }\n  $r = array_map(function($v, $i) { return array_fill_keys($v, $i);\
    \ }, $r, array_keys($r));\n  $r = array_map(function($v) {\n    $c = array_map(function($v)\
    \ { return $v[0]; }, $v);\n    array_multisort($c, SORT_DESC, $v);\n    return\
    \ $v;\n  }, $r);\n  $r = array_reduce($r, function($c, $v) { return array_merge($c,\
    \ $v); }, []);\n  return $r;\n}\nprint_r(get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]],\
    \ 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[], [1], [1, 2, 3]], 3));",
  "    $output = [];\n    foreach ($lst as $k => $v) {\n        $index = 0;\n    \
    \    if (($index = array_search($x, $v)) !== false) {\n            $output[] =\
    \ [$k, $index];\n        }\n    }\n    if (empty($output)) {\n        return [];\n\
    \    }\n    usort($output, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $output;\n}\necho(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));", "    $result = [];\n    foreach ($lst\
    \ as $row => $array) {\n        foreach ($array as $column => $value) {\n    \
    \        if ($value == $x) {\n                $result[] = [$row, $column];\n \
    \           }\n        }\n    }\n    rsort($result);\n    return $result;\n}\n\
    print_r(get_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1));\nprint_r(get_row([],\
    \ 1));\nprint_r(get_row([[], [1], [1, 2, 3]], 3));", "    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        $row = $key;\n        foreach ($value as\
    \ $k => $v) {\n            if ($v == $x) {\n                $result[] = [$row,\
    \ $k];\n            }\n        }\n    }\n    if (!empty($result)) {\n        array_multisort(array_column($result,\
    \ 1), SORT_DESC, $result);\n        array_multisort(array_column($result, 0),\
    \ SORT_ASC, $result);\n    }\n    return $result;\n}\nprint_r(get_row([\n    [1,2,3,4,5,6],\n\
    \    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[],\
    \ [1], [1, 2, 3]], 3));", "    $result = [];\n    foreach ($lst as $rowId => $row)\
    \ {\n        $colId = array_search($x, $row);\n        if ($colId !== false) {\n\
    \            $result[] = [$rowId, $colId];\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] != $b[0]) {\n            return $a[0]\
    \ < $b[0] ? -1 : 1;\n        }\n        return $a[1] > $b[1] ? -1 : 1;\n    });\n\
    \    return $result;\n}\n", "  $result = [];\n  foreach ($lst as $row => $cols)\
    \ {\n    foreach ($cols as $col => $val) {\n      if ($val == $x) {\n        $result[]\
    \ = [$row, $col];\n      }\n    }\n  }\n  sort($result);\n  return $result;\n\
    }\n", "  $arr = [];\n  foreach ($lst as $key => $value) {\n    $result = array_keys($value,\
    \ $x);\n    $arr[] = array_map(function($v) use ($key) { return [$key, $v]; },\
    \ $result);\n  }\n  $result = array_reduce($arr, 'array_merge', []);\n  usort($result,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $result;\n}\n\necho '<pre>';\n\
    print_r(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1));\n\
    echo '</pre>';", "  $res = [];\n  foreach ($lst as $k => $val) {\n    if (in_array($x,\
    \ $val)) {\n      $col = array_keys($val, $x);\n      foreach ($col as $v) {\n\
    \        $res[] = [$k, $v];\n      }\n    }\n  }\n  usort($res, function($a, $b)\
    \ {\n    if ($a[0] == $b[0]) return $b[1] - $a[1];\n    return $a[0] - $b[0];\n\
    \  });\n  return $res;\n}", "    if (empty($lst)) return [];\n    $res = [];\n\
    \    foreach ($lst as $k => $v) {\n        if (empty($v)) continue;\n        $set\
    \ = $c = [];\n        foreach ($v as $kk => $vv) {\n            if ($vv == $x)\
    \ {\n                $set[] = [$k, $kk];\n                $c[] = $kk;\n      \
    \      }\n        }\n        rsort($c);\n        foreach ($c as $v) {\n      \
    \      $res[] = $set[$v];\n        }\n    }\n    return $res;\n}", "  $result\
    \ = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n  \
    \    }\n    }\n  }\n  $cmp = function ($a, $b) {\n    if ($a[0] > $b[0]) {\n \
    \     return 1;\n    } elseif ($a[0] < $b[0]) {\n      return -1;\n    } else\
    \ {\n      if ($a[1] > $b[1]) {\n        return -1;\n      } elseif ($a[1] < $b[1])\
    \ {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  };\n\
    \  usort($result, $cmp);\n  return $result;\n}\n\n$a = [\n    [1, 2, 3, 4, 5,\
    \ 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n$b = [[], [1], [1,\
    \ 2, 3]];\n$c = [];\n", "  $result = [];\n  for ($i = 0; $i < count($lst); $i++)\
    \ {\n    for ($j = 0; $j < count($lst[$i]); $j++) {\n      if ($lst[$i][$j] ==\
    \ $x) {\n        $result[] = [$i, $j];\n      }\n    }\n  }\n  usort($result,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $result;\n}\n\necho get_row([\n\
    \  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1);", "  $result = [];\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n  \
    \    }\n    }\n  }\n  for ($i = 0; $i < count($result); $i++) {\n    for ($j =\
    \ $i + 1; $j < count($result); $j++) {\n      if ($result[$i][0] > $result[$j][0])\
    \ {\n        $tmp = $result[$i];\n        $result[$i] = $result[$j];\n       \
    \ $result[$j] = $tmp;\n      }\n    }\n  }\n  for ($i = 0; $i < count($result);\
    \ $i++) {\n    for ($j = $i + 1; $j < count($result); $j++) {\n      if ($result[$i][0]\
    \ == $result[$j][0]) {\n        if ($result[$i][1] < $result[$j][1]) {\n     \
    \     $tmp = $result[$i];\n          $result[$i] = $result[$j];\n          $result[$j]\
    \ = $tmp;\n        }\n      }\n    }\n  }\n  return $result;\n}\n\n$tests = [\n\
    \  [\n    \"input\" => [\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n\
    \    ],\n    \"output\" => [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n  ],\n  [\n\
    \    \"input\" => [[], [1], [1, 2, 3]],\n    \"output\" => [[2, 2]]\n  ],\n  [\n\
    \    \"input\" => [[1, 2, 3], [1, 1, 1], [1, 1, 1]],\n    \"output\" => [[0",
  "    $result = [];\n    foreach ($lst as $key => $row) {\n        foreach ($row\
    \ as $i => $item) {\n            if ($item == $x) {\n                $result[]\
    \ = [$key, $i];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}", " \
    \ $result = [];\n  foreach ($lst as $r => $row) {\n    foreach ($row as $c =>\
    \ $cell) {\n      if ($cell == $x) {\n        $result[] = [$r, $c];\n      }\n\
    \    }\n  }\n  usort($result, function($t1, $t2) {\n    if ($t1[0] == $t2[0])\
    \ {\n      return $t2[1] - $t1[1];\n    }\n    return $t1[0] - $t2[0];\n  });\n\
    \  return $result;\n}\n", "  if (empty($lst)) return [];\n  foreach ($lst as $i\
    \ => $row) {\n    foreach ($row as $j => $num) {\n      if ($num == $x) $found[]\
    \ = [$i, $j];\n    }\n  }\n  if (empty($found)) return [];\n  usort($found, function($a,\
    \ $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] <=> $a[1];\n    }\n   \
    \ return $a[0] <=> $b[0];\n  });\n  return $found;\n}\necho \"get_row([], 1) ==\
    \ []\\n\";\necho (get_row([], 1) == []) ? 'PASS' : 'FAIL';\necho \"\\n\";\necho\
    \ \"get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n\";\necho (get_row([[], [1],\
    \ [1, 2, 3]], 3) == [[2, 2]]) ? 'PASS' : 'FAIL';\necho \"\\n\";\necho \"get_row([\n\
    [1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\\n\";\necho (get_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n\
    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]) ? 'PASS' : 'FAIL';\necho \"\
    \\n\";", "    if (empty($lst)) {\n        return [];\n    }\n    //\n    $res\
    \ = [];\n    foreach ($lst as $i => $row) {\n        if (empty($row)) {\n    \
    \        continue;\n        }\n        $j = 0;\n        $len = count($row);\n\
    \        while ($j < $len) {\n            if ($row[$j] == $x) {\n            \
    \    $res[] = [$i, $j];\n            }\n            $j++;\n        }\n    }\n\
    \    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n        \
    \    return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $res;\n}", "  $output = [];\n  foreach ($lst as $index => $row) {\n\
    \    foreach ($row as $index_row => $column) {\n      if ($column == $x) {\n \
    \       $output[] = [$index, $index_row];\n      }\n    }\n  }\n  usort($output,\
    \ function($x, $y) {\n    if ($x[0] == $y[0]) {\n      return $y[1] <=> $x[1];\n\
    \    }\n    return $x[0] <=> $y[0];\n  });\n  return $output;\n}\n$test_case =\
    \ [\n  [[1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]], 1,\n  [[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]]\n];\nprint_r(get_row($test_case[0], $test_case[1]));\n\
    print_r($test_case[2]);", "    $result = [];\n    foreach ($lst as $i => $arr)\
    \ {\n        foreach ($arr as $j => $num) {\n            if ($num == $x) {\n \
    \               $result[] = [$i, $j];\n            }\n        }\n    }\n    //\
    \ var_dump($result);\n    sort($result);\n    usort($result, 'cmp');\n    // var_dump($result);\n\
    \    foreach ($result as $i => $coord) {\n        $result[$i] = [$coord[1], $coord[0]];\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row\
    \ => $arr) {\n        $col = array_search($x, $arr);\n        if ($col !== false)\
    \ {\n            $result[] = [$row, $col];\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] === $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }", "  $ret = [];\n  $row = 0;\n  foreach ($lst as $row_lst) {\n    $idx = array_search($x,\
    \ $row_lst);\n    if ($idx !== false) {\n      $ret[] = [$row, $idx];\n    }\n\
    \    $row++;\n  }\n  if (count($ret) == 0) {\n    return $ret;\n  }\n  usort($ret,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return $ret;\n}\n\n$tests = [\n  [\n\
    \    'input' => [\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n\
    \    ],\n    'x' => 1,\n    'expected' => [[0, 0], [1, 4], [1, 0], [2, 5], [2,\
    \ 0]]\n  ],\n  [\n    'input' => [],\n    'x' => 1,\n    'expected' => []\n  ],\n\
    \  [\n    'input' => [[], [1], [1, 2, 3]],\n    'x' => 3,\n    'expected' => [[2,\
    \ 2]]\n  ],\n  [\n    'input' => [[], [1], [1, 2, 3]],\n    'x' => 5,\n    'expected'\
    \ => []\n  ],\n  [\n    'input' => [[4, 1, 3, 3, 6, 4, 3, 3, 4, 5, 1, 6, 1, 1,\
    \ 4, 4, 1, 1, 4, 3, 4, 5, 3, 6, 4, 5, 6, 4, 6, 5, 4, 4, 6, 5, 4, 1, 6, 5, 4, 1,\
    \ 1, 5, 1, 6, 1, 4, 3, 6, 1, 5, 3, 3, 6, 1,", "    if (empty($lst)) {\n      \
    \  return [];\n    }\n    $result = [];\n    foreach ($lst as $rk => $rv) {\n\
    \        foreach ($rv as $ck => $cv) {\n            if ($cv == $x) {\n       \
    \         $result[] = [$rk, $ck];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }", "\n}", "\t$positions = [];\n\tforeach ($lst as $row => $columns) {\n\t\tforeach\
    \ ($columns as $column => $value) {\n\t\t\tif ($value == $x) {\n\t\t\t\t$positions[]\
    \ = [$row, $column];\n\t\t\t}\n\t\t}\n\t}\n\tusort($positions, function($a, $b)\
    \ {\n\t\tif ($a[0] > $b[0]) {\n\t\t\treturn 1;\n\t\t} elseif ($a[0] < $b[0]) {\n\
    \t\t\treturn -1;\n\t\t} else {\n\t\t\tif ($a[1] > $b[1]) {\n\t\t\t\treturn -1;\n\
    \t\t\t} elseif ($a[1] < $b[1]) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\t\
    return 0;\n\t\t\t}\n\t\t}\n\t});\n\treturn $positions;\n}\n", "    $res = [];\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $res[] = [$i,\
    \ $j];\n            }\n        }\n    }\n    $res = array_reverse($res);\n   \
    \ return $res;\n}\n$lst = [\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n];\n\
    var_dump(get_row($lst, 1));", "  $arr = [];\n  $index = 0;\n  $flag = false;\n\
    \  foreach ($lst as $row) {\n    $index2 = 0;\n    foreach ($row as $column) {\n\
    \      if ($column == $x) {\n        $arr[] = [$index, $index2];\n        $flag\
    \ = true;\n      }\n      $index2++;\n    }\n    $index++;\n  }\n  if ($flag)\
    \ {\n    usort($arr, function($a, $b) {\n      if ($a[0] == $b[0]) {\n       \
    \ return $b[1] - $a[1];\n      }\n      return $a[0] - $b[0];\n    });\n  }\n\
    \  return $arr;\n}", "  $result = [];\n  foreach ($lst as $i => $row) {\n    foreach\
    \ ($row as $j => $col) {\n      if ($col == $x) {\n        $result[] = [$i, $j];\n\
    \      }\n    }\n  }\n  usort($result, function($a, $b) {\n    return $a[0] ==\
    \ $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n  });\n  return $result;\n}\necho json_encode(get_row([\n\
    \    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1)) . \"\\n\"\
    ;", "\t$ret = [];\n\tforeach ($lst as $row => $l) {\n\t\tforeach ($l as $col =>\
    \ $val) {\n\t\t\tif ($val == $x)\n\t\t\t\t$ret[] = [$row, $col];\n\t\t}\n\t}\n\
    \tusort($ret, function($a, $b) {\n\t\tif ($a[0] != $b[0])\n\t\t\treturn $a[0]\
    \ < $b[0] ? -1 : 1;\n\t\treturn $a[1] > $b[1] ? -1 : 1;\n\t});\n\treturn $ret;\n\
    }\n\necho get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], 1) === [[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]] ? 'PASS' : 'FAIL';\necho get_row([], 1) ===\
    \ [] ? 'PASS' : 'FAIL';\necho get_row([[], [1], [1, 2, 3]], 3) === [[2, 2]] ?\
    \ 'PASS' : 'FAIL';", "  $arr = [];\n  foreach ($lst as $key => $value) {\n   \
    \ foreach ($value as $k => $v) {\n      if ($v == $x) {\n        $arr[] = [$key,\
    \ $k];\n      }\n    }\n  }\n  if (!$arr) {\n    return [];\n  }\n  $rows = array_column($arr,\
    \ 0);\n  array_multisort($rows, SORT_ASC, $arr);\n  foreach ($arr as $key => $value)\
    \ {\n    $row_nums[] = $value[0];\n  }\n  $row_nums = array_unique($row_nums);\n\
    \  foreach ($row_nums as $key => $value) {\n    $cols_arr[$value] = [];\n    foreach\
    \ ($arr as $k => $v) {\n      if ($v[0] == $value) {\n        $cols_arr[$value][]\
    \ = $v[1];\n      }\n    }\n  }\n  foreach ($cols_arr as $key => $value) {\n \
    \   rsort($cols_arr[$key]);\n  }\n  foreach ($cols_arr as $key => $value) {\n\
    \    foreach ($value as $k => $v) {\n      $arr2[] = [$key, $v];\n    }\n  }\n\
    \  return $arr2;\n}", "    $coordinates = [];\n    foreach ($lst as $row => $columns)\
    \ {\n        $coordinates = array_merge($coordinates, array_map(function ($col)\
    \ use ($row) {\n            return [$row, $col];\n        }, array_keys($columns,\
    \ $x)));\n    }\n    return array_map(function ($coord) {\n        return array_reverse($coord);\n\
    \    }, array_reverse(array_sort($coordinates, function ($c1, $c2) {\n       \
    \ if ($c1[0] == $c2[0]) {\n            return $c1[1] < $c2[1];\n        }\n  \
    \      return $c1[0] < $c2[0];\n    })));\n}\n", "  // Your code here\n}", " \
    \ $result = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j\
    \ < count($lst[$i]); $j++) {\n      if ($lst[$i][$j] == $x) {\n        $result[]\
    \ = [$i, $j];\n      }\n    }\n  }\n  usort($result, function($a, $b) {\n    if\
    \ ($a[0] > $b[0]) {\n      return 1;\n    } elseif ($a[0] < $b[0]) {\n      return\
    \ -1;\n    } else {\n      if ($a[1] > $b[1]) {\n        return -1;\n      } elseif\
    \ ($a[1] < $b[1]) {\n        return 1;\n      } else {\n        return 0;\n  \
    \    }\n    }\n  });\n  return $result;\n}\n", "    $result = [];\n    foreach\
    \ ($lst as $rkey => $rvalue) {\n        $ckey = array_search($x, $rvalue);\n \
    \       if ($ckey !== false) {\n            $result[] = [$rkey, $ckey];\n    \
    \    }\n    }\n    usort($result, function ($a, $b) {\n        return $a[0] ===\
    \ $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n    });\n    return $result;\n}", " \
    \ if(count($lst) === 0) {\n    return [];\n  }\n  $coordinates = [];\n  for($i\
    \ = 0; $i < count($lst); $i++) {\n    $j = count($lst[$i]) - 1;\n    while($j\
    \ >= 0) {\n      if($lst[$i][$j] === $x) {\n        $coordinates[] = [$i, $j];\n\
    \      }\n      $j--;\n    }\n  }\n  usort($coordinates, function($a, $b) {\n\
    \    if($a[0] === $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return $a[0]\
    \ - $b[0];\n  });\n  return $coordinates;\n}", "    $res = [];\n    foreach ($lst\
    \ as $i => $row) {\n        foreach ($row as $j => $elem) {\n            if ($elem\
    \ == $x) {\n                $res[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    array_multisort(array_column($res, 0), SORT_ASC, array_column($res, 1),\
    \ SORT_DESC, $res);\n    return $res;\n}\n", "    $list=array();\n    foreach\
    \ ($lst as $key=>$value){\n        $i=0;\n        while($i<count($value)){\n \
    \           if($value[$i]==$x){\n                $list[]=array($key,$i);\n   \
    \         }\n            $i++;\n        }\n    }\n    $arrayRow = array();\n \
    \   $arrayColumn = array();\n    foreach ($list as $key => $value) {\n       \
    \ $arrayRow[$key] = $value[0];\n        $arrayColumn[$key] = $value[1];\n    }\n\
    \    array_multisort($arrayRow, SORT_ASC, $arrayColumn, SORT_DESC, $list);\n \
    \   return $list;\n}\n$arr1 = [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n\
    ];\nvar_dump(get_row($arr1, 1));", "  $result = [];\n  $row = [];\n  $column =\
    \ [];\n  for ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n      if ($lst[$i][$j] == $x) {\n        $row[] = $i;\n        $column[]\
    \ = $j;\n      }\n    }\n  }\n  for ($i = 0; $i < count($row); $i++) {\n    $result[]\
    \ = [$row[$i], $column[$i]];\n  }\n  sort($result);\n  usort($result, function($a,\
    \ $b) {\n    return $b[1] <=> $a[1];\n  });\n  return $result;\n}\n", "  $res\
    \ = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    $y = array_search($x, $lst[$i]);\n\
    \    if ($y !== false) {\n      $res[] = [$i, $y];\n    }\n  }\n  usort($res,\
    \ function($a, $b) {\n    return $a[0] == $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n\
    \  });\n  return $res;\n}\nprint_r(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n\
    \  [1,2,3,4,5,1]\n], 1));", "    $result = [];\n    for ($y = 0; $y < count($lst);\
    \ $y++) {\n        for ($xIdx = 0; $xIdx < count($lst[$y]); $xIdx++) {\n     \
    \       if ($lst[$y][$xIdx] == $x) {\n                $result[] = [$y, $xIdx];\n\
    \            }\n        }\n    }\n    array_multisort(array_column($result, 0),\
    \ SORT_ASC, array_column($result, 1), SORT_DESC, $result);\n    return $result;\n\
    }", "    $res = [];\n    foreach ($lst as $key1 => $row) {\n        foreach ($row\
    \ as $key2 => $cell) {\n            if ($cell == $x) {\n                $res[]\
    \ = [$key1, $key2];\n            }\n        }\n    }\n    sort($res);\n    for\
    \ ($i = 0; $i < count($res); $i++) {\n        for ($j = $i; $j < count($res);\
    \ $j++) {\n            if ($res[$i][0] == $res[$j][0]) {\n                $temp\
    \ = $res[$i][1];\n                $res[$i][1] = $res[$j][1];\n               \
    \ $res[$j][1] = $temp;\n            }\n        }\n    }\n    return $res;\n}",
  "  $result = [];\n  foreach ($lst as $key => $row) {\n    foreach ($row as $k =>\
    \ $item) {\n      if ($item == $x) {\n        $result[] = [$key, $k];\n      }\n\
    \    }\n  }\n  usort($result, function($a, $b) {\n    return $a[0] == $b[0] ?\
    \ $b[1] - $a[1] : $a[0] - $b[0];\n  });\n  return $result;\n}\n\n$lst = [\n  [1,2,3,4,5,6],\n\
    \  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n];\n$x = 1;\n$result = get_row($lst, $x);\n\
    foreach ($result as $item) {\n  echo $item[0] . ' ' . $item[1] . PHP_EOL;\n}",
  "  $result = [];\n  $rows = count($lst);\n  for ($i = 0; $i < $rows; $i++) {\n \
    \   $columns = count($lst[$i]);\n    for ($j = 0; $j < $columns; $j++) {\n   \
    \   if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n      }\n    }\n\
    \  }\n  usort($result, function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return\
    \ $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return $result;\n\
    }\n\n$array = [[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]];\n$x = 1;\nprint_r(get_row($array,\
    \ $x));", "\t$result = [];\n\tforeach ($lst as $row => $rowArr) {\n\t\t$columns\
    \ = array_keys($rowArr, $x);\n\t\tif ($columns) {\n\t\t\t$newRow = array_map(function($column)\
    \ use ($row) {\n\t\t\t\treturn [$row, $column];\n\t\t\t}, $columns);\n\t\t\t$result\
    \ = array_merge($result, $newRow);\n\t\t}\n\t}\n\tusort($result, function($a,\
    \ $b) {\n\t\treturn $a[0] - $b[0];\n\t});\n\treturn $result;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $index => $list) {\n        foreach ($list as $key\
    \ => $item) {\n            if ($item == $x) {\n                $result[] = [$index,\
    \ $key];\n            }\n        }\n    }\n    if (empty($result)) {\n       \
    \ return [];\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n        return\
    \ $a[0] <=> $b[0];\n    });\n    return $result;\n}", "    $res = [];\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $res[] = [$i,\
    \ $j];\n            }\n        }\n    }\n    usort($res, function ($a, $b) {\n\
    \        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n\
    \        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\nvar_dump(get_row([\n\
    \    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n],\
    \ 1));\nvar_dump(get_row([], 1));\nvar_dump(get_row([[], [1], [1, 2, 3]], 3));",
  "  $arr = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n      if ($lst[$i][$j] == $x) {\n        $arr[] = [$i, $j];\n     \
    \ }\n    }\n  }\n  if (count($arr) == 0) {\n    return [];\n  }\n  for ($i = 0;\
    \ $i < count($arr); $i++) {\n    for ($j = $i + 1; $j < count($arr); $j++) {\n\
    \      if ($arr[$i][0] == $arr[$j][0]) {\n        if ($arr[$i][1] < $arr[$j][1])\
    \ {\n          $tmp = $arr[$i];\n          $arr[$i] = $arr[$j];\n          $arr[$j]\
    \ = $tmp;\n        }\n      }\n    }\n  }\n  for ($i = 0; $i < count($arr); $i++)\
    \ {\n    for ($j = $i + 1; $j < count($arr); $j++) {\n      if ($arr[$i][0] >\
    \ $arr[$j][0]) {\n        $tmp = $arr[$i];\n        $arr[$i] = $arr[$j];\n   \
    \     $arr[$j] = $tmp;\n      }\n    }\n  }\n  return $arr;\n}\n", "    $res =\
    \ [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $v)\
    \ {\n            if ($v == $x) {\n                $res[] = [$i, $j];\n       \
    \     }\n        }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0]\
    \ < $b[0]) {\n            return -1;\n        } elseif ($a[0] > $b[0]) {\n   \
    \         return 1;\n        } else {\n            if ($a[1] < $b[1]) {\n    \
    \            return 1;\n            } elseif ($a[1] > $b[1]) {\n             \
    \   return -1;\n            } else {\n                return 0;\n            }\n\
    \        }\n    });\n    return $res;\n}\n", "    $temp = [];\n    foreach ($lst\
    \ as $key1 => $value1) {\n        foreach ($value1 as $key2 => $value2) {\n  \
    \          if ($value2 == $x) {\n                $temp[] = [$key1, $key2];\n \
    \           }\n        }\n    }\n    if (count($temp) == 0) {\n        return\
    \ [];\n    } else {\n        sort($temp);\n        $temp2 = [];\n        foreach\
    \ ($temp as $k => $v) {\n            if ($k > 0 && $v[0] == $temp[$k - 1][0])\
    \ {\n                $temp2[$k - 1][] = $v[1];\n            } else {\n       \
    \         $temp2[$k][] = $v[0];\n                $temp2[$k][] = $v[1];\n     \
    \       }\n        }\n        foreach ($temp2 as $k => $v) {\n            rsort($temp2[$k]);\n\
    \        }\n        $temp3 = [];\n        foreach ($temp2 as $k => $v) {\n   \
    \         foreach ($v as $k2 => $v2) {\n                if ($k2 > 0) {\n     \
    \               $temp3[$k][] = $v2;\n                }\n            }\n      \
    \  }\n        return $temp3;\n    }\n}", "    $coordinates = [];\n    foreach\
    \ ($lst as $row => $columns) {\n        foreach ($columns as $col => $value) {\n\
    \            if ($value == $x) {\n                $coordinates[] = [$row, $col];\n\
    \            }\n        }\n    }\n    usort($coordinates, function ($x, $y) {\n\
    \        if ($x[0] == $y[0]) {\n            return $y[1] - $x[1];\n        }\n\
    \        return $x[0] - $y[0];\n    });\n    return $coordinates;\n}\necho \"\
    Should be [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n\";\nprint_r(get_row([\n\
    \    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1));\necho \"Should\
    \ be []\\n\";\nprint_r(get_row([], 1));\necho \"Should be [(2, 2)]\\n\";\nprint_r(get_row([[],\
    \ [1], [1, 2, 3]], 3));", "\t$result = [];\n\tforeach ($lst as $i => $l) {\n\t\
    \t$arr = array_keys($l, $x);\n\t\tforeach ($arr as $c) {\n\t\t\t$result[] = [$i,\
    \ $c];\n\t\t}\n\t}\n\t// sort by the first digit of each array first, and then\
    \ by the second digit\n\tusort($result, function($a, $b) {\n\t\tif ($a[0] == $b[0])\
    \ {\n\t\t\treturn $b[1] - $a[1];\n\t\t}\n\t\treturn $a[0] - $b[0];\n\t});\n\t\
    return $result;\n}\n$lst = [\n\t[1,2,3,4,5,6],\n\t[1,2,3,4,1,6],\n\t[1,2,3,4,5,1]\n\
    ];\nvar_dump(get_row($lst, 1));\nvar_dump(get_row([], 1));\nvar_dump(get_row([[],\
    \ [1], [1, 2, 3]], 3));", "  $output = [];\n  foreach ($lst as $key1 => $v1) {\n\
    \    foreach ($v1 as $key2 => $v2) {\n      if ($v2 == $x) {\n        $output[]\
    \ = [$key1, $key2];\n      }\n    }\n  }\n  if (!$output) {\n    return [];\n\
    \  } else {\n    // sorting the given array (function below)\n    $sorted_array\
    \ = sort_matrix($output);\n    // sort by key2\n    $sorted_array_2 = sort_matrix_2($sorted_array);\n\
    \    return $sorted_array_2;\n  }\n}\n", "    $result = [];\n    foreach ($lst\
    \ as $y => $row) {\n        foreach ($row as $x1 => $value) {\n            if\
    \ ($value == $x) {\n                $result[] = [$y, $x1];\n            }\n  \
    \      }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n", "    $finded = [];\n    foreach\
    \ ($lst as $keyRow => $row) {\n        foreach ($row as $keyColumn => $column)\
    \ {\n            if ($column == $x) {\n                $finded[] = [$keyRow, $keyColumn];\n\
    \            }\n        }\n    }\n    usort($finded, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n\
    \        return $a[0] <=> $b[0];\n    });\n    return $finded;\n}\n", "    $res\
    \ = [];\n    foreach ($lst as $row => $rowValue) {\n        foreach ($rowValue\
    \ as $col => $cell) {\n            if ($cell == $x) {\n                $res[]\
    \ = [$row, $col];\n            }\n        }\n    }\n    usort($res, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\necho '<pre>';\n\
    print_r(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n\
    ], 1));\necho '</pre>';", "    $result = [];\n    foreach ($lst as $i => $row)\
    \ {\n        foreach ($row as $j => $col) {\n            if ($col == $x) {\n \
    \               $result[] = [$i, $j];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n$arr = [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n];\n\
    var_dump(get_row($arr, 1));", "  $arr = [];\n  $count = 0;\n  $index = 0;\n  foreach\
    \ ($lst as $element) {\n    $count = 0;\n    foreach ($element as $items) {\n\
    \      if ($items == $x) {\n        $arr[] = [$index, $count];\n      }\n    \
    \  $count++;\n    }\n    $index++;\n  }\n  sort($arr);\n  $prev = -1;\n  $new\
    \ = [];\n  foreach ($arr as $item) {\n    if ($item[0] != $prev) {\n      $new[]\
    \ = $item;\n      $prev = $item[0];\n    }\n  }\n  return $new;\n}\necho get_row([\n\
    \  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1);", "  // your code\
    \ here\n}\n", "    $coords = [];\n    foreach ($lst as $row => $rowValues) {\n\
    \        $columns = array_keys($rowValues, $x);\n        foreach ($columns as\
    \ $column) {\n            $coords[] = [$row, $column];\n        }\n    }\n   \
    \ sort($coords);\n    return $coords;\n}\n\necho var_dump(get_row([\n    [1,2,3,4,5,6],\n\
    \    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1)) . \"\\n\";\necho var_dump(get_row([],\
    \ 1)) . \"\\n\";\necho var_dump(get_row([[], [1], [1, 2, 3]], 3)) . \"\\n\";",
  "    $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $result[] = [$i, $j];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n       \
    \ for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] ==\
    \ $x) {\n                $result[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    $result2 = [];\n    for ($i = 0; $i < count($result); $i++) {\n     \
    \   for ($j = 0; $j < count($result); $j++) {\n            if ($result[$i][0]\
    \ == $result[$j][0]) {\n                $result2[] = $result[$i];\n          \
    \  }\n        }\n    }\n    return $result2;\n}\n$lst = [[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n\
    [1,2,3,4,5,1]];\n$x = 1;\nvar_dump(get_row($lst, $x));", "  $result = [];\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n      }\n\
    \    }\n  }\n  usort($result, function($a, $b) {\n    if ($a[0] == $b[0]) {\n\
    \      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $result;\n}", "    $locations = [];\n    foreach ($lst as $i => $row) {\n  \
    \      $columns = array_keys($row, $x);\n        foreach ($columns as $c) {\n\
    \            $locations[] = [$i, $c];\n        }\n    }\n    usort($locations,\
    \ function ($a, $b) {\n        if ($a[0] < $b[0]) {\n            return -1;\n\
    \        } elseif ($a[0] > $b[0]) {\n            return 1;\n        } else {\n\
    \            if ($a[1] > $b[1]) {\n                return -1;\n            } elseif\
    \ ($a[1] < $b[1]) {\n                return 1;\n            } else {\n       \
    \         return 0;\n            }\n        }\n    });\n    return $locations;\n\
    }\necho \"<pre>get_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1)\"\
    ;\nprint_r(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n\
    ], 1));\necho \"</pre>\";\necho \"<pre>get_row([], 1)\";\nprint_r(get_row([],\
    \ 1));\necho \"</pre>\";\necho \"<pre>get_row([[], [1], [1, 2, 3]], 3)\";\nprint_r(get_row([[],\
    \ [1], [1, 2, 3]], 3));\necho \"</pre>\";", "  if (empty($lst)) return [];\n \
    \ $rv = [];\n  foreach ($lst as $k => $v) {\n    foreach ($v as $kk => $vv) {\n\
    \      if ($vv == $x) {\n        $rv[] = [$k, $kk];\n      }\n    }\n  }\n  usort($rv,\
    \ function($x, $y) {\n    if ($x[0] == $y[0]) {\n      return $y[1] <=> $x[1];\n\
    \    }\n    return $x[0] <=> $y[0];\n  });\n  return $rv;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $k => $v) {\n        foreach ($v as $k1 => $v1)\
    \ {\n            if ($v1 == $x) {\n                $result[] = [$k, $k1];\n  \
    \          }\n        }\n    }\n    return $result;\n}", "    $coordinates = [];\n\
    \    foreach ($lst as $row_key => $row) {\n        $col_key = 0;\n        foreach\
    \ ($row as $col) {\n            if ($col == $x) {\n                $coordinates[]\
    \ = [$row_key, $col_key];\n            }\n            $col_key++;\n        }\n\
    \    }\n    usort($coordinates, function ($a, $b) {\n        if ($a[0] > $b[0])\
    \ {\n            return 1;\n        } elseif ($a[0] < $b[0]) {\n            return\
    \ -1;\n        } else {\n            if ($a[1] > $b[1]) {\n                return\
    \ -1;\n            } elseif ($a[1] < $b[1]) {\n                return 1;\n   \
    \         } else {\n                return 0;\n            }\n        }\n    });\n\
    \    return $coordinates;\n}\n", "  // put your code here\n}\n", "\t$array = [];\n\
    \tforeach ($lst as $key => $value) {\n\t\t$row = [];\n\t\tforeach ($value as $value2)\
    \ {\n\t\t\tif ($value2 == $x) {\n\t\t\t\t$row[] = $value2;\n\t\t\t}\n\t\t}\n\t\
    \tif (count($row) > 0) {\n\t\t\t$array[] = $row;\n\t\t}\n\t}\n\tif (count($array)\
    \ > 0) {\n\t\t$array = array_merge(...$array);\n\t\treturn array_map(function\
    \ ($el) {\n\t\t\treturn [$el[0], $el[1]];\n\t\t}, $array);\n\t}\n\treturn [];\n\
    }\n$lst = [\n\t[1, 2, 3, 4, 5, 6],\n\t[1, 2, 3, 4, 1, 6],\n\t[1, 2, 3, 4, 5, 1]\n\
    ];\n$lst = [\n\t[],\n\t[1],\n\t[1, 2, 3]\n];\n$x = 3;\necho var_dump(get_row($lst,\
    \ $x));", "  $result = [];\n  $result_cnt = 0;\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++) {\n      if ($lst[$i][$j]\
    \ == $x) {\n        $result[$result_cnt][0] = $i;\n        $result[$result_cnt][1]\
    \ = $j;\n        $result_cnt++;\n      }\n    }\n  }\n  usort($result, function($a,\
    \ $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] <=> $a[1];\n    }\n   \
    \ return $a[0] <=> $b[0];\n  });\n  $result_str = [];\n  for ($i = 0; $i < count($result);\
    \ $i++) {\n    $result_str[$i] = '(' . implode(', ', $result[$i]) . ')';\n  }\n\
    \  return implode(', ', $result_str);\n}\n$lst = [[1,2,3,4,5,6], [1,2,3,4,1,6],\
    \ [1,2,3,4,5,1]];\n$x = 1;\n$solution = get_row($lst, $x);\necho $solution;",
  "    $matrix = [];\n    foreach ($lst as $key => $row) {\n        foreach ($row\
    \ as $subkey => $subrow) {\n            if ($subrow == $x) {\n               \
    \ $matrix[] = [$key, $subkey];\n            }\n        }\n    }\n    foreach ($matrix\
    \ as $key => $row) {\n        $subrow[$key] = $row[0];\n    }\n    array_multisort($subrow,\
    \ SORT_ASC, $matrix);\n    foreach ($matrix as $key => $row) {\n        $subrow[$key]\
    \ = $row[1];\n    }\n    array_multisort($subrow, SORT_DESC, $matrix);\n    return\
    \ $matrix;\n}\n", "\t// Write code here\n\t$data = [];\n\tforeach ($lst as $index\
    \ => $item) {\n\t\tif ($item == $x) {\n\t\t\t$data[] = array($index, array_search($x,\
    \ $item));\n\t\t}\n\t}\n\treturn $data;\n}\n", "  $result = [];\n  for ($i = 0;\
    \ $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++) {\n\
    \      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n      }\n   \
    \ }\n  }\n  usort($result, function($a, $b) {\n    if ($a[0] == $b[0]) {\n   \
    \   return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $idx_i => $row) {\n        foreach\
    \ ($row as $idx_j => $col) {\n            if ($col == $x) {\n                $result[]\
    \ = [$idx_i, $idx_j];\n            }\n        }\n    }\n    array_multisort(array_column($result,\
    \ 0), SORT_ASC, array_column($result, 1), SORT_DESC, $result);\n    return $result;\n\
    }\n\n$lst = [\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n];\nvar_dump(get_row($lst,\
    \ 1));", "  // your code here\n  $res = [];\n  foreach ($lst as $i => $row) {\n\
    \    foreach ($row as $j => $cell) {\n      if ($cell == $x) {\n        $res[]\
    \ = [$i, $j];\n      }\n    }\n  }\n  usort($res, function ($a, $b) {\n    return\
    \ $a[0] == $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n  });\n  return $res;\n}\n\n\
    $lst = [[1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]];\n\nprint_r(get_row($lst,\
    \ 1));", "\t$result = [];\n\t$length = count($lst);\n\tfor ($i = 0; $i < $length;\
    \ $i++) {\n\t\t$length2 = count($lst[$i]);\n\t\tfor ($j = 0; $j < $length2; $j++)\
    \ {\n\t\t\tif ($lst[$i][$j] == $x) {\n\t\t\t\t$result[] = [$i, $j];\n\t\t\t}\n\
    \t\t}\n\t}\n\t$length3 = count($result);\n\tfor ($i = 0; $i < $length3; $i++)\
    \ {\n\t\tfor ($j = $i + 1; $j < $length3; $j++) {\n\t\t\tif ($result[$i][0] >\
    \ $result[$j][0]) {\n\t\t\t\t$tmp = $result[$i];\n\t\t\t\t$result[$i] = $result[$j];\n\
    \t\t\t\t$result[$j] = $tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor ($i = 0; $i < $length3;\
    \ $i++) {\n\t\tfor ($j = $i + 1; $j < $length3; $j++) {\n\t\t\tif ($result[$i][0]\
    \ == $result[$j][0]) {\n\t\t\t\tif ($result[$i][1] < $result[$j][1]) {\n\t\t\t\
    \t\t$tmp = $result[$i];\n\t\t\t\t\t$result[$i] = $result[$j];\n\t\t\t\t\t$result[$j]\
    \ = $tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}", "  $result =\
    \ [];\n  $row = 0;\n  foreach ($lst as $l) {\n    $column = count($l) - 1;\n \
    \   foreach ($l as $i) {\n      if ($i == $x) {\n        $result[] = [$row, $column];\n\
    \      }\n      $column--;\n    }\n    $row++;\n  }\n  usort($result, function($a,\
    \ $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return\
    \ $a[0] - $b[0];\n  });\n  return $result;\n}", "    $result = [];\n    foreach\
    \ ($lst as $y1 => $row) {\n        $result = array_merge($result, get_row_from_list($row,\
    \ $x, $y1));\n    }\n    sort($result);\n    return $result;\n}\n", "\t$result\
    \ = [];\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tfor ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n\t\t\tif ($lst[$i][$j] == $x) {\n\t\t\t\t$result[] = [$i, $j];\n\t\t\
    \t}\n\t\t}\n\t}\n\tusort($result, function($a, $b) {\n\t\treturn $a[0] == $b[0]\
    \ ? $b[1] - $a[1] : $a[0] - $b[0];\n\t});\n\treturn $result;\n}", "    $res =\
    \ [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $item)\
    \ {\n            if ($item == $x) {\n                $res[] = [$i, $j];\n    \
    \        }\n        }\n    }\n    array_multisort(array_column($res, 0), SORT_ASC,\
    \ array_column($res, 1), SORT_DESC, $res);\n    return $res;\n}\n\n$ret = get_row([\n\
    \    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1);\nprint_r($ret);",
  "  $result = [];\n  foreach ($lst as $index_row => $row) {\n    foreach ($row as\
    \ $index_item => $item) {\n      if ($item == $x) {\n        $result[] = [$index_row,\
    \ $index_item];\n      }\n    }\n  }\n  usort($result, function($a, $b) {\n  \
    \  if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return $a[0]\
    \ - $b[0];\n  });\n  return $result;\n}\n$lst = [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n\
    \  [1,2,3,4,5,1]\n];\n$result = get_row($lst, 1);\nprint_r($result);\n$lst = [[]];\n\
    $result = get_row($lst, 1);\nprint_r($result);\n$lst = [[], [1], [1, 2, 3]];\n\
    $result = get_row($lst, 3);\nprint_r($result);", "    $result = [];\n    foreach\
    \ ($lst as $key => $row) {\n        if (in_array($x, $row)) {\n            foreach\
    \ ($row as $k => $r) {\n                if ($r == $x) {\n                    $result[]\
    \ = [$key, $k];\n                }\n            }\n        }\n    }\n    usort($result,\
    \ 'func');\n    $len = count($result);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        for ($j = 0; $j < $len - 1; $j++) {\n            if ($result[$j][0] ==\
    \ $result[$j + 1][0]) {\n                if ($result[$j][1] < $result[$j + 1][1])\
    \ {\n                    $tmp = $result[$j];\n                    $result[$j]\
    \ = $result[$j + 1];\n                    $result[$j + 1] = $tmp;\n          \
    \      }\n            }\n        }\n    }\n    return $result;\n}", "    $result\
    \ = [];\n    foreach ($lst as $index => $row) {\n        foreach ($row as $sub_index\
    \ => $sub_row) {\n            if ($sub_row == $x) {\n                $result[]\
    \ = [$index, $sub_index];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n    });\n    return\
    \ $result;\n}\necho '<pre>';\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[],\
    \ [1], [1, 2, 3]], 3));\necho '</pre>';", "    $retVal = [];\n    foreach ($lst\
    \ as $row => $val) {\n        foreach ($val as $col => $v) {\n            if ($v\
    \ == $x) {\n                $retVal[] = [$row, $col];\n            }\n       \
    \ }\n    }\n    if (empty($retVal)) {\n        return [];\n    }\n    $rowSort\
    \ = array_column($retVal, 0);\n    array_multisort($rowSort, SORT_ASC, $retVal);\n\
    \    foreach ($retVal as $key => $val) {\n        $colSort[$key] = $val[1];\n\
    \    }\n    array_multisort($colSort, SORT_DESC, $retVal);\n    return $retVal;\n\
    }\n", "    $coordinates = [];\n    for ($i = 0; $i < count($lst); $i++) {\n  \
    \      for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j]\
    \ == $x) {\n                $coordinates[] = [$i, $j];\n            }\n      \
    \  }\n    }\n    $arr = [];\n    foreach ($coordinates as $value) {\n        $arr[]\
    \ = implode('', $value);\n    }\n    sort($arr);\n    foreach ($arr as $key =>\
    \ $value) {\n        $arr[$key] = str_split($value);\n    }\n    return $arr;\n\
    }\n", "    $tmp = [];\n    foreach ($lst as $k1 => $v1) {\n        foreach ($v1\
    \ as $k2 => $v2) {\n            if ($v2 == $x) {\n                $tmp[] = [$k1,\
    \ $k2];\n            }\n        }\n    }\n    usort($tmp, function ($a, $b) {\n\
    \        if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n\
    \        return $a[0] <=> $b[0];\n    });\n    return $tmp;\n}", "    $result\
    \ = [];\n    foreach ($lst as $row => $el) {\n        foreach ($el as $column\
    \ => $el2) {\n            if ($el2 == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    foreach ($result as $key =>\
    \ $row) {\n        $rowNumber[$key] = $row[0];\n        $columnNumber[$key] =\
    \ $row[1];\n    }\n    array_multisort($rowNumber, SORT_ASC, $columnNumber, SORT_DESC,\
    \ $result);\n    return $result;\n}", "  $result = [];\n  foreach ($lst as $row\
    \ => $l) {\n    foreach ($l as $col => $v) {\n      if ($v == $x) {\n        $result[]\
    \ = [$row, $col];\n      }\n    }\n  }\n  array_multisort(array_column($result,\
    \ 0), SORT_ASC, array_column($result, 1), SORT_DESC, $result);\n  return $result;\n\
    }", "    $res = [];\n    $len = count($lst);\n    if ($len === 0) {\n        return\
    \ $res;\n    }\n    for ($i = 0; $i < $len; $i++) {\n        $tmp = count($lst[$i]);\n\
    \        if ($tmp === 0) {\n            continue;\n        }\n        for ($j\
    \ = 0; $j < $tmp; $j++) {\n            if ($lst[$i][$j] === $x) {\n          \
    \      $res[] = [$i, $j];\n            }\n        }\n    }\n    $len = count($res);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++)\
    \ {\n            if ($res[$i][0] === $res[$j][0]) {\n                if ($res[$i][1]\
    \ < $res[$j][1]) {\n                    $tmp = $res[$i];\n                   \
    \ $res[$i] = $res[$j];\n                    $res[$j] = $tmp;\n               \
    \ }\n            } else if ($res[$i][0] > $res[$j][0]) {\n                $tmp\
    \ = $res[$i];\n                $res[$i] = $res[$j];\n                $res[$j]\
    \ = $tmp;\n            }\n        }\n    }\n    return $res;\n}\n$x = [\n[1,2,3,4,5,6],\n\
    [1,2,3,4,1,6],\n[1,2,3,4,5,1]\n];\nvar_dump(get_row($x, 1));\n$x = [];\nvar_dump(get_row($x,\
    \ 1));\n$x = [[], [1], [1, 2, 3]];\nvar_dump(get_row($x, 3));", "    $res = [];\n\
    \    foreach ($lst as $key => $val) {\n        $match = array_keys($val, $x);\n\
    \        if (count($match) > 0) {\n            foreach ($match as $val2) {\n \
    \               $res[] = [$key, $val2];\n            }\n        }\n    }\n   \
    \ if (count($res) > 0) {\n        $func = function ($a, $b) {\n            if\
    \ ($a[0] == $b[0]) {\n                return $b[1] - $a[1];\n            }\n \
    \           return $a[0] - $b[0];\n        };\n        usort($res, $func);\n \
    \   }\n    return $res;\n}", "    $returned_array = [];\n    foreach ($lst as\
    \ $arr_keys => $arr_values) {\n        foreach ($arr_values as $inner_key => $inner_value)\
    \ {\n            if ($inner_value == $x) {\n                $returned_array[]\
    \ = [$arr_keys, $inner_key];\n            }\n        }\n    }\n    usort($returned_array,\
    \ function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    foreach ($returned_array\
    \ as $key => $value) {\n        usort($returned_array[$key], function ($a, $b)\
    \ {\n            return $b - $a;\n        });\n    }\n    return $returned_array;\n\
    }", "    $result = [];\n    foreach ($lst as $row => $rowData) {\n        foreach\
    \ ($rowData as $col => $value) {\n            if ($value == $x) {\n          \
    \      $result[] = [$row, $col];\n            }\n        }\n    }\n    uasort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n", "    $arr = [];\n    foreach ($lst as $key_1 => $lst_1) {\n        foreach\
    \ ($lst_1 as $key_2 => $lst_2) {\n            if ($lst_2 == $x) {\n          \
    \      $arr[] = [$key_1, $key_2];\n            }\n        }\n    }\n    usort($arr,\
    \ function ($item1, $item2) {\n        if ($item1[0] == $item2[0]) return $item2[1]\
    \ <=> $item1[1];\n        return $item1[0] <=> $item2[0];\n    });\n    return\
    \ $arr;\n}", "  $result = [];\n  foreach ($lst as $row => $val) {\n    foreach\
    \ ($val as $column => $num) {\n      if ($num == $x) {\n        $result[] = [$row,\
    \ $column];\n      }\n    }\n  }\n  usort($result, function($a, $b) {\n    if\
    \ ($a[0] == $b[0]) {\n      return $b[1] <=> $a[1];\n    }\n    return $a[0] <=>\
    \ $b[0];\n  });\n  return $result;\n}\n", "    $res = [];\n    foreach ($lst as\
    \ $y => $row) {\n        foreach ($row as $x2 => $v) {\n            if ($v ==\
    \ $x) $res[] = [$y, $x2];\n        }\n    }\n    usort($res, function($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n      \
    \  }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n", "  $coordinates\
    \ = [];\n  foreach ($lst as $row_index => $row) {\n    foreach ($row as $column_index\
    \ => $column) {\n      if ($column == $x) {\n        $coordinates[] = [$row_index,\
    \ $column_index];\n      }\n    }\n  }\n  usort($coordinates, function($a, $b)\
    \ {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return\
    \ $a[0] - $b[0];\n  });\n  return $coordinates;\n}", "  $result = [];\n  foreach\
    \ ($lst as $r => $row) {\n    foreach ($row as $c => $col) {\n      if ($col ==\
    \ $x) {\n        $result[] = [$r, $c];\n      }\n    }\n  }\n  array_multisort(array_column($result,\
    \ 0), SORT_ASC, array_column($result, 1), SORT_DESC, $result);\n  return $result;\n\
    }\necho \"<pre>get_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1)\
    \ == \";\nvar_dump(get_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n\
    ], 1));\necho \"</pre>\";\necho \"<pre>get_row([], 1) == \";\nvar_dump(get_row([],\
    \ 1));\necho \"</pre>\";\necho \"<pre>get_row([[], [1], [1, 2, 3]], 3) == \";\n\
    var_dump(get_row([[], [1], [1, 2, 3]], 3));\necho \"</pre>\";", "  $output = [];\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n      if ($lst[$i][$j] == $x) {\n        $output[] = [$i, $j];\n  \
    \    }\n    }\n  }\n  usort($output, function($a, $b) {\n    if ($a[0] < $b[0])\
    \ {\n      return -1;\n    } elseif ($a[0] > $b[0]) {\n      return 1;\n    }\
    \ else {\n      if ($a[1] < $b[1]) {\n        return 1;\n      } elseif ($a[1]\
    \ > $b[1]) {\n        return -1;\n      } else {\n        return 0;\n      }\n\
    \    }\n  });\n  return $output;\n}\n", "    $result = [];\n    $n = 0;\n    foreach\
    \ ($lst as $row) {\n        $m = 0;\n        foreach ($row as $value) {\n    \
    \        if ($value == $x) {\n                $result[] = [$n, $m];\n        \
    \    }\n            $m++;\n        }\n        $n++;\n    }\n    sort($result);\n\
    \    return $result;\n}\necho json_encode(get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]],\
    \ 1)) . PHP_EOL;\necho json_encode(get_row([], 1)) . PHP_EOL;\necho json_encode(get_row([[],\
    \ [1], [1, 2, 3]], 3)) . PHP_EOL;", "    $new = [];\n    $i = 0;\n    foreach\
    \ ($lst as $l) {\n        $j = 0;\n        foreach ($l as $d) {\n            if\
    \ ($d == $x) {\n                $new[] = [$i, $j];\n            }\n          \
    \  $j++;\n        }\n        $i++;\n    }\n    usort($new, function ($a, $b) {\n\
    \        return $a[0] - $b[0];\n    });\n    return $new;\n}\n\n$test = [[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\necho implode(\", \",\
    \ get_row($test, 1)) . PHP_EOL;\n", "    $res = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if\
    \ ($lst[$i][$j] == $x) {\n                $res[] = [$i, $j];\n            }\n\
    \        }\n    }\n    sort($res);\n    return $res;\n}", "\t$result = [];\n\t\
    foreach ($lst as $lst_i => $lst_val) {\n\t\tforeach ($lst_val as $lst_val_i =>\
    \ $lst_val_val) {\n\t\t\tif ($lst_val_val == $x)\n\t\t\t\t$result[] = [$lst_i,\
    \ $lst_val_i];\n\t\t}\n\t}\n\tforeach ($result as $key => $row) {\n\t\t$rows[$key]\
    \ = $row[0];\n\t\t$columns[$key] = $row[1];\n\t}\n\tarray_multisort($rows, SORT_ASC,\
    \ $columns, SORT_DESC, $result);\n\treturn $result;\n}", "    $out = [];\n   \
    \ foreach ($lst as $row => $cols) {\n        foreach ($cols as $col => $value)\
    \ {\n            if ($value == $x) {\n                $out[] = [$row, $col];\n\
    \            }\n        }\n    }\n    usort($out, function ($a, $b) {\n      \
    \  return ($a[0] <=> $b[0]) ?: ($b[1] <=> $a[1]);\n    });\n    return $out;\n\
    }\n\necho json_encode(get_row([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1,\
    \ 6],\n    [1, 2, 3, 4, 5, 1]\n], 1)) . PHP_EOL;\necho json_encode(get_row([],\
    \ 1)) . PHP_EOL;\necho json_encode(get_row([[], [1], [1, 2, 3]], 3)) . PHP_EOL;",
  "  $matches = [];\n  foreach ($lst as $row_index => $row) {\n    $column_index =\
    \ 0;\n    foreach ($row as $column) {\n      if ($column == $x) {\n        $matches[]\
    \ = [$row_index, $column_index];\n      }\n      $column_index++;\n    }\n  }\n\
    \  usort($matches, function($a, $b) {\n    if ($a[0] < $b[0]) {\n      return\
    \ -1;\n    } elseif ($a[0] > $b[0]) {\n      return 1;\n    } else {\n      if\
    \ ($a[1] < $b[1]) {\n        return 1;\n      } elseif ($a[1] > $b[1]) {\n   \
    \     return -1;\n      } else {\n        return 0;\n      }\n    }\n  });\n \
    \ return $matches;\n}", "    $len = count($lst);\n    if ($len === 0) {\n    \
    \    return [];\n    }\n    $result = [];\n    for ($i = 0; $i < $len; $i++) {\n\
    \        $len_el = count($lst[$i]);\n        if ($len_el === 0) {\n          \
    \  continue;\n        }\n        for ($j = 0; $j < $len_el; $j++) {\n        \
    \    if ($lst[$i][$j] === $x) {\n                $result[] = [$i, $j];\n     \
    \       }\n        }\n    }\n    usort($result, function ($a, $b) {\n        if\
    \ ($a[0] !== $b[0]) {\n            return $a[0] - $b[0];\n        }\n        return\
    \ $b[1] - $a[1];\n    });\n    return $result;\n}\n\nprint_r(get_row([\n    [1,\
    \ 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n], 1));\n\
    print_r(get_row([], 1));\nprint_r(get_row([[], [1], [1, 2, 3]], 3));", "  $result\
    \ = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n  \
    \    }\n    }\n  }\n  usort($result, function($a, $b) {\n    if ($a[0] == $b[0])\
    \ {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $result;\n}\n\n$lst = [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n\
    ];\n$x = 1;\nprint_r(get_row($lst, $x));\necho \"\\n\";\n\n$lst = [];\n$x = 1;\n\
    print_r(get_row($lst, $x));\necho \"\\n\";\n\n$lst = [[], [1], [1, 2, 3]];\n$x\
    \ = 3;\nprint_r(get_row($lst, $x));\necho \"\\n\";", "  $tuples = [];\n  foreach\
    \ ($lst as $rows => $row) {\n    foreach ($row as $cols => $column) {\n      if\
    \ ($column == $x) {\n        $tuples[] = [$rows, $cols];\n      }\n    }\n  }\n\
    \  sort($tuples);\n  return $tuples;\n}", "  // 1\n  $lst_nest = array();\n  foreach\
    \ ($lst as $key => $lst_item) {\n    $lst_nest[$key] = array();\n    foreach ($lst_item\
    \ as $key2 => $lst_item2) {\n      if ($lst_item2 == $x) {\n        $lst_nest[$key][$key2]\
    \ = $lst_item2;\n      }\n    }\n  }\n  $lst_nest_filtered = array_filter($lst_nest);\n\
    \  //2\n  $lst_nest_filtered_sorted = array();\n  foreach ($lst_nest_filtered\
    \ as $key => $lst_nest_filtered_item) {\n    arsort($lst_nest_filtered_item);\n\
    \    $lst_nest_filtered_sorted[$key] = $lst_nest_filtered_item;\n  }\n  ksort($lst_nest_filtered_sorted);\n\
    \  //3\n  $lst_nest_filtered_sorted_final = array();\n  foreach ($lst_nest_filtered_sorted\
    \ as $key => $lst_nest_filtered_sorted_item) {\n    foreach ($lst_nest_filtered_sorted_item\
    \ as $key2 => $lst_nest_filtered_sorted_item2) {\n      $lst_nest_filtered_sorted_final[]\
    \ = array($key, $key2);\n    }\n  }\n  return $lst_nest_filtered_sorted_final;\n\
    }\n", "  $res = [];\n  $ind_x = 0;\n  foreach ($lst as $key => $item) {\n    $ind_y\
    \ = 0;\n    foreach ($item as $key_y => $val) {\n      if ($val == $x) {\n   \
    \     $res[] = [$ind_x, $ind_y];\n      }\n      $ind_y++;\n    }\n    $ind_x++;\n\
    \  }\n  sort($res);\n  return $res;\n}\n", "    $res = [];\n    foreach ($lst\
    \ as $row => $arr) {\n        $col = array_search($x, $arr);\n        if ($col\
    \ !== false) {\n            $res[] = [$row, $col];\n        }\n    }\n    usort($res,\
    \ function ($e1, $e2) {\n        if ($e1[0] == $e2[0]) {\n            return $e2[1]\
    \ - $e1[1];\n        }\n        return $e1[0] - $e2[0];\n    });\n    return $res;\n\
    }\n\n$lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$lst\
    \ = [[], [1], [1, 2, 3]];\n\nvar_dump(get_row($lst, 1));", "    $res = [];\n \
    \   foreach ($lst as $y => $row) {\n        foreach ($row as $x1 => $val) {\n\
    \            if ($val == $x) {\n                $res[] = [$y, $x1];\n        \
    \    }\n        }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $res;\n}\n", "    $row = 0;\n    $result = [];\n\
    \    foreach ($lst as $item) {\n        $column = array_search($x, $item);\n \
    \       if ($column !== false) {\n            $result[] = [$row, $column];\n \
    \       }\n        $row++;\n    }\n    usort($result, function ($a, $b) {\n  \
    \      return $a[0] == $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n    });\n    return\
    \ $result;\n}", "  $result = [];\n  foreach ($lst as $k1 => $v1) {\n    foreach\
    \ ($v1 as $k2 => $v2) {\n      if ($v2 == $x) {\n        $result[] = [$k1, $k2];\n\
    \      }\n    }\n  }\n  return $result;\n}", "  $result = [];\n  for ($y = 0;\
    \ $y < count($lst); $y++) {\n    $row = $lst[$y];\n    for ($xCoord = 0; $xCoord\
    \ < count($row); $xCoord++) {\n      if ($row[$xCoord] == $x) {\n        $result[]\
    \ = [$y, $xCoord];\n      }\n    }\n  }\n  sort($result);\n  return $result;\n\
    }\necho \"<pre>get_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1)\
    \ == \\n\";\nvar_dump(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n\
    ], 1));\necho \"</pre>\";\necho \"<pre>get_row([], 1) == \\n\";\nvar_dump(get_row([],\
    \ 1));\necho \"</pre>\";\necho \"<pre>get_row([[], [1], [1, 2, 3]], 3) == \\n\"\
    ;\nvar_dump(get_row([[], [1], [1, 2, 3]], 3));\necho \"</pre>\";", "    $result\
    \ = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j <\
    \ count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n          \
    \      $result[] = [$i, $j];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }", "    $result = [];\n    foreach ($lst as $key => $value) {\n        if ($value)\
    \ {\n            $result = get_row_core($value, $key, $x, $result);\n        }\n\
    \    }\n    rsort($result);\n    return $result;\n}\n", "    $res = [];\n    foreach\
    \ ($lst as $rowIndex => $row) {\n        foreach ($row as $colIndex => $value)\
    \ {\n            if ($value == $x) {\n                $res[] = [$rowIndex, $colIndex];\n\
    \            }\n        }\n    }\n    usort($res, function ($a, $b) {\n      \
    \  return $a[0] === $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n    });\n    return\
    \ $res;\n}\n\n$data = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n  \
    \  [1, 2, 3, 4, 5, 1]\n];\n$result = get_row($data, 1);\nprint_r($result);\necho\
    \ \"</br>\";\n", "    $result = [];\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j]\
    \ == $x) {\n                $result[] = [$i, $j];\n            }\n        }\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1,\
    \ 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n$x = 1;\nvar_dump(get_row($lst,\
    \ $x));", "    $result = [];\n    foreach ($lst as $indexRow => $row) {\n    \
    \    $indexInRow = array_search($x, $row);\n        if ($indexInRow !== false)\
    \ {\n            $result[] = [$indexRow, $indexInRow];\n        }\n    }\n   \
    \ array_multisort(array_column($result, 0), SORT_ASC, array_column($result, 1),\
    \ SORT_DESC, $result);\n    return $result;\n}\n\necho '<pre>';\nprint_r(get_row([\n\
    \    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1));\necho '</pre>';",
  "\t$result = [];\n\tforeach ($lst as $i => $row) {\n\t\tforeach ($row as $j => $v)\
    \ {\n\t\t\tif ($v == $x) {\n\t\t\t\t$result[] = [$i, $j];\n\t\t\t}\n\t\t}\n\t\
    }\n\tusort($result, function($a, $b) {\n\t\treturn $a[0] - $b[0];\n\t});\n\tforeach\
    \ ($result as &$row) {\n\t\t$row = [$row[0], -$row[1]];\n\t}\n\tusort($result,\
    \ function($a, $b) {\n\t\treturn $a[1] - $b[1];\n\t});\n\tforeach ($result as\
    \ &$row) {\n\t\t$row = [$row[0], -$row[1]];\n\t}\n\treturn $result;\n}\n", " \
    \   if (empty($lst)) return [];\n    $result = [];\n    foreach ($lst as $row_key\
    \ => $row) {\n        foreach ($row as $col_key => $col) {\n            if ($col\
    \ == $x) {\n                $result[] = [$row_key, $col_key];\n            }\n\
    \        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] <\
    \ $b[0]) return -1;\n        if ($a[0] > $b[0]) return 1;\n        if ($a[1] >\
    \ $b[1]) return -1;\n        if ($a[1] < $b[1]) return 1;\n        return 0;\n\
    \    });\n    return $result;\n}\n", "  if (count($lst) == 0) return [];\n  $out\
    \ = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    $count = 0;\n    for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n      if ($lst[$i][$j] == $x) {\n      \
    \  $out[] = [$i, $j];\n        $count++;\n      }\n    }\n    if ($count == 0)\
    \ {\n      unset($out[$i]);\n    }\n  }\n  for ($i = 0; $i < count($out); $i++)\
    \ {\n    for ($j = $i + 1; $j < count($out); $j++) {\n      if ($out[$i][0] ==\
    \ $out[$j][0]) {\n        if ($out[$i][1] < $out[$j][1]) {\n          $tmp = $out[$i];\n\
    \          $out[$i] = $out[$j];\n          $out[$j] = $tmp;\n        }\n     \
    \ }\n    }\n  }\n  $out = array_values($out);\n  return $out;\n}\necho json_encode(get_row([\n\
    [1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1));", "\tif(empty($lst)){\n\
    \t\treturn [];\n\t}\n\t$coords = [];\n\tforeach($lst as $key=>$val){\n\t\t$coords\
    \ = array_merge($coords, get_row_column($val, $x, $key));\n\t}\n\tusort($coords,\
    \ function($a, $b){\n\t\tif($a[0] == $b[0]){\n\t\t\treturn ($a[1] > $b[1]) ? -1\
    \ : 1;\n\t\t}\n\t\treturn ($a[0] < $b[0]) ? -1 : 1;\n\t});\n\treturn $coords;\n\
    }", "\tif(!sizeof($lst)) return [];\n\t$ret = [];\n\tforeach($lst as $y => $row)\
    \ {\n\t\t$s = sizeof($row);\n\t\tfor($i = 0; $i < $s; $i++) {\n\t\t\tif($row[$i]\
    \ == $x) $ret[] = [$y, $i];\n\t\t}\n\t}\n\tusort($ret, function($a, $b) {\n\t\t\
    if($a[0] == $b[0]) return $b[1] - $a[1];\n\t\treturn $a[0] - $b[0];\n\t});\n\t\
    return $ret;\n}\n$test = get_row([\n\t[1,2,3,4,5,6],\n\t[1,2,3,4,1,6],\n\t[1,2,3,4,5,1]\n\
    ], 1);\nprint_r($test);\n$test = get_row([], 1);\nprint_r($test);\n$test = get_row([[],\
    \ [1], [1, 2, 3]], 3);\nprint_r($test);\n$test = get_row([[3, 2, 1], [3, 2, 1],\
    \ [1, 2, 3]], 1);\nprint_r($test);", "    $ret = [];\n    foreach ($lst as $i\
    \ => $row) {\n        foreach ($row as $j => $v) {\n            if ($v == $x)\
    \ $ret[] = [$i, $j];\n        }\n    }\n    usort($ret, function($a, $b) {\n \
    \       return $a[0] - $b[0];\n    });\n    foreach ($ret as &$t) {\n        $t\
    \ = $t[0] . \".\" . $t[1];\n    }\n    usort($ret, function($a, $b) {\n      \
    \  $a = explode(\".\", $a);\n        $b = explode(\".\", $b);\n        return\
    \ $a[1] < $b[1];\n    });\n    foreach ($ret as &$t) {\n        $t = explode(\"\
    .\", $t);\n    }\n    return $ret;\n}\n\nvar_dump(get_row([\n    [1,2,3,4,5,6],\n\
    \    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1));\necho \"Done\\n\";", "  $lst_l\
    \ = count($lst);\n  if ($lst_l == 0) return array();\n  $ans = array();\n  for\
    \ ($i = 0; $i < $lst_l; $i++) {\n    $row_l = count($lst[$i]);\n    for ($j =\
    \ 0; $j < $row_l; $j++) {\n      if ($lst[$i][$j] == $x) {\n        $ans[] = array($i,\
    \ $j);\n      }\n    }\n  }\n  usort($ans, function($a, $b) {\n    if ($a[0] ==\
    \ $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n\
    \  return $ans;\n}\n", "  $data = [];\n  foreach ($lst as $y => $row) {\n    foreach\
    \ ($row as $x2 => $value) {\n      if ($value == $x) {\n        $data[] = [$y,\
    \ $x2];\n      }\n    }\n  }\n  usort($data, function($a, $b) {\n    if ($a[0]\
    \ > $b[0]) {\n      return 1;\n    } elseif ($a[0] < $b[0]) {\n      return -1;\n\
    \    } else {\n      if ($a[1] > $b[1]) {\n        return -1;\n      } elseif\
    \ ($a[1] < $b[1]) {\n        return 1;\n      } else {\n        return 0;\n  \
    \    }\n    }\n  });\n  return $data;\n}\n", "\t$res = [];\n\tforeach ($lst as\
    \ $i => $row) {\n\t\t$n = count($row);\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\t\
    \tif ($row[$j] == $x) {\n\t\t\t\t$res[] = [$i, $j];\n\t\t\t}\n\t\t}\n\t}\n\tusort($res,\
    \ function($a, $b) {\n\t\treturn $a[0] - $b[0];\n\t});\n\t$res = array_map(function($e)\
    \ {\n\t\treturn [$e[0], -$e[1]];\n\t}, $res);\n\tusort($res, function($a, $b)\
    \ {\n\t\treturn $a[0] - $b[0];\n\t});\n\t$res = array_map(function($e) {\n\t\t\
    return [$e[0], -$e[1]];\n\t}, $res);\n\treturn $res;\n}\n\ndo {\n\tfscanf(STDIN,\
    \ \"%d\", $n);\n\tif ($n == 0) {\n\t\tbreak;\n\t}\n\t$lst = [];\n\tfor ($i = 0;\
    \ $i < $n; $i++) {\n\t\tfscanf(STDIN, \"%d\", $m);\n\t\t$row = [];\n\t\tfor ($j\
    \ = 0; $j < $m; $j++) {\n\t\t\tfscanf(STDIN, \"%d\", $x);\n\t\t\t$row[] = $x;\n\
    \t\t}\n\t\t$lst[] = $row;\n\t}\n\tfscanf(STDIN, \"%d\", $x);\n\t$res = get_row($lst,\
    \ $x);\n\tforeach ($res as $r) {\n\t\tprintf(\"(%d, %d)\\n\", $r[0], $r[1]);\n\
    \t}\n} while (true);", "  $tuple = [];\n  for ($i = 0; $i < count($lst); $i++)\
    \ {\n    for ($j = 0; $j < count($lst[$i]); $j++) {\n      if ($lst[$i][$j] ==\
    \ $x) {\n        $tuple[] = [$i, $j];\n      }\n    }\n  }\n  usort($tuple, function($a,\
    \ $b) {\n    if ($a[0] > $b[0]) {\n      return 1;\n    } else if ($a[0] < $b[0])\
    \ {\n      return -1;\n    } else {\n      if ($a[1] > $b[1]) {\n        return\
    \ -1;\n      } else if ($a[1] < $b[1]) {\n        return 1;\n      } else {\n\
    \        return 0;\n      }\n    }\n  });\n  return $tuple;\n}\necho \"<pre>\"\
    ;\nprint_r(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n],\
    \ 1));\necho \"</pre>\";", "    $res = [];\n    foreach ($lst as $row => $cols)\
    \ {\n        foreach ($cols as $col => $value) {\n            if ($value == $x)\
    \ {\n                $res[] = [$row, $col];\n            }\n        }\n    }\n\
    \    usort($res, function ($a, $b) {\n        if ($a[0] != $b[0]) {\n        \
    \    return $a[0] <=> $b[0];\n        }\n        return $b[1] <=> $a[1];\n   \
    \ });\n    return $res;\n}\n", "  $x_positions = [];\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    $x_positions[] = [$i, array_search($x, $lst[$i])];\n  }\n  return\
    \ array_filter($x_positions, function($pos) {\n    return $pos[1] !== false;\n\
    \  });\n}\n\n$a = [\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n];\n\
    \nprint_r(get_row($a, 1));\necho \"*********************\" . PHP_EOL;\nprint_r(get_row([],\
    \ 1));\necho \"*********************\" . PHP_EOL;\nprint_r(get_row([[], [1], [1,\
    \ 2, 3]], 3));\n", "  // your code here\n}", "    if (!$lst) return [];\n    $res\
    \ = [];\n    foreach ($lst as $k => $row) {\n        $len = count($row);\n   \
    \     for ($i = 0; $i < $len; $i++) {\n            if ($row[$i] == $x) {\n   \
    \             $res[] = [$k, $i];\n            }\n        }\n    }\n    usort($res,\
    \ function ($a, $b) {\n        if ($a[0] > $b[0]) return 1;\n        if ($a[0]\
    \ < $b[0]) return -1;\n        if ($a[1] > $b[1]) return -1;\n        if ($a[1]\
    \ < $b[1]) return 1;\n        return 0;\n    });\n    return $res;\n}", "    $coords\
    \ = [];\n    foreach ($lst as $row => $cols) {\n        foreach ($cols as $col\
    \ => $elem) {\n            if ($elem == $x) {\n                $coords[] = [$row,\
    \ $col];\n            }\n        }\n    }\n    usort($coords, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n      \
    \  }\n        return $a[0] - $b[0];\n    });\n    return $coords;\n}\necho json_encode(get_row([\n\
    \    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1));", "    if(empty($lst)){\n\
    \        return [];\n    }\n\n    $ret = [];\n    foreach($lst as $k => $row){\n\
    \        foreach($row as $kk => $x_row){\n            if($x == $x_row){\n    \
    \            $ret[] = [$k, $kk];\n            }\n        }\n    }\n\n    usort($ret,\
    \ function($a, $b){\n        if($a[0] == $b[0]){\n            return $b[1] <=>\
    \ $a[1];\n        }\n        return $a[0] <=> $b[0];\n    });\n\n    return $ret;\n\
    }\n", "}\necho \"<pre>get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n\
    ], 1)\\r\\n\";\nprint_r(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n  \
    \  [1,2,3,4,5,1]\n], 1));\necho \"</pre>\";\necho \"<pre>get_row([], 1)\\r\\n\"\
    ;\nprint_r(get_row([], 1));\necho \"</pre>\";\necho \"<pre>get_row([[], [1], [1,\
    \ 2, 3]], 3)\\r\\n\";\nprint_r(get_row([[], [1], [1, 2, 3]], 3));\necho \"</pre>\"\
    ;", "    $res = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $res[] = [$i, $j];\n            }\n        }\n    }\n    usort($res,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n\
    }\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3,\
    \ 4, 5, 1]\n];\n", "    $ret = [];\n    foreach ($lst as $i => $row) {\n     \
    \   foreach ($row as $j => $col) {\n            if ($col == $x) {\n          \
    \      $ret[] = [$i, $j];\n            }\n        }\n    }\n    // sort by 1st\
    \ key\n    array_multisort(array_column($ret, 0), SORT_ASC,\n        // sort by\
    \ 2nd key\n        array_column($ret, 1), SORT_DESC,\n        $ret);\n    return\
    \ $ret;\n}\n\nprint_r(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n\
    ], 1));\n\nprint_r(get_row([], 1));\n\nprint_r(get_row([[], [1], [1, 2, 3]], 3));",
  "    $res = [];\n    foreach ($lst as $k => $v) {\n        $cols = array_keys($v,\
    \ $x);\n        foreach ($cols as $v1) {\n            $res[] = [$k, $v1];\n  \
    \      }\n    }\n    array_multisort(array_column($res, 0), SORT_ASC, array_column($res,\
    \ 1), SORT_DESC, $res);\n    return $res;\n}", "  $x_in_lst = [];\n  $len = count($lst);\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $sub_len = count($lst[$i]);\n    for ($j\
    \ = 0; $j < $sub_len; $j++) {\n      if ($lst[$i][$j] == $x) {\n        $x_in_lst[]\
    \ = [$i, $j];\n      }\n    }\n  }\n  $ascending_sort = function($x, $y) {\n \
    \   if ($x[0] == $y[0]) {\n      return $x[1] > $y[1] ? -1 : 1;\n    }\n    return\
    \ $x[0] > $y[0] ? 1 : -1;\n  };\n  usort($x_in_lst, $ascending_sort);\n  return\
    \ $x_in_lst;\n}", "    $res = [];\n    foreach ($lst as $row => $items) {\n  \
    \      foreach ($items as $col => $item) {\n            if ($item == $x) {\n \
    \               $res[] = [$row, $col];\n            }\n        }\n    }\n    usort($res,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n\
    }", "    $result = [];\n    foreach ($lst as $y => $arr) {\n        foreach ($arr\
    \ as $k => $v) {\n            if ($v == $x) {\n                $result[] = [$y,\
    \ $k];\n            }\n        }\n    }\n    usort($result, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n      \
    \  }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}", "\t$result\
    \ = [];\n\tforeach ($lst as $i => $row) {\n\t\tforeach ($row as $j => $num) {\n\
    \t\t\tif ($num == $x) {\n\t\t\t\t$result[] = [$i, $j];\n\t\t\t}\n\t\t}\n\t}\n\t\
    usort($result, function ($a, $b) {\n\t\treturn $a[0] == $b[0] ? $b[1] - $a[1]\
    \ : $a[0] - $b[0];\n\t});\n\treturn $result;\n}\n", "\t$data = [];\n\tforeach\
    \ ($lst as $row => $cols) {\n\t\tforeach ($cols as $col => $val) {\n\t\t\tif ($val\
    \ == $x) {\n\t\t\t\t$data[] = [$row, $col];\n\t\t\t}\n\t\t}\n\t}\n\tusort($data,\
    \ function($a, $b) {\n\t\tif ($a[0] == $b[0]) {\n\t\t\treturn $b[1] - $a[1];\n\
    \t\t}\n\t\treturn $a[0] - $b[0];\n\t});\n\t$result = [];\n\tforeach ($data as\
    \ $entry) {\n\t\t$result[] = [$entry[0], $entry[1]];\n\t}\n\treturn $result;\n\
    }", "    $coordinates = [];\n    for ($i = 0; $i < count($lst); $i++) {\n    \
    \    for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j]\
    \ == $x) {\n                $coordinates[] = array($i, $j);\n            }\n \
    \       }\n    }\n    foreach ($coordinates as $key => $value) {\n        $row[$key]\
    \ = $value[0];\n        $column[$key] = $value[1];\n    }\n    array_multisort($row,\
    \ SORT_ASC, $column, SORT_DESC, $coordinates);\n    return $coordinates;\n}\n",
  "  // your code goes here\n}", "  $result = [];\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++) {\n      if ($lst[$i][$j]\
    \ == $x) {\n        $result[] = [$i, $j];\n      }\n    }\n  }\n  usort($result,\
    \ function($a, $b) {\n    return $a[0] - $b[0];\n  });\n  usort($result, function($a,\
    \ $b) {\n    return $b[1] - $a[1];\n  });\n  return $result;\n}", "    $coords\
    \ = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $item)\
    \ {\n            if ($item == $x) {\n                $coords[] = [$i, $j];\n \
    \           }\n        }\n    }\n    usort($coords, function ($tuple1, $tuple2)\
    \ {\n        if ($tuple1[0] == $tuple2[0]) {\n            return $tuple2[1] -\
    \ $tuple1[1];\n        }\n        return $tuple1[0] - $tuple2[0];\n    });\n \
    \   return $coords;\n}", "  $res = [];\n  for ($i = 0; $i < count($lst); $i++)\
    \ {\n    for ($j = 0; $j < count($lst[$i]); $j++) {\n      if ($lst[$i][$j] ==\
    \ $x) {\n        $res[] = [$i, $j];\n      }\n    }\n  }\n  usort($res, function($a,\
    \ $b) {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return\
    \ $a[0] - $b[0];\n  });\n  return $res;\n}\n", "    $res = [];\n    for ($i =\
    \ 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n            if ($lst[$i][$j] == $x) {\n                $res[] = [$i, $j];\n\
    \            }\n        }\n    }\n    usort($res, function ($a, $b) {\n      \
    \  return ($a[0] > $b[0]) ? 1 : -1;\n    });\n    $row = null;\n    foreach ($res\
    \ as $key => $value) {\n        if ($row != $value[0]) {\n            usort($res,\
    \ function ($a, $b) {\n                return ($a[1] < $b[1]) ? 1 : -1;\n    \
    \        });\n            $row = $value[0];\n        }\n    }\n    return $res;\n\
    }\necho \"<pre>get_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1)</pre>\"\
    ;\nvar_dump(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n\
    ], 1));\necho \"<pre>get_row([], 1)</pre>\";\nvar_dump(get_row([], 1));\necho\
    \ \"<pre>get_row([[], [1], [1, 2, 3]], 3)</pre>\";\nvar_dump(get_row([[], [1],\
    \ [1, 2, 3]], 3));", "    $result = [];\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        $currentRow = $lst[$i];\n        for ($j = 0; $j < count($currentRow);\
    \ $j++) {\n            if ($currentRow[$j] == $x) {\n                $currentTuple\
    \ = [$i, $j];\n                array_push($result, $currentTuple);\n         \
    \   }\n        }\n    }\n    sort($result);\n    return $result;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $r => $row) {\n        foreach ($row as $c => $col)\
    \ {\n            if ($col == $x) {\n                $result[] = [$r, $c];\n  \
    \          }\n        }\n    }\n    usort($result, function ($a, $b) {\n     \
    \   if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n    \
    \    return $a[0] - $b[0];\n    });\n    return $result;\n}", "  $res = [];\n\
    \  foreach ($lst as $k => $v) {\n    foreach ($v as $k1 => $v1) {\n      if ($v1\
    \ == $x) {\n        $res[] = [$k, $k1];\n      }\n    }\n  }\n  if (empty($res))\
    \ {\n    return [];\n  } else {\n    $res1 = [];\n    foreach ($res as $k => $v)\
    \ {\n      $res1[$v[0]][] = $v[1];\n    }\n    $res2 = [];\n    foreach ($res1\
    \ as $k => $v) {\n      rsort($v);\n      foreach ($v as $k1 => $v1) {\n     \
    \   $res2[] = [$k, $v1];\n      }\n    }\n    $res3 = [];\n    foreach ($res2\
    \ as $k => $v) {\n      $res3[$v[0]][] = $v[1];\n    }\n    $res4 = [];\n    foreach\
    \ ($res3 as $k => $v) {\n      rsort($v);\n      foreach ($v as $k1 => $v1) {\n\
    \        $res4[] = [$k, $v1];\n      }\n    }\n    return $res4;\n  }\n}\n", " \
    \   $result = [];\n    foreach ($lst as $y1 => $lst1) {\n        foreach ($lst1\
    \ as $y2 => $val) {\n            if ($val == $x) {\n                $result[]\
    \ = [$y1, $y2];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        return $a[0] === $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n\
    \    });\n    return $result;\n}", "    $result = [];\n    $y = 0;\n    foreach\
    \ ($lst as $item) {\n        $x_pos = array_search($x, $item);\n        if (is_numeric($x_pos))\
    \ {\n            $result[] = [$y, $x_pos];\n        }\n        $y++;\n    }\n\
    \    $pos = [];\n    foreach ($result as $i => $v) {\n        $pos[$i] = $v[0];\n\
    \    }\n    array_multisort($pos, SORT_ASC, $result);\n    foreach ($result as\
    \ $i => $v) {\n        $pos[$i] = $v[1];\n    }\n    array_multisort($pos, SORT_DESC,\
    \ $result);\n    return $result;\n}\n\n$test_cases = [\n    [\n        'input'\
    \ => [\n            [1, 2, 3, 4, 5, 6],\n            [1, 2, 3, 4, 1, 6],\n   \
    \         [1, 2, 3, 4, 5, 1]\n        ],\n        'expected' => [[0, 0], [1, 4],\
    \ [1, 0], [2, 5], [2, 0]]\n    ],\n    [\n        'input' => [[], [1], [1, 2,\
    \ 3]],\n        'expected' => [[2, 2]]\n    ],\n    [\n        'input' => [[]],\n\
    \        'expected' => []\n    ],\n    [\n        'input' => [[], [3, 5, 7, 9,\
    \ 11], [8, 7, 6, 5, 4, 3], [2, 3, 4, 5, 6, 1, 2]],\n        'expected' => [[1,\
    \ 4], [1, 0], [2, 5], [2, 4], [2, 3], [2, 2], [2, 1], [2, 0], [3, 6], [3, 5],\
    \ [3, 4], [3, 3], [3, 2], [3, 1], [3, 0]]\n    ],\n    [\n        'input' => [[1,\
    \ 2, 3, 4, 5, 6], [1,", "  $coordinates = [];\n  for ($row = 0; $row < count($lst);\
    \ $row++) {\n    for ($col = 0; $col < count($lst[$row]); $col++) {\n      if\
    \ ($lst[$row][$col] == $x) {\n        $coordinates[] = [$row, $col];\n      }\n\
    \    }\n  }\n  usort($coordinates, function($a, $b) {\n    if ($a[0] > $b[0])\
    \ {\n      return 1;\n    } elseif ($a[0] < $b[0]) {\n      return -1;\n    }\
    \ else {\n      if ($a[1] > $b[1]) {\n        return -1;\n      } elseif ($a[1]\
    \ < $b[1]) {\n        return 1;\n      } else {\n        return 0;\n      }\n\
    \    }\n  });\n  return $coordinates;\n}\n\necho '<pre>';\nprint_r(get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]],\
    \ 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[], [1], [1, 2, 3]], 3));\n\
    print_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1));\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 3));\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 6));\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2,", "\t$res = [];\n\tforeach ($lst as $i => $row) {\n\t\tforeach ($row\
    \ as $j => $col) {\n\t\t\tif ($col == $x) {\n\t\t\t\t$res[] = [$i, $j];\n\t\t\t\
    }\n\t\t}\n\t}\n\tusort($res, function($a, $b) {\n\t\tif ($a[0] == $b[0]) {\n\t\
    \t\treturn $b[1] - $a[1];\n\t\t}\n\t\treturn $a[0] - $b[0];\n\t});\n\treturn $res;\n\
    }", "\t$coordinates = [];\n\tforeach ($lst as $row_index => $row) {\n\t\tforeach\
    \ ($row as $col_index => $value) {\n\t\t\tif ($value == $x) {\n\t\t\t\t$coordinates[]\
    \ = [$row_index, $col_index];\n\t\t\t}\n\t\t}\n\t}\n\t// Sort coordinates by row\
    \ and col in descending order.\n\tforeach ($coordinates as $i => $arr1) {\n\t\t\
    foreach ($coordinates as $j => $arr2) {\n\t\t\tif ($arr1[0] < $arr2[0]) {\n\t\t\
    \t\t$tmp = $coordinates[$i];\n\t\t\t\t$coordinates[$i] = $coordinates[$j];\n\t\
    \t\t\t$coordinates[$j] = $tmp;\n\t\t\t} else if ($arr1[0] == $arr2[0] && $arr1[1]\
    \ > $arr2[1]) {\n\t\t\t\t$tmp = $coordinates[$i];\n\t\t\t\t$coordinates[$i] =\
    \ $coordinates[$j];\n\t\t\t\t$coordinates[$j] = $tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return $coordinates;\n}\n$lst = [\n\t[1,2,3,4,5,6],\n\t[1,2,3,4,1,6],\n\t[1,2,3,4,5,1]\n\
    ];\nprint_r(get_row($lst, 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[],\
    \ [1], [1, 2, 3]], 3));", "    if (empty($lst)) {\n        return [];\n    }\n\
    \    $result = [];\n    foreach ($lst as $key => $value) {\n        $k = 0;\n\
    \        foreach ($value as $k1 => $v1) {\n            if ($v1 == $x) {\n    \
    \            $result[] = [$key, $k1];\n            }\n            $k++;\n    \
    \    }\n    }\n    $res = [];\n    foreach ($result as $value) {\n        $res[$value[0]][]\
    \ = $value[1];\n    }\n    foreach ($res as $key => $value) {\n        rsort($res[$key]);\n\
    \    }\n    asort($res);\n    $res1 = [];\n    foreach ($res as $key => $value)\
    \ {\n        foreach ($value as $v) {\n            $res1[] = [$key, $v];\n   \
    \     }\n    }\n    return $res1;\n}\n", "    $result = [];\n    $row_number =\
    \ 0;\n    foreach ($lst as $row) {\n        $column_number = 0;\n        foreach\
    \ ($row as $item) {\n            if ($item == $x) {\n                $result[]\
    \ = [$row_number, $column_number];\n            }\n            $column_number++;\n\
    \        }\n        $row_number++;\n    }\n    usort($result, function ($a, $b)\
    \ {\n        if ($a[0] != $b[0]) {\n            return $a[0] < $b[0] ? -1 : 1;\n\
    \        }\n        return $a[1] > $b[1] ? -1 : 1;\n    });\n    return $result;\n\
    }", "  $coords = [];\n  foreach ($lst as $row => $row_lst) {\n    foreach ($row_lst\
    \ as $col => $val) {\n      if ($val == $x) {\n        $coords[] = [$row, $col];\n\
    \      }\n    }\n  }\n  usort($coords, function($a, $b) {\n    if ($a[0] == $b[0])\
    \ {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $coords;\n}", "  $tmp = [];\n  foreach ($lst as $ind1 => $arr) {\n    foreach\
    \ ($arr as $ind2 => $el) {\n      if ($el == $x) {\n        $tmp[] = [$ind1, $ind2];\n\
    \      }\n    }\n  }\n  return $tmp;\n}\nprint_r(get_row([\n  [1,2,3,4,5,6],\n\
    \  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1));", "    if(count($lst) == 0) return\
    \ [];\n    $output = [];\n    foreach($lst as $idx => $arr) {\n        foreach($arr\
    \ as $k => $value) {\n            if($value == $x) {\n                $output[]\
    \ = [$idx, $k];\n            }\n        }\n    }\n    usort($output, function($a,\
    \ $b) {\n        if($a[0] < $b[0]) return -1;\n        if($a[0] > $b[0]) return\
    \ 1;\n        if($a[1] > $b[1]) return -1;\n        if($a[1] < $b[1]) return 1;\n\
    \        return 0;\n    });\n    return $output;\n}\necho \"<pre>get_row([\n[1,2,3,4,5,6],\n\
    [1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1)\\r\\n\";\nvar_dump(get_row([\n[1,2,3,4,5,6],\n\
    [1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1));\necho \"</pre>\";\necho \"<pre>get_row([],\
    \ 1)\\r\\n\";\nvar_dump(get_row([], 1));\necho \"</pre>\";\necho \"<pre>get_row([[],\
    \ [1], [1, 2, 3]], 3)\\r\\n\";\nvar_dump(get_row([[], [1], [1, 2, 3]], 3));\n\
    echo \"</pre>\";", "    $res = [];\n    for ($i = 0; $i < count($lst); $i++) {\n\
    \        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j]\
    \ == $x) {\n                $res[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    return $res;\n}", "    $ret = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        $ret = array_merge($ret, recursive_get_row($lst[$i], 0, $i,\
    \ $x));\n    }\n    usort($ret, function($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $ret;\n}\n", "  if (empty($lst)) return [];\n  $len = count($lst);\n\
    \  $ret = [];\n  for ($i = 0; $i < $len; $i++) {\n    $len2 = count($lst[$i]);\n\
    \    for ($j = 0; $j < $len2; $j++) {\n      if ($lst[$i][$j] == $x) {\n     \
    \   $ret[] = [$i, $j];\n      }\n    }\n  }\n  $sort = array_map(function($e)\
    \ {\n    return [$e[0], $e[1] * -1];\n  }, $ret);\n  array_multisort($sort, SORT_ASC,\
    \ $ret);\n  return $ret;\n}", "\t$coords = [];\n\tforeach ($lst as $key => $row)\
    \ {\n\t\tforeach ($row as $k => $val) {\n\t\t\tif ($val == $x) $coords[] = [$key,\
    \ $k];\n\t\t}\n\t}\n\tusort($coords, function($a, $b) {\n\t\tif ($a[0] == $b[0])\
    \ {\n\t\t\treturn $b[1] <=> $a[1];\n\t\t}\n\t\treturn $a[0] <=> $b[0];\n\t});\n\
    \treturn $coords;\n}\necho '<pre>';\nprint_r(get_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n\
    [1,2,3,4,5,1]\n], 1));\necho '</pre>';", "    $res = [];\n    foreach ($lst as\
    \ $i => $row) {\n        $index = array_search($x, $row);\n        if ($index\
    \ !== false) {\n            $res[] = [$i, $index];\n        }\n    }\n    uasort($res,\
    \ function ($a, $b) {\n        if ($a[0] === $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n\
    }\n", "\t$res = [];\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\t$row = $lst[$i];\n\
    \t\t$j = 0;\n\t\t$size = count($row);\n\t\twhile ($j < $size) {\n\t\t\tif ($row[$j]\
    \ == $x) {\n\t\t\t\t$res[] = [$i, $j];\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t}\n\tuasort($res,\
    \ 'cmp');\n\treturn $res;\n}", "  $coords = [];\n  $keys_to_delete = [];\n  $counter\
    \ = 0;\n  foreach ($lst as $key => $value) {\n    $keys_to_delete[] = $key;\n\
    \    $inside_counter = 0;\n    foreach ($value as $key_value => $inner_value)\
    \ {\n      if ($inner_value == $x) {\n        $coords[] = [$counter, $inside_counter];\n\
    \      }\n      $inside_counter++;\n    }\n    $counter++;\n  }\n  foreach ($keys_to_delete\
    \ as $value) {\n    unset($lst[$value]);\n  }\n  array_walk($coords, function\
    \ (&$item) {\n    $item = implode(',', $item);\n  });\n  array_multisort($coords,\
    \ SORT_ASC, SORT_NATURAL);\n  array_walk($coords, function (&$item) {\n    $item\
    \ = explode(',', $item);\n  });\n  return $coords;\n}", "  $result = [];\n  $count\
    \ = 0;\n  foreach ($lst as $key1 => $value1) {\n    foreach ($value1 as $key2\
    \ => $value2) {\n      if ($value2 == $x) {\n        $result[$count] = [$key1,\
    \ $key2];\n        $count++;\n      }\n    }\n  }\n  //sort by row number\n  $sortByRow\
    \ = array_column($result, 0);\n  array_multisort($sortByRow, SORT_ASC, $result);\n\
    \  //sort by col number\n  foreach ($result as $key => $row) {\n    $sortByCol[$key]\
    \ = $row[1];\n  }\n  array_multisort($sortByCol, SORT_DESC, $result);\n  return\
    \ $result;\n}\n$lst = [[1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]];\n\
    $x = 1;\nprint_r(get_row($lst, $x));\necho \"\\n\";\n$lst = [];\n$x = 1;\nprint_r(get_row($lst,\
    \ $x));\necho \"\\n\";\n$lst = [[], [1], [1, 2, 3]];\n$x = 3;\nprint_r(get_row($lst,\
    \ $x));\necho \"\\n\";", "\t$res = [];\n\tforeach ($lst as $k => $v) {\n\t\tforeach\
    \ ($v as $kk => $vv) {\n\t\t\tif ($vv == $x) {\n\t\t\t\t$res[] = [$k, $kk];\n\t\
    \t\t}\n\t\t}\n\t}\n\tusort($res, function($a, $b) {\n\t\tif ($a[0] == $b[0]) {\n\
    \t\t\treturn $b[1] - $a[1];\n\t\t}\n\t\treturn $a[0] - $b[0];\n\t});\n\treturn\
    \ $res;\n}\n\nvar_dump(get_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n\
    ], 1));", "    $res = [];\n    foreach ($lst as $i => $row) {\n        foreach\
    \ ($row as $j => $col) {\n            if ($col == $x) {\n                $res[]\
    \ = [$i, $j];\n            }\n        }\n    }\n    usort($res, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n", "  \
    \  $result = [];\n    foreach ($lst as $key => $l) {\n        $i = -1;\n     \
    \   foreach ($l as $k => $val) {\n            if ($val == $x) {\n            \
    \    $result[] = [$key, $k];\n            }\n        }\n    }\n    return $result;\n\
    }\n", "    $res = [];\n    foreach ($lst as $i => $row) {\n        if (!$row)\
    \ {\n            continue;\n        }\n        foreach ($row as $j => $val) {\n\
    \            if ($val === $x) {\n                $res[] = [$i, $j];\n        \
    \    }\n        }\n    }\n    $sort_func = function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    };\n    usort($res, $sort_func);\n    return $res;\n}\necho '<pre>';\n\
    var_dump(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n\
    ], 1));\nvar_dump(get_row([], 1));\nvar_dump(get_row([[], [1], [1, 2, 3]], 3));\n",
  "    $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) $result[]\
    \ = [$i, $j];\n        }\n    }\n    usort($result, function ($a, $b) {\n    \
    \    if ($a[0] == $b[0]) return $b[1] - $a[1];\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n", "\t$rows = [];\n\tforeach ($lst as $y =>\
    \ $row) {\n\t\t$cols = [];\n\t\tforeach ($row as $x2 => $val) {\n\t\t\tif ($val\
    \ == $x) {\n\t\t\t\t$cols[] = [$x2, $y];\n\t\t\t}\n\t\t}\n\t\tif (count($cols))\
    \ {\n\t\t\t$rows[] = $cols;\n\t\t}\n\t}\n\t$rows = array_map(function($row) {\n\
    \t\tuasort($row, function($a, $b) {\n\t\t\tif ($a[0] == $b[0]) {\n\t\t\t\treturn\
    \ 0;\n\t\t\t}\n\t\t\treturn ($a[0] < $b[0]) ? -1 : 1;\n\t\t});\n\t\treturn $row;\n\
    \t}, $rows);\n\tusort($rows, function($a, $b) {\n\t\tif ($a[0][1] == $b[0][1])\
    \ {\n\t\t\treturn 0;\n\t\t}\n\t\treturn ($a[0][1] < $b[0][1]) ? -1 : 1;\n\t});\n\
    \t$rows = array_map(function($row) {\n\t\treturn array_map(function($tuple) {\n\
    \t\t\treturn [$tuple[1], $tuple[0]];\n\t\t}, $row);\n\t}, $rows);\n\treturn array_reduce($rows,\
    \ function($acc, $val) {\n\t\treturn array_merge($acc, $val);\n\t}, []);\n}\n",
  "    $result = [];\n    foreach ($lst as $index => $row) {\n        if (in_array($x,\
    \ $row)) {\n            $sub = array_keys($row, $x);\n            foreach ($sub\
    \ as $sub_index) {\n                $result[] = [$index, $sub_index];\n      \
    \      }\n        }\n    }\n    $result_ = [];\n    foreach ($result as $index\
    \ => $value) {\n        $result_[$index] = $value[0];\n    }\n    array_multisort($result_,\
    \ SORT_ASC, $result);\n    foreach ($result as $index => $value) {\n        $result_[$index]\
    \ = $value[1];\n    }\n    array_multisort($result_, SORT_DESC, $result);\n  \
    \  return $result;\n}", "    $ret = [];\n    foreach ($lst as $row => $list) {\n\
    \        foreach ($list as $col => $value) {\n            if ($value == $x) {\n\
    \                $ret[] = [$row, $col];\n            }\n        }\n    }\n   \
    \ usort($ret, function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n  \
    \  foreach ($ret as $key => $value) {\n        $ret[$key] = [$value[0], -$value[1]];\n\
    \    }\n    usort($ret, function ($a, $b) {\n        return $a[0] - $b[0];\n \
    \   });\n    foreach ($ret as $key => $value) {\n        $ret[$key] = [$value[0],\
    \ -$value[1]];\n    }\n    return $ret;\n}\nprint_r(get_row([\n    [1,2,3,4,5,6],\n\
    \    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1));", "    //first sort the row by\
    \ length of the subarrays in order to find 2D array\n    usort($lst, function($a,\
    \ $b) {\n        return count($a) < count($b);\n    });\n    $coordinates = [];\n\
    \    //find coordinates of the item in the row\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if\
    \ ($lst[$i][$j] == $x) {\n                $coordinates[] = [$i, $j];\n       \
    \     }\n        }\n    }\n    //sort coordinates of the row by columns in descending\
    \ order\n    usort($coordinates, function($a, $b) {\n        return $a[1] < $b[1];\n\
    \    });\n    return $coordinates;\n}\n", "    $res = [];\n    foreach ($lst as\
    \ $i => $item) {\n        foreach ($item as $j => $v) {\n            if ($v ==\
    \ $x) {\n                $res[] = [$i, $j];\n            }\n        }\n    }\n\
    \    sort($res);\n    return $res;\n}\n\nprint_r(get_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n\
    [1,2,3,4,5,1]\n], 1));", "  $out = [];\n  foreach ($lst as $k => $row) {\n   \
    \ foreach ($row as $i => $v) {\n      if ($v == $x) {\n        $out[] = [$k, $i];\n\
    \      }\n    }\n  }\n  usort($out, function($a, $b) {\n    if ($a[0] == $b[0])\
    \ {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $out;\n}", "    $result = [];\n    foreach ($lst as $k => $v) {\n        foreach\
    \ ($v as $kk => $vv) {\n            if ($vv == $x) {\n                $result[]\
    \ = [$k, $kk];\n            }\n        }\n    }\n    // Sort by rows in ascending\
    \ order.\n    usort($result, function ($a, $b) {\n        return $a[0] - $b[0];\n\
    \    });\n    // Sort by columns in descending order.\n    foreach ($result as\
    \ $k => $v) {\n        $result[$k] = [$v[0], -$v[1]];\n    }\n    usort($result,\
    \ function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    foreach ($result\
    \ as $k => $v) {\n        $result[$k] = [$v[0], -$v[1]];\n    }\n    return $result;\n\
    }", "    $coordinates = [];\n    $y = 0;\n    foreach ($lst as $row) {\n     \
    \   $xCoord = 0;\n        foreach ($row as $column) {\n            if ($column\
    \ == $x) {\n                $coordinates[] = [$y, $xCoord];\n            }\n \
    \           $xCoord++;\n        }\n        $y++;\n    }\n    sort($coordinates);\n\
    \    $result = [];\n    foreach ($coordinates as $coordinate) {\n        $result[]\
    \ = [$coordinate[0], $coordinate[1]];\n    }\n    return $result;\n}", "  $arr\
    \ = [];\n  foreach ($lst as $k => $v) {\n    foreach ($v as $kk => $vv) {\n  \
    \    if ($vv == $x) {\n        $arr[] = [$k, $kk];\n      }\n    }\n  }\n  rsort($arr);\n\
    \  $arr = collect($arr)->groupBy('0')->map(function ($item) {\n    return $item->sortByDesc('1')->values()->all();\n\
    \  })->sortKeys()->collapse()->all();\n  return $arr;\n}", "    if(empty($lst)){\n\
    \        return [];\n    }\n    $i = 0;\n    $result = [];\n    foreach($lst as\
    \ $sub){\n        $key = array_search($x, $sub);\n        if($key != false){\n\
    \            $result[] = [$i, $key];\n        }\n        $i++;\n    }\n    $result\
    \ = array_multisort($result);\n    return $result;\n}", "  if (count($lst) ==\
    \ 0) {\n    return [];\n  }\n  $ret = [];\n  foreach ($lst as $row => $curr) {\n\
    \    $col = array_search($x, $curr);\n    if ($col !== false) {\n      $ret[]\
    \ = [$row, $col];\n    }\n  }\n  if (count($ret) == 0) {\n    return [];\n  }\n\
    \  array_multisort(array_column($ret, 0), SORT_ASC, array_column($ret, 1), SORT_DESC,\
    \ $ret);\n  return $ret;\n}\n", "\t$ret = [];\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tfor ($j = 0; $j < count($lst[$i]); $j++) {\n\t\t\tif ($lst[$i][$j]\
    \ == $x) {\n\t\t\t\t$ret[] = [$i, $j];\n\t\t\t}\n\t\t}\n\t}\n\tusort($ret, \"\
    cmp\");\n\treturn $ret;\n}", "    $result = [];\n    foreach ($lst as $i => $row)\
    \ {\n        foreach ($row as $j => $cell) {\n            if ($cell == $x) $result[]\
    \ = [$i, $j];\n        }\n    }\n    array_multisort(array_column($result, 0),\
    \ SORT_ASC, array_column($result, 1), SORT_DESC, $result);\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row => $lstRow) {\n        foreach\
    \ ($lstRow as $key => $item) {\n            if ($item == $x) {\n             \
    \   $result[] = [$row, $key];\n            }\n        }\n    }\n    $sortFunction\
    \ = function ($item1, $item2) {\n        if ($item1[0] < $item2[0]) {\n      \
    \      return -1;\n        } elseif ($item1[0] > $item2[0]) {\n            return\
    \ 1;\n        } else {\n            if ($item1[1] < $item2[1]) {\n           \
    \     return 1;\n            } elseif ($item1[1] > $item2[1]) {\n            \
    \    return -1;\n            } else {\n                return 0;\n           \
    \ }\n        }\n    };\n    usort($result, $sortFunction);\n    return $result;\n\
    }"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
