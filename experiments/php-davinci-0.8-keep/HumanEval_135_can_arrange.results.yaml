name: HumanEval_135_can_arrange
language: php
results:
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $n = count($arr);\n    $res = -1;\n\
    \    for ($i = $n - 1; $i > 0; $i--) {\n        if ($arr[$i] <= $arr[$i - 1])\
    \ {\n            $res = $i;\n        }\n    }\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq966wtly.php:27\n\
    Stack trace:\n#0 /tmp/tmpq966wtly.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpq966wtly.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $maxIndex = -1;\n  for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $maxIndex =\
    \ $i;\n    }\n  }\n  return $maxIndex;\n}\necho \"can_arrange([1,2,4,3,5]) = \"\
    \ . can_arrange([1,2,4,3,5]) . \"\\n\";\necho \"can_arrange([1,2,3]) = \" . can_arrange([1,2,3])\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "can_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpl0ig86pp.php:28\nStack trace:\n\
    #0 /tmp/tmpl0ig86pp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpl0ig86pp.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $index = count($arr) - 1;\n    $index\
    \ = ($arr[$index] >= $arr[$index - 1]) ? $index - 1 : $index;\n    for ($i = $index\
    \ - 1; $i >= 0; $i--) {\n        if ($arr[$i] >= $arr[$i + 1]) {\n           \
    \ $index = $i;\n        } else {\n            break;\n        }\n    }\n    return\
    \ ($index === 0) ? -1 : $index;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8393avyc.php:27\n\
    Stack trace:\n#0 /tmp/tmp8393avyc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8393avyc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $l = count($arr);\n    $res = -1;\n\
    \    for ($i = 1; $i < $l; $i++) {\n        if ($arr[$i] < $arr[$i - 1])\n   \
    \         $res = $i - 1;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplp84zrui.php:24\n\
    Stack trace:\n#0 /tmp/tmplp84zrui.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplp84zrui.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return $i - 1;\n    \
    \    }\n    }\n    return -1;\n}\n\necho can_arrange([1,2,4,3,5]);\necho \"\\\
    n\";\necho can_arrange([1,2,3]);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn8ayfek0.php:27\n\
    Stack trace:\n#0 /tmp/tmpn8ayfek0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn8ayfek0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = 0; $i < count($arr); $i++) {\n\
    \    if ($arr[$i] >= $arr[$i - 1]) {\n      return $i - 1;\n    }\n  }\n  return\
    \ -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_hsf7uks.php:23\n\
    Stack trace:\n#0 /tmp/tmp_hsf7uks.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_hsf7uks.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $count = count($arr);\n    for ($i =\
    \ $count - 1; $i > 0; $i--) {\n        if ($arr[$i] <= $arr[$i - 1]) {\n     \
    \       return $i - 1;\n        }\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2tut7nqs.php:24\n\
    Stack trace:\n#0 /tmp/tmp2tut7nqs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2tut7nqs.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $rearranged = array_unique($arr);\n  sort($rearranged);\n\
    \  $max = count($rearranged) - 1;\n  for ($i = $max; $i > 0; $i--) {\n    if ($rearranged[$i]\
    \ <= $rearranged[$i - 1]) {\n      $max = $i - 1;\n    }\n  }\n  return $max;\n\
    }\necho can_arrange([1,2,4,3,5]); // 3\necho can_arrange([1,2,3]); // -1\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "42\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm6jdl5h0.php:27\n\
    Stack trace:\n#0 /tmp/tmpm6jdl5h0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpm6jdl5h0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = count($arr) - 1;\n    $lastnum\
    \ = $arr[$last];\n    for ($i = $last - 1; $i >= 0; $i--) {\n        if ($arr[$i]\
    \ >= $lastnum) {\n            $lastnum = $arr[$i];\n        } else {\n       \
    \     return $i;\n        }\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpczf7mc7u.php:28\n\
    Stack trace:\n#0 /tmp/tmpczf7mc7u.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpczf7mc7u.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $n = count($arr);\n  $max = $arr[$n -\
    \ 1];\n  $last = $n - 1;\n  for ($i = $n - 2; $i >= 0; $i--) {\n    if ($arr[$i]\
    \ >= $max) {\n      $max = $arr[$i];\n      $last = $i;\n    }\n  }\n  return\
    \ $last;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph0geptz5.php:27\n\
    Stack trace:\n#0 /tmp/tmph0geptz5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph0geptz5.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\treturn -1;\n}\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1zjwzrd.php:17\n\
    Stack trace:\n#0 /tmp/tmpn1zjwzrd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpn1zjwzrd.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = 1; $i < count($arr); $i++)\
    \ {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            return $i - 1;\n   \
    \     }\n    }\n    return -1;\n}\n\necho can_arrange([1,2,4,3,5]);\necho \"<br>\"\
    ;\necho can_arrange([1,2,3]);\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "0<br>0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxw9plk3x.php:26\n\
    Stack trace:\n#0 /tmp/tmpxw9plk3x.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxw9plk3x.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $len = count($arr);\n    $flag = true;\n\
    \    $largestIndex = -1;\n    for ($i = 0; $i < $len; $i++) {\n        if (!$flag)\
    \ {\n            if ($arr[$i] < $arr[$i - 1]) {\n                $largestIndex\
    \ = $i;\n                $flag = true;\n            }\n        } else if ($arr[$i]\
    \ > $arr[$i - 1]) {\n            $flag = false;\n        }\n    }\n    return\
    \ $largestIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return $i - 1;\n    \
    \    }\n    }\n    return -1;\n}\n\necho can_arrange([1,2,4,3,5]);\necho can_arrange([1,2,3]);\n\
    \nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2-1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthd3qisi.php:26\n\
    Stack trace:\n#0 /tmp/tmpthd3qisi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpthd3qisi.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $biggest_index = -1;\n  for ($i = 0; $i\
    \ < count($arr) - 1; $i++) {\n    $current_element = $arr[$i];\n    $next_element\
    \ = $arr[$i + 1];\n    if ($next_element >= $current_element) {\n      $biggest_index\
    \ = $i;\n    }\n  }\n  return $biggest_index;\n}\necho can_arrange([1,2,4,3,5]);\n\
    echo \"\\n\";\necho can_arrange([1,2,3]);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppsapfhpq.php:30\n\
    Stack trace:\n#0 /tmp/tmppsapfhpq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppsapfhpq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $len = count($arr);\n  for ($i = 1; $i\
    \ < $len; $i++) {\n    if ($arr[$i - 1] <= $arr[$i]) {\n      $index = $i;\n \
    \   }\n  }\n  return isset($index) ? $index : -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjq7bs94.php:24\n\
    Stack trace:\n#0 /tmp/tmpwjq7bs94.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwjq7bs94.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    // $newArr = [];\n    // for ($i = 0;\
    \ $i < count($arr); $i++) {\n    //     if ($arr[$i] < $arr[$i + 1]) {\n    //\
    \         $newArr[] = $arr[$i];\n    //     }\n    // }\n    // return empty($newArr)\
    \ ? -1 : count($newArr) - 1;\n    $newArr = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $arr[$i + 1]) {\n            $newArr[] = $arr[$i];\n\
    \        }\n    }\n    return empty($newArr) ? -1 : count($newArr) - 1;\n}\nprint_r(can_arrange([1,2,4,3,5]));\n\
    print_r(can_arrange([1,2,3]));\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "21\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafa_hozb.php:32\n\
    Stack trace:\n#0 /tmp/tmpafa_hozb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpafa_hozb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = count($arr) - 1;\n  for ($i =\
    \ $last; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) return $i - 1;\n  }\n\
    \  return -1;\n}\n\n$arr = [1,2,4,3,5];\necho can_arrange($arr);\necho \"\\n\"\
    ;\n\n$arr = [1,2,3];\necho can_arrange($arr);\necho \"\\n\";\n\n$arr = [2,1,2,2,2,2,1,1,1,2,1];\n\
    echo can_arrange($arr);\necho \"\\n\";\n\n$arr = [1,1,1,1,1,1,1,1,1,1,1];\necho\
    \ can_arrange($arr);\necho \"\\n\";\n\n$arr = [1,1,1,1,1,1,1,1,1,1,2];\necho can_arrange($arr);\n\
    echo \"\\n\";\n\n$arr = [1,1,1,1,1,1,1,1,1,2,1];\necho can_arrange($arr);\necho\
    \ \"\\n\";\n\n$arr = [1,1,1,1,1,1,1,1,2,1,1];\necho can_arrange($arr);\necho \"\
    \\n\";\n\n$arr = [1,1,1,1,1,1,1,2,1,1,1];\necho can_arrange($arr);\necho \"\\\
    n\";\n\n$arr = [1,1,1,1,1,1,2,1,1,1,1];\necho can_arrange($arr);\necho \"\\n\"\
    ;\n\n$arr = [1,1,1,1,1,2,1,1,1,1,1];\necho can_arrange($arr);\necho \"\\n\";\n\
    \n$arr = [1,1,1,1,2,1,1,1,1,1,1];\necho can_arrange($arr);\necho \"\\n\";\n\n\
    $arr = [1,1,1,\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsoe8nx77.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $reverse_arr = array_reverse($arr);\n\
    \  if (count($reverse_arr) == 1 || count($reverse_arr) == 0) {\n    return -1;\n\
    \  }\n  $last_index = count($reverse_arr) - 1;\n  for ($i = 0; $i < $last_index;\
    \ $i++) {\n    if ($reverse_arr[$i] < $reverse_arr[$i + 1]) {\n      return $last_index\
    \ - $i - 1;\n    }\n  }\n  return -1;\n}\n\nprint can_arrange([1,2,4,3,5]);\n\
    print can_arrange([1,2,3]);\nprint can_arrange([3,2,1]);\nprint can_arrange([1,\
    \ 2, 4, 2, 5]);\nprint can_arrange([1, 2, 3, 3, 4]);\nprint can_arrange([5, 4,\
    \ 3, 2, 1]);\nprint can_arrange([1, 2, 4, 2, 4]);\nprint can_arrange([3, 2, 1,\
    \ 2, 4]);\nprint can_arrange([3, 1, 2, 4, 2]);\nprint can_arrange([3, 1, 2, 2,\
    \ 4]);\nprint can_arrange([3, 2, 1, 4, 2]);\nprint can_arrange([3, 2, 1, 2, 4]);\n\
    print can_arrange([1, 3, 2, 4, 2]);\nprint can_arrange([1, 3, 2, 2, 4]);\nprint\
    \ can_arrange([2, 3, 1, 4, 2]);\nprint can_arrange([2, 3, 1, 2, 4]);\nprint can_arrange([4,\
    \ 3, 1, 2, 2]);\nprint can_arrange([2, 3, 1, 4, 2]);\nprint can_arrange([2, 3,\
    \ 1, 2, 4]);\nprint can_arrange([1, 2, 4, 2, 5]);\nprint can_arrange([3, 2, 1,\
    \ 2, 4]);\nprint can_arrange([2, 3, 1, 4, 2]);\nprint can_arrange([2, 3, 1, 2\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpder0bl6p.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $len = count($arr);\n    $ans = -1;\n\
    \    for ($i = $len - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1])\
    \ {\n            $ans = $i - 1;\n        }\n    }\n    return $ans;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfted1klm.php:25\n\
    Stack trace:\n#0 /tmp/tmpfted1klm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfted1klm.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return $i - 1;\n    \
    \    }\n    }\n    return -1;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2r9qoms.php:22\n\
    Stack trace:\n#0 /tmp/tmpb2r9qoms.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpb2r9qoms.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = 1; $i < count($arr); $i++)\
    \ {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return $i - 1;\n    \
    \    }\n    }\n    return -1;\n}\n\necho(can_arrange([1,2,4,3,5]));\necho('<br>');\n\
    echo(can_arrange([1,2,3]));\necho('<br>');\necho(can_arrange([2,2,2,2,2]));\n\
    echo('<br>');\necho(can_arrange([2,2,1,2,2]));\necho('<br>');\necho(can_arrange([3,3,3,3,3]));\n\
    echo('<br>');\necho(can_arrange([3,3,3,2,3]));\necho('<br>');\necho(can_arrange([3,3,3,3,2]));\n\
    echo('<br>');\necho(can_arrange([3,2,2,2,2]));\necho('<br>');\necho(can_arrange([2,2,2,2,3]));\n\
    echo('<br>');\necho(can_arrange([3,3,3,3,1]));\necho('<br>');\necho(can_arrange([3,3,3,2,1]));\n\
    echo('<br>');\necho(can_arrange([3,3,3,3,0]));\necho('<br>');\necho(can_arrange([3,3,3,2,0]));\n\
    echo('<br>');\necho(can_arrange([3,3,3,3,-1]));\necho('<br>');\necho(can_arrange([3,3,3,2,-1]));\n\
    echo('<br>');\necho(can_arrange([3,3,3,3,-2]));\necho('<br>');\necho(can_arrange([3,3,3,2,-2]));\n\
    echo('<br>');\necho(can_arrange([3,3,3\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzsb5snv1.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\t$revArr = array_reverse($arr);\n\tforeach\
    \ ($revArr as $key => $value) {\n\t\tif(isset($revArr[$key+1])) {\n\t\t\tif($revArr[$key+1]\
    \ > $value) {\n\t\t\t\treturn count($revArr) - $key - 2;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn -1;\n}\n\necho can_arrange([1,2,4,3,5]);\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmp0c47e1.php:27\n\
    Stack trace:\n#0 /tmp/tmpmp0c47e1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmp0c47e1.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $max = $i;\n \
    \   } else {\n      $arr[$i - 1] = $max;\n    }\n  }\n  return $arr[0];\n}\n\n\
    $ans = can_arrange([1,2,4,3,5]);\necho \"\\n$ans\";\n\n$ans = can_arrange([1,2,3]);\n\
    echo \"\\n$ans\";\n\n$ans = can_arrange([4,3,2,1]);\necho \"\\n$ans\";\n\n$ans\
    \ = can_arrange([4,3,2,1,4,3,2,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo2_x3viv.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = $arr[0];\n  $res = -1;\n  foreach\
    \ ($arr as $k => $v) {\n    if ($last >= $v) {\n      $res = $k - 1;\n      break;\n\
    \    }\n    $last = $v;\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1r87zzev.php:27\n\
    Stack trace:\n#0 /tmp/tmp1r87zzev.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1r87zzev.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] >= $last) {\n\
    \            $last = $arr[$i];\n            $index = $i;\n        }\n    }\n \
    \   return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxe3rsg9.php:26\n\
    Stack trace:\n#0 /tmp/tmpvxe3rsg9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvxe3rsg9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $previousVal = $arr[0];\n  $maxIndex =\
    \ -1;\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $previousVal)\
    \ {\n      $maxIndex = $i;\n    }\n    $previousVal = $arr[$i];\n  }\n  return\
    \ $maxIndex;\n}\n\necho can_arrange([1,2,4,3,5]);\necho can_arrange([1,2,3]);\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 3-1
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n    if ($arr[$i] < $arr[$i - 1]) {\n      return $i - 1;\n    }\n  }\n  return\
    \ -1;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt4oz15k0.php:22\n\
    Stack trace:\n#0 /tmp/tmpt4oz15k0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt4oz15k0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    //your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisvopzu3.php:18\n\
    Stack trace:\n#0 /tmp/tmpisvopzu3.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpisvopzu3.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\tfor ($i = 0; $i < count($arr) - 1; $i++)\
    \ {\n\t\tif ($arr[$i] >= $arr[$i + 1]) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn\
    \ -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc16a27qi.php:23\n\
    Stack trace:\n#0 /tmp/tmpc16a27qi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc16a27qi.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqwr_cd_.php:17\n\
    Stack trace:\n#0 /tmp/tmphqwr_cd_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmphqwr_cd_.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arrB = $arr;\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        for ($j = $i + 1; $j < $count;\
    \ $j++) {\n            if ($arr[$i] >= $arr[$j]) {\n                return $j\
    \ - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvg0mff9.php:27\n\
    Stack trace:\n#0 /tmp/tmpnvg0mff9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnvg0mff9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $maxIndex = 0;\n    for ($i = 0; $i\
    \ < count($arr) - 1; $i++) {\n        if ($arr[$i] >= $arr[$i + 1]) {\n      \
    \      return $maxIndex;\n        }\n        $maxIndex = $i + 1;\n    }\n    return\
    \ -1;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbjhg80_v.php:24\n\
    Stack trace:\n#0 /tmp/tmpbjhg80_v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbjhg80_v.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $revarr = array_reverse($arr);\n  for\
    \ ($i = 0; $i < count($revarr) - 1; $i++) {\n    if ($revarr[$i] < $revarr[$i\
    \ + 1]) {\n      return count($revarr) - $i - 1;\n    }\n  }\n  return -1;\n}\n\
    echo can_arrange([1,2,4,3,5]) . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $index = 0;\n  for ($i = 1; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] <= $arr[$i - 1]) {\n      $index = $i;\n    }\n  }\n\
    \  return $index === 0 ? -1 : $index;\n}\n\nfunction candidate(...$args) {\n \
    \   return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n    if ($arr[$i] < $arr[$i - 1]) {\n      return $i - 1;\n    }\n  }\n  return\
    \ -1;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnebui18.php:22\n\
    Stack trace:\n#0 /tmp/tmprnebui18.php(29): test()\n#1 {main}\n  thrown in /tmp/tmprnebui18.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  if (count($arr) < 2) return -1;\n  $prev\
    \ = $arr[0];\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $prev)\
    \ return $i - 1;\n    $prev = $arr[$i];\n  }\n  return -1;\n}\n\necho(can_arrange([1,2,4,3,5])\
    \ . \"\\n\");\necho(can_arrange([1,2,3]) . \"\\n\");\necho(can_arrange([1,2,3,3,2,1])\
    \ . \"\\n\");\necho(can_arrange([1,2,3,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9eeulpdt.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $size = count($arr);\n  $biggest_index\
    \ = -1;\n  for ($i = $size - 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i -\
    \ 1]) {\n      if ($biggest_index < $i) {\n        $biggest_index = $i;\n    \
    \  }\n    }\n  }\n  return $biggest_index;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqinv9mdn.php:27\n\
    Stack trace:\n#0 /tmp/tmpqinv9mdn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqinv9mdn.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n    if ($arr[$i] >= $arr[$i - 1]) return $i - 1;\n  }\n  return -1;\n}\n\n\
    echo can_arrange([1,2,4,3,5]) . PHP_EOL;\necho can_arrange([1,2,3]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1weptmdc.php:24\n\
    Stack trace:\n#0 /tmp/tmp1weptmdc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1weptmdc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return $i - 1;\n    \
    \    }\n    }\n    return -1;\n}\n\necho can_arrange([1,2,4,3,5]); // 3\necho\
    \ \"\\n\";\necho can_arrange([1,2,3]); // -1\necho \"\\n\";\necho can_arrange([0,\
    \ 1, 2, 4, 3, 5]); // 2\necho \"\\n\";\necho can_arrange([0, 1, 2, 3, 4, 5]);\
    \ // -1\necho \"\\n\";\necho can_arrange([-1, 1, 2, 4, 3, 5]); // 4\necho \"\\\
    n\";\necho can_arrange([1, 1, 2, 4, 3, 5]); // 4\necho \"\\n\";\necho can_arrange([1,\
    \ 2, 4, 3, 5, 0]); // 5\necho \"\\n\";\necho can_arrange([1, 2, 4, 3, 5, 1]);\
    \ // -1\necho \"\\n\";\necho can_arrange([1, 2, 4, 3, 5, 5]); // -1\necho \"\\\
    n\";\necho can_arrange([1, 2, 4, 3, 5, 6]); // 4\necho \"\\n\";\necho can_arrange([1,\
    \ 2, 4, 3, 5, 7]); // 4\necho \"\\n\";\necho can_arrange([1, 2, 4, 3, 5, 8]);\
    \ // 4\necho \"\\n\";\necho can_arrange([1, 2, 4, 3, 5, -1]); // 4\necho \"\\\
    n\";\necho can_arrange([-1, 1, 2, 4, 3, 5, 6]); // 5\necho \"\\n\";\necho can_arrange([-1,\
    \ 1, 2, 4, 3, 5, 7]); // 5\necho \"\\n\";\necho can_arrange([-1, 1, 2, 4, 3, 5,\
    \ 8]); // 5\necho \"\\n\";\necho can_arrange([-1, 1, 2, 4, 3, 5, -1]); //\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n-1\n3\n-1\n3\n3\n4\n4\n2\n2\n2\n2\n4\n3\n3\n3\n5\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp1rjyy178.php:56\nStack trace:\n#0 /tmp/tmp1rjyy178.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1rjyy178.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last_item = $arr[0];\n  $last_index =\
    \ 0;\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $last_item)\
    \ {\n      $last_item = $arr[$i];\n      $last_index = $i;\n    }\n  }\n  return\
    \ $last_index === count($arr) - 1 ? -1 : $last_index;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8380_611.php:26\n\
    Stack trace:\n#0 /tmp/tmp8380_611.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8380_611.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = [];\n  $output = [];\n  foreach\
    \ ($arr as $val) {\n    if (empty($max)) {\n      $max[0] = $val;\n    } else\
    \ {\n      $max[] = max($max[count($max) - 1], $val);\n    }\n  }\n  for ($i =\
    \ count($arr) - 1; $i >= 0; $i--) {\n    if ($arr[$i] >= $max[$i - 1]) {\n   \
    \   $output[] = $i;\n    }\n  }\n  return empty($output) ? -1 : count($arr) -\
    \ 1 - end($output);\n}\n\necho can_arrange([1,2,4,3,5]);\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2nydlwud.php:33\n\
    Stack trace:\n#0 /tmp/tmp2nydlwud.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2nydlwud.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = $arr[0];\n  $len = count($arr);\n\
    \  $index = 1;\n  while ($index < $len) {\n    if ($arr[$index] <= $last) {\n\
    \      return $index - 1;\n    }\n    $last = $arr[$index];\n    $index++;\n \
    \ }\n  return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3199wnn.php:28\n\
    Stack trace:\n#0 /tmp/tmp_3199wnn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_3199wnn.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] < $arr[$i - 1]) {\n            continue;\n        }\n\
    \        return $i - 1;\n    }\n    return -1;\n}\n\necho can_arrange([1,2,4,3,5]).'<br>';\n\
    echo can_arrange([1,2,3]).'<br>';\necho can_arrange([3,2,1]).'<br>';\necho can_arrange([4,4,4,4,4]).'<br>';\n\
    echo can_arrange([5,5,5,5,5]).'<br>';\necho can_arrange([1,1,1,1,1]).'<br>';\n\
    echo can_arrange([1,2,2,1,1]).'<br>';\necho can_arrange([3,3,3,3,3]).'<br>';\n\
    echo can_arrange([2,2,2,2,2]).'<br>';\necho can_arrange([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd38mka7p.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $len = count($arr);\n\
    \  for ($i = 1; $i < $len; $i++) {\n    if ($arr[$i] <= $max) {\n      return\
    \ $i - 1;\n    }\n    $max = $arr[$i];\n  }\n  return -1;\n}\n\necho can_arrange([1,2,4,3,5])\
    \ . \"<br>\";\necho can_arrange([1,2,3]) . \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2<br>-1<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvjzs97ky.php:29\n\
    Stack trace:\n#0 /tmp/tmpvjzs97ky.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvjzs97ky.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $first = array_values($arr)[0];\n  \
    \  $index = 0;\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ <= $first) {\n            $first = $arr[$i];\n            $index = $i;\n   \
    \     }\n    }\n    return $index;\n}\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr53d2vna.php:25\n\
    Stack trace:\n#0 /tmp/tmpr53d2vna.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpr53d2vna.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = $arr[0];\n  $largest = -1;\n \
    \ for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $last) {\n      if\
    \ ($i > $largest) $largest = $i;\n    }\n    $last = $arr[$i];\n  }\n  return\
    \ $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] <= $arr[$i - 1]) {\n            return $i - 1;\n   \
    \     }\n    }\n    return -1;\n}\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyqpy1t07.php:22\n\
    Stack trace:\n#0 /tmp/tmpyqpy1t07.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyqpy1t07.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $biggest_index = -1;\n  $biggest_value\
    \ = -1;\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] >= $biggest_value)\
    \ {\n      $biggest_value = $arr[$i];\n      $biggest_index = $i;\n    }\n  }\n\
    \  return $biggest_index;\n}\n\n$test_cases = [\n  [1,2,4,3,5],\n  [1,2,3],\n\
    \  [3,2,1]\n];\n\nforeach ($test_cases as $test_case) {\n  echo can_arrange($test_case)\
    \ . PHP_EOL;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "4\n2\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4v3e0q8.php:35\n\
    Stack trace:\n#0 /tmp/tmps4v3e0q8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmps4v3e0q8.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $ret = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $ret = $i - 1;\n\
    \    }\n  }\n  return $ret;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmposz580e5.php:23\n\
    Stack trace:\n#0 /tmp/tmposz580e5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmposz580e5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $previous = -1;\n    for ($i = 0; $i\
    \ < count($arr); $i++) {\n        if ($arr[$i] < $previous) {\n            return\
    \ $i - 1;\n        }\n        $previous = $arr[$i];\n    }\n    return -1;\n}\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph98odxm8.php:24\n\
    Stack trace:\n#0 /tmp/tmph98odxm8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmph98odxm8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    $i = 0;\n    while\
    \ ($i < count($arr)) {\n        $j = $i + 1;\n        while ($j < count($arr))\
    \ {\n            if ($arr[$j] <= $arr[$i]) {\n                $result = $j;\n\
    \                break;\n            }\n            $j++;\n        }\n       \
    \ $i++;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgtcmxnoi.php:18\n\
    Stack trace:\n#0 /tmp/tmpgtcmxnoi.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgtcmxnoi.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $result\
    \ = $i - 1;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0bmqpyf.php:23\n\
    Stack trace:\n#0 /tmp/tmpc0bmqpyf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc0bmqpyf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  // Your code here...\n  $arr_len = count($arr);\n\
    \  $last_idx = $arr_len - 1;\n  $new_arr = [];\n  $new_arr_len = 0;\n  for ($i\
    \ = $last_idx; $i >= 0; $i--) {\n    $last_elem = $arr[$last_idx];\n    $elem\
    \ = $arr[$i];\n    if ($elem <= $last_elem) {\n      $new_arr[] = $elem;\n   \
    \   $new_arr_len++;\n    }\n  }\n  for ($i = $new_arr_len - 1; $i >= 0; $i--)\
    \ {\n    $elem = $new_arr[$i];\n    $next_elem = $new_arr[$i - 1];\n    if ($elem\
    \ >= $next_elem) {\n      $new_arr[$i] = null;\n    }\n  }\n  $idx = array_search(null,\
    \ $new_arr);\n  if ($idx === false) {\n    return -1;\n  }\n  return $idx;\n}\n\
    \necho can_arrange([1,2,4,3,5]);\necho PHP_EOL;\necho can_arrange([1,2,3]);\n\
    echo PHP_EOL;\necho can_arrange([3,2,1]);\necho PHP_EOL;\necho can_arrange([4,2,3,5,7,1,9,8,6]);\n\
    echo PHP_EOL;\necho can_arrange([5,4,3,2,1]);\necho PHP_EOL;\necho can_arrange([1,2,3,4,5]);\n\
    echo PHP_EOL;\necho can_arrange([1,2,4,3,5,4,3,2,1]);\necho PHP_EOL;\necho can_arrange([1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp08i6rg80.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = count($arr);\n    $largest =\
    \ $arr[$max - 1];\n    for ($i = $max - 2; $i >= 0; $i--) {\n        if ($arr[$i]\
    \ <= $largest) {\n            $largest = $arr[$i];\n            break;\n     \
    \   }\n    }\n    return $i;\n}\necho can_arrange([1,2,4,3,5]) . \"\\n\";\necho\
    \ can_arrange([1,2,3]) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxplnyg4.php:28\n\
    Stack trace:\n#0 /tmp/tmpyxplnyg4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyxplnyg4.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $number=count($arr);\n  $list=[];\n  $list2=[];\n\
    \  for($i=0;$i<$number;$i++){\n    $list[]=$arr[$i];\n    if($i>0){\n      $list2[]=$arr[$i-1];\n\
    \    }\n  }\n  $list3=array_merge($list,$list2);\n  $list3=array_unique($list3);\n\
    \  $list3=array_values($list3);\n  if(count($list3)==$number){\n    return -1;\n\
    \  }else{\n    for($i=0;$i<$number;$i++){\n      if($arr[$i]==$list3[$i]){\n \
    \       return $i;\n      }\n    }\n  }\n}\nfunction candidate(...$args) {\n \
    \   return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdiu1bp8f.php:37\n\
    Stack trace:\n#0 /tmp/tmpdiu1bp8f.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdiu1bp8f.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    // for ( $i = 0; $i < count($arr); $i++\
    \ ) {\n    //     if ( !isset($arr[$i+1]) )\n    //         return -1;\n    //\
    \     elseif ( $arr[$i] < $arr[$i+1] )\n    //         return $i;\n    // }\n\
    \    // return -1;\n    $max = -1;\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        if ($arr[$i] < $arr[$i - 1])\n            $max = $i;\n    }\n    return\
    \ $max;\n}\necho can_arrange([1,2,4,3,5]);\nfunction candidate(...$args) {\n \
    \   return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '3'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $res = [];\n  for ($i\
    \ = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $max) {\n      $res[] = $i\
    \ - 1;\n    } else {\n      $max = $arr[$i];\n    }\n  }\n  if (count($res) ==\
    \ 0) {\n    return -1;\n  } else {\n    return max($res);\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8obvgb1b.php:31\n\
    Stack trace:\n#0 /tmp/tmp8obvgb1b.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8obvgb1b.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arrRev = array_reverse($arr);\n  for\
    \ ($i = 0; $i < count($arrRev) - 1; $i++) {\n    if ($arrRev[$i] < $arrRev[$i\
    \ + 1]) {\n      return (count($arr) - 1) - $i;\n    }\n  }\n  return -1;\n}\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    for ($i = 1; $i <\
    \ count($arr); $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $result\
    \ = $i - 1;\n            break;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hjq7jkj.php:24\n\
    Stack trace:\n#0 /tmp/tmp7hjq7jkj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7hjq7jkj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  if (count($arr) === 1) {\n    return -1;\n\
    \  }\n  $index = -1;\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i]\
    \ <= $arr[$i - 1]) {\n      $index = $i;\n    }\n  }\n  return $index;\n}\n\n\
    $arr = [1,2,4,3,5];\necho can_arrange($arr) . \"\\n\";\n\n$arr = [1,2,3];\necho\
    \ can_arrange($arr) . \"\\n\";\n\n$arr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpewwwohag.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    if(sizeof($arr) < 2) {\n        return\
    \ -1;\n    }\n    $largestIndex = -1;\n    $last = $arr[0];\n    for($i = 1; $i\
    \ < sizeof($arr); $i++) {\n        if($arr[$i] >= $last) {\n            $largestIndex\
    \ = $i;\n        }\n        $last = $arr[$i];\n    }\n    return $largestIndex;\n\
    }\necho '<pre>';\n$arr = [1,2,4,3,5];\nprint_r($arr);\necho can_arrange($arr);\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 3\n\
    \    [4] => 5\n)\n4</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_xglgfs.php:33\n\
    Stack trace:\n#0 /tmp/tmpe_xglgfs.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpe_xglgfs.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $results = [];\n  $results[] = -1;\n \
    \ $results[] = -1;\n  $compare = $arr[0];\n  for ($i = 1; $i < count($arr); $i++)\
    \ {\n    if ($arr[$i] >= $compare) {\n      $results[] = $i - 1;\n      $compare\
    \ = $arr[$i];\n    } else {\n      $results[] = -1;\n    }\n  }\n  return $results[count($results)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9x3cvduz.php:31\n\
    Stack trace:\n#0 /tmp/tmp9x3cvduz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9x3cvduz.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = 1; $i < count($arr); $i++)\
    \ {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            continue;\n        }\
    \ else {\n            return $i - 1;\n        }\n    }\n    return -1;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfgg1o_42.php:25\n\
    Stack trace:\n#0 /tmp/tmpfgg1o_42.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfgg1o_42.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $len = count($arr);\n    $ind = $len\
    \ - 1;\n    while ($ind >= 0) {\n        if ($arr[$ind] < $arr[$ind-1]) {\n  \
    \          return $ind - 1;\n        }\n        $ind--;\n    }\n    return -1;\n\
    }\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz64xdof7.php:25\n\
    Stack trace:\n#0 /tmp/tmpz64xdof7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpz64xdof7.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\n}\n\nclass MyTestCases extends TestCase\n\
    {\n    public function testThatSomethingShouldHappen() {\n        $this->assertEquals(can_arrange([1,2,4,3,5]),\
    \ 3);\n        $this->assertEquals(can_arrange([1,2,3]), -1);\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'TestCase' not found in /tmp/tmpk2s6nckj.php:13\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmpk2s6nckj.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $highest_i = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] <= $arr[$i - 1]) {\n            $highest_i\
    \ = $i;\n        }\n    }\n    return $highest_i;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptl8myukx.php:27\n\
    Stack trace:\n#0 /tmp/tmptl8myukx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmptl8myukx.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            if\
    \ ($max < $i) {\n                $max = $i;\n            }\n        }\n    }\n\
    \    return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = count($arr) - 1;\n  $ind = 0;\n\
    \  while($ind < $max) {\n    if($arr[$ind] < $arr[$ind + 1]) return $ind;\n  \
    \  $ind++;\n  }\n  return -1;\n}\n\necho can_arrange([1,2,4,3,5]); // 3\necho\
    \ can_arrange([1,2,3]); // -1\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "00\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fm38js8.php:26\n\
    Stack trace:\n#0 /tmp/tmp8fm38js8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8fm38js8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = $arr[0];\n  for ($i = 1; $i <\
    \ count($arr); $i++) {\n    if ($arr[$i] <= $last) {\n      return $i - 1;\n \
    \   }\n    $last = $arr[$i];\n  }\n  return -1;\n}\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmposa2vsvd.php:24\n\
    Stack trace:\n#0 /tmp/tmposa2vsvd.php(31): test()\n#1 {main}\n  thrown in /tmp/tmposa2vsvd.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $count = count($arr);\n  $result = [];\n\
    \  $arr_count = 0;\n  foreach ($arr as $key => $value) {\n    $result[$key] =\
    \ array_search($value, $arr, true);\n    if ($result[$key] > $key) {\n      $arr_count++;\n\
    \    }\n  }\n  if ($arr_count === $count) {\n    return count($result);\n  } else\
    \ {\n    return -1;\n  }\n}\n$input = array(1,2,4,3,5);\necho can_arrange($input);\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuk1tkb3_.php:32\n\
    Stack trace:\n#0 /tmp/tmpuk1tkb3_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpuk1tkb3_.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $length = count($arr);\n    $d = $arr[0];\n\
    \    $i = 0;\n    for ($j = 1; $j < $length; $j++) {\n        if ($arr[$j] <=\
    \ $d) {\n            $d = $arr[$j];\n            $i = $j;\n        }\n    }\n\
    \    return $i > 0 ? $i : -1;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkp6wj8yy.php:26\n\
    Stack trace:\n#0 /tmp/tmpkp6wj8yy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkp6wj8yy.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = 0;\n  $i = 0;\n  while ($i\
    \ < count($arr) - 1) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      $i++;\n    }\
    \ else {\n      return $i;\n    }\n  }\n  return -1;\n}\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\necho can_arrange([]) . \"\\\
    n\";\necho can_arrange([1]) . \"\\n\";\necho can_arrange([4,3,2,1]) . \"\\n\"\
    ;\necho can_arrange([1,4,3,2]) . \"\\n\";\necho can_arrange([1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppispv7nz.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $arr[$i] = null;\n    }\n  }\n\
    \  return end($arr) === null ? -1 : count($arr) - 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpadyiel_m.php:23\n\
    Stack trace:\n#0 /tmp/tmpadyiel_m.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpadyiel_m.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $index\
    \ = -1;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        if ($arr[$i]\
    \ >= $arr[$i + 1]) {\n            $index = count($arr) - $i - 1;\n           \
    \ break;\n        }\n    }\n    return $index;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzz4vyd5h.php:26\n\
    Stack trace:\n#0 /tmp/tmpzz4vyd5h.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzz4vyd5h.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = 0; $i < count($arr); $i++) {\n\
    \    if ($arr[$i + 1] >= $arr[$i]) {\n      return $i;\n    }\n  }\n  return -1;\n\
    }\n\n$arr1 = [1,2,4,3,5];\n$arr2 = [1,2,3];\n\necho can_arrange($arr1);\necho\
    \ can_arrange($arr2);\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "00\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplblpzm2o.php:29\n\
    Stack trace:\n#0 /tmp/tmplblpzm2o.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplblpzm2o.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    $max_idx = -1;\n   \
    \ for ($i = count($arr) - 1; $i >= 0; $i--) {\n        if ($arr[$i] <= $max) {\n\
    \            $max_idx = $i;\n        } else {\n            $max = $arr[$i];\n\
    \        }\n    }\n    return $max_idx;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozc5nh8f.php:27\n\
    Stack trace:\n#0 /tmp/tmpozc5nh8f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpozc5nh8f.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largestIndex = -1;\n  for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $largestIndex\
    \ = $i;\n    }\n  }\n  return $largestIndex;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7ecbe_a.php:24\n\
    Stack trace:\n#0 /tmp/tmpm7ecbe_a.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpm7ecbe_a.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = null;\n  $biggest = -1;\n  for\
    \ ($i = 0; $i < count($arr); $i++) {\n    if ($last !== null && $arr[$i] <= $last)\
    \ {\n      $biggest = $i;\n    }\n    $last = $arr[$i];\n  }\n  return $biggest;\n\
    }\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    $i = 0;\n    $end\
    \ = count($arr) - 1;\n    while($i < $end) {\n        if($arr[$i] >= $arr[$i +\
    \ 1]) {\n            $result = $i;\n            break;\n        }\n        $i++;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ozgzywm.php:27\n\
    Stack trace:\n#0 /tmp/tmp0ozgzywm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0ozgzywm.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $low = 0;\n    $high = count($arr)-1;\n\
    \    while ($low < $high) {\n        $mid = floor(($low + $high) / 2);\n     \
    \   if ($arr[$mid] >= $arr[$mid-1]) {\n            $low = $mid + 1;\n        }\
    \ else {\n            $high = $mid - 1;\n        }\n    }\n    if ($arr[$low]\
    \ < $arr[$low-1]) {\n        return $low;\n    } else {\n        return -1;\n\
    \    }\n}\necho can_arrange([1,2,4,3,5]) . PHP_EOL;\necho can_arrange([1,2,3])\
    \ . PHP_EOL;\necho can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvgo9_y09.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $l = count($arr);\n  for ($i = $l - 1;\
    \ $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      return $i - 1;\n\
    \    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgd4l6cs0.php:25\n\
    Stack trace:\n#0 /tmp/tmpgd4l6cs0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgd4l6cs0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            return $i - 1;\n   \
    \     }\n    }\n    return -1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaegp8qf3.php:24\n\
    Stack trace:\n#0 /tmp/tmpaegp8qf3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpaegp8qf3.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  // Insert code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjjc8fjb.php:18\n\
    Stack trace:\n#0 /tmp/tmppjjc8fjb.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppjjc8fjb.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $pos = -1;\n    $count = count($arr);\n\
    \    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] <= $arr[$i - 1])\
    \ {\n            $pos = $i;\n            break;\n        }\n    }\n    return\
    \ $pos;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphndqlczd.php:29\n\
    Stack trace:\n#0 /tmp/tmphndqlczd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphndqlczd.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\t$index = 0;\n\tfor ($i = 0; $i < count($arr)\
    \ - 1; $i++) {\n\t\tif ($arr[$i] < $arr[$i + 1]) {\n\t\t\t$index = $i + 1;\n\t\
    \t}\n\t}\n\treturn $index;\n}\n\necho can_arrange([1,2,4,3,5]) . \"\\n\";\necho\
    \ can_arrange([1,2,3]) . \"\\n\";\necho can_arrange([1,1,1,1,1]) . \"\\n\";\n\
    echo can_arrange([2,2,2,2,2]) . \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "4\n2\n0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87wpafkx.php:28\n\
    Stack trace:\n#0 /tmp/tmp87wpafkx.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp87wpafkx.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz11fmpgc.php:17\n\
    Stack trace:\n#0 /tmp/tmpz11fmpgc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpz11fmpgc.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  $idx = -1;\n  for ($i =\
    \ count($arr) - 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n    \
    \  $max = $i;\n    } else {\n      $idx = $max;\n      $max = -1;\n    }\n  }\n\
    \  return $idx;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7508qd0k.php:28\n\
    Stack trace:\n#0 /tmp/tmp7508qd0k.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7508qd0k.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arrSize = count($arr);\n  $retArr = array();\n\
    \  for ($i = 0; $i < $arrSize; $i++) {\n    for ($j = $i + 1; $j < $arrSize; $j++)\
    \ {\n      if ($arr[$i] <= $arr[$j]) {\n        $retArr[] = $j;\n        break;\n\
    \      }\n    }\n  }\n  if (count($retArr) == 0) {\n    return -1;\n  }\n  return\
    \ max($retArr);\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgkb5ybtm.php:31\n\
    Stack trace:\n#0 /tmp/tmpgkb5ybtm.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgkb5ybtm.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr = array_reverse($arr);\n  $result\
    \ = -1;\n  for ($i = 0; $i < count($arr) - 1; $i++) {\n    if ($arr[$i] < $arr[$i\
    \ + 1]) {\n      $result = count($arr) - 1 - $i - 1;\n      break;\n    }\n  }\n\
    \  return $result;\n}\necho(can_arrange([1,2,4,3,5]));\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6ojmwit.php:26\n\
    Stack trace:\n#0 /tmp/tmpi6ojmwit.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpi6ojmwit.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeolez3r5.php:18\n\
    Stack trace:\n#0 /tmp/tmpeolez3r5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpeolez3r5.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $lastSmallest = 0;\n    $lastSmallestIndex\
    \ = -1;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] < $lastSmallest)\
    \ {\n            return $lastSmallestIndex;\n        }\n        if ($lastSmallest\
    \ < $arr[$i]) {\n            $lastSmallest = $arr[$i];\n            $lastSmallestIndex\
    \ = $i;\n        }\n    }\n    return $lastSmallestIndex;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpip3yee2z.php:29\n\
    Stack trace:\n#0 /tmp/tmpip3yee2z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpip3yee2z.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = 0; $i < count($arr); $i++)\
    \ {\n        if ($arr[$i] <= $arr[$i - 1]) {\n            return $i - 1;\n   \
    \     }\n    }\n    return -1;\n}\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfukhs_zv.php:22\n\
    Stack trace:\n#0 /tmp/tmpfukhs_zv.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfukhs_zv.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arrReverse = array_reverse($arr);\n \
    \ foreach ($arrReverse as $key => $value) {\n    if ($key < count($arrReverse)\
    \ - 1) {\n      if ($value < $arrReverse[$key + 1]) {\n        return count($arr)\
    \ - $key - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $no_match = true;\n  $size = count($arr);\n\
    \  $next_greater = array();\n  $stack = array();\n  $return_arr = array();\n \
    \ for ($i = 0; $i < $size; $i++) {\n    array_push($next_greater, -1);\n  }\n\
    \  for ($i = 0; $i < $size; $i++) {\n    while (!empty($stack) && $arr[$stack[count($stack)\
    \ - 1]] <= $arr[$i]) {\n      $pos = array_pop($stack);\n      $next_greater[$pos]\
    \ = $i;\n    }\n    array_push($stack, $i);\n  }\n  for ($i = 0; $i < $size; $i++)\
    \ {\n    array_push($return_arr, $next_greater[$i]);\n  }\n  return $return_arr;\n\
    }\necho \"<pre>\";\nprint_r(can_arrange([1,2,4,3,5]));\nprint_r(can_arrange([1,2,3]));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 4\n\
    \    [4] => -1\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => -1\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjebtq27f.php:39\nStack\
    \ trace:\n#0 /tmp/tmpjebtq27f.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpjebtq27f.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\t// Write your code here.\n\t$index = -1;\n\
    \t$previous = $arr[0];\n\tforeach ($arr as $key => $value) {\n\t\tif ($value <\
    \ $previous) {\n\t\t\t$index = $key - 1;\n\t\t\tbreak;\n\t\t}\n\t\t$previous =\
    \ $value;\n\t}\n\treturn $index;\n}\n\n$arr = [1, 2, 4, 3, 5];\n\necho can_arrange($arr);\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25si_3cu.php:31\n\
    Stack trace:\n#0 /tmp/tmp25si_3cu.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp25si_3cu.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $pos = count($arr) - 1;\n    $index\
    \ = -1;\n    while ($pos > 0) {\n        if ($arr[$pos] < $arr[$pos - 1]) {\n\
    \            $index = $pos;\n            $pos--;\n        } else {\n         \
    \   break;\n        }\n    }\n    return $index;\n}\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\necho can_arrange([5,5,5,5,5])\
    \ . \"\\n\";\necho can_arrange([4,4,4,4,4]) . \"\\n\";\necho can_arrange([3,3,3,3,3])\
    \ . \"\\n\";\necho can_arrange([2,2,2,2,2]) . \"\\n\";\necho can_arrange([1,1,1,1,1])\
    \ . \"\\n\";\necho can_arrange([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxrls_5bm.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    if (count($arr) == 1) {\n        return\
    \ -1;\n    }\n    $max = $arr[0];\n    $maxIndex = 0;\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] <= $max) {\n            $max = $arr[$i];\n   \
    \         $maxIndex = $i;\n        }\n    }\n    return $maxIndex;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps3ij4pz3.php:29\n\
    Stack trace:\n#0 /tmp/tmps3ij4pz3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps3ij4pz3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  if (empty($arr)) {\n    return -1;\n \
    \ }\n  $last = $arr[0];\n  $index = -1;\n  for ($i = 1; $i < count($arr); $i++)\
    \ {\n    if ($arr[$i] <= $last) {\n      $index = $i;\n      $last = $arr[$i];\n\
    \    }\n  }\n  return $index;\n}\n\nprint_r(can_arrange([1,2,4,3,5]));\nprint_r(can_arrange([1,2,3]));\n\
    print_r(can_arrange([1,2,1]));\nprint_r(can_arrange([]));\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "-1-12-1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9i2q3g5l.php:33\n\
    Stack trace:\n#0 /tmp/tmp9i2q3g5l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9i2q3g5l.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  // Your code here\n  $n = count($arr);\n\
    \  for ($i = $n - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n   \
    \   $index = $i;\n      for ($j = $i - 1; $j >= 0; $j--) {\n        if ($arr[$j]\
    \ <= $arr[$i]) {\n          $index = $j;\n          break;\n        }\n      }\n\
    \      return $index;\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67r_xnb1.php:32\n\
    Stack trace:\n#0 /tmp/tmp67r_xnb1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp67r_xnb1.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $length = count($arr);\n    $prev =\
    \ -100000;\n    for ($i = 0; $i < $length; $i++) {\n        if ($arr[$i] >= $prev)\
    \ {\n            $prev = $arr[$i];\n        } else {\n            return $i -\
    \ 1;\n        }\n    }\n    return -1;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoar9i46a.php:27\n\
    Stack trace:\n#0 /tmp/tmpoar9i46a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpoar9i46a.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $index = null;\n  for ($i = 0; $i < count($arr)\
    \ - 1; $i++) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      $index = $i;\n    }\n\
    \  }\n  return $index === null ? -1 : $index;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8460dsbs.php:24\n\
    Stack trace:\n#0 /tmp/tmp8460dsbs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8460dsbs.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\t$max_index = -1;\n\tfor ($i = 0; $i <\
    \ count($arr) - 1; $i++) {\n\t\tif ($arr[$i] >= $arr[$i + 1]) {\n\t\t\t$max_index\
    \ = $i;\n\t\t}\n\t}\n\treturn $max_index;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8224mf4p.php:24\n\
    Stack trace:\n#0 /tmp/tmp8224mf4p.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8224mf4p.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $currMax = $arr[0];\n  $currIndex = 0;\n\
    \  $maxIndex = $currIndex;\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i]\
    \ <= $currMax) {\n      $currMax = $arr[$i];\n      $currIndex = $i;\n    } else\
    \ {\n      $maxIndex = $currIndex;\n    }\n  }\n  return $maxIndex;\n}\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdse1p46t.php:30\n\
    Stack trace:\n#0 /tmp/tmpdse1p46t.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdse1p46t.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] < $arr[$i - 1]) return $i - 1;\n    }\n    return -1;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpum96y2pn.php:21\n\
    Stack trace:\n#0 /tmp/tmpum96y2pn.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpum96y2pn.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            $max = $i;\n \
    \       }\n    }\n    return $max;\n}\n\necho can_arrange([1,2,4,3,5]);\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ynnx4ta.php:25\n\
    Stack trace:\n#0 /tmp/tmp1ynnx4ta.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1ynnx4ta.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = 1; $i < count($arr); $i++) {\n\
    \    if ($arr[$i] >= $arr[$i - 1]) {\n      return $i - 1;\n    }\n  }\n  return\
    \ -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fcae1_c.php:23\n\
    Stack trace:\n#0 /tmp/tmp6fcae1_c.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6fcae1_c.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $len = count($arr);\n    for ($i = $len\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return\
    \ $i - 1;\n        }\n    }\n    return -1;\n}\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10])\
    \ . \"\\n\";\necho can_arrange([10,9,8,7,6,5,4,3,2,1]) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n-1\n2\n8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74d0e7kh.php:28\n\
    Stack trace:\n#0 /tmp/tmp74d0e7kh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp74d0e7kh.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $n = sizeof($arr);\n  $max = $arr[$n-1];\n\
    \  $res = -1;\n  for ($i = $n-2; $i >= 0; $i--) {\n    if ($arr[$i] <= $max) {\n\
    \      $res = $i;\n    } else {\n      $max = $arr[$i];\n    }\n  }\n  return\
    \ $res;\n}\n\necho can_arrange([1,2,4,3,5]) . PHP_EOL; // 3\necho can_arrange([1,2,3])\
    \ . PHP_EOL; // -1\necho can_arrange([2,2,2,1,2,2,2]) . PHP_EOL; // 2\necho can_arrange([1,2,3,4,5,6,7,7,6,5,4,3,2,1])\
    \ . PHP_EOL; // -1\necho can_arrange([1,2,3,4,5,6,7,8,9,10,11,11,10,9,8,7,6,5,4,3,2,1])\
    \ . PHP_EOL; // 7\necho can_arrange([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptlxvut1w.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $ret = -1;\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] <= $arr[$i - 1]) {\n            $ret = $i - 1;\n\
    \            break;\n        }\n    }\n    return $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8972wwh.php:25\n\
    Stack trace:\n#0 /tmp/tmpk8972wwh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpk8972wwh.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $maxIndex = -1;\n  $max = $arr[0];\n \
    \ for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $max) {\n      $maxIndex\
    \ = $i;\n    } else {\n      $max = $arr[$i];\n    }\n  }\n  return $maxIndex;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_unique($arr);\n    for\
    \ ($i = count($arr) - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1])\
    \ {\n            return $i - 1;\n        }\n    }\n    return -1;\n}\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3rk4kht.php:23\n\
    Stack trace:\n#0 /tmp/tmpc3rk4kht.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc3rk4kht.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $res = [];\n  for ($i = 1; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $res[] = $i;\n    }\n  }\n\
    \  return count($res) == 0 ? -1 : $res[count($res) - 1];\n}\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpijxjjorq.php:25\n\
    Stack trace:\n#0 /tmp/tmpijxjjorq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpijxjjorq.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $i = count($arr) - 1;\n    while ($i\
    \ > 0) {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            $i--;\n       \
    \ } else {\n            break;\n        }\n    }\n    return $i;\n}\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5kkssh3.php:26\n\
    Stack trace:\n#0 /tmp/tmpy5kkssh3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpy5kkssh3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n    if ($arr[$i] < $arr[$i - 1]) {\n      return $i - 1;\n    }\n  }\n  return\
    \ -1;\n}\n\nif (can_arrange([1,2,4,3,5]) !== 3) {\n  echo \"Failed 'can_arrange([1,2,4,3,5])'\
    \ Expected 3, Got \" . can_arrange([1,2,4,3,5]) . \"\\n\";\n}\nif (can_arrange([1,2,3])\
    \ !== -1) {\n  echo \"Failed 'can_arrange([1,2,3])' Expected -1, Got \" . can_arrange([1,2,3])\
    \ . \"\\n\";\n}\nif (can_arrange([4,4,4,4,4]) !== -1) {\n  echo \"Failed 'can_arrange([4,4,4,4,4])'\
    \ Expected -1, Got \" . can_arrange([4,4,4,4,4]) . \"\\n\";\n}\nif (can_arrange([-1,-2,-4,-3,-5])\
    \ !== -1) {\n  echo \"Failed 'can_arrange([-1,-2,-4,-3,-5])' Expected -1, Got\
    \ \" . can_arrange([-1,-2,-4,-3,-5]) . \"\\n\";\n}\nif (can_arrange([-1,-2,-3])\
    \ !== 2) {\n  echo \"Failed 'can_arrange([-1,-2,-3])' Expected 2, Got \" . can_arrange([-1,-2,-3])\
    \ . \"\\n\";\n}\nif (can_arrange([]) !== -1) {\n  echo \"Failed 'can_arrange([])'\
    \ Expected -1, Got \" . can_arrange([]) . \"\\n\";\n}\nif (can_arrange([1]) !==\
    \ -1) {\n  echo \"Failed 'can_arrange([1])' Expected -1, Got \" . can\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf5koz6vb.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $out = -1;\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i - 1] >= $arr[$i]) {\n            $out = $i - 1;\n\
    \        }\n    }\n    return $out;\n}\n\nfunction candidate(...$args) {\n   \
    \ return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnbdv4c6j.php:24\n\
    Stack trace:\n#0 /tmp/tmpnbdv4c6j.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnbdv4c6j.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $lastNum = array_slice($arr, -1)[0];\n\
    \    for ($i = count($arr) - 2; $i >= 0; $i--) {\n        if ($arr[$i] >= $lastNum)\
    \ {\n            $lastNum = $arr[$i];\n        } else {\n            return $i;\n\
    \        }\n    }\n    return -1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8_gx7x2.php:27\n\
    Stack trace:\n#0 /tmp/tmpb8_gx7x2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpb8_gx7x2.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $count = count($arr);\n  $res = [];\n\
    \  for ($i = 0; $i < $count - 1; $i++) {\n    if ($arr[$i] >= $arr[$i + 1]) {\n\
    \      $res[] = $i;\n    }\n  }\n  if (empty($res)) {\n    return -1;\n  }\n \
    \ return $res[count($res) - 1];\n}\necho can_arrange([1,2,4,3,5]) . \"<br>\";\n\
    echo can_arrange([1,2,3]) . \"<br>\";\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2<br>-1<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq27wayn0.php:30\n\
    Stack trace:\n#0 /tmp/tmpq27wayn0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpq27wayn0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n    if ($arr[$i] < $arr[$i - 1]) return $i - 1;\n  }\n  return -1;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd0n3qods.php:21\n\
    Stack trace:\n#0 /tmp/tmpd0n3qods.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpd0n3qods.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $newArr = array_reverse($arr);\n  $arrMax\
    \ = array_pop($newArr);\n  $arrMin = array_pop($newArr);\n  if ($arrMax == $arrMin)\
    \ {\n    return -1;\n  }\n  while ($arrMax != $arrMin) {\n    if ($arrMax < $arrMin)\
    \ {\n      $arrMax = $arrMin;\n      $arrMin = array_pop($newArr);\n    } else\
    \ {\n      return count($newArr);\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64xnone6.php:32\n\
    Stack trace:\n#0 /tmp/tmp64xnone6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp64xnone6.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n    if ($arr[$i] < $arr[$i - 1]) {\n      return $i - 1;\n    }\n  }\n  return\
    \ -1;\n}\necho can_arrange([1,2,4,3,5]); // 3\necho can_arrange([1,2,3]); // -1\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2-1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03ymldlc.php:24\n\
    Stack trace:\n#0 /tmp/tmp03ymldlc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp03ymldlc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] < $arr[$i - 1]) return $i - 1;\n    }\n    return -1;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw1l1g6cy.php:21\n\
    Stack trace:\n#0 /tmp/tmpw1l1g6cy.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpw1l1g6cy.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $new = [];\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] < $arr[$i + 1]) {\n      array_push($new, $i);\n \
    \   }\n  }\n  if (count($new) > 0) {\n    return max($new);\n  } else {\n    return\
    \ -1;\n  }\n}\necho can_arrange([1,2,4,3,5]) . \"<br>\";\necho can_arrange([1,2,3])\
    \ . \"<br>\";\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3<br>1<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6vyic3tq.php:30\n\
    Stack trace:\n#0 /tmp/tmp6vyic3tq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6vyic3tq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = count($arr);\n    if ($max >\
    \ 1) {\n        for ($i = 1; $i < $max; $i++) {\n            if ($arr[$i] < $arr[$i\
    \ - 1]) {\n                return $i - 1;\n            }\n        }\n    }\n \
    \   return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpej1xpqd5.php:26\n\
    Stack trace:\n#0 /tmp/tmpej1xpqd5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpej1xpqd5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  // Your code here.\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxcxdl9xc.php:18\n\
    Stack trace:\n#0 /tmp/tmpxcxdl9xc.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxcxdl9xc.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $i = count($arr) - 1;\n  while ($i >=\
    \ 0) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $i--;\n    } else {\n     \
    \ return $i;\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\necho can_arrange([1,2,4,3,5]);\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpulz4sl3o.php:28\n\
    Stack trace:\n#0 /tmp/tmpulz4sl3o.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpulz4sl3o.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $len = count($arr);\n  $result = -1;\n\
    \  for ($i = $len - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n \
    \     $result = $i - 1;\n    }\n  }\n  return $result;\n}\n\necho can_arrange([1,2,4,3,5])\
    \ . PHP_EOL;\necho can_arrange([1,2,3]) . PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5i0bo885.php:28\n\
    Stack trace:\n#0 /tmp/tmp5i0bo885.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5i0bo885.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $i = count($arr) - 1;\n    while ($i\
    \ > 0) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return $i - 1;\n\
    \        }\n        $i--;\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcetrnk4c.php:25\n\
    Stack trace:\n#0 /tmp/tmpcetrnk4c.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcetrnk4c.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n    if ($arr[$i] < $arr[$i - 1]) {\n      return $i - 1;\n    }\n  }\n  return\
    \ -1;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgoou7rhq.php:22\n\
    Stack trace:\n#0 /tmp/tmpgoou7rhq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgoou7rhq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] < $last) {\n      return $i - 1;\n    }\n    $last\
    \ = $arr[$i];\n  }\n  return -1;\n}\n\n$arr = [1,2,4,3,5];\necho can_arrange($arr)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rl0_58b.php:27\n\
    Stack trace:\n#0 /tmp/tmp6rl0_58b.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6rl0_58b.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = 0; $i < count($arr); $i++)\
    \ {\n        if ($arr[$i] > $arr[$i + 1]) {\n            return $i;\n        }\n\
    \    }\n    return -1;\n}\necho can_arrange([1,2,4,3,5]) . \"\\n\";\necho can_arrange([1,2,3])\
    \ . \"\\n\";\necho can_arrange([4,3,2,1]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\n2\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwy3php_a.php:25\n\
    Stack trace:\n#0 /tmp/tmpwy3php_a.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwy3php_a.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $a = $arr;\n    $b = [];\n    $result\
    \ = [];\n    for ($i = 0; $i < count($a); $i++) {\n        $e = 0;\n        for\
    \ ($j = $i + 1; $j < count($a); $j++) {\n            if ($a[$i] > $a[$j]) {\n\
    \                array_push($b, $a[$j]);\n                $e++;\n            }\n\
    \        }\n        if ($e === 0) {\n            array_push($result, -1);\n  \
    \      } else {\n            array_push($result, $b[$e - 1]);\n        }\n   \
    \     unset($b);\n        $b = [];\n    }\n    $r = [];\n    for ($i = 0; $i <\
    \ count($result); $i++) {\n        $e = 0;\n        for ($j = $i + 1; $j < count($result);\
    \ $j++) {\n            if ($result[$i] === $result[$j]) {\n                $e++;\n\
    \            }\n        }\n        if ($e === 0) {\n            array_push($r,\
    \ $result[$i]);\n        }\n    }\n    return max($r);\n}\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbe4mnyv5.php:51\n\
    Stack trace:\n#0 /tmp/tmpbe4mnyv5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpbe4mnyv5.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $t = count($arr);\n  for ($i = $t - 1;\
    \ $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      return $i - 1;\n\
    \    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjeoqa7a.php:24\n\
    Stack trace:\n#0 /tmp/tmppjeoqa7a.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppjeoqa7a.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            return $i - 1;\n   \
    \     }\n    }\n    return -1;\n}\necho can_arrange([1,2,4,3,5]) . \"\\n\"; //\
    \ 3\necho can_arrange([1,2,3]) . \"\\n\"; // -1\necho can_arrange([2,1,4,3,5])\
    \ . \"\\n\"; // 2\necho can_arrange([2,1,4,3,5,6]) . \"\\n\"; // 4\necho can_arrange([4,3,2,1])\
    \ . \"\\n\"; // -1\necho can_arrange([4,3,2,0]) . \"\\n\"; // 1\necho can_arrange([4,3,2,1,1])\
    \ . \"\\n\"; // 2\necho can_arrange([1,2,3,4,5,6,8,7,9]) . \"\\n\"; // 6\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n1\n3\n4\n-1\n-1\n3\n7\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmph9evnw1r.php:31\nStack trace:\n#0 /tmp/tmph9evnw1r.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmph9evnw1r.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = [];\n    for ($i = 1; $i <\
    \ count($arr); $i++) {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            array_push($result,\
    \ $i);\n        }\n    }\n    if (!empty($result)) {\n        return max($result);\n\
    \    } else {\n        return -1;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpulur2o8g.php:27\n\
    Stack trace:\n#0 /tmp/tmpulur2o8g.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpulur2o8g.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $i = 0;\n    $max = $arr[0];\n    $index\
    \ = -1;\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n            $index = $i;\n        }\n    }\n\
    \    return $index;\n}\necho can_arrange([1,2,4,3,5]);\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "4\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpllt0l6cv.php:27\n\
    Stack trace:\n#0 /tmp/tmpllt0l6cv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpllt0l6cv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return $i - 1;\n    \
    \    }\n    }\n    return -1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fno8skx.php:23\n\
    Stack trace:\n#0 /tmp/tmp6fno8skx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6fno8skx.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = 0; $i < count($arr) - 1; $i++)\
    \ {\n        if ($arr[$i] <= $arr[$i + 1]) {\n            return $i;\n       \
    \ }\n    }\n    return -1;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskt1z969.php:22\n\
    Stack trace:\n#0 /tmp/tmpskt1z969.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpskt1z969.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = 0; $i < count($arr) - 1; $i++)\
    \ {\n        $arr[$i] = $arr[$i + 1] < $arr[$i] ? $i : -1;\n    }\n    return\
    \ max($arr);\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvc_s85i.php:21\n\
    Stack trace:\n#0 /tmp/tmpdvc_s85i.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdvc_s85i.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $min = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] >= $min) {\n      $min\
    \ = $arr[$i];\n      $index = $i;\n    }\n  }\n  return $index;\n}\necho can_arrange([1,2,4,3,5])\
    \ . PHP_EOL;\necho can_arrange([1,2,3]) . PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc7a60a5r.php:28\n\
    Stack trace:\n#0 /tmp/tmpc7a60a5r.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpc7a60a5r.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\t$last = 0;\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\tif ($arr[$i] >= $last) {\n\t\t\t$last = $arr[$i];\n\t\t} else {\n\
    \t\t\treturn $i - 1;\n\t\t}\n\t}\n\treturn -1;\n}\n\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\necho can_arrange([1,2,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxowrkg7k.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr = array_reverse($arr);\n  $largest\
    \ = $arr[0];\n  $largestIndex = 0;\n  for ($i = 1; $i < count($arr); $i++) {\n\
    \    if ($arr[$i] <= $largest) {\n      $largest = $arr[$i];\n      $largestIndex\
    \ = $i;\n    }\n  }\n  return $largestIndex == count($arr) - 1 ? -1 : count($arr)\
    \ - 1 - $largestIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp295dseeb.php:27\n\
    Stack trace:\n#0 /tmp/tmp295dseeb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp295dseeb.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $index = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $index\
    \ = $i - 1;\n        }\n    }\n    return $index;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpofa_qgbp.php:24\n\
    Stack trace:\n#0 /tmp/tmpofa_qgbp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpofa_qgbp.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $max\
    \ = array_shift($arr);\n    $i = 0;\n    foreach ($arr as $key => $value) {\n\
    \        if ($value > $max) {\n            $max = $value;\n            $i = $key;\n\
    \        }\n    }\n    return $i == 0 ? -1 : count($arr) - $i;\n}\necho can_arrange([1,2,4,3,5]);\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7pt80__o.php:27\n\
    Stack trace:\n#0 /tmp/tmp7pt80__o.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7pt80__o.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $count = count($arr);\n    for ($i =\
    \ $count - 1; $i > 0; $i--) {\n        if ($arr[$i] >= $arr[$i - 1]) {\n     \
    \       return $i - 1;\n        }\n    }\n    return -1;\n}\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjpz8_l6.php:24\n\
    Stack trace:\n#0 /tmp/tmprjpz8_l6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprjpz8_l6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $len = count($arr);\n  for ($i = $len\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      return $i -\
    \ 1;\n    }\n  }\n  return -1;\n}\necho can_arrange([1,2,4,3,5]) . \"\\n\";\n\
    echo can_arrange([1,2,3]) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp351z0h_j.php:25\n\
    Stack trace:\n#0 /tmp/tmp351z0h_j.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp351z0h_j.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $out = -1;\n  for ($i = 1; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] <= $arr[$i - 1]) {\n      $out = $i - 1;\n    }\n\
    \  }\n  return $out;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjmj1qina.php:23\n\
    Stack trace:\n#0 /tmp/tmpjmj1qina.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjmj1qina.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] <= $arr[$i - 1]) {\n            return $i - 1;\n   \
    \     }\n    }\n    return -1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7k7fr7zi.php:23\n\
    Stack trace:\n#0 /tmp/tmp7k7fr7zi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7k7fr7zi.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\t$index = -1;\n\tfor ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n\t\tif ($arr[$i] <= $arr[$i - 1]) {\n\t\t\t$index = $i;\n\
    \t\t}\n\t}\n\treturn $index;\n}\necho can_arrange([1,2,4,3,5]) . \"\\n\";\necho\
    \ can_arrange([1,2,3]) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ho_1lmi.php:28\n\
    Stack trace:\n#0 /tmp/tmp2ho_1lmi.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2ho_1lmi.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  if (count($arr) < 2) return -1;\n  $index\
    \ = count($arr) - 1;\n  while ($index > 0) {\n    if ($arr[$index] >= $arr[$index\
    \ - 1]) {\n      $index--;\n    } else {\n      return $index;\n    }\n  }\n \
    \ return -1;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    if (count($arr) == 0) {\n        return\
    \ null;\n    }\n    // https://stackoverflow.com/questions/18990835/get-the-last-element-of-an-array-without-deleting-it-pop\n\
    \    $max_index = count($arr) - 1;\n    $max_value = $arr[$max_index];\n    //\
    \ Remove the last element\n    array_pop($arr);\n    $index = 0;\n    foreach\
    \ ($arr as $value) {\n        if ($value < $max_value) {\n            $index++;\n\
    \        }\n    }\n    if ($index == $max_index) {\n        return -1;\n    }\n\
    \    return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp470413kg.php:35\n\
    Stack trace:\n#0 /tmp/tmp470413kg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp470413kg.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr2 = $arr;\n  sort($arr2);\n  $arr3\
    \ = [];\n  for ($i = 0; $i < count($arr); $i++) {\n    $arr3[] = array_search($arr[$i],\
    \ $arr2);\n  }\n  for ($i = count($arr3) - 1; $i > 0; $i--) {\n    if ($arr3[$i]\
    \ < $arr3[$i - 1]) {\n      return $i - 1;\n    }\n  }\n  return -1;\n}\necho\
    \ can_arrange([5, 2, 1, 3, 4]);\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxh3i7vg.php:29\n\
    Stack trace:\n#0 /tmp/tmpaxh3i7vg.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpaxh3i7vg.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  // TODO: Implement the function\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4we1943.php:18\n\
    Stack trace:\n#0 /tmp/tmpz4we1943.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpz4we1943.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = 1; $i < count($arr); $i++) {\n\
    \    if ($arr[$i] < $arr[$i - 1]) {\n      return $i - 1;\n    }\n  }\n  return\
    \ -1;\n}\n\necho can_arrange([1,2,4,3,5]); // 3\necho can_arrange([1,2,3]); //\
    \ -1\necho can_arrange([3,2,1]); // -1\necho can_arrange([1,2,3,5,4]); // 2\n\
    echo can_arrange([1,2,3,4,5]); // -1\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2-103-1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgjp5v9xl.php:29\n\
    Stack trace:\n#0 /tmp/tmpgjp5v9xl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgjp5v9xl.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = 0;\n    $maxIndex = -1;\n  \
    \  for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] <= $last) {\n\
    \            $maxIndex = $i;\n        }\n        $last = $arr[$i];\n    }\n  \
    \  return $maxIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  if(count($arr) <= 1) return -1;\n  $index\
    \ = 0;\n  for($i = 1; $i < count($arr); $i++) {\n    if($arr[$i - 1] >= $arr[$i])\
    \ $index = $i;\n  }\n  return $index;\n}\n\nfunction candidate(...$args) {\n \
    \   return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cprnzcz.php:24\n\
    Stack trace:\n#0 /tmp/tmp5cprnzcz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5cprnzcz.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  // Write your code here\n  // To print\
    \ results to the standard output you can use print\n  // Example: print \"Hello\
    \ world!\";\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppdv1pfve.php:19\n\
    Stack trace:\n#0 /tmp/tmppdv1pfve.php(26): test()\n#1 {main}\n  thrown in /tmp/tmppdv1pfve.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = 1; $i < count($arr); $i++) {\n\
    \    if ($arr[$i] <= $arr[$i - 1]) return $i - 1;\n  }\n  return -1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_46fsc0.php:21\n\
    Stack trace:\n#0 /tmp/tmpr_46fsc0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpr_46fsc0.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = 0; $i < count($arr) - 1; $i++)\
    \ {\n        if ($arr[$i] > $arr[$i + 1]) return $i;\n    }\n    return -1;\n\
    }\necho can_arrange([1,2,4,3,5]) . \"<br>\";\necho can_arrange([1,2,3]) . \"<br>\"\
    ;\necho can_arrange([2,4,3,1]) . \"<br>\";\necho can_arrange([2,4,3,1,5]) . \"\
    <br>\";\necho can_arrange([1,2,1,2,1]) . \"<br>\";\necho can_arrange([1,1,1,2,1])\
    \ . \"<br>\";\necho can_arrange([]) . \"<br>\";\necho can_arrange([1]) . \"<br>\"\
    ;\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2<br>-1<br>1<br>1<br>1<br>3<br>-1<br>-1<br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpji_0qeuq.php:28\nStack trace:\n#0 /tmp/tmpji_0qeuq.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpji_0qeuq.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = 1; $i < count($arr); $i++)\
    \ {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            return $i - 1;\n   \
    \     }\n    }\n    return -1;\n}\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizbo7xj5.php:22\n\
    Stack trace:\n#0 /tmp/tmpizbo7xj5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpizbo7xj5.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $ind = -1;\n   \
    \ for ($i = count($arr) - 1; $i > 0; $i--) {\n        if ($arr[$i] >= $arr[$i\
    \ - 1]) {\n            if ($i > $largest) {\n                $largest = $i;\n\
    \                $ind = $i;\n            }\n        }\n    }\n    return $ind;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxc_n3eg.php:28\n\
    Stack trace:\n#0 /tmp/tmpcxc_n3eg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpcxc_n3eg.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $lastIndex = count($arr) - 1;\n    for\
    \ ($i = $lastIndex; $i > 0; $i--) {\n        if ($arr[$i] <= $arr[$i - 1]) {\n\
    \            return $i - 1;\n        }\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ck3d7qx.php:24\n\
    Stack trace:\n#0 /tmp/tmp8ck3d7qx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8ck3d7qx.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $maximum = max($arr);\n  $minIndex = -1;\n\
    \  $current = 0;\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] <\
    \ $maximum) {\n      $current = $i;\n      break;\n    }\n  }\n  for ($i = $current;\
    \ $i < count($arr); $i++) {\n    if ($arr[$i] > $arr[$current]) {\n      $maximum\
    \ = $arr[$i];\n      $minIndex = $i;\n    }\n  }\n  return $minIndex;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppsoq7nj4.php:33\n\
    Stack trace:\n#0 /tmp/tmppsoq7nj4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppsoq7nj4.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    if (empty($arr)) return -1;\n    $start\
    \ = count($arr)-1;\n    $i = $start;\n    while ($i > 0) {\n        if ($arr[$i]\
    \ <= $arr[$i-1]) {\n            $start = $i-1;\n            $i--;\n        } else\
    \ {\n            break;\n        }\n    }\n    if ($i < 1) return -1;\n    return\
    \ $start;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_v9qk5si.php:30\n\
    Stack trace:\n#0 /tmp/tmp_v9qk5si.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_v9qk5si.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $result = -1;\n  $val = 0;\n  for ($i\
    \ = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $val\
    \ = $arr[$i];\n      break;\n    }\n  }\n  for ($i = count($arr) - 1; $i >= 0;\
    \ $i--) {\n    if ($arr[$i] >= $val) {\n      $result = $i;\n      break;\n  \
    \  }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnyx0cv98.php:32\n\
    Stack trace:\n#0 /tmp/tmpnyx0cv98.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpnyx0cv98.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arrLength = count($arr);\n    $lastElement\
    \ = $arr[$arrLength - 1];\n    $index = $arrLength - 2;\n    while($index >= 0)\
    \ {\n        if($arr[$index] <= $lastElement) {\n            return $index;\n\
    \        }\n        $index--;\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjkei6l69.php:28\n\
    Stack trace:\n#0 /tmp/tmpjkei6l69.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjkei6l69.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n    if ($arr[$i] <= $arr[$i - 1])\n      return $i - 1;\n  }\n  return -1;\n\
    }\n\nprint_r(can_arrange([1,2,4,3,5]));\nprint_r(can_arrange([1,2,3]));\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2-1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdh6x9eas.php:24\n\
    Stack trace:\n#0 /tmp/tmpdh6x9eas.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdh6x9eas.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $size = count($arr);\n  $max = $arr[$size\
    \ - 1];\n  for ($i = $size - 2; $i >= 0; $i--) {\n    if ($arr[$i] >= $max) {\n\
    \      $max = $arr[$i];\n    } else {\n      return $i;\n    }\n  }\n  return\
    \ -1;\n}\n\necho can_arrange([1,2,4,3,5]) . PHP_EOL;\necho can_arrange([1,2,3])\
    \ . PHP_EOL;\necho can_arrange([9,8,7,6,5,4,3,2,1]) . PHP_EOL;\necho can_arrange([1,2,3,4,5,6,7,8,9])\
    \ . PHP_EOL;\necho can_arrange([1,2,3,3,3,3,3,3,3]) . PHP_EOL;\necho can_arrange([4,4,4,4,4,4,4,4,4])\
    \ . PHP_EOL;\necho can_arrange([9,8,7,6,5,4,3,2,1,2,1]) . PHP_EOL;\necho can_arrange([9,8,7,6,5,4,3,2,1,1,2])\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3\n1\n-1\n7\n1\n-1\n8\n9\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmptgly5_6d.php:36\nStack trace:\n#0 /tmp/tmptgly5_6d.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmptgly5_6d.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $total = count($arr);\n  $result = [];\n\
    \  for ($i = 0; $i < $total; $i++) {\n    if ($arr[$i + 1] <= $arr[$i]) {\n  \
    \    array_push($result, $i);\n    }\n  }\n  return end($result);\n}\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3jlgzxh7.php:24\n\
    Stack trace:\n#0 /tmp/tmp3jlgzxh7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3jlgzxh7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_unique($arr);\n    sort($arr);\n\
    \    $back = count($arr) - 1;\n    $front = 0;\n    while ($front <= $back) {\n\
    \        if ($arr[$front] >= $arr[$back]) {\n            $back--;\n        } else\
    \ {\n            return $back;\n        }\n        $front++;\n    }\n    return\
    \ -1;\n}\n\necho can_arrange([1,2,4,3,5]) . \"\\n\";\necho can_arrange([1,2,3])\
    \ . \"\\n\";\necho can_arrange([1,2,1,2,1,2,2,1,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfif96_jb.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $retVal = -1;\n  for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $retVal = $i\
    \ - 1;\n      break;\n    }\n  }\n  return $retVal;\n}\n\n$a = array(1, 2, 4,\
    \ 3, 5);\nprint can_arrange($a);\nprint \"\\n\";\n$a = array(1, 2, 3);\nprint\
    \ can_arrange($a);\nprint \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmx5w8pcc.php:31\n\
    Stack trace:\n#0 /tmp/tmpmx5w8pcc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmx5w8pcc.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    $length = count($arr);\n\
    \    if ($length == 0) {\n        return $result;\n    }\n    $index = $length\
    \ - 1;\n    $max = $arr[$index];\n    while ($index >= 0) {\n        if ($arr[$index]\
    \ > $max) {\n            $max = $arr[$index];\n            $result = $index;\n\
    \        }\n        $index--;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpod4sxz6i.php:32\n\
    Stack trace:\n#0 /tmp/tmpod4sxz6i.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpod4sxz6i.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $idx = -1;\n  for ($i = 1; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] <= $arr[$i - 1]) {\n      $idx = $i;\n    }\n  }\n\
    \  return $idx;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n    if ($arr[$i] < $arr[$i - 1]) {\n      return $i - 1;\n    }\n  }\n  return\
    \ -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc86f8fc6.php:23\n\
    Stack trace:\n#0 /tmp/tmpc86f8fc6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc86f8fc6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    if ($arr === []) {\n        return -1;\n\
    \    }\n    $index = count($arr) - 1;\n    while ($index > 0) {\n        if ($arr[$index]\
    \ >= $arr[$index - 1]) {\n            $index -= 1;\n        } else {\n       \
    \     return $index;\n        }\n    }\n    return -1;\n}\n\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\necho can_arrange([]) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3\n-1\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $j = 1;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $arr[$j]) {\n            return $j;\n      \
    \  }\n        $j++;\n    }\n    return -1;\n}\n\necho(can_arrange([1,2,4,3,5]));\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4k0y7rpj.php:26\n\
    Stack trace:\n#0 /tmp/tmp4k0y7rpj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4k0y7rpj.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    $previous = $arr[0];\n\
    \    $end = count($arr) - 1;\n    for ($i = 1; $i <= $end; $i++) {\n        if\
    \ ($arr[$i] < $previous) {\n            $result = $i - 1;\n            break;\n\
    \        }\n        $previous = $arr[$i];\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpapn2ir26.php:27\n\
    Stack trace:\n#0 /tmp/tmpapn2ir26.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpapn2ir26.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arrLength = count($arr);\n    for ($i\
    \ = 1; $i < $arrLength; $i++) {\n        if ($arr[$i - 1] <= $arr[$i]) {\n   \
    \         continue;\n        }\n        else {\n            return $i - 1;\n \
    \       }\n    }\n    return -1;\n}\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxxa7zrj3.php:26\n\
    Stack trace:\n#0 /tmp/tmpxxa7zrj3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxxa7zrj3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = -1;\n    for ($i = count($arr)\
    \ - 1; $i >= 0; $i--) {\n        if ($arr[$i] < $last) {\n            return $i;\n\
    \        }\n        $last = $arr[$i];\n    }\n    return -1;\n}\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xf8sifm.php:25\n\
    Stack trace:\n#0 /tmp/tmp0xf8sifm.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0xf8sifm.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\n}\nfunction candidate(...$args) {\n  \
    \  return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5j023c8.php:17\n\
    Stack trace:\n#0 /tmp/tmph5j023c8.php(24): test()\n#1 {main}\n  thrown in /tmp/tmph5j023c8.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  // the index of the last element which\
    \ is smaller than the element before it\n  $index = null;\n  // compare each element\
    \ to the one before it\n  for ($i = 1; $i < count($arr); $i++) {\n    // if the\
    \ current element is smaller than the one before it, save its index\n    if ($arr[$i]\
    \ < $arr[$i - 1]) {\n      $index = $i;\n    }\n  }\n  // return the saved index\
    \ or -1\n  return $index ? $index : -1;\n}\nfunction candidate(...$args) {\n \
    \   return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\t$arrReverse = array_reverse($arr);\n\t\
    for ($i = 0; $i < count($arrReverse) - 1; $i++) {\n\t\tif ($arrReverse[$i] < $arrReverse[$i\
    \ + 1]) {\n\t\t\treturn count($arr) - $i - 1;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $a = $arr;\n  $arr[] = 0;\n  $res = -1;\n\
    \  foreach ($a as $key => $num) {\n    if ($num >= $arr[$key - 1]) {\n      $res\
    \ = $key;\n    }\n  }\n  return $res;\n}\necho can_arrange([1,2,4,3,5]) . \"\\\
    n\";\necho can_arrange([1,2,3]) . \"\\n\";\nfunction candidate(...$args) {\n \
    \   return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_la7grp.php:27\n\
    Stack trace:\n#0 /tmp/tmpu_la7grp.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpu_la7grp.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = $arr[0];\n    $idx = -1;\n \
    \   for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $last) {\n\
    \            $idx = $i;\n        }\n        else {\n            $last = $arr[$i];\n\
    \        }\n    }\n    return $idx;\n}\necho(can_arrange([1,2,4,3,5]) . \"\\n\"\
    );\necho(can_arrange([1,2,3]) . \"\\n\");\nfunction candidate(...$args) {\n  \
    \  return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $prev = null;\n    $i = 0;\n    while\
    \ ($i < count($arr)) {\n        if ($arr[$i] >= $prev) {\n            $prev =\
    \ $arr[$i];\n            $i++;\n        } else {\n            break;\n       \
    \ }\n    }\n    return $i - 1;\n}\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzi33vc53.php:27\n\
    Stack trace:\n#0 /tmp/tmpzi33vc53.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzi33vc53.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max_idx = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max_idx\
    \ = $i;\n        }\n    }\n    return $max_idx;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_femlva.php:27\n\
    Stack trace:\n#0 /tmp/tmp2_femlva.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2_femlva.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $smallest_index = -1;\n  for ($i = 0;\
    \ $i < count($arr) - 1; $i++) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      $smallest_index\
    \ = $i + 1;\n      break;\n    }\n  }\n  return $smallest_index;\n}\n\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihcss71y.php:30\n\
    Stack trace:\n#0 /tmp/tmpihcss71y.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpihcss71y.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\t$prev = $arr[0];\n\t$index_max = 0;\n\t\
    $last = count($arr) - 1;\n\tforeach ($arr as $key => $value) {\n\t\tif ($key ==\
    \ $last) {\n\t\t\tbreak;\n\t\t}\n\t\tif ($value < $prev) {\n\t\t\t$prev = $value;\n\
    \t\t\t$index_max = $key;\n\t\t}\n\t}\n\treturn $index_max;\n}\necho can_arrange([1,2,4,3,5]);\n\
    echo can_arrange([1,2,3]);\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "00\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2j3hfpxu.php:32\n\
    Stack trace:\n#0 /tmp/tmp2j3hfpxu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2j3hfpxu.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  //your code here\n}\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyrgxj5w7.php:17\n\
    Stack trace:\n#0 /tmp/tmpyrgxj5w7.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpyrgxj5w7.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $newArr = [];\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] >= $arr[$i + 1]) {\n      array_push($newArr, $i);\n\
    \    }\n  }\n  if (count($newArr) == 0) {\n    return -1;\n  } else {\n    return\
    \ end($newArr);\n  }\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_tr8fsd.php:28\n\
    Stack trace:\n#0 /tmp/tmp6_tr8fsd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6_tr8fsd.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $i = $arr[0];\n  $found = false;\n  $i\
    \ = -1;\n  foreach ($arr as $item) {\n    if ($item >= $i) {\n      $i = $item;\n\
    \    } else {\n      $found = true;\n      break;\n    }\n  }\n  if ($found) {\n\
    \    return $item;\n  } else {\n    return -1;\n  }\n}\n\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplg6zxlhy.php:39\n\
    Stack trace:\n#0 /tmp/tmplg6zxlhy.php(43): test()\n#1 {main}\n  thrown in /tmp/tmplg6zxlhy.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $result = -1;\n  $len = count($arr);\n\
    \  for ($i = $len - 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n\
    \      $result = $i - 1;\n    }\n  }\n  return $result;\n}\n\necho can_arrange([1,2,4,3,5]);\n\
    echo \"\\n\";\necho can_arrange([1,2,3]);\necho \"\\n\";\necho can_arrange([1,10,9,8,8,9,10,11,12,12,11,10,10,9,8,7,6,7,8,9,10,11,12,13,14,14,13,12,11,10,9,8,7,6,7,8,9,10,11,12,13,14,15,16,16,15,14,13,12,11,10,9,8,7,6,7,8,9,10,11,12,13,14,15,16,16,15,14,13,12,11,10,9,8,7,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp56cwqkuy.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\t$best_index = 0;\n\tfor ($i = 1; $i <\
    \ count($arr); $i++) {\n\t\tif ($arr[$i] < $arr[$i - 1]) {\n\t\t\t$best_index\
    \ = $i;\n\t\t}\n\t}\n\treturn $best_index - 1;\n}\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47grdu8u.php:23\n\
    Stack trace:\n#0 /tmp/tmp47grdu8u.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp47grdu8u.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            unset($arr[$i]);\n \
    \       } else {\n            return $i;\n        }\n    }\n    return -1;\n}\n\
    \nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n\n}\nfunction candidate(...$args) {\n  \
    \  return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1olfa32i.php:17\n\
    Stack trace:\n#0 /tmp/tmp1olfa32i.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp1olfa32i.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    for ($i = count($arr) - 1; $i > 0; $i--)\
    \ {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return $i - 1;\n    \
    \    }\n    }\n    return -1;\n}\necho can_arrange([1,2,4,3,5]) . PHP_EOL;\necho\
    \ can_arrange([1,2,3]) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\n-1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9p6czy8.php:25\n\
    Stack trace:\n#0 /tmp/tmp_9p6czy8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_9p6czy8.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $indexArr = array();\n  $max = 0;\n  for\
    \ ($i = 0; $i < count($arr); $i++) {\n    $indexArr[$arr[$i]] = $i;\n  }\n  for\
    \ ($i = 0; $i < count($arr); $i++) {\n    if ($indexArr[$arr[$i]] >= $max) {\n\
    \      $max = $indexArr[$arr[$i]];\n    } else {\n      return $i - 1;\n    }\n\
    \  }\n  return -1;\n}\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporgiyui7.php:29\n\
    Stack trace:\n#0 /tmp/tmporgiyui7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmporgiyui7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    // Write your code here\n    $output\
    \ = -1;\n    for ($i = 0; $i < count($arr); $i++) {\n        if (isset($arr[$i+1])\
    \ && $arr[$i] <= $arr[$i+1]) {\n            $output = $i;\n        }\n    }\n\
    \    return $output;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpda8lo_6l.php:26\n\
    Stack trace:\n#0 /tmp/tmpda8lo_6l.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpda8lo_6l.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
