name: HumanEval_148_bf
language: php
results:
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $planet1Pos = array_search($planet1,\
    \ $planets);\n  $planet2Pos = array_search($planet2, $planets);\n  $result = [];\n\
    \  if ($planet1Pos > $planet2Pos) {\n    $temp = $planet1Pos;\n    $planet1Pos\
    \ = $planet2Pos;\n    $planet2Pos = $temp;\n  }\n  for ($i = $planet1Pos + 1;\
    \ $i < $planet2Pos; $i++) {\n    $result[] = $planets[$i];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxl8n7f8v.php:42\n\
    Stack trace:\n#0 /tmp/tmpxl8n7f8v.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxl8n7f8v.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $index1 = array_search($planet1, $planets);\n\
    \  $index2 = array_search($planet2, $planets);\n  if ($index1 === false || $index2\
    \ === false) return [];\n  $new_planets = [];\n  $planets1 = [];\n  $planets2\
    \ = [];\n  if ($index1 < $index2) {\n    $planets1 = array_slice($planets, $index1,\
    \ $index2-$index1+1);\n  } else {\n    $planets2 = array_slice($planets, $index2,\
    \ $index1-$index2+1);\n  }\n  return array_merge($planets1, $planets2);\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_sk2a5po.php:35\n\
    Stack trace:\n#0 /tmp/tmp_sk2a5po.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_sk2a5po.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune');\n    $return = array();\n    $pos1 = array_search($planet1,\
    \ $planets);\n    $pos2 = array_search($planet2, $planets);\n    if ($pos1 ===\
    \ false || $pos2 === false) {\n        return $return;\n    }\n    $min = min($pos1,\
    \ $pos2);\n    $max = max($pos1, $pos2);\n    for ($i = $min + 1; $i < $max; $i++)\
    \ {\n        $return[] = $planets[$i];\n    }\n    return $return;\n}\nvar_dump(bf(\"\
    Jupiter\", \"Neptune\"));\nvar_dump(bf(\"Earth\", \"Mercury\"));\nvar_dump(bf(\"\
    Mercury\", \"Uranus\"));\nvar_dump(bf(\"Uranus\", \"Mercury\"));\nvar_dump(bf(\"\
    Mars\", \"Venus\"));\nvar_dump(bf(\"Mars\", \"Pluto\"));\nvar_dump(bf(\"Pluto\"\
    , \"Mars\"));\nvar_dump(bf(\"Earth\", \"Earth\"));\nvar_dump(bf(\"Venus\", \"\
    Venus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n  [0]=>\n  string(5)\
    \ \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n \
    \ [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\narray(5)\
    \ {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n\
    \  string(4) \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6)\
    \ \"Saturn\"\n}\narray(1) {\n  [0]=>\n  string(5) \"Earth\"\n}\narray(0) {\n}\n\
    array(0) {\n}\narray(0) {\n}\narray(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\tif(($p1 = array_search($planet1, $planets)) && ($p2 = array_search($planet2,\
    \ $planets))) {\n\t\treturn array_slice($planets, min($p1, $p2) + 1, abs($p1 -\
    \ $p2) - 1);\n\t}\n\treturn [];\n}\n\n$planets = array('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_search() expects parameter 2 to be array, null given in\
    \ /tmp/tmp8jjs2mc8.php on line 16\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp8jjs2mc8.php:29\nStack trace:\n#0 /tmp/tmp8jjs2mc8.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmp8jjs2mc8.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  //your code here\n}\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjm6m8vo1.php:23\n\
    Stack trace:\n#0 /tmp/tmpjm6m8vo1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpjm6m8vo1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$result = [];\n\t$found1 = $found2\
    \ = false;\n\t$index1 = $index2 = null;\n\tforeach ($planets as $key => $value)\
    \ {\n\t\tif ($value == $planet1) {\n\t\t\t$found1 = true;\n\t\t\t$index1 = $key;\n\
    \t\t}\n\t\tif ($value == $planet2) {\n\t\t\t$found2 = true;\n\t\t\t$index2 = $key;\n\
    \t\t}\n\t}\n\tif (!$found1 || !$found2) {\n\t\treturn [];\n\t}\n\tif ($index1\
    \ > $index2) {\n\t\tfor ($i = $index2 + 1; $i < $index1; $i++) {\n\t\t\t$result[]\
    \ = $planets[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $index1 + 1; $i < $index2;\
    \ $i++) {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\
    \nvar_dump(bf(\"Jupiter\", \"Neptune\")); //[\"Saturn\", \"Uranus\"]\nvar_dump(bf(\"\
    Earth\", \"Mercury\")); //[\"Venus\"]\nvar_dump(bf(\"Mercury\", \"Uranus\"));\
    \ //[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nvar_dump(bf(\"\
    Saturn\", \"Venus\")); //[]\nvar_dump(bf(\"Uranus\", \"Earth\")); //[]\nvar_dump(bf(\"\
    Saturn\", \"Earth\")); //[]\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n  [0]=>\n  string(5)\
    \ \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n \
    \ [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\narray(3)\
    \ {\n  [0]=>\n  string(5) \"Earth\"\n  [1]=>\n  string(4) \"Mars\"\n  [2]=>\n\
    \  string(7) \"Jupiter\"\n}\narray(3) {\n  [0]=>\n  string(4) \"Mars\"\n  [1]=>\n\
    \  string(7) \"Jupiter\"\n  [2]=>\n  string(6) \"Saturn\"\n}\narray(2) {\n  [0]=>\n\
    \  string(4) \"Mars\"\n  [1]=>\n  string(7) \"Jupiter\"\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $planet1_index = array_search($planet1,\
    \ $planets);\n    $planet2_index = array_search($planet2, $planets);\n    if($planet1_index\
    \ === false || $planet2_index === false) {\n        return [];\n    } else {\n\
    \        $distance_one = abs($planet1_index - $planet2_index);\n        $distance_two\
    \ = count($planets) - $distance_one;\n        $direction = $distance_one <= $distance_two\
    \ ? 'one' : 'two';\n        $index_from = $direction === 'one' ? $planet1_index\
    \ : $planet2_index;\n        $index_to = $direction === 'one' ? $planet2_index\
    \ : $planet1_index;\n        $planets_between = [];\n        for($i = $index_from\
    \ + 1; $i < $index_to; $i++) {\n            $planets_between[] = $planets[$i];\n\
    \        }\n        return $planets_between;\n    }\n}\n\necho \"BF\";\necho \"\
    <br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "BF<br>Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3l8w9k31.php:45\n\
    Stack trace:\n#0 /tmp/tmp3l8w9k31.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp3l8w9k31.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\tif (!in_array($planet1, $planets) ||\
    \ !in_array($planet2, $planets)) {\n\t\treturn [];\n\t}\n\n\t$i = array_search($planet1,\
    \ $planets);\n\t$j = array_search($planet2, $planets);\n\n\t$ret = [];\n\tif ($i\
    \ < $j) {\n\t\tfor ($k = $i + 1; $k < $j; $k++) {\n\t\t\t$ret[] = $planets[$k];\n\
    \t\t}\n\t} else {\n\t\tfor ($k = $j + 1; $k < $i; $k++) {\n\t\t\t$ret[] = $planets[$k];\n\
    \t\t}\n\t}\n\n\treturn $ret;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $pos1 = array_search($planet1,\
    \ $planets);\n    $pos2 = array_search($planet2, $planets);\n    if ($pos1 ===\
    \ false || $pos2 === false) return [];\n    if ($pos1 < $pos2) {\n        $start\
    \ = $pos1;\n        $end = $pos2;\n    } else {\n        $start = $pos2;\n   \
    \     $end = $pos1;\n    }\n    return array_slice($planets, $start + 1, $end\
    \ - $start - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzoyop8j.php:39\n\
    Stack trace:\n#0 /tmp/tmphzoyop8j.php(44): test()\n#1 {main}\n  thrown in /tmp/tmphzoyop8j.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune');\n    if (!in_array($planet1, $planets) || !in_array($planet2,\
    \ $planets)) {\n        return array();\n    }\n    $planet1_index = array_search($planet1,\
    \ $planets);\n    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ > $planet2_index) {\n        return array_slice($planets, $planet2_index + 1,\
    \ $planet1_index - $planet2_index - 1);\n    } else {\n        return array_slice($planets,\
    \ $planet1_index + 1, $planet2_index - $planet1_index - 1);\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx7_mo31_.php:37\n\
    Stack trace:\n#0 /tmp/tmpx7_mo31_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpx7_mo31_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\"\
    ,\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\
    \n  ];\n  if(!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n\
    \    return [];\n  }\n  $index1 = array_search($planet1, $planets);\n  $index2\
    \ = array_search($planet2, $planets);\n  if($index1 === $index2) {\n    return\
    \ [];\n  }\n  if($index1 > $index2) {\n    $index1 = $index1 ^ $index2;\n    $index2\
    \ = $index1 ^ $index2;\n    $index1 = $index1 ^ $index2;\n  }\n  return array_slice($planets,\
    \ $index1+1, $index2-$index1-1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array(\n\t\t'Mercury',\n\t\t'Venus',\n\t\t'Earth',\n\
    \t\t'Mars',\n\t\t'Jupiter',\n\t\t'Saturn',\n\t\t'Uranus',\n\t\t'Neptune',\n\t\
    );\n\t$start = array_search($planet1, $planets);\n\t$end = array_search($planet2,\
    \ $planets);\n\tif ($start === false || $end === false) {\n\t\treturn array();\n\
    \t}\n\treturn array_slice($planets, $start, $end - $start + 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnl4bmjq6.php:39\n\
    Stack trace:\n#0 /tmp/tmpnl4bmjq6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpnl4bmjq6.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $result = [];\n  $planets = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  $pos1 = array_search($planet1,\
    \ $planets);\n  $pos2 = array_search($planet2, $planets);\n  if ($pos1 !== false\
    \ && $pos2 !== false) {\n    for ($i = $pos1 + 1; $i < $pos2; $i++) {\n      $result[]\
    \ = $planets[$i];\n    }\n  }\n  return $result;\n}\n\n$ret = bf(\"Mercury\",\
    \ \"Uranus\");\nprint_r($ret);\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp92rljeg9.php:36\nStack trace:\n#0 /tmp/tmp92rljeg9.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmp92rljeg9.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $index1 = array_search($planet1,\
    \ $planets);\n    $index2 = array_search($planet2, $planets);\n    if ($index1\
    \ === false || $index2 === false) {\n        return [];\n    } elseif ($index1\
    \ < $index2) {\n        return array_slice($planets, $index1 + 1, $index2 - $index1\
    \ - 1);\n    } else {\n        return array_slice($planets, $index2 + 1, $index1\
    \ - $index2 - 1);\n    }\n}\n\n$test_arr = [\"Jupiter\", \"Neptune\"];\nprint_r(bf($test_arr[0],\
    \ $test_arr[1]));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_s3202r_.php:39\nStack trace:\n#0 /tmp/tmp_s3202r_.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_s3202r_.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = array(\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\"\
    ,\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\
    \n  );\n  if (in_array($planet1, $planets) && in_array($planet2, $planets)) {\n\
    \    $start = array_search($planet1, $planets);\n    $end = array_search($planet2,\
    \ $planets);\n    $a = $start > $end ? $end : $start;\n    $b = $start > $end\
    \ ? $start : $end;\n    return implode(\",\", array_slice($planets, $a + 1, $b\
    \ - 1));\n  }\n  return \"\";\n}\necho bf(\"Jupiter\", \"Neptune\");\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Saturn,Uranus,Neptune\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpp_86m1l4.php:41\nStack trace:\n#0 /tmp/tmpp_86m1l4.php(50): test()\n\
    #1 {main}\n  thrown in /tmp/tmpp_86m1l4.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    // your code here\n}\n\necho implode(', ', bf(\"Jupiter\",\
    \ \"Neptune\")).PHP_EOL; // Saturn, Uranus\necho implode(', ', bf(\"Earth\", \"\
    Mercury\")).PHP_EOL; // Venus\necho implode(', ', bf(\"Mercury\", \"Uranus\")).PHP_EOL;\
    \ // Venus, Earth, Mars, Jupiter, Saturn\n\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Invalid arguments passed in /tmp/tmpa_0gr4np.php\
    \ on line 19\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpa_0gr4np.php\
    \ on line 20\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpa_0gr4np.php\
    \ on line 21\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_0gr4np.php:28\n\
    Stack trace:\n#0 /tmp/tmpa_0gr4np.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpa_0gr4np.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $data = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  if(!in_array($planet1, $data)\
    \ || !in_array($planet2, $data)) {\n    return [];\n  }\n  $planet1 = array_search($planet1,\
    \ $data);\n  $planet2 = array_search($planet2, $data);\n  $start = min($planet1,\
    \ $planet2);\n  $end = max($planet1, $planet2);\n  $arr = [];\n  for($i = $start\
    \ + 1; $i < $end; $i++) {\n    $arr[] = $data[$i];\n  }\n  return $arr;\n}\n\n\
    bf(\"Jupiter\", \"Neptune\");\nbf(\"Earth\", \"Mercury\");\nbf(\"Mercury\", \"\
    Uranus\");\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $orbit = [];\n  $orbit1 = array_search($planet1,\
    \ $planets);\n  $orbit2 = array_search($planet2, $planets);\n  if ($orbit1 ===\
    \ false || $orbit2 === false) {\n    return [];\n  }\n  if ($orbit1 < $orbit2)\
    \ {\n    for ($i = $orbit1 + 1; $i < $orbit2; $i++) {\n      $orbit[] = $planets[$i];\n\
    \    }\n  } else {\n    for ($i = $orbit2 + 1; $i < $orbit1; $i++) {\n      $orbit[]\
    \ = $planets[$i];\n    }\n  }\n  return $orbit;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\n\t\t\"Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\"\
    ,\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\"\
    \n\t];\n\tif (in_array($planet1, $planets) && in_array($planet2, $planets)) {\n\
    \t\t$pos1 = array_search($planet1, $planets);\n\t\t$pos2 = array_search($planet2,\
    \ $planets);\n\t\tif ($pos1 < $pos2) {\n\t\t\t$slice = array_slice($planets, $pos1\
    \ + 1, $pos2 - $pos1 - 1);\n\t\t} else {\n\t\t\t$slice = array_slice($planets,\
    \ $pos2 + 1, $pos1 - $pos2 - 1);\n\t\t}\n\t\treturn $slice;\n\t} else {\n\t\t\
    return [];\n\t}\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjy30s15i.php:49\n\
    Stack trace:\n#0 /tmp/tmpjy30s15i.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpjy30s15i.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$planet1 = array_search($planet1, $planets);\n\
    \t$planet2 = array_search($planet2, $planets);\n\tif($planet1 === false || $planet2\
    \ === false) {\n\t\treturn [];\n\t}\n\tif($planet1 < $planet2) {\n\t\treturn array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n\t}\n\treturn array_reverse(array_slice($planets,\
    \ $planet2 + 1, $planet1 - $planet2 - 1));\n}\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg3fny6d1.php:35\n\
    Stack trace:\n#0 /tmp/tmpg3fny6d1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpg3fny6d1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\n    'Mercury', 'Venus', 'Earth', 'Mars',\n    'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'\n  ];\n  $position1 = array_search($planet1, $planets);\n\
    \  $position2 = array_search($planet2, $planets);\n  if ($position1 === false\
    \ || $position2 === false) {\n    return [];\n  }\n  $index1 = min($position1,\
    \ $position2);\n  $index2 = max($position1, $position2);\n  $result = [];\n  for\
    \ ($i = $index1 + 1; $i < $index2; $i++) {\n    $result[] = $planets[$i];\n  }\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\n        \"Mercury\",\n        \"Venus\"\
    ,\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\"\n    );\n    $planetsL = array_flip($planets);\n\
    \    if(!isset($planetsL[$planet1]) || !isset($planetsL[$planet2]))\n        return\
    \ array();\n    $p1 = $planetsL[$planet1];\n    $p2 = $planetsL[$planet2];\n \
    \   if($p1 > $p2) {\n        $t = $p1;\n        $p1 = $p2;\n        $p2 = $t;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxymerui.php:47\n\
    Stack trace:\n#0 /tmp/tmpvxymerui.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpvxymerui.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$number1 = array_search($planet1, $planets);\n\
    \t$number2 = array_search($planet2, $planets);\n\tif ($number1 === false || $number2\
    \ === false) {\n\t\treturn [];\n\t} elseif ($number1 > $number2) {\n\t\treturn\
    \ array_reverse(array_slice($planets, $number2 + 1, $number1 - $number2 - 1));\n\
    \t} else {\n\t\treturn array_slice($planets, $number1 + 1, $number2 - $number1\
    \ - 1);\n\t}\n}\n\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\nvar_dump(bf(\"Earth\"\
    , \"Mercury\"));\nvar_dump(bf(\"Mercury\", \"Uranus\"));\nvar_dump(bf(\"Mercury\"\
    , \"Mercury\"));\nvar_dump(bf(\"Mercury\", \"Earth\"));\nvar_dump(bf(\"Earth\"\
    , \"Earth\"));\nvar_dump(bf(\"Earth\", \"Uranus\"));\nvar_dump(bf(\"Uranus\",\
    \ \"Earth\"));\nvar_dump(bf(\"Uranus\", \"Uranus\"));\nvar_dump(bf(\"Uranus\"\
    , \"Neptune\"));\nvar_dump(bf(\"Neptune\", \"Uranus\"));\nvar_dump(bf(\"Neptune\"\
    , \"Neptune\"));\nvar_dump(bf(\"Mars\", \"Mars\"));\nvar_dump(bf(\"Mars\", \"\
    Earth\"));\nvar_dump(bf(\"Earth\", \"Mars\"));\nvar_dump(bf(\"Saturn\", \"Mars\"\
    ));\nvar_dump(bf(\"Mars\", \"Saturn\"));\nvar_dump(bf(\"Saturn\", \"Neptune\"\
    ));\nvar_dump(bf(\"Neptune\", \"Saturn\"));\nvar_dump(bf(\"Venus\", \"Jupiter\"\
    ));\nvar_dump(bf(\"Jupiter\", \"Venus\"));\nvar_dump(bf(\"Venus\", \"Venus\"));\n\
    var_dump(\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjgfghtkp.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $planet1 = array_search($planet1,\
    \ $planets);\n  $planet2 = array_search($planet2, $planets);\n  if ($planet1 ===\
    \ false || $planet2 === false) {\n    return array();\n  }\n  if ($planet1 < $planet2)\
    \ {\n    $min = $planet1;\n    $max = $planet2;\n  } else {\n    $min = $planet2;\n\
    \    $max = $planet1;\n  }\n  $result = array();\n  for ($i = $min+1; $i < $max;\
    \ $i++) {\n    $result[] = $planets[$i];\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $arr = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    $index1 = array_search($planet1,\
    \ $arr);\n    $index2 = array_search($planet2, $arr);\n    if ($index1 === false\
    \ || $index2 === false) {\n        return [];\n    }\n    $index = $index1 < $index2\
    \ ? $index1 : $index2;\n    $result = [];\n    for ($i = $index + 1; $i < abs($index1\
    \ - $index2); $i++) {\n        $result[] = $arr[$i];\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rd9r27j.php:34\n\
    Stack trace:\n#0 /tmp/tmp9rd9r27j.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp9rd9r27j.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\n        \"Mercury\",\n        \"Venus\",\n  \
    \      \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\"\n    ];\n    $firstIndex = array_search($planet1,\
    \ $planets);\n    $secondIndex = array_search($planet2, $planets);\n    if ($firstIndex\
    \ === false || $secondIndex === false) {\n        return [];\n    }\n    $firstIndex\
    \ = min($firstIndex, $secondIndex);\n    $secondIndex = max($firstIndex, $secondIndex);\n\
    \    $res = [];\n    for ($i = $firstIndex + 1; $i < $secondIndex; $i++) {\n \
    \       $res[] = $planets[$i];\n    }\n    return $res;\n}\necho bf(\"Jupiter\"\
    , \"Neptune\") . \"\\n\";\necho bf(\"Earth\", \"Mercury\") . \"\\n\";\necho bf(\"\
    Mercury\", \"Uranus\") . \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nArray\nArray\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpcw00s41n.php:49\nStack trace:\n#0 /tmp/tmpcw00s41n.php(57): test()\n\
    #1 {main}\n  thrown in /tmp/tmpcw00s41n.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\"\
    ,\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\
    \n  ];\n  $planets1 = array_flip($planets);\n  $planets2 = array_flip($planets);\n\
    \  $between_planets = array_slice($planets, $planets1[$planet1], $planets2[$planet2]);\n\
    \  return $between_planets;\n}\n\nbf(\"Earth\", \"Mars\");\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphc5bvfus.php:38\n\
    Stack trace:\n#0 /tmp/tmphc5bvfus.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphc5bvfus.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    // WRITE YOUR CODE HERE\n    $planets = [\n        'Mercury',\n\
    \        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n   \
    \     'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $from = array_search($planet1,\
    \ $planets);\n    $to = array_search($planet2, $planets);\n    if ($from === false\
    \ || $to === false) {\n        return [];\n    }\n    if ($from > $to) {\n   \
    \     $temp = $from;\n        $from = $to;\n        $to = $temp;\n    }\n    $res\
    \ = [];\n    foreach ($planets as $idx => $planet) {\n        if ($idx > $from\
    \ && $idx < $to) {\n            $res[] = $planet;\n        }\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t$p1 = array_search($planet1,\
    \ $planets);\n\t$p2 = array_search($planet2, $planets);\n\tif ($p1 === false ||\
    \ $p2 === false) {\n\t\treturn array();\n\t}\n\tif ($p1 > $p2) {\n\t\t$max = $p1;\n\
    \t\t$min = $p2;\n\t} else {\n\t\t$max = $p2;\n\t\t$min = $p1;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $min + 1; $i < $max; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1,\
    \ $planets);\n    $index2 = array_search($planet2, $planets);\n    $arr = array();\n\
    \    if ($index1 < $index2) {\n        for ($i = $index1 + 1; $i < $index2; $i++)\
    \ {\n            array_push($arr, $planets[$i]);\n        }\n    } else {\n  \
    \      for ($i = $index2 + 1; $i < $index1; $i++) {\n            array_push($arr,\
    \ $planets[$i]);\n        }\n    }\n    return $arr;\n}\n\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpgtx_6seu.php:44\nStack trace:\n#0 /tmp/tmpgtx_6seu.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgtx_6seu.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\n        \"Mercury\",\n        \"Venus\",\n  \
    \      \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\"\n    ];\n    $position1 = array_search($planet1,\
    \ $planets);\n    $position2 = array_search($planet2, $planets);\n    if ($position1\
    \ === false || $position2 === false) {\n        return [];\n    } else {\n   \
    \     if ($position1 < $position2) {\n            return array_slice($planets,\
    \ $position1 + 1, $position2 - $position1 - 1);\n        } else {\n          \
    \  return array_slice($planets, $position2 + 1, $position1 - $position2 - 1);\n\
    \        }\n    }\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nprint_r(bf(\"Earth\"\
    , \"Uranus\"));\nprint_r(bf(\"Mars\", \"Mars\"));\nprint_r(bf(\"Mercury\", \"\
    Mercury\"));\nprint_r(bf(\"Uranus\", \"Mercury\"));\nprint_r(bf(\"Uranus\", \"\
    Earth\"));\nprint_r(bf(\"Mercury\", \"Earth\"));\nprint_r(bf(\"Earth\", \"Uranus\"\
    ));\nprint_r(bf(\"Uranus\", \"Mars\"));\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\nArray\n(\n    [0] => Mars\n    [1] =>\
    \ Jupiter\n    [2] => Saturn\n)\nArray\n(\n    [0] => Jupiter\n    [1] => Saturn\n\
    \    [2] => Uranus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] =>\
    \ Mars\n    [3] => Jupiter\n    [4] => Saturn\n    [5] => Uranus\n)\nArray\n(\n\
    \    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n   \
    \ [4] => Saturn\n)\nArray\n(\n    [0] => Mars\n    [1] => Jupiter\n    [2] =>\
    \ Saturn\n)\nArray\n(\n    [0] => Venus\n)\nArray\n(\n    [0] => Mars\n    [1]\
    \ => Jupiter\n    [2] => Saturn\n)\nArray\n(\n    [0] => Jupiter\n    [1] => Saturn\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0no71a1_.php:58\n\
    Stack trace:\n#0 /tmp/tmp0no71a1_.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp0no71a1_.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = array(\n    \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  );\n  $pos1 = array_search($planet1,\
    \ $planets);\n  $pos2 = array_search($planet2, $planets);\n  if ($pos1 === false\
    \ || $pos2 === false) return array();\n  $step = ($pos1 < $pos2) ? 1 : -1;\n \
    \ return array_slice($planets, $pos1 + $step, abs($pos1 - $pos2) - 1);\n}\n\n\
    echo \"<pre>bf(\\\"Jupiter\\\", \\\"Neptune\\\")\\r\\n\";\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"</pre>\";\n\necho \"<pre>bf(\\\"Earth\\\", \\\"Mercury\\\
    \")\\r\\n\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\n\necho \"\
    <pre>bf(\\\"Mercury\\\", \\\"Uranus\\\")\\r\\n\";\nprint_r(bf(\"Mercury\", \"\
    Uranus\"));\necho \"</pre>\";\n\necho \"<pre>bf(\\\"Uranus\\\", \\\"Mercury\\\"\
    )\\r\\n\";\nprint_r(bf(\"Uranus\", \"Mercury\"));\necho \"</pre>\";\n\necho \"\
    <pre>bf(\\\"Jupiter\\\", \\\"Sun\\\")\\r\\n\";\nprint_r(bf(\"Jupiter\", \"Sun\"\
    ));\necho \"</pre>\";\n\necho \"<pre>bf(\\\"Jupiter\\\", \\\"Earth\\\")\\r\\n\"\
    ;\nprint_r(bf(\"Jupiter\", \"Earth\"));\necho \"</pre>\";\n\necho \"<pre>bf(\\\
    \"Klingon\\\", \\\"Neptune\\\")\\r\\n\";\nprint_r(bf(\"Klingon\", \"Neptune\"\
    ));\necho \"</pre>\";\n\necho \"<pre>bf(\\\"Mercury\\\", \\\"Klingon\\\")\\r\\\
    n\";\nprint_r(bf(\"Mercury\", \"Klingon\"));\necho \"</pre>\";\n\necho \"<pre>bf\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcksx1_aj.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\n    'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'\n  ];\n  $result = [];\n  $ord1 = array_search($planet1,\
    \ $planets);\n  $ord2 = array_search($planet2, $planets);\n  $start = $ord1 <\
    \ $ord2 ? $ord1 : $ord2;\n  $end = $ord1 < $ord2 ? $ord2 : $ord1;\n  for ($i =\
    \ $start + 1; $i < $end; $i++) {\n    $result[] = $planets[$i];\n  }\n  return\
    \ $result;\n}\n\necho implode(', ', bf('Mercury', 'Uranus'));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Venus, Earth, Mars, Jupiter, Saturn\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpxed2g1ov.php:42\nStack trace:\n#0 /tmp/tmpxed2g1ov.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxed2g1ov.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $n1 = in_array($planet1,\
    \ $planets);\n    $n2 = in_array($planet2, $planets);\n    if ($n1 && $n2) {\n\
    \        $key1 = array_search($planet1, $planets);\n        $key2 = array_search($planet2,\
    \ $planets);\n        if ($key1 < $key2) {\n            for ($i = $key1 + 1; $i\
    \ < $key2; $i++) {\n                $result[] = $planets[$i];\n            }\n\
    \        } else {\n            for ($i = $key2 + 1; $i < $key1; $i++) {\n    \
    \            $result[] = $planets[$i];\n            }\n        }\n        return\
    \ $result;\n    } else {\n        return array();\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7wytdt0.php:45\n\
    Stack trace:\n#0 /tmp/tmpn7wytdt0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpn7wytdt0.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $sort_order = array(\n        \"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    );\n    if ((!in_array($planet1,\
    \ $sort_order)) || (!in_array($planet2, $sort_order))) {\n        return array();\n\
    \    }\n    if (array_search($planet1, $sort_order) < array_search($planet2, $sort_order))\
    \ {\n        return array_slice($sort_order, array_search($planet1, $sort_order)\
    \ + 1, array_search($planet2, $sort_order) - array_search($planet1, $sort_order)\
    \ - 1);\n    } else {\n        return array_slice($sort_order, array_search($planet2,\
    \ $sort_order) + 1, array_search($planet1, $sort_order) - array_search($planet2,\
    \ $sort_order) - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1f1c8fw.php:38\n\
    Stack trace:\n#0 /tmp/tmpi1f1c8fw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpi1f1c8fw.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $newPlanets = [];\n    if(in_array($planet1,\
    \ $planets) && in_array($planet2, $planets)) {\n        $index1 = array_search($planet1,\
    \ $planets);\n        $index2 = array_search($planet2, $planets);\n        if($index1\
    \ > $index2) {\n            for($i = $index2; $i < $index1; $i++) {\n        \
    \        $newPlanets[] = $planets[$i];\n            }\n        } else {\n    \
    \        for($i = $index1; $i < $index2; $i++) {\n                $newPlanets[]\
    \ = $planets[$i];\n            }\n        }\n    }\n    return $newPlanets;\n\
    }\necho \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\";\n\
    echo \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\necho\
    \ \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n\
    )\n</pre><pre>Array\n(\n    [0] => Mercury\n    [1] => Venus\n)\n</pre><pre>Array\n\
    (\n    [0] => Mercury\n    [1] => Venus\n    [2] => Earth\n    [3] => Mars\n \
    \   [4] => Jupiter\n    [5] => Saturn\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxavcag3u.php:47\nStack trace:\n#0 /tmp/tmpxavcag3u.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxavcag3u.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    if (!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) {\n        return [];\n    }\n\n\
    \    $start = array_search($planet1, $planets);\n    $end = array_search($planet2,\
    \ $planets);\n\n    if ($start > $end) {\n        $planets = array_reverse($planets);\n\
    \        $start = array_search($planet1, $planets);\n        $end = array_search($planet2,\
    \ $planets);\n    }\n\n    return array_slice($planets, $start + 1, $end - $start\
    \ - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_ei4kni.php:41\n\
    Stack trace:\n#0 /tmp/tmpr_ei4kni.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpr_ei4kni.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t$i = 0;\n\t$j = 0;\n\t\
    $k = 0;\n\twhile($planets[$i] != $planet1 && $i < count($planets)) {\n\t\t$i++;\n\
    \t}\n\twhile($planets[$j] != $planet2 && $j < count($planets)) {\n\t\t$j++;\n\t\
    }\n\tif ($i == $j || $i > count($planets) || $j > count($planets)) {\n\t\treturn\
    \ array();\n\t}\n\tif ($i > $j) {\n\t\twhile ($j < $i) {\n\t\t\t$result[$k] =\
    \ $planets[$j];\n\t\t\t$j++;\n\t\t\t$k++;\n\t\t}\n\t} else {\n\t\twhile ($i <\
    \ $j) {\n\t\t\t$result[$k] = $planets[$i];\n\t\t\t$i++;\n\t\t\t$k++;\n\t\t}\n\t\
    }\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n)\n\
    Array\n(\n    [0] => Mercury\n    [1] => Venus\n)\nArray\n(\n    [0] => Mercury\n\
    \    [1] => Venus\n    [2] => Earth\n    [3] => Mars\n    [4] => Jupiter\n   \
    \ [5] => Saturn\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4b6ll1f6.php:52\n\
    Stack trace:\n#0 /tmp/tmp4b6ll1f6.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp4b6ll1f6.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\n\t\t\"Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\"\
    ,\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\"\
    \n\t];\n\t$start = array_search($planet1, $planets);\n\t$end = array_search($planet2,\
    \ $planets);\n\tif ($start === false || $end === false) {\n\t\treturn [];\n\t\
    }\n\tif ($start <= $end) {\n\t\treturn array_slice($planets, $start + 1, $end\
    \ - $start - 1);\n\t} else {\n\t\treturn array_reverse(array_slice($planets, $end\
    \ + 1, $start - $end - 1));\n\t}\n}\n\n$ans = bf(\"Jupiter\", \"Neptune\");\n\
    print_r($ans);\necho \"<br>\";\n$ans = bf(\"Earth\", \"Mercury\");\nprint_r($ans);\n\
    echo \"<br>\";\n$ans = bf(\"Mercury\", \"Uranus\");\nprint_r($ans);\necho \"<br>\"\
    ;\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0l8cmydu.php:56\nStack trace:\n#0 /tmp/tmp0l8cmydu.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0l8cmydu.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_v4ttqaq.php:23\n\
    Stack trace:\n#0 /tmp/tmp_v4ttqaq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_v4ttqaq.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $result = [];\n    if (!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) {\n        return $result;\n   \
    \ }\n    $planet1Index = array_search($planet1, $planets);\n    $planet2Index\
    \ = array_search($planet2, $planets);\n    $result = array_slice($planets, min($planet1Index,\
    \ $planet2Index), abs($planet1Index - $planet2Index));\n    return array_values($result);\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho PHP_EOL;\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho PHP_EOL;\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho PHP_EOL;\n\
    print_r(bf(\"Mercury\", \"Mars\"));\necho PHP_EOL;\nprint_r(bf(\"Mars\", \"Jupiter\"\
    ));\necho PHP_EOL;\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n)\n\
    \nArray\n(\n    [0] => Mercury\n    [1] => Venus\n)\n\nArray\n(\n    [0] => Mercury\n\
    \    [1] => Venus\n    [2] => Earth\n    [3] => Mars\n    [4] => Jupiter\n   \
    \ [5] => Saturn\n)\n\nArray\n(\n    [0] => Mercury\n    [1] => Venus\n    [2]\
    \ => Earth\n)\n\nArray\n(\n    [0] => Mars\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3vea3h6d.php:41\nStack trace:\n#0 /tmp/tmp3vea3h6d.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3vea3h6d.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\n        'Mercury',\n        'Venus',\n      \
    \  'Earth',\n        'Mars',\n        'Jupiter',\n        'Saturn',\n        'Uranus',\n\
    \        'Neptune'\n    ];\n    $arr1 = array_search($planet1, $planets);\n  \
    \  $arr2 = array_search($planet2, $planets);\n    if ($arr1 === false || $arr2\
    \ === false) {\n        return [];\n    }\n    return array_slice($planets, $arr1\
    \ + 1, $arr2 - $arr1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveibfwhj.php:40\n\
    Stack trace:\n#0 /tmp/tmpveibfwhj.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpveibfwhj.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\n        'Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\n    ];\n    $index1 = array_search($planet1,\
    \ $planets);\n    $index2 = array_search($planet2, $planets);\n    $sorted = array_unique([$index1,\
    \ $index2]);\n    sort($sorted);\n    $result = array_slice($planets, $sorted[0]\
    \ + 1, $sorted[1] - $sorted[0] - 1);\n    return $result;\n}\necho implode(',\
    \ ', bf('Jupiter', 'Neptune'));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Saturn, Uranus\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdda38pe9.php:36\n\
    Stack trace:\n#0 /tmp/tmpdda38pe9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdda38pe9.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\tif (!in_array($planet1, $planets) ||\
    \ !in_array($planet2, $planets)) {\n\t\treturn [];\n\t}\n\n\t$start = array_search($planet1,\
    \ $planets);\n\t$end = array_search($planet2, $planets);\n\n\tif ($start > $end)\
    \ {\n\t\t$buffer = $start;\n\t\t$start = $end;\n\t\t$end = $buffer;\n\t}\n\n\t\
    $between = [];\n\tfor ($i = $start + 1; $i < $end; $i++) {\n\t\t$between[] = $planets[$i];\n\
    \t}\n\n\treturn $between;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $first = array_search($planet1,\
    \ $planets);\n    $second = array_search($planet2, $planets);\n    $length = abs($first\
    \ - $second);\n    $planet_names = array();\n    if($first < $second) {\n    \
    \    for($i = $first; $i < $second; $i++) {\n            array_push($planet_names,\
    \ $planets[$i + 1]);\n        }\n    } else {\n        for($i = $first; $i > $second;\
    \ $i--) {\n            array_push($planet_names, $planets[$i - 1]);\n        }\n\
    \    }\n    return $planet_names;\n}\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpegrbgnu3.php:37\n\
    Stack trace:\n#0 /tmp/tmpegrbgnu3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpegrbgnu3.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $firstPlanet = 0;\n\
    \    $secondPlanet = 0;\n    for ($i = 0; $i < count($planets); $i++) {\n    \
    \    if ($planets[$i] == $planet1) {\n            $firstPlanet = $i;\n       \
    \ }\n        if ($planets[$i] == $planet2) {\n            $secondPlanet = $i;\n\
    \        }\n    }\n    if ($firstPlanet == 0 || $secondPlanet == 0) {\n      \
    \  return array();\n    }\n    $tuple = array();\n    if ($firstPlanet < $secondPlanet)\
    \ {\n        for ($i = $firstPlanet + 1; $i < $secondPlanet; $i++) {\n       \
    \     array_push($tuple, $planets[$i]);\n        }\n    } else {\n        for\
    \ ($i = $secondPlanet + 1; $i < $firstPlanet; $i++) {\n            array_push($tuple,\
    \ $planets[$i]);\n        }\n    }\n    return $tuple;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9f4e38q.php:49\n\
    Stack trace:\n#0 /tmp/tmph9f4e38q.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph9f4e38q.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$p1 = array_search($planet1, $planets);\n\
    \t$p2 = array_search($planet2, $planets);\n\tif ($p1 === false || $p2 === false)\
    \ {\n\t\treturn [];\n\t}\n\tif ($p1 < $p2) {\n\t\treturn array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n\t} else {\n\t\treturn array_slice($planets, $p2 +\
    \ 1, $p1 - $p2 - 1);\n\t}\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6pupbakb.php:38\n\
    Stack trace:\n#0 /tmp/tmp6pupbakb.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6pupbakb.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $orbits = array(\n    \"Mercury\" => 1,\n    \"Venus\" => 2,\n\
    \    \"Earth\" => 3,\n    \"Mars\" => 4,\n    \"Jupiter\" => 5,\n    \"Saturn\"\
    \ => 6,\n    \"Uranus\" => 7,\n    \"Neptune\" => 8\n  );\n  $planets = array_flip($orbits);\n\
    \  if (isset($orbits[$planet1]) && isset($orbits[$planet2])) {\n    if ($orbits[$planet1]\
    \ > $orbits[$planet2]) {\n      $planet1 = $orbits[$planet1];\n      $planet2\
    \ = $orbits[$planet2];\n      $between = array_slice($planets, $planet2 + 1, $planet1\
    \ - $planet2 - 1);\n    } else {\n      $planet1 = $orbits[$planet1];\n      $planet2\
    \ = $orbits[$planet2];\n      $between = array_slice($planets, $planet1 + 1, $planet2\
    \ - $planet1 - 1);\n    }\n    return $between;\n  } else {\n    return array();\n\
    \  }\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Uranus\n    [1] => Neptune\n)\n<br>Array\n(\n    [0]\
    \ => Earth\n)\n<br>Array\n(\n    [0] => Earth\n    [1] => Mars\n    [2] => Jupiter\n\
    \    [3] => Saturn\n    [4] => Uranus\n)\n<br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_fb03kuv.php:53\nStack trace:\n#0 /tmp/tmp_fb03kuv.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_fb03kuv.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$solar_system = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$planet1_position = array_search($planet1,\
    \ $solar_system);\n\t$planet2_position = array_search($planet2, $solar_system);\n\
    \tif (is_int($planet1_position) && is_int($planet2_position)) {\n\t\tif ($planet1_position\
    \ < $planet2_position) {\n\t\t\treturn array_slice($solar_system, $planet1_position\
    \ + 1, $planet2_position - $planet1_position - 1);\n\t\t} else {\n\t\t\treturn\
    \ array_slice($solar_system, $planet2_position + 1, $planet1_position - $planet2_position\
    \ - 1);\n\t\t}\n\t} else {\n\t\treturn [];\n\t}\n}\necho json_encode(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"<br>\";\necho json_encode(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\necho json_encode(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\"\
    ;\necho json_encode(bf(\"Jupiter\", \"Pluto\"));\necho \"<br>\";\necho json_encode(bf(\"\
    Pluto\", \"Jupiter\"));\necho \"<br>\";\necho json_encode(bf(\"Pluto\", \"Pluto\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "[\"Saturn\",\"Uranus\"]<br>[\"Venus\"]<br>[\"Venus\",\"Earth\",\"Mars\"\
    ,\"Jupiter\",\"Saturn\"]<br>[]<br>[]<br>[]\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpm5l5szxb.php:49\nStack trace:\n#0 /tmp/tmpm5l5szxb.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpm5l5szxb.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$pos1 = array_search($planet1, $planets);\n\
    \t$pos2 = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 ===\
    \ false) {\n\t\treturn [];\n\t}\n\treturn array_slice($planets, min($pos1, $pos2)\
    \ + 1, max($pos1, $pos2) - min($pos1, $pos2) - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgv_6m_mc.php:34\n\
    Stack trace:\n#0 /tmp/tmpgv_6m_mc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgv_6m_mc.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if(!in_array($planet1, $planets)\
    \ || !in_array($planet2, $planets)) {\n        return [];\n    }\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    $planets = array_slice($planets, min($planet1, $planet2) + 1, max($planet1,\
    \ $planet2) - min($planet1, $planet2) - 1);\n    return $planets;\n}\necho var_dump(bf(\"\
    Jupiter\", \"Neptune\"));\necho var_dump(bf(\"Earth\", \"Mercury\"));\necho var_dump(bf(\"\
    Mercury\", \"Uranus\"));\necho var_dump(bf(\"Saturn\", \"Uranus\"));\necho var_dump(bf(\"\
    earth\", \"Mercury\"));\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n  [0]=>\n  string(5)\
    \ \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n \
    \ [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\narray(0)\
    \ {\n}\narray(0) {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpyb9yco.php:40\n\
    Stack trace:\n#0 /tmp/tmpvpyb9yco.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvpyb9yco.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $arr = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n  $return = [];\n  $first = array_search($planet1, $arr);\n\
    \  $second = array_search($planet2, $arr);\n  if ($first === false || $second\
    \ === false) {\n    return [];\n  }\n  if ($first < $second) {\n    for ($i =\
    \ $first + 1; $i < $second; $i++) {\n      $return[] = $arr[$i];\n    }\n  } else\
    \ {\n    for ($i = $second + 1; $i < $first; $i++) {\n      $return[] = $arr[$i];\n\
    \    }\n  }\n  return $return;\n}\n\necho implode(', ', bf('Mercury', 'Uranus'));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Venus, Earth, Mars, Jupiter, Saturn
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" ];\n  $pos1 = array_search($planet1,\
    \ $planets);\n  $pos2 = array_search($planet2, $planets);\n  if ($pos1 !== false\
    \ && $pos2 !== false) {\n    $sort = $pos1 > $pos2;\n    $min = $sort ? $pos2\
    \ : $pos1;\n    $max = $sort ? $pos1 : $pos2;\n    return array_slice($planets,\
    \ $min + 1, $max - $min - 1);\n  }\n  return [];\n}\n\n$planets = [ \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ ];\nforeach ($planets as $p1) {\n  foreach ($planets as $p2) {\n    echo \"\
    $p1 - $p2 = \" . implode(\", \", bf($p1, $p2)) . \"\\n\";\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Mercury - Mercury = Venus, Earth, Mars, Jupiter, Saturn, Uranus\nMercury\
    \ - Venus = \nMercury - Earth = Venus\nMercury - Mars = Venus, Earth\nMercury\
    \ - Jupiter = Venus, Earth, Mars\nMercury - Saturn = Venus, Earth, Mars, Jupiter\n\
    Mercury - Uranus = Venus, Earth, Mars, Jupiter, Saturn\nMercury - Neptune = Venus,\
    \ Earth, Mars, Jupiter, Saturn, Uranus\nVenus - Mercury = \nVenus - Venus = Earth,\
    \ Mars, Jupiter, Saturn, Uranus\nVenus - Earth = \nVenus - Mars = Earth\nVenus\
    \ - Jupiter = Earth, Mars\nVenus - Saturn = Earth, Mars, Jupiter\nVenus - Uranus\
    \ = Earth, Mars, Jupiter, Saturn\nVenus - Neptune = Earth, Mars, Jupiter, Saturn,\
    \ Uranus\nEarth - Mercury = Venus\nEarth - Venus = \nEarth - Earth = Mars, Jupiter,\
    \ Saturn, Uranus\nEarth - Mars = \nEarth - Jupiter = Mars\nEarth - Saturn = Mars,\
    \ Jupiter\nEarth - Uranus = Mars, Jupiter, Saturn\nEarth - Neptune = Mars, Jupiter,\
    \ Saturn, Uranus\nMars - Mercury = Venus, Earth\nMars - Venus = Earth\nMars -\
    \ Earth = \nMars - Mars = Jupiter, Saturn, Uranus\nMars - Jupiter = \nMars - Saturn\
    \ = Jupiter\nMars - Uranus = Jupiter, Saturn\nMars - Neptune = Jupiter, Saturn,\
    \ Uranus\nJupiter - Mercury = Venus, Earth, Mars\nJupiter - Venus = Earth, Mars\n\
    Jupiter - Earth = Mars\nJupiter - Mars = \nJupiter - Jupiter = Saturn, Uranus\n\
    Jupiter - Saturn = \nJupiter - Uranus = Saturn\nJupiter - Neptune = Saturn, Uranus\n\
    Saturn - Mercury = Venus, Earth, Mars, Jupiter\nSaturn - Venus = Earth, Mars,\
    \ Jupiter\nSaturn - Earth = Mars, Jupiter\nSaturn - Mars = Jupiter\nSaturn - Jupiter\
    \ = \nSaturn - Saturn = Uranus\nSaturn - Uranus = \nSaturn - Neptune = Uranus\n\
    Uranus - Mercury = Venus, Earth, Mars, Jupiter, Saturn\nUranus - Venus = Earth,\
    \ Mars, Jupiter, Saturn\nUranus - Earth = Mars, Jupiter, Saturn\nUranus - Mars\
    \ = Jupiter, Saturn\nUranus - Jupiter = Saturn\nUranus - Saturn = \nUranus - Uranus\
    \ = \nUranus - Neptune = \nNeptune - Mercury = Venus, Earth, Mars, Jupiter, Saturn,\
    \ Uranus\nNeptune - Venus = Earth, Mars, Jupiter, Saturn, Uranus\nNeptune - Earth\
    \ = Mars, Jupiter, Saturn, Uranus\nNeptune - Mars = Jupiter, Saturn, Uranus\n\
    Neptune - Jupiter = Saturn, Uranus\nNeptune "
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$left = 0;\n\t$right = 0;\n\t$res =\
    \ [];\n\tfor ($i = 0; $i < count($planets); $i++) {\n\t\tif ($planets[$i] == $planet1)\
    \ {\n\t\t\t$left = $i;\n\t\t}\n\t\tif ($planets[$i] == $planet2) {\n\t\t\t$right\
    \ = $i;\n\t\t}\n\t}\n\tif ($left > $right) {\n\t\tfor ($i = $right + 1; $i < $left;\
    \ $i++) {\n\t\t\t$res[] = $planets[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $left\
    \ + 1; $i < $right; $i++) {\n\t\t\t$res[] = $planets[$i];\n\t\t}\n\t}\n\treturn\
    \ $res;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynzyj299.php:50\n\
    Stack trace:\n#0 /tmp/tmpynzyj299.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpynzyj299.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $planets_arr = [];\n  for ($i=0; $i\
    \ < count($planets); $i++) { \n    $planets_arr[$planets[$i]] = $i;\n  }\n  if\
    \ (!array_key_exists($planet1, $planets_arr) || !array_key_exists($planet2, $planets_arr))\
    \ return [];\n  $first = $planets_arr[$planet1];\n  $second = $planets_arr[$planet2];\n\
    \  if ($first <= $second) {\n    return array_slice($planets, $first+1, $second-$first-1);\n\
    \  } else {\n    return array_slice($planets, $second+1, $first-$second-1);\n\
    \  }\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqcdmbojz.php:39\n\
    Stack trace:\n#0 /tmp/tmpqcdmbojz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqcdmbojz.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  \n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzpr8w5eu.php:23\n\
    Stack trace:\n#0 /tmp/tmpzpr8w5eu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzpr8w5eu.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $index1 = array_search($planet1, $order);\n\
    \  $index2 = array_search($planet2, $order);\n  $index = abs($index1 - $index2);\n\
    \  if ($index1 < $index2) {\n    return array_slice($order, $index1 + 1, $index\
    \ - 1);\n  } else {\n    return array_slice($order, $index2 + 1, $index - 1);\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_g706pp.php:36\n\
    Stack trace:\n#0 /tmp/tmp5_g706pp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5_g706pp.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$all_planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t$orbit1 = array_search($planet1,\
    \ $all_planets);\n\t$orbit2 = array_search($planet2, $all_planets);\n\t$planets\
    \ = array();\n\tif ($orbit1 != FALSE && $orbit2 != FALSE) {\n\t\tif ($orbit1 >\
    \ $orbit2) {\n\t\t\t$tmp = $orbit1;\n\t\t\t$orbit1 = $orbit2;\n\t\t\t$orbit2 =\
    \ $tmp;\n\t\t}\n\t\tfor ($i = $orbit1 + 1; $i < $orbit2; $i++) {\n\t\t\t$planets[]\
    \ = $all_planets[$i];\n\t\t}\n\t}\n\treturn $planets;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8t45eu5n.php:39\n\
    Stack trace:\n#0 /tmp/tmp8t45eu5n.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp8t45eu5n.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    // write your code here\n    $planets = [\"Mercury\",\"Venus\"\
    ,\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"];\n    $firstIndex\
    \ = array_search($planet1, $planets);\n    $secondIndex = array_search($planet2,\
    \ $planets);\n    $result = [];\n    if($firstIndex === false || $secondIndex\
    \ === false){\n        return $result;\n    }\n    if($firstIndex < $secondIndex){\n\
    \        for($i = $firstIndex + 1; $i < $secondIndex; $i++){\n            $result[]\
    \ = $planets[$i];\n        }\n    } else {\n        for($i = $secondIndex + 1;\
    \ $i < $firstIndex; $i++){\n            $result[] = $planets[$i];\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $result = array();\n    $planets = array(\n        'Mercury',\n\
    \        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n   \
    \     'Saturn',\n        'Uranus',\n        'Neptune',\n    );\n    $startPlanet\
    \ = array_search($planet1, $planets);\n    $endPlanet = array_search($planet2,\
    \ $planets);\n    if ($startPlanet !== false && $endPlanet !== false) {\n    \
    \    if ($startPlanet < $endPlanet) {\n            $result = array_slice($planets,\
    \ $startPlanet + 1, $endPlanet - $startPlanet - 1);\n        } else {\n      \
    \      $result = array_slice($planets, $endPlanet + 1, $startPlanet - $endPlanet\
    \ - 1);\n        }\n    }\n    return $result;\n}\n\necho '<pre>';\nprint_r(bf('Jupiter',\
    \ 'Neptune'));\necho '</pre>';\n\necho '<pre>';\nprint_r(bf('Earth', 'Mercury'));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(bf('Mercury', 'Uranus'));\necho '</pre>';\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp964c_vup.php:59\nStack trace:\n\
    #0 /tmp/tmp964c_vup.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp964c_vup.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $planet1_index = array_search($planet1,\
    \ $planets);\n    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ === false || $planet2_index === false) {\n        return [];\n    }\n    if\
    \ ($planet1_index < $planet2_index) {\n        return array_slice($planets, $planet1_index\
    \ + 1, $planet2_index - $planet1_index - 1);\n    } else {\n        return array_slice($planets,\
    \ $planet2_index + 1, $planet1_index - $planet2_index - 1);\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb0pzk1tq.php:38\n\
    Stack trace:\n#0 /tmp/tmpb0pzk1tq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpb0pzk1tq.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1,\
    \ $planets);\n    $index2 = array_search($planet2, $planets);\n    $result = array();\n\
    \    if ($index1 === FALSE || $index2 === FALSE) {\n        return $result;\n\
    \    } else {\n        if ($index1 < $index2) {\n            $min = $index1;\n\
    \            $max = $index2;\n        } else {\n            $min = $index2;\n\
    \            $max = $index1;\n        }\n        for ($i = $min + 1; $i < $max;\
    \ $i++) {\n            $result[] = $planets[$i];\n        }\n        return $result;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\n        \"Mercury\",\n        \"Venus\"\
    ,\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\"\n    );\n    $start = array_search($planet1,\
    \ $planets);\n    $end = array_search($planet2, $planets);\n    if ($start ===\
    \ false || $end === false) {\n        return array();\n    }\n    if ($start >\
    \ $end) {\n        $result = array_slice($planets, $end, $start - $end + 1);\n\
    \    } else {\n        $result = array_slice($planets, $start, $end - $start +\
    \ 1);\n    }\n    return $result;\n}\n$planet1 = \"Earth\";\n$planet2 = \"Mars\"\
    ;\nprint_r(bf($planet1, $planet2));\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Earth\n    [1] => Mars\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0m8cn54d.php:46\nStack trace:\n#0 /tmp/tmp0m8cn54d.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0m8cn54d.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $first = array_search($planet1,\
    \ $planets);\n    $second = array_search($planet2, $planets);\n    if ($first\
    \ === false || $second === false) {\n        return [];\n    }\n    if ($first\
    \ <= $second) {\n        return array_slice($planets, $first + 1, $second - $first\
    \ - 1);\n    } else {\n        return array_slice($planets, $second + 1, $first\
    \ - $second - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq6gm9ox.php:38\n\
    Stack trace:\n#0 /tmp/tmpkq6gm9ox.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpkq6gm9ox.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune');\n\t$start = array_search($planet1, $planets);\n\
    \t$end = array_search($planet2, $planets);\n\tif ($start !== false && $end !==\
    \ false) {\n\t\tif ($start < $end) {\n\t\t\treturn array_slice($planets, $start\
    \ + 1, $end - $start - 1);\n\t\t} else {\n\t\t\treturn array_slice($planets, $end\
    \ + 1, $start - $end - 1);\n\t\t}\n\t} else {\n\t\treturn array();\n\t}\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"\\n\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"\\n\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"\\n\";\nprint_r(bf(\"\
    Mars\", \"Earth\"));\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nArray\n(\n    [0]\
    \ => Venus\n)\n\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n\nArray\n(\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpzc3dyidh.php:46\nStack trace:\n#0 /tmp/tmpzc3dyidh.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzc3dyidh.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\n      \"Mercury\",\n      \"Venus\",\n      \"\
    Earth\",\n      \"Mars\",\n      \"Jupiter\",\n      \"Saturn\",\n      \"Uranus\"\
    ,\n      \"Neptune\"\n    ];\n    if (!in_array($planet1, $planets) || !in_array($planet2,\
    \ $planets)) {\n      return [];\n    }\n    $index1 = array_search($planet1,\
    \ $planets);\n    $index2 = array_search($planet2, $planets);\n    $lower = min($index1,\
    \ $index2);\n    $upper = max($index1, $index2);\n    return array_slice($planets,\
    \ $lower + 1, $upper - $lower - 1);\n}\n\nfunction candidate(...$args) {\n   \
    \ return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0vd2070.php:45\n\
    Stack trace:\n#0 /tmp/tmpv0vd2070.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpv0vd2070.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    \n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgdlzyau8.php:24\n\
    Stack trace:\n#0 /tmp/tmpgdlzyau8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgdlzyau8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$planet1Index = array_search($planet1,\
    \ $planets);\n\t$planet2Index = array_search($planet2, $planets);\n\t$betweenPlanets\
    \ = [];\n\tif ($planet1Index === false || $planet2Index === false) {\n\t\treturn\
    \ [];\n\t}\n\tif ($planet1Index < $planet2Index) {\n\t\t$startIndex = $planet1Index;\n\
    \t\t$endIndex = $planet2Index;\n\t} else {\n\t\t$startIndex = $planet2Index;\n\
    \t\t$endIndex = $planet1Index;\n\t}\n\tfor ($i = $startIndex + 1; $i < $endIndex;\
    \ $i++) {\n\t\t$betweenPlanets[] = $planets[$i];\n\t}\n\treturn $betweenPlanets;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  if(!in_array($planet1, $planets) ||\
    \ !in_array($planet2, $planets)) {\n    return array();\n  }\n  $first_planet_index\
    \ = array_search($planet1, $planets);\n  $second_planet_index = array_search($planet2,\
    \ $planets);\n  if($first_planet_index < $second_planet_index) {\n    return array_slice($planets,\
    \ $first_planet_index + 1, $second_planet_index - $first_planet_index - 1);\n\
    \  } else {\n    return array_slice($planets, $second_planet_index + 1, $first_planet_index\
    \ - $second_planet_index - 1);\n  }\n}\n\nfunction candidate(...$args) {\n   \
    \ return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ovt3bo4.php:38\n\
    Stack trace:\n#0 /tmp/tmp7ovt3bo4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7ovt3bo4.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzt34et4f.php:24\n\
    Stack trace:\n#0 /tmp/tmpzt34et4f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzt34et4f.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    if (in_array($planet1,\
    \ $planets) && in_array($planet2, $planets)) {\n        $start_at = array_search($planet1,\
    \ $planets);\n        $stop_at = array_search($planet2, $planets);\n        if\
    \ ($start_at > $stop_at) {\n            $temp = $start_at;\n            $start_at\
    \ = $stop_at;\n            $stop_at = $temp;\n        }\n        $result = array();\n\
    \        for ($i = $start_at + 1; $i < $stop_at; $i++) {\n            $result[]\
    \ = $planets[$i];\n        }\n        return $result;\n    } else {\n        return\
    \ array();\n    }\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nprint_r(bf(\"Mercury\"\
    , \"Mars\"));\nprint_r(bf(\"Venus\", \"Earth\"));\nprint_r(bf(\"Uranus\", \"Mercury\"\
    ));\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\nArray\n(\n    [0] => Venus\n    [1] =>\
    \ Earth\n)\nArray\n(\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2]\
    \ => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$res = [];\n\tif(in_array($planet1, [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]) && in_array($planet2,\
    \ [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"])){\n\t\t$arr = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t\t$index1 = array_search($planet1,\
    \ $arr);\n\t\t$index2 = array_search($planet2, $arr);\n\t\tfor($i = $index1; $i\
    \ <= $index2; $i++){\n\t\t\t$res[] = $arr[$i];\n\t\t}\n\t}\n\treturn $res;\n}\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_k_gnsim.php:32\n\
    Stack trace:\n#0 /tmp/tmp_k_gnsim.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_k_gnsim.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array(\n\t\t\"Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\"\
    ,\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\"\
    \n\t);\n\t$reversedPlanets = array_reverse($planets);\n\tif(in_array($planet1,\
    \ $planets) && in_array($planet2, $planets)) {\n\t\tif($planet1 == $planet2) {\n\
    \t\t\treturn array();\n\t\t}\n\t\tif(array_search($planet1, $planets) > array_search($planet2,\
    \ $planets)) {\n\t\t\t$temp = $planet1;\n\t\t\t$planet1 = $planet2;\n\t\t\t$planet2\
    \ = $temp;\n\t\t}\n\t\t$result = array();\n\t\t$isFirst = false;\n\t\t$isLast\
    \ = false;\n\t\tforeach($planets as $planet) {\n\t\t\tif($planet == $planet1)\
    \ {\n\t\t\t\t$isFirst = true;\n\t\t\t}\n\t\t\tif($planet == $planet2) {\n\t\t\t\
    \t$isLast = true;\n\t\t\t}\n\t\t\tif($isFirst && !$isLast) {\n\t\t\t\t$result[]\
    \ = $planet;\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\treturn array();\n}\n\
    $bf1 = bf(\"Jupiter\", \"Neptune\");\necho \"bf1<br>\";\nprint_r($bf1);\necho\
    \ \"<br>\";\n$bf2 = bf(\"Earth\", \"Mercury\");\necho \"bf2<br>\";\nprint_r($bf2);\n\
    echo \"<br>\";\n$bf3 = bf(\"Mercury\", \"Uranus\");\necho \"bf3<br>\";\nprint_r($bf3);\n\
    echo \"<br>\";\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "bf1<br>Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n\
    )\n<br>bf2<br>Array\n(\n    [0] => Mercury\n    [1] => Venus\n)\n<br>bf3<br>Array\n\
    (\n    [0] => Mercury\n    [1] => Venus\n    [2] => Earth\n    [3] => Mars\n \
    \   [4] => Jupiter\n    [5] => Saturn\n)\n<br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpw3r825us.php:72\nStack trace:\n#0 /tmp/tmpw3r825us.php(81):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw3r825us.php on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet = array(\n        \"Mercury\",\n        \"Venus\",\n\
    \        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\",\n    );\n    if(in_array($planet1,\
    \ $planet) && in_array($planet2, $planet)) {\n        $start = array_search($planet1,\
    \ $planet);\n        $end = array_search($planet2, $planet);\n        if($start\
    \ < $end) {\n            $result = array_slice($planet, $start+1, $end-$start-1);\n\
    \        } else {\n            $result = array_slice($planet, $end+1, $start-$end-1);\n\
    \        }\n        return $result;\n    } else {\n        return array();\n \
    \   }\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrq1ecwi.php:49\n\
    Stack trace:\n#0 /tmp/tmptrq1ecwi.php(54): test()\n#1 {main}\n  thrown in /tmp/tmptrq1ecwi.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if(!in_array($planet1, $planets)\
    \ || !in_array($planet2, $planets)){\n        return [];\n    }\n\n    $idx1 =\
    \ array_search($planet1, $planets);\n    $idx2 = array_search($planet2, $planets);\n\
    \    $min = min($idx1, $idx2);\n    $max = max($idx1, $idx2);\n    $res = [];\n\
    \    for($i = $min + 1; $i < $max; $i++){\n        $res[] = $planets[$i];\n  \
    \  }\n    return $res;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $startIndex = array_search($planet1,\
    \ $planets);\n    $endIndex = array_search($planet2, $planets);\n    if ($startIndex\
    \ === false || $endIndex === false) {\n        return [];\n    }\n    if ($startIndex\
    \ > $endIndex) {\n        [$startIndex, $endIndex] = [$endIndex, $startIndex];\n\
    \    }\n    $result = [];\n    for ($i = $startIndex + 1; $i < $endIndex; $i++)\
    \ {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array(\n\t\t'Mercury',\n\t\t'Venus',\n\t\t'Earth',\n\
    \t\t'Mars',\n\t\t'Jupiter',\n\t\t'Saturn',\n\t\t'Uranus',\n\t\t'Neptune'\n\t);\n\
    \tif(!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n\t\treturn\
    \ array();\n\t}\n\t$key1 = array_search($planet1, $planets);\n\t$key2 = array_search($planet2,\
    \ $planets);\n\tif($key1 > $key2) {\n\t\t$temp = $key1;\n\t\t$key1 = $key2;\n\t\
    \t$key2 = $temp;\n\t}\n\treturn array_slice($planets, $key1 + 1, $key2 - $key1\
    \ - 1);\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmprc24ub2j.php:48\nStack trace:\n#0 /tmp/tmprc24ub2j.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprc24ub2j.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $range = array_slice($planets,\
    \ array_search($planet1, $planets) + 1, array_search($planet2, $planets) - array_search($planet1,\
    \ $planets) - 1);\n    sort($range);\n    return $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5c2r3vj4.php:28\n\
    Stack trace:\n#0 /tmp/tmp5c2r3vj4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5c2r3vj4.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1pos = array_search($planet1,\
    \ $planets);\n    $planet2pos = array_search($planet2, $planets);\n    $temp =\
    \ array();\n    if ($planet1pos === false || $planet2pos === false) {\n      \
    \  return $temp;\n    } else {\n        if ($planet1pos < $planet2pos) {\n   \
    \         for ($i = $planet1pos + 1; $i < $planet2pos; $i++) {\n             \
    \   array_push($temp, $planets[$i]);\n            }\n        } else {\n      \
    \      for ($i = $planet2pos + 1; $i < $planet1pos; $i++) {\n                array_push($temp,\
    \ $planets[$i]);\n            }\n        }\n        return $temp;\n    }\n}\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t$first = array_search($planet1,\
    \ $planets);\n\t$second = array_search($planet2, $planets);\n\t$sortedPlanets\
    \ = [];\n\tif ($first !== false && $second !== false) {\n\t\tif ($first < $second)\
    \ {\n\t\t\t$sortedPlanets = array_slice($planets, $first + 1, $second - $first\
    \ - 1);\n\t\t} else {\n\t\t\t$sortedPlanets = array_slice($planets, $second +\
    \ 1, $first - $second - 1);\n\t\t}\n\t}\n\treturn $sortedPlanets;\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjmhgd1f.php:38\n\
    Stack trace:\n#0 /tmp/tmpyjmhgd1f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyjmhgd1f.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    \n    $planets = [\n        \"Mercury\",\n        \"Venus\"\
    ,\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\"\n    ];\n    \n    $before = function($planet1,\
    \ $planet2) use ($planets) {\n        return (array_search($planet1, $planets)\
    \ < array_search($planet2, $planets));\n    };\n    \n    $trim = function($planet)\
    \ use ($planets) {\n        if (array_search($planet, $planets) !== false) {\n\
    \            return $planet;\n        }\n    };\n    \n    $planet1 = $trim($planet1);\n\
    \    $planet2 = $trim($planet2);\n    \n    if ($planet1 && $planet2) {\n    \
    \    if ($before($planet1, $planet2)) {\n            return array_slice($planets,\
    \ array_search($planet1, $planets)+1, array_search($planet2, $planets)-array_search($planet1,\
    \ $planets)-1);\n        } else {\n            return array_slice($planets, array_search($planet2,\
    \ $planets)+1, array_search($planet1, $planets)-array_search($planet2, $planets)-1);\n\
    \        }\n    } else {\n        return [];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0jvjq49.php:60\n\
    Stack trace:\n#0 /tmp/tmpr0jvjq49.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpr0jvjq49.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $solar_system = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if(!in_array($planet1,\
    \ $solar_system) || !in_array($planet2, $solar_system)) return [];\n    $start\
    \ = array_search($planet1, $solar_system);\n    $end = array_search($planet2,\
    \ $solar_system);\n    if($start > $end) {\n        $start = $start ^ $end;\n\
    \        $end = $start ^ $end;\n        $start = $start ^ $end;\n    }\n    return\
    \ array_slice($solar_system, $start + 1, $end - $start - 1);\n}\n\necho \"<pre>bf(\\\
    \"Jupiter\\\", \\\"Neptune\\\")\\r\\n\";\nvar_dump(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"</pre>\";\n\necho \"<pre>bf(\\\"Earth\\\", \\\"Mercury\\\")\\r\\n\"\
    ;\nvar_dump(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\n\necho \"<pre>bf(\\\
    \"Mercury\\\", \\\"Uranus\\\")\\r\\n\";\nvar_dump(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"</pre>\";\n\necho \"<pre>bf(\\\"Jupiter\\\", \\\"Earth\\\")\\r\\n\";\n\
    var_dump(bf(\"Jupiter\", \"Earth\"));\necho \"</pre>\";\n\necho \"<pre>bf(\\\"\
    Earth\\\", \\\"Mars\\\")\\r\\n\";\nvar_dump(bf(\"Earth\", \"Mars\"));\necho \"\
    </pre>\";\n\necho \"<pre>bf(\\\"Pluto\\\", \\\"Jupiter\\\")\\r\\n\";\nvar_dump(bf(\"\
    Pluto\", \"Jupiter\"));\necho \"</pre>\";\n\necho \"<pre>bf(\\\"Saturn\\\", \\\
    \"Neptune\\\")\\r\\n\";\nvar_dump(bf(\"Saturn\", \"Neptune\"));\necho \"</pre>\"\
    ;\n\necho \"<pre>bf(\\\"Pluto\\\", \\\"Mercury\\\")\\r\\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpum077lu_.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $planet1_index = array_search($planet1,\
    \ $planets);\n  $planet2_index = array_search($planet2, $planets);\n  if ($planet1_index\
    \ === false || $planet2_index === false) return [];\n  if ($planet1_index < $planet2_index)\
    \ {\n    return array_slice($planets, $planet1_index + 1, $planet2_index - $planet1_index\
    \ - 1);\n  } else {\n    return array_slice($planets, $planet2_index + 1, $planet1_index\
    \ - $planet2_index - 1);\n  }\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_k1sj7mu.php:35\n\
    Stack trace:\n#0 /tmp/tmp_k1sj7mu.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_k1sj7mu.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$answer = array();\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $first_index = -1;\n\t$second_index = -1;\n\tfor ($i = 0; $i < count($planets);\
    \ $i++) {\n\t\tif ($planets[$i] == $planet1) {\n\t\t\t$first_index = $i;\n\t\t\
    }\n\t\tif ($planets[$i] == $planet2) {\n\t\t\t$second_index = $i;\n\t\t}\n\t}\n\
    \tif ($first_index < 0 || $second_index < 0) {\n\t\treturn $answer;\n\t}\n\tif\
    \ ($first_index < $second_index) {\n\t\tfor ($i = $first_index + 1; $i < $second_index;\
    \ $i++) {\n\t\t\tarray_push($answer, $planets[$i]);\n\t\t}\n\t} else {\n\t\tfor\
    \ ($i = $second_index + 1; $i < $first_index; $i++) {\n\t\t\tarray_push($answer,\
    \ $planets[$i]);\n\t\t}\n\t}\n\treturn $answer;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $res = [];\n    $planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) return [];\n    $index1 = array_search($planet1,\
    \ $planets);\n    $index2 = array_search($planet2, $planets);\n    if ($index1\
    \ > $index2) [$index1, $index2] = [$index2, $index1];\n    for ($i = $index1+1;\
    \ $i < $index2; $i++) {\n        $res[] = $planets[$i];\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\"\
    ,\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\
    \n  ];\n  $first = \"\";\n  $second = \"\";\n  $result = [];\n  if(!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) {\n    return $result;\n  }\n  if($planet1\
    \ != $planet2) {\n    for($i = 0; $i < sizeof($planets); $i++) {\n      if($planets[$i]\
    \ == $planet1) {\n        $first = $i;\n      }\n      if($planets[$i] == $planet2)\
    \ {\n        $second = $i;\n      }\n    }\n    if($first < $second) {\n     \
    \ for($i = $first + 1; $i < $second; $i++) {\n        array_push($result, $planets[$i]);\n\
    \      }\n    } else {\n      for($i = $second + 1; $i < $first; $i++) {\n   \
    \     array_push($result, $planets[$i]);\n      }\n    }\n  }\n  return $result;\n\
    }\n$test = bf(\"Earth\", \"Mercury\");\nfor($i = 0; $i < sizeof($test); $i++)\
    \ {\n  echo $test[$i] . \"<br>\";\n}\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: Venus<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $arr = [\n        'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'\n    ];\n    $res = [];\n    $start = $arr[0];\n\
    \    $end = $arr[count($arr) - 1];\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        if ($arr[$i] == $planet1) {\n            $start = $i;\n        }\n  \
    \      if ($arr[$i] == $planet2) {\n            $end = $i;\n        }\n    }\n\
    \    if ($start > $end) {\n        $temp = $start;\n        $start = $end;\n \
    \       $end = $temp;\n    }\n    for ($i = $start + 1; $i < $end; $i++) {\n \
    \       $res[] = $arr[$i];\n    }\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpvkopva0a.php on line\
    \ 35\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkopva0a.php:51\n\
    Stack trace:\n#0 /tmp/tmpvkopva0a.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpvkopva0a.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planets1 = array();\n\
    \    $planets2 = array();\n    for ($i = 0; $i < 8; $i++) {\n        if (strtolower($planet1)\
    \ == strtolower($planets[$i])) {\n            $planets1 = array_slice($planets,\
    \ $i+1);\n        }\n        if (strtolower($planet2) == strtolower($planets[$i]))\
    \ {\n            $planets2 = array_slice($planets, 0, $i);\n        }\n    }\n\
    \    $merged = array_merge($planets1, $planets2);\n    return ($merged);\n}\n\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdzeeg1gk.php:36\n\
    Stack trace:\n#0 /tmp/tmpdzeeg1gk.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdzeeg1gk.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    \n    $planets = [\n        \"Mercury\",\n        \"Venus\"\
    ,\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\"\n    ];\n    \n    $first = array_search($planet1,\
    \ $planets);\n    $second = array_search($planet2, $planets);\n    \n    if ($first\
    \ === false || $second === false) {\n        return [];\n    }\n    \n    if ($first\
    \ > $second) {\n        $temp = $first;\n        $first = $second;\n        $second\
    \ = $temp;\n    }\n    \n    return array_slice($planets, $first + 1, $second\
    \ - $first - 1);\n}\n\n/*\n    ---- TESTE ----\n*/\n\nassert(bf(\"Jupiter\", \"\
    Neptune\") == [\"Saturn\", \"Uranus\"]);\nassert(bf(\"Earth\", \"Mercury\") ==\
    \ [\"Venus\"]);\nassert(bf(\"Mercury\", \"Uranus\") == [\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\nassert(bf(\"Jupiter\", \"Uranus\") ==\
    \ [\"Saturn\"]);\nassert(bf(\"Earth\", \"Mars\") == []);\nassert(bf(\"\", \"\"\
    ) == []);\nassert(bf(\"\", \"Jupiter\") == []);\nassert(bf(\"Earth\", \"\") ==\
    \ []);\nassert(bf(\"Earth\", \"Mars\", \"\") == []);\nassert(bf(\"Jupiter\", \"\
    Uranus\", \"Neptune\") == [\"Saturn\"]);\nassert(bf(\"Earth\", \"Venus\", \"Mars\"\
    ) == []);\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxu1yfnmn.php:69\n\
    Stack trace:\n#0 /tmp/tmpxu1yfnmn.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpxu1yfnmn.php\
    \ on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $solarSystem = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $planet1Index = array_search($planet1,\
    \ $solarSystem);\n  $planet2Index = array_search($planet2, $solarSystem);\n  $planetsBetween\
    \ = array();\n  for ($i = $planet1Index; $i <= $planet2Index; $i++) {\n    $planetsBetween[]\
    \ = $solarSystem[$i];\n  }\n  return $planetsBetween;\n}\n\n$test1 = bf(\"Jupiter\"\
    , \"Neptune\");\necho $test1[0] == \"Saturn\" ? \"Pass\" : \"Fail\";\necho \"\\\
    n\";\necho $test1[1] == \"Uranus\" ? \"Pass\" : \"Fail\";\necho \"\\n\";\n\n$test2\
    \ = bf(\"Earth\", \"Mercury\");\necho $test2[0] == \"Venus\" ? \"Pass\" : \"Fail\"\
    ;\necho \"\\n\";\n\n$test3 = bf(\"Mercury\", \"Uranus\");\necho $test3[0] == \"\
    Venus\" ? \"Pass\" : \"Fail\";\necho \"\\n\";\necho $test3[1] == \"Earth\" ? \"\
    Pass\" : \"Fail\";\necho \"\\n\";\necho $test3[2] == \"Mars\" ? \"Pass\" : \"\
    Fail\";\necho \"\\n\";\necho $test3[3] == \"Jupiter\" ? \"Pass\" : \"Fail\";\n\
    echo \"\\n\";\necho $test3[4] == \"Saturn\" ? \"Pass\" : \"Fail\";\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Fail\nFail\nFail\nFail\nFail\nFail\nFail\nFail\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsk86fie1.php:52\nStack trace:\n#0 /tmp/tmpsk86fie1.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsk86fie1.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\n\t\t\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n\t];\n\tif (array_search($planet1,\
    \ $planets) === false or array_search($planet2, $planets) === false) {\n\t\treturn\
    \ [];\n\t}\n\t$res = [];\n\t$first = min(array_search($planet1, $planets), array_search($planet2,\
    \ $planets));\n\t$second = max(array_search($planet1, $planets), array_search($planet2,\
    \ $planets));\n\tfor ($i = $first + 1; $i < $second; $i++) {\n\t\t$res[] = $planets[$i];\n\
    \t}\n\treturn $res;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\n        'Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\n    ];\n    $planet1_index = array_search($planet1,\
    \ $planets);\n    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ === false || $planet2_index === false) return [];\n    if ($planet1_index <\
    \ $planet2_index) return array_slice($planets, $planet1_index + 1, $planet2_index\
    \ - $planet1_index - 1);\n    else return array_slice($planets, $planet2_index\
    \ + 1, $planet1_index - $planet2_index - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt51tryq8.php:35\n\
    Stack trace:\n#0 /tmp/tmpt51tryq8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpt51tryq8.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $planet1_index = array_search($planet1,\
    \ $planets);\n    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ === false || $planet2_index === false) {\n        return [];\n    }\n    if\
    \ ($planet1_index < $planet2_index) {\n        return array_slice($planets, $planet1_index\
    \ + 1, $planet2_index - $planet1_index - 1);\n    } else {\n        return array_slice($planets,\
    \ $planet2_index + 1, $planet1_index - $planet2_index - 1);\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6o0u7s9q.php:38\n\
    Stack trace:\n#0 /tmp/tmp6o0u7s9q.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6o0u7s9q.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n$p = [];\n$p1 = array_search($planet1,\
    \ $planets);\n$p2 = array_search($planet2, $planets);\n\nif ($p1 !== false &&\
    \ $p2 !== false) {\n  if ($p1 < $p2) {\n    for ($i = $p1 + 1; $i < $p2; $i++)\
    \ {\n      $p[] = $planets[$i];\n    }\n  } else {\n    for ($i = $p2 + 1; $i\
    \ < $p1; $i++) {\n      $p[] = $planets[$i];\n    }\n  }\n  return $p;\n} else\
    \ {\n  return $p;\n}\n\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\tif (!is_string($planet1) || !is_string($planet2)) {\n\t\treturn\
    \ NULL;\n\t}\n\t$planets = array(\n\t\t1 => \"Mercury\",\n\t\t2 => \"Venus\",\n\
    \t\t3 => \"Earth\",\n\t\t4 => \"Mars\",\n\t\t5 => \"Jupiter\",\n\t\t6 => \"Saturn\"\
    ,\n\t\t7 => \"Uranus\",\n\t\t8 => \"Neptune\"\n\t);\n\t$planetsFlipped = array_flip($planets);\n\
    \t$planet1 = $planetsFlipped[$planet1];\n\t$planet2 = $planetsFlipped[$planet2];\n\
    \tif (!$planet1 || !$planet2) {\n\t\treturn NULL;\n\t}\n\t$result = array();\n\
    \t$min = min($planet1, $planet2);\n\t$max = max($planet1, $planet2);\n\tif ($min\
    \ + 1 >= $max) {\n\t\treturn NULL;\n\t}\n\tfor ($i = $min + 1; $i < $max; $i++)\
    \ {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n}\necho \"<pre>bf(\\\
    \"Jupiter\\\", \\\"Neptune\\\")\\r\\n\";\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"</pre>\";\necho \"<pre>bf(\\\"Earth\\\", \\\"Mercury\\\")\\r\\n\"\
    ;\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\necho \"<pre>bf(\\\"\
    Mercury\\\", \\\"Uranus\\\")\\r\\n\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>bf(\"Jupiter\", \"Neptune\")\nArray\n(\n    [0] => Saturn\n    [1]\
    \ => Uranus\n)\n</pre><pre>bf(\"Earth\", \"Mercury\")\nArray\n(\n    [0] => Venus\n\
    )\n</pre><pre>bf(\"Mercury\", \"Uranus\")\nArray\n(\n    [0] => Venus\n    [1]\
    \ => Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp0uecpue1.php:64\nStack\
    \ trace:\n#0 /tmp/tmp0uecpue1.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp0uecpue1.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $orbit = [\n    'Mercury' => 1,\n    'Venus' => 2,\n    'Earth'\
    \ => 3,\n    'Mars' => 4,\n    'Jupiter' => 5,\n    'Saturn' => 6,\n    'Uranus'\
    \ => 7,\n    'Neptune' => 8\n  ];\n  $result = [];\n  if (isset($orbit[$planet1])\
    \ && isset($orbit[$planet2])) {\n    $planet1_position = $orbit[$planet1];\n \
    \   $planet2_position = $orbit[$planet2];\n    if ($planet1_position < $planet2_position)\
    \ {\n      for ($i = $planet1_position + 1; $i < $planet2_position; $i++) {\n\
    \        $result[] = array_search($i, $orbit);\n      }\n    } else {\n      for\
    \ ($i = $planet2_position + 1; $i < $planet1_position; $i++) {\n        $result[]\
    \ = array_search($i, $orbit);\n      }\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $first = array_search($planet1,\
    \ $planets);\n  $second = array_search($planet2, $planets);\n  if ($first ===\
    \ false || $second === false || $first > $second) {\n    return array();\n  }\n\
    \  return array_slice($planets, $first + 1, $second - $first - 1);\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpwgc68i4j.php:31\nStack trace:\n#0 /tmp/tmpwgc68i4j.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwgc68i4j.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $a = [\n        'Mercury',\n        'Venus',\n        'Earth',\n\
    \        'Mars',\n        'Jupiter',\n        'Saturn',\n        'Uranus',\n \
    \       'Neptune'\n    ];\n    $i1 = array_search($planet1, $a);\n    $i2 = array_search($planet2,\
    \ $a);\n    if ($i1 === false || $i2 === false) {\n        return [];\n    }\n\
    \    if ($i1 < $i2) {\n        return array_slice($a, $i1 + 1, $i2 - $i1 - 1);\n\
    \    } else {\n        return array_slice($a, $i2 + 1, $i1 - $i2 - 1);\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdos7vt39.php:47\n\
    Stack trace:\n#0 /tmp/tmpdos7vt39.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpdos7vt39.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if (is_numeric($p1)\
    \ && is_numeric($p2)) {\n        $beg = min($p1, $p2);\n        $end = max($p1,\
    \ $p2);\n        $planets = array_slice($planets, $beg + 1, $end - $beg - 1);\n\
    \        return $planets;\n    }\n    return [];\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3cg7drqw.php:37\n\
    Stack trace:\n#0 /tmp/tmp3cg7drqw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3cg7drqw.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $firstIndex = array_search($planet1,\
    \ $planets);\n  $secondIndex = array_search($planet2, $planets);\n  if($firstIndex\
    \ === false || $secondIndex === false) {\n    return [];\n  }\n  $sliced = array_slice($planets,\
    \ $firstIndex + 1, $secondIndex - $firstIndex - 1);\n  return $sliced;\n}\necho\
    \ '<pre>';\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\nvar_dump(bf(\"Earth\", \"\
    Mercury\"));\nvar_dump(bf(\"Mercury\", \"Uranus\"));\nvar_dump(bf(\"Uranus\",\
    \ \"Mercury\"));\necho '</pre>';\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "<pre>array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6)\
    \ \"Uranus\"\n}\narray(2) {\n  [0]=>\n  string(4) \"Mars\"\n  [1]=>\n  string(7)\
    \ \"Jupiter\"\n}\narray(5) {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5)\
    \ \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n\
    \  [4]=>\n  string(6) \"Saturn\"\n}\narray(0) {\n}\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpyh298ule.php:37\nStack trace:\n#0 /tmp/tmpyh298ule.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyh298ule.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $firstPlanet = array_search($planet1,\
    \ $planets);\n    $secondPlanet = array_search($planet2, $planets);\n    if ($firstPlanet\
    \ === false || $secondPlanet === false) {\n        return [];\n    } elseif ($firstPlanet\
    \ > $secondPlanet) {\n        $newPlanets = array_reverse($planets);\n       \
    \ return array_slice($newPlanets, $secondPlanet, $firstPlanet - $secondPlanet);\n\
    \    } else {\n        return array_slice($planets, $firstPlanet, $secondPlanet\
    \ - $firstPlanet);\n    }\n}\necho implode(\", \", bf(\"Jupiter\", \"Neptune\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Jupiter, Saturn, Uranus\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9ga4t11_.php:34\nStack trace:\n#0 /tmp/tmp9ga4t11_.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9ga4t11_.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$p1 = array_search($planet1, $planets);\n\
    \t$p2 = array_search($planet2, $planets);\n\tif(($p1 === false) || ($p2 === false))\
    \ {\n\t\treturn [];\n\t}\n\t$min = min($p1, $p2);\n\t$max = max($p1, $p2);\n\t\
    return array_slice($planets, $min + 1, $max - $min - 1);\n}\n\nassert([\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"], bf(\"Mercury\", \"Uranus\"));\n\
    assert([\"Venus\"], bf(\"Earth\", \"Mercury\"));\nassert([\"Saturn\", \"Uranus\"\
    ], bf(\"Jupiter\", \"Neptune\"));\nassert([], bf(\"Neptune\", \"Pluto\"));\nassert([],\
    \ bf(\"Pluto\", \"Neptune\"));\nassert([], bf(\"Moon\", \"Earth\"));\nassert([],\
    \ bf(\"Earth\", \"Moon\"));\nassert([], bf(\"Jupiter\", \"Uranus\"));\nassert([],\
    \ bf(\"Uranus\", \"Jupiter\"));\nassert([], bf(\"\", \"\"));\nassert([], bf(\"\
    Neptune\", \"Neptune\"));\nassert([], bf(\"Mercury\", \"Mercury\"));\nassert([],\
    \ bf(\"Mercury\", \"\"));\nassert([], bf(\"\", \"Mercury\"));\nassert([], bf(\"\
    \", \"Venus\"));\nassert([], bf(\"Earth\", \"\"));\nassert([], bf(\"Mars\", \"\
    Earth\"));\nassert([], bf(\"Mars\", \"Jupiter\"));\nassert([], bf(\"Uranus\",\
    \ \"Mars\"));\nassert([], bf(\"Neptune\", \"Uranus\"));\nassert([], bf(\"Neptune\"\
    , \"Mars\"));\nassert([], bf(\"Neptune\", \"\"));\necho \"Done!\";\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): Array failed in /tmp/tmp591ebnhw.php on line 30\n\n\
    Warning: assert(): Array failed in /tmp/tmp591ebnhw.php on line 31\n\nWarning:\
    \ assert(): Array failed in /tmp/tmp591ebnhw.php on line 32\n\nWarning: assert():\
    \ Array failed in /tmp/tmp591ebnhw.php on line 33\n\nWarning: assert(): Array\
    \ failed in /tmp/tmp591ebnhw.php on line 34\n\nWarning: assert(): Array failed\
    \ in /tmp/tmp591ebnhw.php on line 35\n\nWarning: assert(): Array failed in /tmp/tmp591ebnhw.php\
    \ on line 36\n\nWarning: assert(): Array failed in /tmp/tmp591ebnhw.php on line\
    \ 37\n\nWarning: assert(): Array failed in /tmp/tmp591ebnhw.php on line 38\n\n\
    Warning: assert(): Array failed in /tmp/tmp591ebnhw.php on line 39\n\nWarning:\
    \ assert(): Array failed in /tmp/tmp591ebnhw.php on line 40\n\nWarning: assert():\
    \ Array failed in /tmp/tmp591ebnhw.php on line 41\n\nWarning: assert(): Array\
    \ failed in /tmp/tmp591ebnhw.php on line 42\n\nWarning: assert(): Array failed\
    \ in /tmp/tmp591ebnhw.php on line 43\n\nWarning: assert(): Array failed in /tmp/tmp591ebnhw.php\
    \ on line 44\n\nWarning: assert(): Array failed in /tmp/tmp591ebnhw.php on line\
    \ 45\n\nWarning: assert(): Array failed in /tmp/tmp591ebnhw.php on line 46\n\n\
    Warning: assert(): Array failed in /tmp/tmp591ebnhw.php on line 47\n\nWarning:\
    \ assert(): Array failed in /tmp/tmp591ebnhw.php on line 48\nDone!\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp591ebnhw.php:59\nStack trace:\n\
    #0 /tmp/tmp591ebnhw.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp591ebnhw.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune');\n\t$sol = array_search($planet1, $planets);\n\
    \t$soln = array_search($planet2, $planets);\n\tif ($sol === false || $soln ===\
    \ false) {\n\t\treturn array();\n\t}\n\t$str = \"\";\n\tif ($sol < $soln) {\n\t\
    \tfor ($i = $sol + 1; $i < $soln; $i++) {\n\t\t\t$str .= '\"' . $planets[$i] .\
    \ '\", ';\n\t\t}\n\t} else {\n\t\tfor ($i = $soln + 1; $i < $sol; $i++) {\n\t\t\
    \t$str .= '\"' . $planets[$i] . '\", ';\n\t\t}\n\t}\n\treturn \"(\" . substr($str,\
    \ 0, -2) . \")\";\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpshlc384i.php:39\n\
    Stack trace:\n#0 /tmp/tmpshlc384i.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpshlc384i.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t$planets_in_orbit = array();\n\
    \t$p1_index = array_search($planet1, $planets);\n\t$p2_index = array_search($planet2,\
    \ $planets);\n\tif ($p1_index === false || $p2_index === false) {\n\t\treturn\
    \ $planets_in_orbit;\n\t}\n\tif ($p1_index > $p2_index) {\n\t\t$temp = $p1_index;\n\
    \t\t$p1_index = $p2_index;\n\t\t$p2_index = $temp;\n\t}\n\t\n\tfor ($i = $p1_index\
    \ + 1; $i < $p2_index; $i++) {\n\t\t$planets_in_orbit[] = $planets[$i];\n\t}\n\
    \treturn $planets_in_orbit;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $planetsResult = [];\n \
    \   $planetsFirstIndex = 0;\n    $planetsSecondIndex = 0;\n    for ($i = 0; $i\
    \ < count($planets); $i++) {\n        if ($planets[$i] == $planet1) {\n      \
    \      $planetsFirstIndex = $i;\n        }\n        if ($planets[$i] == $planet2)\
    \ {\n            $planetsSecondIndex = $i;\n        }\n    }\n    if ($planetsFirstIndex\
    \ > $planetsSecondIndex) {\n        list($planetsFirstIndex, $planetsSecondIndex)\
    \ = [$planetsSecondIndex, $planetsFirstIndex];\n    }\n    for ($i = $planetsFirstIndex\
    \ + 1; $i < $planetsSecondIndex; $i++) {\n        $planetsResult[] = $planets[$i];\n\
    \    }\n    return $planetsResult;\n}\n\necho \"<pre>bf(\\\"Jupiter\\\", \\\"\
    Neptune\\\")\\r\\n\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\"\
    ;\n\necho \"<pre>bf(\\\"Earth\\\", \\\"Mercury\\\")\\r\\n\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"</pre>\";\n\necho \"<pre>bf(\\\"Mercury\\\", \\\"Uranus\\\
    \")\\r\\n\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>bf(\"Jupiter\", \"Neptune\")\nArray\n(\n    [0] => Saturn\n    [1]\
    \ => Uranus\n)\n</pre><pre>bf(\"Earth\", \"Mercury\")\nArray\n(\n    [0] => Venus\n\
    )\n</pre><pre>bf(\"Mercury\", \"Uranus\")\nArray\n(\n    [0] => Venus\n    [1]\
    \ => Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpw9les1kh.php:59\nStack\
    \ trace:\n#0 /tmp/tmpw9les1kh.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpw9les1kh.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $first = array_search($planet1,\
    \ $planets);\n    $second = array_search($planet2, $planets);\n    $res = [];\n\
    \    if ($first > $second) {\n        for ($i = $second + 1; $i < $first; $i++)\
    \ {\n            $res[] = $planets[$i];\n        }\n    } else {\n        for\
    \ ($i = $first + 1; $i < $second; $i++) {\n            $res[] = $planets[$i];\n\
    \        }\n    }\n    return $res;\n}\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpjaev07v9.php:43\nStack trace:\n#0 /tmp/tmpjaev07v9.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpjaev07v9.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    if(in_array($planet1,\
    \ $planets) && in_array($planet2, $planets)){\n        $firstPlanet = array_search($planet1,\
    \ $planets);\n        $secondPlanet = array_search($planet2, $planets);\n    \
    \    if($firstPlanet > $secondPlanet){\n            $slice = array_slice($planets,\
    \ $secondPlanet, $firstPlanet-$secondPlanet);\n        }else{\n            $slice\
    \ = array_slice($planets, $firstPlanet, $secondPlanet-$firstPlanet);\n       \
    \ }\n        return $slice;\n    }else{\n        return array();\n    }\n}\n\n\
    $fruits = [\"Banana\", \"Apple\", \"Orange\", \"Blueberry\"];\n$slice = array_slice($fruits,\
    \ 1, -1);\nvar_dump($slice);\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "array(2) {\n  [0]=>\n  string(5) \"Apple\"\n  [1]=>\n  string(6) \"Orange\"\
    \n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_rwjkl2d.php:40\n\
    Stack trace:\n#0 /tmp/tmp_rwjkl2d.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_rwjkl2d.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $orbitPlanet = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $result = [];\n    $mid\
    \ = [];\n    $first = array_search($planet1, $orbitPlanet);\n    $second = array_search($planet2,\
    \ $orbitPlanet);\n    if ($first === false || $second === false) {\n        return\
    \ [];\n    }\n    if ($first < $second) {\n        for ($i = $first + 1; $i <\
    \ $second; $i++) {\n            $result[] = $orbitPlanet[$i];\n        }\n   \
    \ } else {\n        for ($i = $second + 1; $i < $first; $i++) {\n            $mid[]\
    \ = $orbitPlanet[$i];\n        }\n        $result = array_reverse($mid);\n   \
    \ }\n    return $result;\n}\n\nprint_r(bf(\"Earth\", \"Mars\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphv5qt1q2.php:46\n\
    Stack trace:\n#0 /tmp/tmphv5qt1q2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmphv5qt1q2.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $res = array();\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  if (!in_array($planet1, $planets) || !in_array($planet2, $planets))\n     \
    \   return $res;\n    $planet1Index = array_search($planet1, $planets);\n    $planet2Index\
    \ = array_search($planet2, $planets);\n    $start = $planet1Index + 1;\n    $end\
    \ = $planet2Index - 1;\n    if ($planet1Index > $planet2Index) {\n        $start\
    \ = $planet2Index + 1;\n        $end = $planet1Index - 1;\n    }\n    for ($i\
    \ = $start; $i <= $end; $i++) {\n        $res[] = $planets[$i];\n    }\n    return\
    \ $res;\n}\n\n$a = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n\necho \"First element: \" . $a[0] .\
    \ \"\\n\";\necho \"Third element: \" . $a[2] . \"\\n\";\necho \"Fourth element:\
    \ \" . $a[3] . \"\\n\";\necho \"Last element: \" . $a[7] . \"\\n\";\n\necho bf(\"\
    Jupiter\", \"Neptune\") . \" - \" . \"Saturn, Uranus\\n\";\necho bf(\"Earth\"\
    , \"Mercury\") . \" - \" . \"Venus\\n\";\necho bf(\"Mercury\", \"Uranus\") . \"\
    \ - \" . \"Venus, Earth, Mars, Jupiter, Saturn\\n\";\n\necho \"Mercury: \" . array_search(\"\
    Mercury\", $a) . \"\\n\";\necho \"Venus: \" . array_search(\"Venus\", $a) . \"\
    \\n\";\necho \"Earth: \" . array_search(\"Earth\", $a) . \"\\n\";\necho \"Mars:\
    \ \" . array_search(\"Mars\", $a) . \"\\n\";\necho \"Jupiter: \" . array_search(\"\
    Jupiter\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1hb8q37j.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $ind1 = array_search($planet1,\
    \ $planets);\n    $ind2 = array_search($planet2, $planets);\n    if ($ind1 ===\
    \ false || $ind2 === false) {\n        return [];\n    }\n    $res = [];\n   \
    \ if ($ind1 < $ind2) {\n        for ($i = $ind1+1; $i < $ind2; $i++) {\n     \
    \       $res[] = $planets[$i];\n        }\n    } else {\n        for ($i = $ind2+1;\
    \ $i < $ind1; $i++) {\n            $res[] = $planets[$i];\n        }\n    }\n\
    \    return $res;\n}\necho \"<pre>bf(\\\"Jupiter\\\", \\\"Neptune\\\")\\r\\n\"\
    ;\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\";\necho \"<pre>bf(\\\
    \"Earth\\\", \\\"Mercury\\\")\\r\\n\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"</pre>\";\necho \"<pre>bf(\\\"Mercury\\\", \\\"Uranus\\\")\\r\\n\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>bf(\"Jupiter\", \"Neptune\")\nArray\n(\n    [0] => Saturn\n    [1]\
    \ => Uranus\n)\n</pre><pre>bf(\"Earth\", \"Mercury\")\nArray\n(\n    [0] => Venus\n\
    )\n</pre><pre>bf(\"Mercury\", \"Uranus\")\nArray\n(\n    [0] => Venus\n    [1]\
    \ => Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$inner_planets = array(\n\t\t\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\"\n\t);\n\t$outer_planets = array(\n\t\t\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n\t);\n\tif ($planet1 == $planet2) return array();\n\t$start = false;\n\
    \t$temp = [];\n\tif (in_array($planet1, $inner_planets) && in_array($planet2,\
    \ $inner_planets)) {\n\t\tfor ($i = array_search($planet1, $inner_planets); $i\
    \ < array_search($planet2, $inner_planets); $i++) {\n\t\t\tarray_push($temp, $inner_planets[$i]);\n\
    \t\t}\n\t} else if (in_array($planet1, $outer_planets) && in_array($planet2, $outer_planets))\
    \ {\n\t\tfor ($i = array_search($planet1, $outer_planets); $i < array_search($planet2,\
    \ $outer_planets); $i++) {\n\t\t\tarray_push($temp, $outer_planets[$i]);\n\t\t\
    }\n\t} else if (in_array($planet1, $inner_planets) && in_array($planet2, $outer_planets))\
    \ {\n\t\tfor ($i = array_search($planet1, $inner_planets); $i < count($inner_planets);\
    \ $i++) {\n\t\t\tarray_push($temp, $inner_planets[$i]);\n\t\t}\n\t\tfor ($i =\
    \ 0; $i < array_search($planet2, $outer_planets); $i++) {\n\t\t\tarray_push($temp,\
    \ $outer_planets[$i]);\n\t\t}\n\t} else if (in_array($planet1, $outer_planets)\
    \ && in_array($planet2, $inner_planets)) {\n\t\tfor ($i = array_search($planet1,\
    \ $outer_planets); $i < count($outer_planets); $i++) {\n\t\t\tarray_push($temp,\
    \ $outer_planets[$i\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpopzs0ax2.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $pos1 = array_search($planet1,\
    \ $planets);\n    $pos2 = array_search($planet2, $planets);\n    if ($pos1 ==\
    \ false || $pos2 == false) return [];\n    $position = ($pos1 < $pos2) ? $pos1\
    \ : $pos2;\n    $limit = ($pos1 < $pos2) ? $pos2 : $pos1;\n    return array_slice($planets,\
    \ $position+1, $limit-$position-1);\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\n\
    print_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n)\nArray\n\
    (\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujhns7mx.php:33\n\
    Stack trace:\n#0 /tmp/tmpujhns7mx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpujhns7mx.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $orbit = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    $pos1 = 0;\n    $pos2 = 0;\n    $result\
    \ = [];\n    for ($i = 0; $i < count($orbit); $i++) {\n        if ($orbit[$i]\
    \ == $planet1) $pos1 = $i;\n        if ($orbit[$i] == $planet2) $pos2 = $i;\n\
    \    }\n    if ($pos1 >= $pos2) return [];\n    for ($i = $pos1 + 1; $i < $pos2;\
    \ $i++) $result[] = $orbit[$i];\n    return $result;\n}\n\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n)\nArray\n\
    (\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n \
    \   [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz73je0l7.php:39\n\
    Stack trace:\n#0 /tmp/tmpz73je0l7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpz73je0l7.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune');\n    $planets1 = array();\n    $planets2 = array();\n\
    \    $planets3 = array();\n    foreach ($planets as $key => $value) {\n      \
    \  if ($planet1 == $value) {\n            $planets1 = array_slice($planets, $key);\n\
    \        }\n        if ($planet2 == $value) {\n            $planets2 = array_slice($planets,\
    \ 0, $key + 1);\n        }\n    }\n    foreach ($planets1 as $key => $value) {\n\
    \        if ($value != $planet2) {\n            array_push($planets3, $value);\n\
    \        }\n    }\n    foreach ($planets2 as $key => $value) {\n        if ($value\
    \ != $planet1) {\n            array_push($planets3, $value);\n        }\n    }\n\
    \    return $planets3;\n}\necho '<pre>';\nprint_r(bf('Mercury', 'Uranus'));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Mercury\n    [1] => Venus\n    [2] => Earth\n\
    \    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n    [6] => Neptune\n\
    \    [7] => Venus\n    [8] => Earth\n    [9] => Mars\n    [10] => Jupiter\n  \
    \  [11] => Saturn\n    [12] => Uranus\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5vlb7kvx.php:48\nStack trace:\n#0 /tmp/tmp5vlb7kvx.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5vlb7kvx.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\n        'Mercury',\n        'Venus',\n      \
    \  'Earth',\n        'Mars',\n        'Jupiter',\n        'Saturn',\n        'Uranus',\n\
    \        'Neptune'\n    ];\n    if (!in_array($planet1, $planets) || !in_array($planet2,\
    \ $planets)) {\n        return [];\n    }\n    $planets = array_flip($planets);\n\
    \    $p1Pos = $planets[$planet1];\n    $p2Pos = $planets[$planet2];\n    if ($p1Pos\
    \ > $p2Pos) {\n        return [];\n    }\n    $result = [];\n    for ($i = $p1Pos\
    \ + 1; $i < $p2Pos; $i++) {\n        $result[] = array_search($i, $planets);\n\
    \    }\n    return $result;\n}\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpmd2wzkqw.php:48\nStack trace:\n#0 /tmp/tmpmd2wzkqw.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmd2wzkqw.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$solarSystem = array(\n\t\t'Mercury',\n\t\t'Venus',\n\t\t'Earth',\n\
    \t\t'Mars',\n\t\t'Jupiter',\n\t\t'Saturn',\n\t\t'Uranus',\n\t\t'Neptune'\n\t);\n\
    \t$start = array_search($planet1, $solarSystem);\n\t$end = array_search($planet2,\
    \ $solarSystem);\n\tif ($start === false || $end === false) {\n\t\treturn array();\n\
    \t}\n\tif ($start > $end) {\n\t\t$end = array_search($planet1, $solarSystem);\n\
    \t\t$start = array_search($planet2, $solarSystem);\n\t}\n\treturn array_slice($solarSystem,\
    \ $start+1, $end-$start-1);\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp770a5fs0.php:47\nStack trace:\n#0 /tmp/tmp770a5fs0.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp770a5fs0.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n   $order = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n   $res = array();\n   $keys1\
    \ = array_search($planet1, $order);\n   $keys2 = array_search($planet2, $order);\n\
    \   if($keys1==false || $keys2==false) return $res;\n   if($keys1<$keys2){\n \
    \     $res = array_slice($order, $keys1+1, $keys2-$keys1-1);\n   }\n   else{\n\
    \      $res = array_slice($order, $keys2+1, $keys1-$keys2-1);\n   }\n   return\
    \ $res;\n}\n$ans = bf(\"Mercury\", \"Jupiter\");\nprint_r($ans);\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_hbai2u.php:37\n\
    Stack trace:\n#0 /tmp/tmp2_hbai2u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2_hbai2u.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $result = [];\n    if (in_array($planet1,\
    \ $planets) && in_array($planet2, $planets)) {\n        $from = array_search($planet1,\
    \ $planets);\n        $to = array_search($planet2, $planets);\n        if ($from\
    \ < $to) {\n            $result = array_slice($planets, $from + 1, $to - $from\
    \ - 1);\n        } else {\n            $result = array_slice($planets, $to + 1,\
    \ $from - $to - 1);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzlk22xf.php:39\n\
    Stack trace:\n#0 /tmp/tmpjzlk22xf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjzlk22xf.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1,\
    \ $planets);\n\t$planet2_index = array_search($planet2, $planets);\n\t\n\tif($planet1_index\
    \ === false || $planet2_index === false) {\n\t\treturn array();\n\t}\n\t\n\tif($planet1_index\
    \ < $planet2_index) {\n\t\treturn array_slice($planets, $planet1_index + 1, $planet2_index\
    \ - $planet1_index - 1);\n\t} else {\n\t\treturn array_slice($planets, $planet2_index\
    \ + 1, $planet1_index - $planet2_index - 1);\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprld2vkzg.php:40\n\
    Stack trace:\n#0 /tmp/tmprld2vkzg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmprld2vkzg.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $orbit1 = array_search($planet1,\
    \ $planets);\n    $orbit2 = array_search($planet2, $planets);\n    if($orbit1\
    \ === false || $orbit2 === false){\n        return [];\n    }\n    if($orbit1\
    \ === $orbit2){\n        return [];\n    }\n    if($orbit1 > $orbit2){\n     \
    \   $res = array_slice($planets, $orbit2, $orbit1 - $orbit2);\n    } else {\n\
    \        $res = array_slice($planets, $orbit1, $orbit2 - $orbit1);\n    }\n  \
    \  return $res;\n}\n\n$test = bf(\"Earth\", \"Mars\");\nprint_r($test);\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Earth\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpyrzzsxyw.php:40\nStack trace:\n#0 /tmp/tmpyrzzsxyw.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyrzzsxyw.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $idx1 = array_search($planet1, $planets);\n\
    \  $idx2 = array_search($planet2, $planets);\n  if ($idx1 !== false && $idx2 !==\
    \ false) {\n    if ($idx1 < $idx2) {\n      return array_slice($planets, $idx1\
    \ + 1, $idx2 - $idx1 - 1);\n    } else {\n      return array_slice($planets, $idx2\
    \ + 1, $idx1 - $idx2 - 1);\n    }\n  } else {\n    return [];\n  }\n}\n\necho\
    \ implode(', ', bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Venus, Earth, Mars, Jupiter, Saturn\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp38nferis.php:40\nStack trace:\n#0 /tmp/tmp38nferis.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp38nferis.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\"\
    ,\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\
    \n  ];\n  $planet1Idx = array_search($planet1, $planets);\n  $planet2Idx = array_search($planet2,\
    \ $planets);\n  if($planet1Idx === false || $planet2Idx === false) {\n    return\
    \ [];\n  }\n  if($planet1Idx < $planet2Idx) {\n    return array_slice($planets,\
    \ $planet1Idx + 1, $planet2Idx - $planet1Idx - 1);\n  } else {\n    return array_slice($planets,\
    \ $planet2Idx + 1, $planet1Idx - $planet2Idx - 1);\n  }\n}\n\nvar_dump(bf(\"Jupiter\"\
    , \"Neptune\")); // ==> (\"Saturn\", \"Uranus\")\nvar_dump(bf(\"Earth\", \"Mercury\"\
    )); // ==> (\"Venus\")\nvar_dump(bf(\"Mercury\", \"Uranus\")); // ==> (\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nvar_dump(bf(\"Mercury\", \"Jupiter\"\
    )); // ==> (\"Venus\", \"Earth\", \"Mars\")\nvar_dump(bf(\"Mars\", \"Earth\"));\
    \ // ==> ()\nvar_dump(bf(\"Pluto\", \"Neptune\")); // ==> ()\nvar_dump(bf(\"Pluto\"\
    , \"Earth\")); // ==> ()\nvar_dump(bf(\"Neptune\", \"Pluto\")); // ==> ()\nvar_dump(bf(\"\
    Neptune\", \"Mercury\")); // ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")\nvar_dump(bf(\"Mercury\", \"Saturn\")); // ==> (\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\")\nvar_dump(bf(\"Jupiter\", \"Mercury\")); //\
    \ ==> (\"Venus\", \"Earth\", \"Mars\")\nvar_dump(bf(\"\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpty3m6rrp.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$solar_system = [\n\t\t\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n\t];\n\tif (!in_array($planet1,\
    \ $solar_system) || !in_array($planet2, $solar_system))\n\t\treturn [];\n\tif\
    \ ($planet1 == $planet2)\n\t\treturn [$planet1];\n\t$p1 = array_search($planet1,\
    \ $solar_system);\n\t$p2 = array_search($planet2, $solar_system);\n\tif ($p1 >\
    \ $p2) {\n\t\t$p1 = $p1 + $p2;\n\t\t$p2 = $p1 - $p2;\n\t\t$p1 = $p1 - $p2;\n\t\
    }\n\t$planets = [];\n\tfor ($i = $p1 + 1; $i < $p2; $i++)\n\t\t$planets[] = $solar_system[$i];\n\
    \treturn $planets;\n}\n\nvar_dump(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(5) {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\
    \n  [2]=>\n  string(4) \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n \
    \ string(6) \"Saturn\"\n}\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpm726mi49.php:46\nStack trace:\n#0 /tmp/tmpm726mi49.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmpm726mi49.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune');\n\t$position_planet1 = array_search($planet1,\
    \ $planets);\n\t$position_planet2 = array_search($planet2, $planets);\n\tif($position_planet1\
    \ === false || $position_planet2 === false) {\n\t\treturn array();\n\t}\n\t$result\
    \ = array();\n\tif($position_planet1 < $position_planet2) {\n\t\t$start = $position_planet1\
    \ + 1;\n\t\t$end = $position_planet2;\n\t} else {\n\t\t$start = $position_planet2\
    \ + 1;\n\t\t$end = $position_planet1;\n\t}\n\tfor($i = $start; $i < $end; $i++)\
    \ {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\n\t\t\"Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\"\
    ,\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\"\
    \n\t];\n\tif(!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n\
    \t\treturn [];\n\t}\n\t$planet1 = array_search($planet1, $planets);\n\t$planet2\
    \ = array_search($planet2, $planets);\n\tif($planet1 > $planet2) {\n\t\t$planet1\
    \ = array_search($planet2, $planets);\n\t\t$planet2 = array_search($planet1, $planets);\n\
    \t}\n\t$result = [];\n\tfor($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n)\nArray\n\
    (\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n \
    \   [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaeg0q2xi.php:51\n\
    Stack trace:\n#0 /tmp/tmpaeg0q2xi.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpaeg0q2xi.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune');\n  $first = array_search($planet1, $planets);\n\
    \  $second = array_search($planet2, $planets);\n  if($first === false || $second\
    \ === false) {\n    return array();\n  }\n  if($first < $second) {\n    return\
    \ array_slice($planets, $first + 1, $second - $first - 1);\n  } else {\n    return\
    \ array_slice($planets, $second + 1, $first - $second - 1);\n  }\n}\n\necho implode(',\
    \ ', bf('Jupiter', 'Neptune'));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Saturn, Uranus\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8c__xed.php:39\n\
    Stack trace:\n#0 /tmp/tmpx8c__xed.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpx8c__xed.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    if (!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) {\n        return array();\n   \
    \ }\n    $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2,\
    \ $planets);\n    if ($index1 > $index2) {\n        $index1 = array_search($planet2,\
    \ $planets);\n        $index2 = array_search($planet1, $planets);\n    }\n   \
    \ $res = array();\n    for ($i = $index1 + 1; $i < $index2; $i++) {\n        $res[]\
    \ = $planets[$i];\n    }\n    return $res;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $bf = array_flip([\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]);\n    if (isset($bf[$planet1])\
    \ && isset($bf[$planet2])) {\n        if ($bf[$planet1] < $bf[$planet2]) {\n \
    \           return array_slice($bf, $bf[$planet1] + 1, $bf[$planet2] - $bf[$planet1]\
    \ - 1, true);\n        } else {\n            return array_slice($bf, $bf[$planet2]\
    \ + 1, $bf[$planet1] - $bf[$planet2] - 1, true);\n        }\n    } else {\n  \
    \      return [];\n    }\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69drbaqm.php:33\n\
    Stack trace:\n#0 /tmp/tmp69drbaqm.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp69drbaqm.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $pos1 = array_search($planet1,\
    \ $planets);\n    $pos2 = array_search($planet2, $planets);\n    if ($pos1 ===\
    \ false || $pos2 === false) {\n        return [];\n    }\n    $result = [];\n\
    \    if ($pos1 > $pos2) {\n        $i = $pos1;\n        while ($i > $pos2) {\n\
    \            $result[] = $planets[$i];\n            $i--;\n        }\n    } else\
    \ {\n        $i = $pos1;\n        while ($i < $pos2) {\n            $result[]\
    \ = $planets[$i];\n            $i++;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphnjg6mpt.php:44\n\
    Stack trace:\n#0 /tmp/tmphnjg6mpt.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphnjg6mpt.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $pos1 = array_search($planet1,\
    \ $planets);\n    $pos2 = array_search($planet2, $planets);\n    $result = [];\n\
    \    if ($pos1 == false || $pos2 == false) {\n        return $result;\n    }\n\
    \    for ($i = min($pos1, $pos2) + 1; $i < max($pos1, $pos2); $i++) {\n      \
    \  $result[] = $planets[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsl3ev_zt.php:34\n\
    Stack trace:\n#0 /tmp/tmpsl3ev_zt.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpsl3ev_zt.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$solar_system = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1,\
    \ $solar_system);\n\t$planet2_index = array_search($planet2, $solar_system);\n\
    \t$planets = array();\n\t$result = array();\n\tif($planet1_index === false ||\
    \ $planet2_index === false) {\n\t\treturn $result;\n\t} else {\n\t\tif($planet1_index\
    \ < $planet2_index) {\n\t\t\t$planets = array_slice($solar_system, $planet1_index\
    \ + 1, $planet2_index - $planet1_index - 1);\n\t\t} else {\n\t\t\t$planets = array_slice($solar_system,\
    \ $planet2_index + 1, $planet1_index - $planet2_index - 1);\n\t\t}\n\t\t$result\
    \ = array_values($planets);\n\t\treturn $result;\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lzrfp0b.php:42\n\
    Stack trace:\n#0 /tmp/tmp3lzrfp0b.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3lzrfp0b.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    // $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planets = array(1 =>\
    \ \"Mercury\", 2 => \"Venus\", 3 => \"Earth\", 4 => \"Mars\", 5 => \"Jupiter\"\
    , 6 => \"Saturn\", 7 => \"Uranus\", 8 => \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    if ($planet1\
    \ === false || $planet2 === false) {\n        return [];\n    }\n    if ($planet1\
    \ < $planet2) {\n        $flag = 1;\n    } else {\n        $flag = 0;\n    }\n\
    \    $res = [];\n    $i = 1;\n    while ($i <= 8) {\n        if ($flag) {\n  \
    \          if ($i > $planet1 && $i < $planet2) {\n                $res[] = $planets[$i];\n\
    \            }\n        } else {\n            if ($i < $planet1 && $i > $planet2)\
    \ {\n                $res[] = $planets[$i];\n            }\n        }\n      \
    \  $i++;\n    }\n    return $res;\n}\n\n$tests = [\n    // ['Jupiter', 'Neptune',\
    \ [\"Saturn\", \"Uranus\"]],\n    // ['Earth', 'Mercury', [\"Venus\"]],\n    //\
    \ ['Mercury', 'Uranus', [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]],\n    // ['Mercury', 'Venus', []],\n    // ['Mercury', 'Mercury', []],\n  \
    \  // ['Mars', 'Mars', []],\n    // ['Mars', 'Earth', [\"Venus\"]],\n    // ['Earth',\
    \ 'Mars', [\"Venus\"]],\n    // ['Earth', 'Jupiter', [\"Venus\", \"Mars\"]],\n\
    \    // ['Earth', 'Saturn', [\"Venus\", \"Mars\", \"Jupiter\"]],\n    // ['Earth',\
    \ 'Uranus', [\"Venus\", \"Mars\", \"Jupiter\", \"Saturn\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphfdwe571.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" ];\n\t$planet1 = array_search($planet1,\
    \ $planets);\n\t$planet2 = array_search($planet2, $planets);\n\tif ($planet1 ===\
    \ false || $planet2 === false) return [];\n\tif ($planet1 > $planet2) list($planet1,\
    \ $planet2) = [ $planet2, $planet1 ];\n\treturn array_slice($planets, $planet1+1,\
    \ $planet2-$planet1-1);\n}\n\n/*\n\u0420\u0435\u0448\u0435\u043D\u0438\u0435 \u0443\
    \u0447\u0438\u0442\u0435\u043B\u044F\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Unterminated comment starting line 24 in /tmp/tmpmvjdj4eo.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t$results = array();\n\t\
    $firstPos = 0;\n\t$secondPos = 0;\n\tforeach ($planets as $key => $planet) {\n\
    \t\tif ($planet1 == $planet) {\n\t\t\t$firstPos = $key;\n\t\t}\n\t\tif ($planet2\
    \ == $planet) {\n\t\t\t$secondPos = $key;\n\t\t}\n\t}\n\tif ($firstPos > $secondPos)\
    \ {\n\t\tfor ($i = $secondPos + 1; $i < $firstPos; $i++) {\n\t\t\t$results[] =\
    \ $planets[$i];\n\t\t}\n\t} elseif ($firstPos < $secondPos) {\n\t\tfor ($i = $firstPos\
    \ + 1; $i < $secondPos; $i++) {\n\t\t\t$results[] = $planets[$i];\n\t\t}\n\t}\n\
    \treturn $results;\n}\n\necho '<pre>';\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Venus\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwjrlvgo8.php:54\nStack trace:\n#0 /tmp/tmpwjrlvgo8.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwjrlvgo8.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planetList = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  $planet1Index = array_search($planet1,\
    \ $planetList);\n  $planet2Index = array_search($planet2, $planetList);\n  $result\
    \ = [];\n  if ($planet1Index === false || $planet2Index === false) {\n    return\
    \ $result;\n  }\n  if ($planet1Index < $planet2Index) {\n    for ($i = $planet1Index+1;\
    \ $i < $planet2Index; $i++) {\n      $result[] = $planetList[$i];\n    }\n  }\
    \ else {\n    for ($i = $planet2Index+1; $i < $planet1Index; $i++) {\n      $result[]\
    \ = $planetList[$i];\n    }\n  }\n  return $result;\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $p1 = array_search($planet1,\
    \ $planets);\n  $p2 = array_search($planet2, $planets);\n  if ($p1 === false ||\
    \ $p2 === false) {\n    return array();\n  }\n  if ($p1 > $p2) {\n    $p = $p1;\n\
    \    $p1 = $p2;\n    $p2 = $p;\n  }\n  $res = array();\n  for ($i = $p1+1; $i\
    \ < $p2; $i++) {\n    $res[] = $planets[$i];\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $i1 = array_search($planet1,\
    \ $planets);\n  $i2 = array_search($planet2, $planets);\n  if ($i1 === false ||\
    \ $i2 === false) {\n    return array();\n  }\n  $result = array();\n  if ($i1\
    \ < $i2) {\n    for ($i = $i1 + 1; $i < $i2; $i++) {\n      $result[] = $planets[$i];\n\
    \    }\n  } else {\n    for ($i = $i2 + 1; $i < $i1; $i++) {\n      $result[]\
    \ = $planets[$i];\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\n        'Mercury',\n        'Venus',\n      \
    \  'Earth',\n        'Mars',\n        'Jupiter',\n        'Saturn',\n        'Uranus',\n\
    \        'Neptune'\n    ];\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if(!$index1 || !$index2)\
    \ {\n        return [];\n    }\n    return array_slice($planets, min($index1,\
    \ $index2), abs($index1 - $index2) + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i4exei8.php:39\n\
    Stack trace:\n#0 /tmp/tmp7i4exei8.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7i4exei8.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n$arr = [\n        \"Mercury\" => 1,\n        \"Venus\" => 2,\n\
    \        \"Earth\" => 3,\n        \"Mars\" => 4,\n        \"Jupiter\" => 5,\n\
    \        \"Saturn\" => 6,\n        \"Uranus\" => 7,\n        \"Neptune\" => 8\n\
    \    ];\n$a = \"\";\n    foreach ($arr as $key => $value) {\n        if ($key\
    \ == $planet1) {\n            $a = $key;\n        }\n    }\n    foreach ($arr\
    \ as $key => $value) {\n        if ($key == $planet2) {\n            $b = $key;\n\
    \        }\n    }\n    \n    if ($a == \"\") {\n        return array();\n    }\n\
    \    if ($b == \"\") {\n        return array();\n    }\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        if ($key != $a && $key != $b)\
    \ {\n            if ($arr[$a] < $arr[$key] && $arr[$key] < $arr[$b]) {\n     \
    \           $result[$key] = $value;\n            }\n        }\n    }\n    asort($result);\n\
    \    return array_keys($result);\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\n\
    print_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n)\nArray\n\
    (\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n \
    \   [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9dkca2e.php:64\n\
    Stack trace:\n#0 /tmp/tmpi9dkca2e.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpi9dkca2e.php\
    \ on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$result=[];\n\t$planet=[\n\t\t\"Mercury\"=>1,\n\t\t\"Venus\"\
    =>2,\n\t\t\"Earth\"=>3,\n\t\t\"Mars\"=>4,\n\t\t\"Jupiter\"=>5,\n\t\t\"Saturn\"\
    =>6,\n\t\t\"Uranus\"=>7,\n\t\t\"Neptune\"=>8\n\t];\n\t$arr=array_keys($planet);\n\
    \tif(array_key_exists($planet1, $planet) && array_key_exists($planet2, $planet))\
    \ {\n\t\t$p1=$planet[$planet1];\n\t\t$p2=$planet[$planet2];\n\t\t$tmp=array_slice($arr,\
    \ $p1, $p2-$p1+1);\n\t\tsort($tmp);\n\t\tif($p1>$p2) {\n\t\t\t$tmp=array_reverse($tmp);\n\
    \t\t}\n\t\t$result=$tmp;\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Mercury\", \"\
    Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Earth\n    [1] => Jupiter\n    [2] => Mars\n    [3]\
    \ => Neptune\n    [4] => Saturn\n    [5] => Uranus\n    [6] => Venus\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmphjs3jsqr.php:46\nStack trace:\n\
    #0 /tmp/tmphjs3jsqr.php(55): test()\n#1 {main}\n  thrown in /tmp/tmphjs3jsqr.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $idx1 = array_search($planet1, $planets);\n\
    \  $idx2 = array_search($planet2, $planets);\n  if ($idx1 !== false && $idx2 !==\
    \ false) {\n    if ($idx1 > $idx2) {\n      $temp = $idx1;\n      $idx1 = $idx2;\n\
    \      $idx2 = $temp;\n    }\n    $result = [];\n    for ($i = $idx1 + 1; $i <\
    \ $idx2; $i++) {\n      $result[] = $planets[$i];\n    }\n    return $result;\n\
    \  }\n  return [];\n}\n\n$result = bf(\"Jupiter\", \"Neptune\");\nprint_r($result);\n\
    echo \"<br>\";\n$result = bf(\"Earth\", \"Mercury\");\nprint_r($result);\necho\
    \ \"<br>\";\n$result = bf(\"Mercury\", \"Uranus\");\nprint_r($result);\necho \"\
    <br>\";\n$result = bf(\"Mercury\", \"Mercury\");\nprint_r($result);\necho \"<br>\"\
    ;\n$result = bf(\"Mercury\", \"Pluto\");\nprint_r($result);\necho \"<br>\";\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $begin = array_search($planet1,\
    \ $planets);\n    $end = array_search($planet2, $planets);\n    if($begin ===\
    \ false || $end === false){\n        return [];\n    }\n    if($begin > $end){\n\
    \        $tmp = $begin;\n        $begin = $end;\n        $end = $tmp;\n    }\n\
    \    return array_slice($planets, $begin+1, $end-$begin-1);\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpohei529r.php:38\n\
    Stack trace:\n#0 /tmp/tmpohei529r.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpohei529r.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$solarSystem = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$start = $end = -1;\n\t\
    foreach ($solarSystem as $key => $planet) {\n\t\tif ($planet1 == $planet) $start\
    \ = $key;\n\t\tif ($planet2 == $planet) $end = $key;\n\t}\n\t$output = [];\n\t\
    for ($i = $start + 1; $i < $end; $i++) {\n\t\t$output[] = $solarSystem[$i];\n\t\
    }\n\treturn $output;\n}\necho \"<pre>bf(\\\"Jupiter\\\", \\\"Neptune\\\")\\r\\\
    n\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\";\necho \"<pre>bf(\\\
    \"Earth\\\", \\\"Mercury\\\")\\r\\n\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"</pre>\";\necho \"<pre>bf(\\\"Mercury\\\", \\\"Uranus\\\")\\r\\n\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>bf(\"Jupiter\", \"Neptune\")\nArray\n(\n    [0] => Saturn\n    [1]\
    \ => Uranus\n)\n</pre><pre>bf(\"Earth\", \"Mercury\")\nArray\n(\n)\n</pre><pre>bf(\"\
    Mercury\", \"Uranus\")\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2]\
    \ => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpng9j4enj.php:43\nStack trace:\n#0 /tmp/tmpng9j4enj.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpng9j4enj.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune');\n    $start = array_search($planet1, $planets);\n\
    \    $end = array_search($planet2, $planets);\n    if ($start === false || $end\
    \ === false) {\n        return [];\n    }\n    if ($start == $end) {\n       \
    \ return [];\n    }\n    if ($start > $end) {\n        $planets = array_reverse($planets);\n\
    \        $start = array_search($planet1, $planets);\n        $end = array_search($planet2,\
    \ $planets);\n    }\n    $result = array_slice($planets, $start + 1, $end - $start\
    \ - 1);\n    return $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nprint_r(bf(\"\
    Mercury\", \"Jupiter\"));\nprint_r(bf(\"Uranus\", \"Mercury\"));\nprint_r(bf(\"\
    Uranus\", \"Neptune\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\nArray\n(\n    [0] => Venus\n    [1] =>\
    \ Earth\n    [2] => Mars\n)\nArray\n(\n    [0] => Saturn\n    [1] => Jupiter\n\
    \    [2] => Mars\n    [3] => Earth\n    [4] => Venus\n)\nArray\n(\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpoqsh5nqc.php:47\nStack trace:\n\
    #0 /tmp/tmpoqsh5nqc.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpoqsh5nqc.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) {\n        return [];\n    }\n \
    \   $res = [];\n    $i = array_search($planet1, $planets);\n    $j = array_search($planet2,\
    \ $planets);\n    if ($i < $j) {\n        for ($k = $i + 1; $k < $j; $k++) {\n\
    \            $res[] = $planets[$k];\n        }\n    } else {\n        for ($k\
    \ = $i - 1; $k > $j; $k--) {\n            $res[] = $planets[$k];\n        }\n\
    \    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph75u7j4i.php:43\n\
    Stack trace:\n#0 /tmp/tmph75u7j4i.php(49): test()\n#1 {main}\n  thrown in /tmp/tmph75u7j4i.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    //CODE GOES HERE\n}\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp30hxiz_0.php:23\n\
    Stack trace:\n#0 /tmp/tmp30hxiz_0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp30hxiz_0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune');\n    $result = array();\n    $min = min(array_search($planet1,\
    \ $planets), array_search($planet2, $planets));\n    $max = max(array_search($planet1,\
    \ $planets), array_search($planet2, $planets));\n    for ($i = $min + 1; $i <\
    \ $max; $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nfunction candidate(...$args) {\n  \
    \  return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpfwgze7cz.php:37\nStack trace:\n#0 /tmp/tmpfwgze7cz.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfwgze7cz.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = array(\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\"\
    ,\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\
    ,\n  );\n  if (in_array($planet1, $planets) && in_array($planet2, $planets)) {\n\
    \    $planet1Index = array_search($planet1, $planets);\n    $planet2Index = array_search($planet2,\
    \ $planets);\n    $firstIndex = min($planet1Index, $planet2Index);\n    $lastIndex\
    \ = max($planet1Index, $planet2Index);\n    $output = array();\n    for ($i =\
    \ $firstIndex + 1; $i < $lastIndex; $i++) {\n      $output[] = $planets[$i];\n\
    \    }\n    return $output;\n  } else {\n    return array();\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t$start = array_search($planet1,\
    \ $planets);\n\t$end = array_search($planet2, $planets);\n\tif ($start === false\
    \ || $end === false) {\n\t\treturn array();\n\t}\n\tif ($start < $end) {\n\t\t\
    return array_slice($planets, $start+1, $end-$start-1);\n\t} elseif ($start > $end)\
    \ {\n\t\treturn array_slice($planets, $end+1, $start-$end-1);\n\t} else {\n\t\t\
    return array();\n\t}\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\n\t\t\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n\t];\n\t$i1 = array_search($planet1,\
    \ $planets);\n\t$i2 = array_search($planet2, $planets);\n\tif ($i1 === false ||\
    \ $i2 === false) return [];\n\tif ($i1 < $i2) {\n\t\treturn array_slice($planets,\
    \ $i1 + 1, $i2 - $i1 - 1);\n\t} else {\n\t\treturn array_slice($planets, $i2 +\
    \ 1, $i1 - $i2 - 1);\n\t}\n}\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp3zy2n3fp.php:39\nStack trace:\n#0 /tmp/tmp3zy2n3fp.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3zy2n3fp.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$arr = array();\n\t$solarSystem = array(\n\t\t\"Mercury\",\n\t\
    \t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\"\
    ,\n\t\t\"Uranus\",\n\t\t\"Neptune\"\n\t);\n\tif(in_array($planet1, $solarSystem)\
    \ && in_array($planet2, $solarSystem)) {\n\t\tif($planet1 != $planet2) {\n\t\t\
    \tif(array_search($planet1, $solarSystem) > array_search($planet2, $solarSystem))\
    \ {\n\t\t\t\t$planet1 = array_search($planet1, $solarSystem);\n\t\t\t\t$planet2\
    \ = array_search($planet2, $solarSystem);\n\t\t\t\tfor($i = $planet2 + 1; $i <\
    \ $planet1; $i++) {\n\t\t\t\t\t$arr[] = $solarSystem[$i];\n\t\t\t\t}\n\t\t\t}\
    \ else {\n\t\t\t\t$planet1 = array_search($planet1, $solarSystem);\n\t\t\t\t$planet2\
    \ = array_search($planet2, $solarSystem);\n\t\t\t\tfor($i = $planet1 + 1; $i <\
    \ $planet2; $i++) {\n\t\t\t\t\t$arr[] = $solarSystem[$i];\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\n\t\t\"Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\"\
    ,\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\"\
    \n\t];\n\t$result = [];\n\t$p1 = array_search($planet1, $planets);\n\t$p2 = array_search($planet2,\
    \ $planets);\n\tif ($p1 === false || $p2 === false) {\n\t\treturn $result;\n\t\
    }\n\tif ($p1 < $p2) {\n\t\tfor ($i = $p1 + 1; $i < $p2; $i++) {\n\t\t\t$result[]\
    \ = $planets[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $p2 + 1; $i < $p1; $i++) {\n\
    \t\t\t$result[] = $planets[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"\
    Jupiter\", \"Neptune\")); // (\"Saturn\", \"Uranus\")\nprint_r(bf(\"Earth\", \"\
    Mercury\")); // (\"Venus\")\nprint_r(bf(\"Mercury\", \"Uranus\")); // (\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nprint_r(bf(\"Mercury\", \"b\"\
    )); // ()\nprint_r(bf(\"Jupiter\", \"Earth\")); // (\"Saturn\", \"Uranus\", \"\
    Neptune\")\nprint_r(bf(\"Jupiter\", \"b\")); // ()\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\nArray\n(\n)\nArray\n(\n    [0] => Mars\n\
    )\nArray\n(\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    if (!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) {\n        return [];\n    }\n \
    \   $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n\
    \        $p2 = $tmp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1\
    \ - 1);\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpi3oo53bw.php:39\nStack trace:\n#0 /tmp/tmpi3oo53bw.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi3oo53bw.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $planet1 = array_search($planet1, $planets);\n\
    \  $planet2 = array_search($planet2, $planets);\n  if ($planet1 === false || $planet2\
    \ === false) {\n    return [];\n  }\n  if ($planet1 < $planet2) {\n    return\
    \ array_slice($planets, $planet1 + 1, $planet2 - $planet1 - 1);\n  } else {\n\
    \    return array_slice($planets, $planet2 + 1, $planet1 - $planet2 - 1);\n  }\n\
    }\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp75wioazq.php:39\nStack trace:\n#0 /tmp/tmp75wioazq.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp75wioazq.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    $ind1 = array_search($planet1, $list);\n\
    \    $ind2 = array_search($planet2, $list);\n    if($ind1===false || $ind2===false)\
    \ {\n        return [];\n    }\n    if($ind1>$ind2) {\n        $temp = $ind1;\n\
    \        $ind1 = $ind2;\n        $ind2 = $temp;\n    }\n    $result = [];\n  \
    \  for($i=$ind1+1; $i<$ind2; $i++) {\n        $result[] = $list[$i];\n    }\n\
    \    return $result;\n}\n\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\nvar_dump(bf(\"\
    Earth\", \"Mercury\"));\nvar_dump(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n  [0]=>\n  string(5)\
    \ \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n \
    \ [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\n        \"Mercury\", \"Venus\", \"Earth\", \n\
    \        \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ];\n\
    \    $p1Pos = array_search($planet1, $planets);\n    $p2Pos = array_search($planet2,\
    \ $planets);\n    if ($p1Pos === false || $p2Pos === false) {\n        return\
    \ [];\n    } else {\n        if ($p1Pos < $p2Pos) {\n            return array_slice($planets,\
    \ $p1Pos + 1, $p2Pos - $p1Pos - 1);\n        } else {\n            return array_slice($planets,\
    \ $p2Pos + 1, $p1Pos - $p2Pos - 1);\n        }\n    }\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp59v7gotk.php:42\nStack trace:\n#0 /tmp/tmp59v7gotk.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp59v7gotk.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1,\
    \ $planets);\n\t$planet2 = array_search($planet2, $planets);\n\tif ($planet1 ===\
    \ false || $planet2 === false) return array();\n\treturn array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\necho \"<pre>bf(\\\"Jupiter\\\",\
    \ \\\"Neptune\\\")\\r\\n\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\"\
    ;\necho \"<pre>bf(\\\"Earth\\\", \\\"Mercury\\\")\\r\\n\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"</pre>\";\necho \"<pre>bf(\\\"Mercury\\\", \\\"Uranus\\\
    \")\\r\\n\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>bf(\"Jupiter\", \"Neptune\")\nArray\n(\n    [0] => Saturn\n    [1]\
    \ => Uranus\n)\n</pre><pre>bf(\"Earth\", \"Mercury\")\nArray\n(\n    [0] => Mars\n\
    \    [1] => Jupiter\n)\n</pre><pre>bf(\"Mercury\", \"Uranus\")\nArray\n(\n   \
    \ [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4]\
    \ => Saturn\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5q8qur23.php:37\n\
    Stack trace:\n#0 /tmp/tmp5q8qur23.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5q8qur23.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n$planets = array(\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\"\
    ,\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\
    ,\n    );\n\n$n = count($planets);\n\n$first = null;\n$last = null;\n\nfor ($i\
    \ = 0; $i < $n; $i++) {\n    if ($planets[$i] == $planet1) {\n        $first =\
    \ $i;\n    }\n    if ($planets[$i] == $planet2) {\n        $last = $i;\n    }\n\
    }\n\n$result = array();\n\nif ($first < $last) {\n    for ($i = $first + 1; $i\
    \ < $last; $i++) {\n        $result[] = $planets[$i];\n    }\n} else {\n    for\
    \ ($i = $last + 1; $i < $first; $i++) {\n        $result[] = $planets[$i];\n \
    \   }\n}\n\nreturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpjyewgi6g.php:70\nStack trace:\n#0 /tmp/tmpjyewgi6g.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjyewgi6g.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$arr = array(\"Mercury\"=>1, \"Venus\"=>2, \"Earth\"=>3, \"Mars\"\
    =>4, \"Jupiter\"=>5, \"Saturn\"=>6, \"Uranus\"=>7, \"Neptune\"=>8);\n\t$arrr=array();\n\
    \tforeach ($arr as $key => $value) {\n\t\tif($planet1 == $key && $planet2 == $key)\
    \ return $arrr;\n\t\tif($planet1 == $key) {\n\t\t\t$i1 = $value;\n\t\t\tforeach\
    \ ($arr as $key => $value) {\n\t\t\t\tif($planet2 == $key) {\n\t\t\t\t\t$i2 =\
    \ $value;\n\t\t\t\t\tif($i1 > $i2) return $arrr;\n\t\t\t\t\tfor($i = $i1; $i <\
    \ $i2; $i++) {\n\t\t\t\t\t\tforeach ($arr as $key => $value) {\n\t\t\t\t\t\t\t\
    if($i == $value) array_push($arrr, $key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\
    \treturn $arrr;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $arrr;\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpcm38r9.php:43\n\
    Stack trace:\n#0 /tmp/tmpvpcm38r9.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpvpcm38r9.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\n        \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ];\n    $first =\
    \ array_search($planet1, $planets);\n    $second = array_search($planet2, $planets);\n\
    \    $result = [];\n    if($first == $second) {\n        return $result;\n   \
    \ }\n    for($i = $first; $i != $second; $i = ($i + 1) % 8) {\n        $result[]\
    \ = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzp5eds_.php:36\n\
    Stack trace:\n#0 /tmp/tmphzp5eds_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphzp5eds_.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $result = [];\n    $planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $index1 =\
    \ array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return $result;\n\
    \    }\n    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1\
    \ = $index2;\n        $index2 = $temp;\n    }\n    for ($i = $index1 + 1; $i <\
    \ $index2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n\
    }\necho \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\";\n\
    \necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\n\n\
    echo \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(bf(\"Earth\", \"Mars\"));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(bf(\"Uranus\", \"Mercury\"));\necho \"</pre>\";\n\necho \"<pre>\";\n\
    print_r(bf(\"Venus\", \"Venus\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"\
    Venus\", \"Saturn\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"\",\
    \ \"\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Venus\", \"Europa\"\
    ));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Europa\", \"Venus\"));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Pluto\"));\necho\
    \ \"</pre>\";\n\necho \"<pre\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpwfgohiht.php on line 83\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$arr = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t$res = array();\n\t$key1 =\
    \ array_search($planet1, $arr);\n\t$key2 = array_search($planet2, $arr);\n\tif($key1\
    \ === false || $key2 === false) {\n\t\treturn $res;\n\t}\n\tif($key1 > $key2)\
    \ {\n\t\t$tmp = $key1;\n\t\t$key1 = $key2;\n\t\t$key2 = $tmp;\n\t}\n\tfor($i =\
    \ $key1 + 1; $i < $key2; $i++) {\n\t\t$res[] = $arr[$i];\n\t}\n\treturn $res;\n\
    }\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $result = [];\n  $planets = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  $pos1 = array_search($planet1,\
    \ $planets);\n  $pos2 = array_search($planet2, $planets);\n  if (isset($pos1)\
    \ && isset($pos2)) {\n    if ($pos1 < $pos2) {\n      for ($i = $pos1 + 1; $i\
    \ < $pos2; $i++) {\n        $result[] = $planets[$i];\n      }\n    } else {\n\
    \      for ($i = $pos2 + 1; $i < $pos1; $i++) {\n        $result[] = $planets[$i];\n\
    \      }\n    }\n  }\n  return $result;\n}\n$tests = [\n  [\"Jupiter\", \"Neptune\"\
    , [\"Saturn\", \"Uranus\"]],\n  [\"Earth\", \"Mercury\", [\"Venus\"]],\n  [\"\
    Mercury\", \"Uranus\", [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]],\n  [\"Earth\", \"Saturn\", [\"Venus\", \"Mars\", \"Jupiter\"]],\n  [\"Jupiter\"\
    , \"Earth\", [\"Saturn\", \"Mars\", \"Venus\"]],\n  [\"Neptune\", \"Jupiter\"\
    , [\"Uranus\", \"Saturn\", \"Mars\", \"Earth\", \"Venus\"]],\n  [\"Neptune\",\
    \ \"Pluto\", []],\n  [\"Mars\", \"Venus\", []],\n  [\"Pluto\", \"Earth\", []],\n\
    \  [\"Venus\", \"Mars\", []],\n  [\"Venus\", \"Venus\", []],\n  [\"Earth\", \"\
    Earth\", []],\n  [\"Uranus\", \"Saturn\", [\"Neptune\", \"Jupiter\"]],\n  [\"\
    Saturn\", \"Neptune\", [\"Uranus\", \"Jupiter\"]],\n  [\"Jupiter\", \"Saturn\"\
    , [\"Uranus\"]],\n  [\"Neptune\", \"Neptune\", []],\n  [\"Saturn\", \"Jupiter\"\
    , [\"Uranus\"]],\n  [\"Jupiter\", \"\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp25d2x0iy.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    if (!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets))\n        return [];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 > $p2)\
    \ {\n        $temp = $p1;\n        $p1 = $p2;\n        $p2 = $temp;\n    }\n \
    \   $result = [];\n    for ($i = $p1 + 1; $i < $p2; $i++) {\n        $result[]\
    \ = $planets[$i];\n    }\n    return $result;\n}\n\nvar_dump(bf(\"Jupiter\", \"\
    Neptune\"));\nvar_dump(bf(\"Earth\", \"Mercury\"));\nvar_dump(bf(\"Mercury\",\
    \ \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n  [0]=>\n  string(5)\
    \ \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n \
    \ [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $solarSystem = [ \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" ];\n    $planets = [];\n  \
    \  if (in_array($planet1, $solarSystem) && in_array($planet2, $solarSystem)) {\n\
    \        $first = 0;\n        $second = 0;\n        for ($i = 0; $i < count($solarSystem);\
    \ $i++) {\n            if ($solarSystem[$i] == $planet1) {\n                $first\
    \ = $i;\n            }\n            if ($solarSystem[$i] == $planet2) {\n    \
    \            $second = $i;\n            }\n        }\n        if ($first > $second)\
    \ {\n            list($first, $second) = [$second, $first];\n        }\n     \
    \   for ($i = $first + 1; $i < $second; $i++) {\n            $planets[] = $solarSystem[$i];\n\
    \        }\n    }\n    return $planets;\n}\necho \"<pre>\";\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"\
    Mercury\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Neptune\", \"Neptune\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre><pre>Array\n\
    (\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbngl1gtb.php:23\n\
    Stack trace:\n#0 /tmp/tmpbngl1gtb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbngl1gtb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$key1 = array_search($planet1, $planets);\n\
    \t$key2 = array_search($planet2, $planets);\n\tif ($key1 === false || $key2 ===\
    \ false) {\n\t\treturn [];\n\t}\n\t$arr = [];\n\tfor ($i = $key1; $i <= $key2;\
    \ $i++) {\n\t\t$arr[] = $planets[$i];\n\t}\n\treturn $arr;\n}\n\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nprint_r(bf(\"Jupiter\", \"Mars\"));\nprint_r(bf(\"Saturn\"\
    , \"Mercury\"));\nprint_r(bf(\"Mars\", \"Pluto\"));\nprint_r(bf(\"Earth\", \"\
    Earth\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n  \
    \  [3] => Neptune\n)\nArray\n(\n)\nArray\n(\n    [0] => Mercury\n    [1] => Venus\n\
    \    [2] => Earth\n    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n  \
    \  [6] => Uranus\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n    [0]\
    \ => Earth\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfvwmotmq.php:41\n\
    Stack trace:\n#0 /tmp/tmpfvwmotmq.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpfvwmotmq.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$index1 = array_search($planet1, $planets);\n\
    \t$index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) return [];\n\tif ($index1 < $index2) {\n\t\treturn array_slice($planets,\
    \ $index1 + 1, $index2 - $index1 - 1);\n\t} else {\n\t\treturn array_slice($planets,\
    \ $index2 + 1, $index1 - $index2 - 1);\n\t}\n}\necho implode(bf(\"Jupiter\", \"\
    Neptune\"), \", \");\necho PHP_EOL;\necho implode(bf(\"Earth\", \"Mercury\"),\
    \ \", \");\necho PHP_EOL;\necho implode(bf(\"Mercury\", \"Uranus\"), \", \");\n\
    echo PHP_EOL;\necho implode(bf(\"Saturn\", \"Jupiter\"), \", \");\necho PHP_EOL;\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Saturn, Uranus\nVenus\nVenus, Earth, Mars, Jupiter, Saturn\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmputswq_th.php:43\nStack trace:\n\
    #0 /tmp/tmputswq_th.php(48): test()\n#1 {main}\n  thrown in /tmp/tmputswq_th.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $start = array_search($planet1, $planets);\n\
    \  $end = array_search($planet2, $planets);\n  if ($start === false || $end ===\
    \ false) {\n    return [];\n  }\n  $step = $start > $end ? -1 : 1;\n  for ($i\
    \ = $start; $i != $end; $i += $step) {\n    $between[] = $planets[$i];\n  }\n\
    \  return $between;\n}\n\necho json_encode(bf(\"Jupiter\", \"Neptune\")) . \"\\\
    n\";\necho json_encode(bf(\"Earth\", \"Mercury\")) . \"\\n\";\necho json_encode(bf(\"\
    Mercury\", \"Uranus\")) . \"\\n\";\necho json_encode(bf(\"A\", \"B\")) . \"\\\
    n\";\necho json_encode(bf(\"A\", \"C\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "[\"Jupiter\",\"Saturn\",\"Uranus\"]\n[\"Earth\",\"Venus\"]\n[\"Mercury\"\
    ,\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"]\n[]\n[]\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp0q201hwr.php:39\nStack trace:\n\
    #0 /tmp/tmp0q201hwr.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0q201hwr.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune');\n    $idx1 = array_search($planet1, $planets);\n\
    \    $idx2 = array_search($planet2, $planets);\n    if ($idx1 === false || $idx2\
    \ === false) {\n        return array();\n    }\n    if ($idx1 > $idx2) {\n   \
    \     $tmp = $idx1;\n        $idx1 = $idx2;\n        $idx2 = $tmp;\n    }\n  \
    \  return array_slice($planets, $idx1 + 1, $idx2 - $idx1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp01oh29l6.php:39\n\
    Stack trace:\n#0 /tmp/tmp01oh29l6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp01oh29l6.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    $index1 = array_search($planet1,\
    \ $list);\n    $index2 = array_search($planet2, $list);\n    if ($index1 === false\
    \ || $index2 === false) {\n        return [];\n    }\n    if ($index1 < $index2)\
    \ {\n        return array_slice($list, $index1 + 1, $index2 - $index1 - 1);\n\
    \    } else {\n        return array_slice($list, $index2 + 1, $index1 - $index2\
    \ - 1);\n    }\n}\n$planets = bf(\"Mercury\", \"Uranus\");\necho implode(\", \"\
    , $planets) . \"\\n\";\n$planets = bf(\"Jupiter\", \"Neptune\");\necho implode(\"\
    , \", $planets) . \"\\n\";\n$planets = bf(\"Earth\", \"Mercury\");\necho implode(\"\
    , \", $planets) . \"\\n\";\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "Venus, Earth, Mars, Jupiter, Saturn\nSaturn, Uranus\nVenus\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp5cg71piy.php:44\nStack trace:\n\
    #0 /tmp/tmp5cg71piy.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp5cg71piy.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\n\t\t'Mercury',\n\t\t'Venus',\n\t\t'Earth',\n\t\t\
    'Mars',\n\t\t'Jupiter',\n\t\t'Saturn',\n\t\t'Uranus',\n\t\t'Neptune'\n\t];\n\t\
    $position1 = array_search($planet1, $planets);\n\t$position2 = array_search($planet2,\
    \ $planets);\n\tif($position1 !== false && $position2 !== false) {\n\t\tif($position1\
    \ > $position2) {\n\t\t\t$aux = $position1;\n\t\t\t$position1 = $position2;\n\t\
    \t\t$position2 = $aux;\n\t\t}\n\t\treturn array_slice($planets, $position1 + 1,\
    \ $position2 - $position1 - 1);\n\t}\n\treturn [];\n}\n\nvar_dump(bf(\"Jupiter\"\
    , \"Neptune\"));\nvar_dump(bf(\"Earth\", \"Mercury\"));\nvar_dump(bf(\"Mercury\"\
    , \"Uranus\"));\nvar_dump(bf(\"Mercury\", \"Mercury\"));\nvar_dump(bf(\"Sudan\"\
    , \"Neptune\"));\nvar_dump(bf(\"Neptune\", \"Sudan\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n  [0]=>\n  string(5)\
    \ \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n \
    \ [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\narray(6)\
    \ {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n\
    \  string(4) \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6)\
    \ \"Saturn\"\n  [5]=>\n  string(6) \"Uranus\"\n}\narray(0) {\n}\narray(0) {\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3dk8pzn9.php:54\n\
    Stack trace:\n#0 /tmp/tmp3dk8pzn9.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp3dk8pzn9.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  \n    $planets = [\n      'Mercury',\n      'Venus',\n      'Earth',\n\
    \      'Mars',\n      'Jupiter',\n      'Saturn',\n      'Uranus',\n      'Neptune'\n\
    \    ];\n    \n    if (!in_array($planet1, $planets) || !in_array($planet2, $planets))\
    \ {\n      return [];\n    }\n    \n    $idx1 = array_search($planet1, $planets);\n\
    \    $idx2 = array_search($planet2, $planets);\n    \n    $min = min($idx1, $idx2);\n\
    \    $max = max($idx1, $idx2);\n    \n    return array_slice($planets, $min+1,\
    \ $max-$min-1);\n  }\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqx49v0u6.php:49\n\
    Stack trace:\n#0 /tmp/tmpqx49v0u6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpqx49v0u6.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$location1 = array_search($planet1,\
    \ $planets);\n\t$location2 = array_search($planet2, $planets);\n\t$new_planets\
    \ = [];\n\tif($location1 && $location2) {\n\t\t$slice1 = array_slice($planets,\
    \ $location1);\n\t\t$slice2 = array_slice($planets, $location2);\n\t\t$new_planets\
    \ = array_merge($slice1, $slice2);\n\t\t$new_planets = array_unique($new_planets);\n\
    \t\tsort($new_planets);\n\t}\n\treturn $new_planets;\n}\necho \"<pre>\";\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"</pre>\";\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => Jupiter\n    [1] => Neptune\n    [2] => Saturn\n\
    \    [3] => Uranus\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpha18_tvr.php:38\nStack trace:\n#0 /tmp/tmpha18_tvr.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpha18_tvr.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n$planets = [\n    'Mercury',\n    'Venus',\n    'Earth',\n    'Mars',\n\
    \    'Jupiter',\n    'Saturn',\n    'Uranus',\n    'Neptune'\n];\n$key1 = array_search($planet1,\
    \ $planets);\n$key2 = array_search($planet2, $planets);\nif ($key1 === false ||\
    \ $key2 === false) {\n    return [];\n}\n$count = $key1 < $key2 ? $key2 - $key1\
    \ - 1 : $key1 - $key2 - 1;\nreturn array_slice($planets, $key1 + 1, $count);\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Mars\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n   \
    \ [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpnmeqzalc.php:43\nStack trace:\n#0 /tmp/tmpnmeqzalc.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnmeqzalc.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $orbits = [\n        \"Mercury\" => 1,\n        \"Venus\" =>\
    \ 2,\n        \"Earth\" => 3,\n        \"Mars\" => 4,\n        \"Jupiter\" =>\
    \ 5,\n        \"Saturn\" => 6,\n        \"Uranus\" => 7,\n        \"Neptune\"\
    \ => 8\n    ];\n    $betweenOrbits = array();\n    $planets = array();\n    if\
    \ (array_key_exists($planet1, $orbits) && array_key_exists($planet2, $orbits))\
    \ {\n        if ($orbits[$planet1] > $orbits[$planet2]) {\n            foreach\
    \ ($orbits as $planet => $orbit) {\n                if ($orbit >= $orbits[$planet2]\
    \ && $orbit <= $orbits[$planet1]) {\n                    $betweenOrbits[] = $orbit;\n\
    \                }\n            }\n        } else {\n            foreach ($orbits\
    \ as $planet => $orbit) {\n                if ($orbit >= $orbits[$planet1] &&\
    \ $orbit <= $orbits[$planet2]) {\n                    $betweenOrbits[] = $orbit;\n\
    \                }\n            }\n        }\n        asort($betweenOrbits);\n\
    \        foreach ($betweenOrbits as $orbit) {\n            foreach ($orbits as\
    \ $planet => $orbits) {\n                if ($orbit == $orbits) {\n          \
    \          $planets[] = $planet;\n                }\n            }\n        }\n\
    \    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpdc9bog8g.php\
    \ on line 44\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpdc9bog8g.php\
    \ on line 44\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpdc9bog8g.php\
    \ on line 44\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdc9bog8g.php:59\n\
    Stack trace:\n#0 /tmp/tmpdc9bog8g.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpdc9bog8g.php\
    \ on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $temp_planets = array();\n\
    \    $planet1_val = $planet2_val = -1;\n    for ($i = 0; $i < count($planets);\
    \ $i++) {\n        if ($planets[$i] == $planet1) {\n            $planet1_val =\
    \ $i;\n        }\n        if ($planets[$i] == $planet2) {\n            $planet2_val\
    \ = $i;\n        }\n    }\n    if ($planet1_val == -1 || $planet2_val == -1) {\n\
    \        return $temp_planets;\n    }\n    if ($planet1_val <= $planet2_val) {\n\
    \        for ($i = $planet1_val + 1; $i < $planet2_val; $i++) {\n            array_push($temp_planets,\
    \ $planets[$i]);\n        }\n    } else {\n        for ($i = $planet2_val + 1;\
    \ $i < $planet1_val; $i++) {\n            array_push($temp_planets, $planets[$i]);\n\
    \        }\n    }\n    return $temp_planets;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = [\n        \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $result = [];\n    if ($planet1 > $planet2) {\n        for ($i = $planet2\
    \ + 1; $i < $planet1; $i++) {\n            $result[] = $planets[$i];\n       \
    \ }\n    } else {\n        for ($i = $planet1 + 1; $i < $planet2; $i++) {\n  \
    \          $result[] = $planets[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\n\t\t'Mercury',\n\t\t'Venus',\n\t\t'Earth',\n\t\t\
    'Mars',\n\t\t'Jupiter',\n\t\t'Saturn',\n\t\t'Uranus',\n\t\t'Neptune'\n\t];\n\t\
    $planet1 = ucfirst(strtolower($planet1));\n\t$planet2 = ucfirst(strtolower($planet2));\n\
    \t$pos1 = array_search($planet1, $planets);\n\t$pos2 = array_search($planet2,\
    \ $planets);\n\tif ($pos1 === false || $pos2 === false) {\n\t\treturn [];\n\t\
    }\n\tif ($pos1 > $pos2) {\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $planets[$pos1];\n\
    \t\t$pos1 = $pos2;\n\t\t$pos2 = array_search($planet2, $planets);\n\t}\n\t$res\
    \ = [];\n\tfor ($i = $pos1 + 1; $i < $pos2; $i++) {\n\t\t$res[] = $planets[$i];\n\
    \t}\n\treturn $res;\n}\n\necho \"<pre>bf(\\\"Jupiter\\\", \\\"Neptune\\\")\\r\\\
    n\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\";\n\necho \"<pre>bf(\\\
    \"Earth\\\", \\\"Mercury\\\")\\r\\n\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"</pre>\";\n\necho \"<pre>bf(\\\"Mercury\\\", \\\"Uranus\\\")\\r\\n\";\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\n\necho \"<pre>bf(\\\"\
    Mercury\\\", \\\"Mars\\\")\\r\\n\";\nprint_r(bf(\"Mercury\", \"Mars\"));\necho\
    \ \"</pre>\";\n\necho \"<pre>bf(\\\"Mars\\\", \\\"Mercury\\\")\\r\\n\";\nprint_r(bf(\"\
    Mars\", \"Mercury\"));\necho \"</pre>\";\n\necho \"<pre>bf(\\\"ss\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3l77hjp2.php on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t$start = $planets.indexOf($planet1);\n\
    \t$end = $planets.indexOf($planet2);\n\t//$result = array();\n\tfor ($i = $start;\
    \ $i <= $end; $i++) {\n\t\t$result = array_push($planets[$i]);\n\t}\n\treturn\
    \ $result;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function indexOf() in\
    \ /tmp/tmpzzarfgdc.php:17\nStack trace:\n#0 /tmp/tmpzzarfgdc.php(26): bf('Jupiter',\
    \ 'Neptune')\n#1 /tmp/tmpzzarfgdc.php(30): candidate('Jupiter', 'Neptune')\n#2\
    \ /tmp/tmpzzarfgdc.php(39): test()\n#3 {main}\n  thrown in /tmp/tmpzzarfgdc.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\n\t\t'Mercury',\n\t\t'Venus',\n\t\t'Earth',\n\t\t\
    'Mars',\n\t\t'Jupiter',\n\t\t'Saturn',\n\t\t'Uranus',\n\t\t'Neptune'\n\t];\n\t\
    \n\tif (in_array($planet1, $planets) && in_array($planet2, $planets)) {\n\t\t\
    $first = array_search($planet1, $planets);\n\t\t$second = array_search($planet2,\
    \ $planets);\n\t\t\n\t\t$result = [];\n\t\tif ($first < $second) {\n\t\t\tfor\
    \ ($i = $first + 1; $i < $second; $i++) {\n\t\t\t\t$result[] = $planets[$i];\n\
    \t\t\t}\n\t\t} else {\n\t\t\tfor ($i = $second + 1; $i < $first; $i++) {\n\t\t\
    \t\t$result[] = $planets[$i];\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $result;\n\t}\n\
    \t\n\treturn [];\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $result = [];\n  $index1 = array_search($planet1,\
    \ $planets);\n  $index2 = array_search($planet2, $planets);\n  if ($index1 ===\
    \ false || $index2 === false) {\n    return [];\n  }\n  for ($i = min($index1,\
    \ $index2) + 1; $i < max($index1, $index2); $i++) {\n    $result[] = $planets[$i];\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $orbit = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    $start = 0;\n    $end = count($orbit);\n\
    \    $planets = [];\n    foreach ($orbit as $key => $item) {\n        if ($item\
    \ == $planet1) {\n            $start = $key;\n        }\n        if ($item ==\
    \ $planet2) {\n            $end = $key;\n        }\n    }\n    $start++;\n   \
    \ $end--;\n    while ($start <= $end) {\n        $planets[] = $orbit[$start];\n\
    \        $start++;\n    }\n    return $planets;\n}\nvar_dump(bf(\"Jupiter\", \"\
    Neptune\"));\nvar_dump(bf(\"Earth\", \"Mercury\"));\nvar_dump(bf(\"Mercury\",\
    \ \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(0) {\n}\narray(5) {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5)\
    \ \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n\
    \  [4]=>\n  string(6) \"Saturn\"\n}\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpldk7lqjm.php:45\nStack trace:\n#0 /tmp/tmpldk7lqjm.php(53): test()\n\
    #1 {main}\n  thrown in /tmp/tmpldk7lqjm.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $solar_system = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $correct_planet1 = false;\n\
    \    $correct_planet2 = false;\n    $i = 0;\n    while ($i < 8) {\n        if\
    \ ($solar_system[$i] == $planet1) {\n            $correct_planet1 = true;\n  \
    \      }\n        if ($solar_system[$i] == $planet2) {\n            $correct_planet2\
    \ = true;\n        }\n        $i++;\n    }\n    if ($correct_planet1 == false\
    \ || $correct_planet2 == false) {\n        return [];\n    }\n    $planet1_position\
    \ = array_search($planet1, $solar_system);\n    $planet2_position = array_search($planet2,\
    \ $solar_system);\n    if ($planet1_position > $planet2_position) {\n        return\
    \ array_reverse(array_slice($solar_system, $planet2_position + 1, $planet1_position\
    \ - $planet2_position - 1));\n    }\n    else {\n        return array_slice($solar_system,\
    \ $planet1_position + 1, $planet2_position - $planet1_position - 1);\n    }\n\
    }\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2iqjh2s.php:49\n\
    Stack trace:\n#0 /tmp/tmp_2iqjh2s.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp_2iqjh2s.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune');\n    $planets = array_flip($planets);\n    $p1\
    \ = $planets[$planet1];\n    $p2 = $planets[$planet2];\n    if(!$p1 || !$p2) return\
    \ [];\n    if($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2\
    \ = $tmp;\n    }\n    return array_slice($planets, $p1+1, $p2-$p1-1);\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpht7nw1jk.php:33\n\
    Stack trace:\n#0 /tmp/tmpht7nw1jk.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpht7nw1jk.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  \n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  $pos1 = array_search($planet1,\
    \ $planets);\n  $pos2 = array_search($planet2, $planets);\n  $res = array();\n\
    \  if ($pos1 === FALSE or $pos2 === FALSE) return $res;\n  if ($pos1 < $pos2)\
    \ {\n    for ($i = $pos1 + 1; $i < $pos2; $i++) {\n      $res[] = $planets[$i];\n\
    \    }\n  } else {\n    for ($i = $pos2 + 1; $i < $pos1; $i++) {\n      $res[]\
    \ = $planets[$i];\n    }\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1,\
    \ $planets);\n    $index2 = array_search($planet2, $planets);\n    if( $index1\
    \ === false || $index2 === false ) {\n        return array();\n    }\n    if(\
    \ $index1 > $index2 ) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\necho \"bf(\\\"Jupiter\\\", \\\"Neptune\\\") ==>\
    \ (\\\"Saturn\\\", \\\"Uranus\\\") : \";\nvar_dump(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"bf(\\\"Earth\\\", \\\"Mercury\\\") ==> (\\\"Venus\\\") : \";\nvar_dump(bf(\"\
    Earth\", \"Mercury\"));\necho \"bf(\\\"Mercury\\\", \\\"Uranus\\\") ==> (\\\"\
    Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\") : \"\
    ;\nvar_dump(bf(\"Mercury\", \"Uranus\"));\necho \"bf(\\\"Earth\\\", \\\"Jupiter\\\
    \") ==> (\\\"Venus\\\", \\\"Mars\\\") : \";\nvar_dump(bf(\"Earth\", \"Jupiter\"\
    ));\necho \"bf(\\\"Neptune\\\", \\\"Earth\\\") ==> (\\\"Uranus\\\", \\\"Saturn\\\
    \", \\\"Jupiter\\\", \\\"Mars\\\", \\\"Venus\\\") : \";\nvar_dump(bf(\"Neptune\"\
    , \"Earth\"));\necho \"bf(\\\"Earth\\\", \\\"Pluto\\\") ==> () : \";\nvar_dump(bf(\"\
    Earth\", \"Pluto\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\") : array(2) {\n\
    \  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\n}\nbf(\"Earth\"\
    , \"Mercury\") ==> (\"Venus\") : array(1) {\n  [0]=>\n  string(5) \"Venus\"\n\
    }\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\") : array(5) {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5)\
    \ \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n\
    \  [4]=>\n  string(6) \"Saturn\"\n}\nbf(\"Earth\", \"Jupiter\") ==> (\"Venus\"\
    , \"Mars\") : array(1) {\n  [0]=>\n  string(4) \"Mars\"\n}\nbf(\"Neptune\", \"\
    Earth\") ==> (\"Uranus\", \"Saturn\", \"Jupiter\", \"Mars\", \"Venus\") : array(4)\
    \ {\n  [0]=>\n  string(4) \"Mars\"\n  [1]=>\n  string(7) \"Jupiter\"\n  [2]=>\n\
    \  string(6) \"Saturn\"\n  [3]=>\n  string(6) \"Uranus\"\n}\nbf(\"Earth\", \"\
    Pluto\") ==> () : array(0) {\n}\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpdbr5pzvm.php:51\nStack trace:\n#0 /tmp/tmpdbr5pzvm.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdbr5pzvm.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\tif (in_array($planet1, $planets) &&\
    \ in_array($planet2, $planets)) {\n\t\t$pos1 = array_search($planet1, $planets);\n\
    \t\t$pos2 = array_search($planet2, $planets);\n\t\tif ($pos1 < $pos2) {\n\t\t\t\
    $slice = array_slice($planets, $pos1+1, $pos2-$pos1-1);\n\t\t} else {\n\t\t\t\
    $slice = array_slice($planets, $pos2+1, $pos1-$pos2-1);\n\t\t}\n\t\treturn $slice;\n\
    \t} else {\n\t\treturn [];\n\t}\n}\n\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\n\
    var_dump(bf(\"Earth\", \"Mercury\"));\nvar_dump(bf(\"Mercury\", \"Uranus\"));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n  [0]=>\n  string(5)\
    \ \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n \
    \ [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp6f6__e2q.php:43\nStack trace:\n\
    #0 /tmp/tmp6f6__e2q.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp6f6__e2q.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $arr = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $p1 = array_search($planet1,\
    \ $arr);\n    $p2 = array_search($planet2, $arr);\n    if($p1 === false || $p2\
    \ === false) {\n        return [];\n    }\n    if($p1 > $p2) {\n        $p1 =\
    \ $p1 + $p2;\n        $p2 = $p1 - $p2;\n        $p1 = $p1 - $p2;\n    }\n    return\
    \ array_slice($arr, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm51u9dq1.php:39\n\
    Stack trace:\n#0 /tmp/tmpm51u9dq1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpm51u9dq1.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $solar_system = array(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1,\
    \ $solar_system);\n    $index2 = array_search($planet2, $solar_system);\n    if\
    \ ($index1 === false || $index2 === false) {\n        return array();\n    } else\
    \ {\n        if ($index1 > $index2) {\n            $index1 = $index1 + $index2;\n\
    \            $index2 = $index1 - $index2;\n            $index1 = $index1 - $index2;\n\
    \        }\n        return array_slice($solar_system, $index1 + 1, $index2 - $index1\
    \ - 1);\n    }\n}\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\nvar_dump(bf(\"Earth\"\
    , \"Mercury\"));\nvar_dump(bf(\"Mercury\", \"Uranus\"));\nvar_dump(bf(\"Mercury\"\
    , \"Jupiter\"));\nvar_dump(bf(\"Neptune\", \"Mercury\"));\nvar_dump(bf(\"Neptune\"\
    , \"Pluto\"));\nvar_dump(bf(\"Saturn\", \"Pluto\"));\nvar_dump(bf(\"Earth\", \"\
    Earth\"));\nvar_dump(bf(\"Galileo\", \"Mercury\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n  [0]=>\n  string(5)\
    \ \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n \
    \ [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\narray(3)\
    \ {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n\
    \  string(4) \"Mars\"\n}\narray(6) {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n\
    \  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n  [3]=>\n  string(7) \"\
    Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n  [5]=>\n  string(6) \"Uranus\"\n\
    }\narray(0) {\n}\narray(0) {\n}\narray(4) {\n  [0]=>\n  string(4) \"Mars\"\n \
    \ [1]=>\n  string(7) \"Jupiter\"\n  [2]=>\n  string(6) \"Saturn\"\n  [3]=>\n \
    \ string(6) \"Uranus\"\n}\narray(0) {\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmphdwo2ppt.php:48\nStack trace:\n#0 /tmp/tmphdwo2ppt.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphdwo2ppt.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $system = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $idxPlanet1 = array_search($planet1,\
    \ $system);\n  $idxPlanet2 = array_search($planet2, $system);\n  return ($idxPlanet1\
    \ === false || $idxPlanet2 === false) ? [] :\n    ($idxPlanet1 < $idxPlanet2)\
    \ ? array_slice($system, $idxPlanet1 + 1, $idxPlanet2 - $idxPlanet1 - 1) :\n \
    \   array_slice($system, $idxPlanet2 + 1, $idxPlanet1 - $idxPlanet2 - 1);\n}\n\
    echo \"<pre>bf(\\\"Jupiter\\\", \\\"Neptune\\\")\\r\\n\";\nvar_dump(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"</pre>\";\necho \"<pre>bf(\\\"Earth\\\", \\\"Mercury\\\
    \")\\r\\n\";\nvar_dump(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\necho \"\
    <pre>bf(\\\"Mercury\\\", \\\"Uranus\\\")\\r\\n\";\nvar_dump(bf(\"Mercury\", \"\
    Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "<pre>bf(\"Jupiter\", \"Neptune\")\narray(2) {\n  [0]=>\n  string(6) \"\
    Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\n}\n</pre><pre>bf(\"Earth\", \"Mercury\"\
    )\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\n</pre><pre>bf(\"Mercury\", \"\
    Uranus\")\narray(5) {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5) \"\
    Earth\"\n  [2]=>\n  string(4) \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n\
    \  string(6) \"Saturn\"\n}\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp2pxt5pj2.php:41\nStack trace:\n#0 /tmp/tmp2pxt5pj2.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2pxt5pj2.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $solarSystem = array(\n    \"Mercury\",\n    \"Venus\",\n   \
    \ \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\"\
    ,\n    \"Neptune\",\n  );\n  if (!in_array($planet1, $solarSystem) || !in_array($planet2,\
    \ $solarSystem)) {\n    return array();\n  }\n  $planets = array();\n  $start\
    \ = array_search($planet1, $solarSystem);\n  $end = array_search($planet2, $solarSystem);\n\
    \  if ($start > $end) {\n    $swap = $start;\n    $start = $end;\n    $end = $swap;\n\
    \  }\n  for ($i = $start + 1; $i < $end; $i++) {\n    $planets[] = $solarSystem[$i];\n\
    \  }\n  return $planets;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" ];\n\t$index_p1 = array_search($planet1,\
    \ $planets);\n\t$index_p2 = array_search($planet2, $planets);\n\tif ( $index_p1\
    \ === false || $index_p2 === false ) return [];\n\tif ( $index_p1 < $index_p2\
    \ ) {\n\t\treturn array_slice($planets, $index_p1 + 1, $index_p2 - $index_p1 -\
    \ 1);\n\t} else {\n\t\treturn array_slice($planets, $index_p2 + 1, $index_p1 -\
    \ $index_p2 - 1);\n\t}\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmeoas4vh.php:36\n\
    Stack trace:\n#0 /tmp/tmpmeoas4vh.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpmeoas4vh.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $idx1 = array_search($planet1, $planets);\n\
    \  $idx2 = array_search($planet2, $planets);\n  if($idx1 === false || $idx2 ===\
    \ false) return [];\n  if($idx1 > $idx2) return array_slice($planets, $idx2+1,\
    \ $idx1-$idx2-1);\n  return array_slice($planets, $idx1+1, $idx2-$idx1-1);\n}\n\
    \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn9z3cr9.php:33\n\
    Stack trace:\n#0 /tmp/tmpdn9z3cr9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpdn9z3cr9.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  \n  $orbit = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $orbitCount = count($orbit);\n\
    \  $result = array();\n  \n  if(!in_array($planet1, $orbit) || !in_array($planet2,\
    \ $orbit)){\n    return array();\n  }\n  \n  $planet1Index = array_search($planet1,\
    \ $orbit);\n  $planet2Index = array_search($planet2, $orbit);\n  \n  $start =\
    \ min($planet1Index, $planet2Index);\n  $end = max($planet1Index, $planet2Index);\n\
    \  \n  for($i = $start + 1; $i < $end; $i++){\n    $result[] = $orbit[$i];\n \
    \ }\n  \n  return $result;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  $first = null;\n  $second = null;\n\
    \  $result = [];\n  foreach ($planets as $key => $planet) {\n    if ($planet1\
    \ == $planet) {\n      $first = $key;\n    } else if ($planet2 == $planet) {\n\
    \      $second = $key;\n    }\n  }\n  if ($first === null || $second === null)\
    \ {\n    return [];\n  }\n  for ($i = $first + 1; $i < $second; $i++) {\n    $result[]\
    \ = $planets[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lvo2psm.php:41\n\
    Stack trace:\n#0 /tmp/tmp6lvo2psm.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp6lvo2psm.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $bodies = [\n        \"Mercury\",\n        \"Venus\",\n   \
    \     \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\"\n    ];\n    $planet1 = array_search($planet1,\
    \ $bodies);\n    $planet2 = array_search($planet2, $bodies);\n    if($planet1\
    \ < $planet2) {\n        $bodies = array_slice($bodies, $planet1+1, $planet2-$planet1-1);\n\
    \    } elseif($planet1 > $planet2) {\n        $bodies = array_slice($bodies, $planet2+1,\
    \ $planet1-$planet2-1);\n    } else {\n        $bodies = [];\n    }\n    return\
    \ $bodies;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Uranus\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Saturn\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"\
    Jupiter\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Saturn\", \"Mercury\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Unknown\", \"Mercury\"));\necho \"<br>\";\n\
    print_r(bf(\"Saturn\", \"Unknown\"));\necho \"<br>\";\nprint_r(bf(\"Jupiter\"\
    , \"Unknown\"));\necho \"<br>\";\nprint_r(bf(\"Unknown\", \"Jupiter\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Unknown\", \"Unknown\"));\necho \"<br>\";\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n   \
    \ [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4]\
    \ => Saturn\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n   \
    \ [2] => Mars\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] =>\
    \ Mars\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n)\n<br>Array\n(\n)\n<br>Array\n(\n    [0] => Venus\n    [1]\
    \ => Earth\n    [2] => Mars\n    [3] => Jupiter\n)\n<br>Array\n(\n    [0] => Venus\n\
    \    [1] => Earth\n    [2] => Mars\n)\n<br>Array\n(\n    [0] => Venus\n    [1]\
    \ => Earth\n    [2] => Mars\n)\n<br>Array\n(\n)\n<br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8jsx3b2r.php:78\nStack trace:\n#0 /tmp/tmp8jsx3b2r.php(81):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8jsx3b2r.php on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $ordered_planets = array();\n\
    \    if (in_array($planet1, $planets) && in_array($planet2, $planets)) {\n   \
    \     if (array_search($planet1, $planets) < array_search($planet2, $planets))\
    \ {\n            for ($i = array_search($planet1, $planets) + 1; $i < array_search($planet2,\
    \ $planets); $i++) {\n                array_push($ordered_planets, $planets[$i]);\n\
    \            }\n        } else {\n            for ($i = array_search($planet2,\
    \ $planets) + 1; $i < array_search($planet1, $planets); $i++) {\n            \
    \    array_push($ordered_planets, $planets[$i]);\n            }\n        }\n \
    \   }\n    return $ordered_planets;\n}\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$planets = [\n\t\t\"Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\"\
    ,\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\"\
    \n\t];\n\tif (!in_array($planet1, $planets) || !in_array($planet2, $planets))\
    \ {\n\t\treturn [];\n\t}\n\t$planetsInOrder = array_slice($planets, array_search($planet1,\
    \ $planets), array_search($planet2, $planets) - array_search($planet1, $planets)\
    \ + 1);\n\tarray_pop($planetsInOrder);\n\tarray_shift($planetsInOrder);\n\treturn\
    \ $planetsInOrder;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpey_9tdws.php:41\n\
    Stack trace:\n#0 /tmp/tmpey_9tdws.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpey_9tdws.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n\t$d = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$i1 = array_search($planet1, $d);\n\
    \t$i2 = array_search($planet2, $d);\n\tif($i1==false || $i2==false) return [];\n\
    \tif($i1<$i2) return array_slice($d, $i1+1, $i2-$i1-1);\n\telse return array_slice($d,\
    \ $i2+1, $i1-$i2-1);\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvabw0fmo.php:29\n\
    Stack trace:\n#0 /tmp/tmpvabw0fmo.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvabw0fmo.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
