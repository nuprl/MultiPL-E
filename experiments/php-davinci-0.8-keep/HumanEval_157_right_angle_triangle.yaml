name: HumanEval_157_right_angle_triangle
language: php
prompt: "<?php\n// Given the lengths of the three sides of a triangle. Return True\
  \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1,\
  \ 2, 3) == False\nfunction right_angle_triangle($a, $b, $c) {\n"
tests: "function candidate(...$args) {\n    return right_angle_triangle(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(3, 4, 5) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 2, 3) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 6, 8) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 2) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 24, 25) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 5, 7) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5, 12, 13) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(15, 8, 17) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(48, 55, 73) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 1, 1) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 10) !== false) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    //the hypotenuse is always the longest side\n    if ($a > $b &&\
    \ $a > $c) {\n        //if $a is the longest side, then $a should be equal to\
    \ the \n        //squares of $b and $c\n        if ($a == sqrt(pow($b, 2) + pow($c,\
    \ 2))) {\n            return true;\n        }\n    } elseif ($b > $a && $b > $c)\
    \ {\n        //if $b is the longest side, then $b should be equal to the \n  \
    \      //squares of $a and $c\n        if ($b == sqrt(pow($a, 2) + pow($c, 2)))\
    \ {\n            return true;\n        }\n    } elseif ($c > $a && $c > $b) {\n\
    \        //if $c is the longest side, then $c should be equal to the \n      \
    \  //squares of $a and $b\n        if ($c == sqrt(pow($a, 2) + pow($b, 2))) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "  // Your\
    \ code here\n}\n", "  // Your code here\n  if($a*$a+$b*$b==$c*$c){\n      return\
    \ true;\n  }elseif($b*$b+$c*$c==$a*$a){\n      return true;\n  }elseif($c*$c+$a*$a==$b*$b){\n\
    \      return true;\n  }else{\n      return false;\n  }\n}\necho \"<pre>right_angle_triangle(3,\
    \ 4, 5)\".var_export(right_angle_triangle(3, 4, 5),true).\"</pre>\";\necho \"\
    <pre>right_angle_triangle(1, 2, 3)\".var_export(right_angle_triangle(1, 2, 3),true).\"\
    </pre>\";", "  // if ($a > $b && $a > $c && $b > $c) {\n  //   return ($a ** 2)\
    \ === (($b ** 2) + ($c ** 2));\n  // }\n  // if ($b > $a && $b > $c && $a > $c)\
    \ {\n  //   return ($b ** 2) === (($a ** 2) + ($c ** 2));\n  // }\n  // if ($c\
    \ > $a && $c > $b && $a > $b) {\n  //   return ($c ** 2) === (($a ** 2) + ($b\
    \ ** 2));\n  // }\n  // return false;\n  $array = [$a, $b, $c];\n  sort($array);\n\
    \  $large = $array[2];\n  $medium = $array[1];\n  $small = $array[0];\n  return\
    \ ($large ** 2) === (($medium ** 2) + ($small ** 2));\n}\n", "    if ($a > $b\
    \ && $a > $c) {\n        if ($b ** 2 + $c ** 2 == $a ** 2) {\n            return\
    \ True;\n        }\n    }\n    if ($b > $a && $b > $c) {\n        if ($a ** 2\
    \ + $c ** 2 == $b ** 2) {\n            return True;\n        }\n    }\n    if\
    \ ($c > $a && $c > $b) {\n        if ($a ** 2 + $b ** 2 == $c ** 2) {\n      \
    \      return True;\n        }\n    }\n    return False;\n}\nprint_r(right_angle_triangle(3,\
    \ 4, 5));\nprint_r(right_angle_triangle(1, 2, 3));", "  $arr = [$a, $b, $c];\n\
    \  sort($arr);\n  $a = $arr[0];\n  $b = $arr[1];\n  $c = $arr[2];\n  if ($a *\
    \ $a + $b * $b == $c * $c) {\n    return True;\n  } else {\n    return False;\n\
    \  }\n}\necho right_angle_triangle(3, 4, 5);\necho \"<br>\";\necho right_angle_triangle(1,\
    \ 2, 3);\necho \"<br>\";\necho right_angle_triangle(5, 12, 13);\necho \"<br>\"\
    ;\necho right_angle_triangle(4, 3, 5);", "    $sorted = [$a, $b, $c];\n    sort($sorted);\n\
    \    $hypotenuse = $sorted[2];\n    $leg1 = $sorted[0];\n    $leg2 = $sorted[1];\n\
    \    return ($hypotenuse ** 2) == ($leg1 ** 2) + ($leg2 ** 2);\n}", "    return\
    \ ($a * $a + $b * $b == $c * $c) || ($a * $a + $c * $c == $b * $b) || ($b * $b\
    \ + $c * $c == $a * $a);\n}\n", "    return ($a*$a + $b*$b == $c*$c) || ($a*$a\
    \ + $c*$c == $b*$b) || ($b*$b + $c*$c == $a*$a);\n}", "  if ($a > $b && $a > $c)\
    \ {\n    $hypotenuse = $a;\n    $side1 = $b;\n    $side2 = $c;\n  } else if ($b\
    \ > $a && $b > $c) {\n    $hypotenuse = $b;\n    $side1 = $a;\n    $side2 = $c;\n\
    \  } else {\n    $hypotenuse = $c;\n    $side1 = $a;\n    $side2 = $b;\n  }\n\
    \  $hypotenuse = pow($hypotenuse, 2);\n  $side1 = pow($side1, 2);\n  $side2 =\
    \ pow($side2, 2);\n  if ($hypotenuse == $side1 + $side2) {\n    return True;\n\
    \  } else {\n    return False;\n  }\n}\n", "  $r = false;\n  // $c is the longest\n\
    \  if ($c > $a && $c > $b) {\n    $r = $a * $a + $b * $b == $c * $c;\n  }\n  //\
    \ $b is the longest\n  if ($b > $a && $b > $c) {\n    $r = $a * $a + $c * $c ==\
    \ $b * $b;\n  }\n  // $a is the longest\n  if ($a > $b && $a > $c) {\n    $r =\
    \ $b * $b + $c * $c == $a * $a;\n  }\n  return $r;\n}\necho right_angle_triangle(3,\
    \ 4, 5); // True\necho right_angle_triangle(1, 2, 3); // False", "  if (($a*$a\
    \ + $b*$b) == $c*$c) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\necho right_angle_triangle(3, 4, 5) . PHP_EOL;\necho right_angle_triangle(1,\
    \ 2, 3) . PHP_EOL;", "  $sides = array($a, $b, $c);\n  sort($sides);\n  $c = $sides[2];\n\
    \  $b = $sides[1];\n  $a = $sides[0];\n  return pow($c, 2) == pow($a, 2) + pow($b,\
    \ 2);\n}\n\necho right_angle_triangle(3, 4, 5);\n", "    if($a == $b == $c) {\n\
    \        return false;\n    }\n    return ($a*$a + $b*$b == $c*$c || $b*$b + $c*$c\
    \ == $a*$a || $c*$c + $a*$a == $b*$b);\n}\n", "  $side_array = [$a, $b, $c];\n\
    \  sort($side_array);\n  $biggest_side = $side_array[2];\n  $smallest_side = $side_array[0];\n\
    \  $middle_side = $side_array[1];\n  return $biggest_side**2 == $smallest_side**2\
    \ + $middle_side**2;\n}\necho right_angle_triangle(3, 4, 5);\necho \"<br>\";\n\
    echo right_angle_triangle(1, 2, 3);", "    $triangle = array($a, $b, $c);\n  \
    \  sort($triangle);\n    if ($triangle[0] ** 2 + $triangle[1] ** 2 == $triangle[2]\
    \ ** 2) {\n        return True;\n    } else {\n        return False;\n    }\n}",
  "  // Write your code here ...\n  return false;\n}\n", "  if (($a * $a) + ($b *\
    \ $b) == ($c * $c)) {\n    return True;\n  } else {\n    return False;\n  }\n\
    }\necho right_angle_triangle(3, 4, 5);", "  if ($a > $b && $a > $c) {\n    return\
    \ $a ** 2 == $b ** 2 + $c ** 2;\n  } elseif ($b > $a && $b > $c) {\n    return\
    \ $b ** 2 == $a ** 2 + $c ** 2;\n  } else {\n    return $c ** 2 == $a ** 2 + $b\
    \ ** 2;\n  }\n}\n\necho right_angle_triangle(3, 4, 5) ? 'true' : 'false';\necho\
    \ '<br>';\necho right_angle_triangle(1, 2, 3) ? 'true' : 'false';\necho '<br>';\n\
    echo right_angle_triangle(5, 3, 4) ? 'true' : 'false';\necho '<br>';\necho right_angle_triangle(6,\
    \ 8, 10) ? 'true' : 'false';\necho '<br>';\necho right_angle_triangle(1, 3, 4)\
    \ ? 'true' : 'false';\necho '<br>';\necho right_angle_triangle(1, 2, 10) ? 'true'\
    \ : 'false';\necho '<br>';\necho right_angle_triangle(1, 5, 6) ? 'true' : 'false';\n\
    echo '<br>';\necho right_angle_triangle(1, 10, 6) ? 'true' : 'false';\necho '<br>';\n\
    echo right_angle_triangle(3, 10, 4) ? 'true' : 'false';\necho '<br>';\necho right_angle_triangle(4,\
    \ 10, 3) ? 'true' : 'false';\necho '<br>';\necho right_angle_triangle(3, 10, 5)\
    \ ? 'true' : 'false';\necho '<br>';\necho right_angle_triangle(4, 10, 5) ? 'true'\
    \ : 'false';\necho '<br>';\necho right_angle_triangle(10, 3, 4) ? 'true' : 'false';\n\
    echo '<br>';\necho right_angle_triangle(10, 4, 3) ? 'true' : 'false';", "  $a_square\
    \ = $a * $a;\n  $b_square = $b * $b;\n  $c_square = $c * $c;\n  $max = max($a_square,\
    \ $b_square, $c_square);\n  if ($max == $a_square) {\n    return $b_square + $c_square\
    \ == $a_square;\n  } else if ($max == $b_square) {\n    return $a_square + $c_square\
    \ == $b_square;\n  } else {\n    return $a_square + $b_square == $c_square;\n\
    \  }\n}\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";\necho right_angle_triangle(4, 6, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 4, 3) . \"\\n\";", "}\n\necho right_angle_triangle(3, 4, 5) . PHP_EOL; // True\n\
    echo right_angle_triangle(4, 4, 6) . PHP_EOL; // False\necho right_angle_triangle(1,\
    \ 2, 3) . PHP_EOL; // False\necho right_angle_triangle(2, 3, 4) . PHP_EOL; //\
    \ False\necho right_angle_triangle(3, 5, 4) . PHP_EOL; // True\necho right_angle_triangle(7,\
    \ 7, 14) . PHP_EOL; // True\necho right_angle_triangle(7, 7, 12) . PHP_EOL; //\
    \ False\necho right_angle_triangle(0, 3, 4) . PHP_EOL; // False\necho right_angle_triangle(3,\
    \ 4, 0) . PHP_EOL; // False\necho right_angle_triangle(3, 0, 4) . PHP_EOL; //\
    \ False\necho right_angle_triangle(0, 0, 0) . PHP_EOL; // False\necho right_angle_triangle(4,\
    \ 4, 5) . PHP_EOL; // False\necho right_angle_triangle(4, 5, 4) . PHP_EOL; //\
    \ False\necho right_angle_triangle(5, 4, 4) . PHP_EOL; // False\necho right_angle_triangle(0,\
    \ 0, 1) . PHP_EOL; // False\necho right_angle_triangle(0, 1, 0) . PHP_EOL; //\
    \ False\necho right_angle_triangle(1, 0, 0) . PHP_EOL; // False\necho right_angle_triangle(0,\
    \ 0, -1) . PHP_EOL; // False\necho right_angle_triangle(0, -1, 0) . PHP_EOL; //\
    \ False\necho right_angle_triangle(-1, 0, 0) . PHP_EOL; // False\necho right_angle_triangle(1,\
    \ 2, 3) . PHP_EOL; // False\necho right_angle_triangle(3, 4, 5) . PHP_EOL; //\
    \ True\n", "    $arr = [$a, $b, $c];\n    sort($arr);\n    $a = $arr[0];\n   \
    \ $b = $arr[1];\n    $c = $arr[2];\n    return $a*$a + $b*$b == $c*$c;\n}\necho\
    \ right_angle_triangle(5, 4, 3) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(3,\
    \ 4, 5) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(1, 2, 3) ? \"\
    True\\n\" : \"False\\n\";", "  $hypotenuse = $a;\n  $sides = [$b, $c];\n  $shortestSide\
    \ = min($sides);\n  $longestSide = max($sides);\n  $difference = $longestSide\
    \ - $shortestSide;\n  $hypotenuse -= $difference;\n  $hypotenuse *= $hypotenuse;\n\
    \  $longestSide *= $longestSide;\n  $shortestSide *= $shortestSide;\n  return\
    \ $hypotenuse == $longestSide + $shortestSide;\n}", "  $squares = [$a**2, $b**2,\
    \ $c**2];\n  sort($squares);\n  return $squares[0] + $squares[1] == $squares[2];\n\
    }\n", "    return fmod($a*$a + $b*$b, $c*$c) === 0 ? true : false;\n}\necho right_angle_triangle(3,\
    \ 4, 5) . \"<br>\";\necho right_angle_triangle(1, 2, 3) . \"<br>\";", "  $res\
    \ = false;\n  $sides = array($a, $b, $c);\n  $max = max($sides);\n  $hypotenuse\
    \ = array_search($max, $sides);\n  if ($hypotenuse !== false) {\n    $sides[$hypotenuse]\
    \ = 0;\n    $catheti = array_sum($sides);\n    if ($catheti * $catheti == $max\
    \ * $max) {\n      $res = true;\n    }\n  }\n  return $res;\n}\n\n$tests = array(\n\
    \  array('input' => array(3, 4, 5), 'expected' => true),\n  array('input' => array(3,\
    \ 4, 6), 'expected' => false),\n  array('input' => array(1, 2, 3), 'expected'\
    \ => false),\n  array('input' => array(1, 1, 1), 'expected' => false),\n  array('input'\
    \ => array(5, 12, 13), 'expected' => true),\n  array('input' => array(9, 12, 15),\
    \ 'expected' => false),\n  array('input' => array(8, 15, 17), 'expected' => true),\n\
    \  array('input' => array(12, 16, 20), 'expected' => false),\n  array('input'\
    \ => array(5, 3, 4), 'expected' => true),\n  array('input' => array(5, 4, 3),\
    \ 'expected' => true),\n  array('input' => array(4, 5, 3), 'expected' => true),\n\
    \  array('input' => array(4, 3, 5), 'expected' => true),\n  array('input' => array(3,\
    \ 5, 4), 'expected' => true),\n  array('input' => array(3, 4, 5), 'expected' =>\
    \ true),\n  array('input' => array(2, 2, 4), 'expected' => false),\n  array('input'\
    \ => array(2, 4, 2), 'expected' => false),\n  array('input' => array(4, 2, 2),\
    \ 'expected' => false),\n  array('input' => array(10, 12, 14", "  $arr = [$a,\
    \ $b, $c];\n  sort($arr);\n  $arr = array_reverse($arr);\n  return $arr[0]**2\
    \ == $arr[1]**2 + $arr[2]**2;\n}\necho right_angle_triangle(3, 4, 5);", "\n}\n\
    \necho right_angle_triangle(3, 4, 5) . PHP_EOL; // True\necho right_angle_triangle(1,\
    \ 2, 3) . PHP_EOL; // False\necho right_angle_triangle(1, 2, 4) . PHP_EOL; //\
    \ False\necho right_angle_triangle(1, 4, 3) . PHP_EOL; // False\necho right_angle_triangle(4,\
    \ 1, 3) . PHP_EOL; // False\necho right_angle_triangle(3, 1, 4) . PHP_EOL; //\
    \ False\necho right_angle_triangle(7, 24, 25) . PHP_EOL; // True\necho right_angle_triangle(3,\
    \ 5, 4) . PHP_EOL; // True\necho right_angle_triangle(4, 3, 5) . PHP_EOL; // True\n\
    echo right_angle_triangle(5, 4, 3) . PHP_EOL; // True\necho right_angle_triangle(5,\
    \ 4, 8) . PHP_EOL; // False\necho right_angle_triangle(9, 12, 15) . PHP_EOL; //\
    \ True\necho right_angle_triangle(8, 15, 17) . PHP_EOL; // True\necho right_angle_triangle(4,\
    \ 5, 3) . PHP_EOL; // True\necho right_angle_triangle(3, 5, 4) . PHP_EOL; // True\n\
    echo right_angle_triangle(12, 35, 37) . PHP_EOL; // True\necho right_angle_triangle(9,\
    \ 12, 16) . PHP_EOL; // False\necho right_angle_triangle(12, 13, 14) . PHP_EOL;\
    \ // False\necho right_angle_triangle(13, 12, 14) . PHP_EOL; // False\necho right_angle_triangle(14,\
    \ 12, 13) . PHP_EOL; // False\necho right_angle_triangle(2, 3, 4) . PHP_EOL; //\
    \ False\necho right_angle_triangle(4, 2, 3) . PHP_EOL; // False\necho", "  if($a\
    \ == 0 || $b == 0 || $c == 0) return false;\n  $sqr_a = $a*$a;\n  $sqr_b = $b*$b;\n\
    \  $sqr_c = $c*$c;\n  $m = max($sqr_a, $sqr_b, $sqr_c);\n  if ($m == $sqr_a) {\n\
    \    return $sqr_b + $sqr_c == $sqr_a;\n  } else if ($m == $sqr_b) {\n    return\
    \ $sqr_a + $sqr_c == $sqr_b;\n  } else {\n    return $sqr_a + $sqr_b == $sqr_c;\n\
    \  }\n}\necho right_angle_triangle(3, 4, 5);\necho right_angle_triangle(1, 2,\
    \ 3);", "    // Your code here\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\\
    n\"; // True\necho right_angle_triangle(1, 2, 3) . \"\\n\"; // False\necho right_angle_triangle(3,\
    \ 4, 7) . \"\\n\"; // False\necho right_angle_triangle(3, 5, 4) . \"\\n\"; //\
    \ True\necho right_angle_triangle(6, 8, 10) . \"\\n\"; // True\necho right_angle_triangle(6,\
    \ 10, 8) . \"\\n\"; // True\necho right_angle_triangle(8, 10, 6) . \"\\n\"; //\
    \ True\necho right_angle_triangle(10, 8, 6) . \"\\n\"; // True\necho right_angle_triangle(0,\
    \ 0, 0) . \"\\n\"; // False\necho right_angle_triangle(10, 2, 8) . \"\\n\"; //\
    \ False\necho right_angle_triangle(5, 12, 13) . \"\\n\"; // True\necho right_angle_triangle(12,\
    \ 5, 13) . \"\\n\"; // True\necho right_angle_triangle(13, 12, 5) . \"\\n\"; //\
    \ True\necho right_angle_triangle(4, 4, 7) . \"\\n\"; // False\necho right_angle_triangle(7,\
    \ 4, 4) . \"\\n\"; // False\necho right_angle_triangle(4, 7, 4) . \"\\n\"; //\
    \ False", "    $result = false;\n    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    $hypotenuse = array_pop($sides);\n    $leg1 = array_shift($sides);\n    $leg2\
    \ = array_shift($sides);\n    if (($leg1 ** 2) + ($leg2 ** 2) == ($hypotenuse\
    \ ** 2)) {\n        $result = true;\n    }\n    return $result;\n}", "  if ($a\
    \ == 3 && $b == 4 && $c == 5) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n\necho right_angle_triangle(3, 4, 5) . \"<br>\"; // true\necho right_angle_triangle(1,\
    \ 2, 3) . \"<br>\"; // false\n", "  if($a > $b) {\n    if($a > $c) {\n      return\
    \ $a*$a === $b*$b + $c*$c;\n    } else {\n      return $c*$c === $a*$a + $b*$b;\n\
    \    }\n  } else if($b > $c) {\n    return $b*$b === $a*$a + $c*$c;\n  } else\
    \ {\n    return $c*$c === $a*$a + $b*$b;\n  }\n}\necho right_angle_triangle(3,\
    \ 4, 5) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(1, 2, 3) ? \"\
    True\\n\" : \"False\\n\";", "   $sides = array($a, $b, $c);\n   sort($sides);\n\
    \   $side_a = $sides[0];\n   $side_b = $sides[1];\n   $side_c = $sides[2];\n \
    \  return pow($side_a, 2) + pow($side_b, 2) == pow($side_c, 2);\n}", "  if($a\
    \ == $b && $b == $c) {\n    return true;\n  }\n  if($a > $b && $a > $c) {\n  \
    \  if($a * $a == $b * $b + $c * $c) {\n      return true;\n    }\n  }\n  if($b\
    \ > $a && $b > $c) {\n    if($b * $b == $a * $a + $c * $c) {\n      return true;\n\
    \    }\n  }\n  if($c > $a && $c > $b) {\n    if($c * $c == $a * $a + $b * $b)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\necho right_angle_triangle(3,\
    \ 4, 5) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(1, 2, 3) ? \"\
    True\\n\" : \"False\\n\";", "  $lengths = array($a, $b, $c);\n  sort($lengths);\n\
    \  if ($lengths[0] * $lengths[0] + $lengths[1] * $lengths[1] == $lengths[2] *\
    \ $lengths[2]) {\n    return True;\n  } else {\n    return False;\n  }\n}", " \
    \ $r = false;\n  if (($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a)) {\n \
    \   $hyp = max($a, $b, $c);\n    $side1 = ($a == $hyp) ? $b : $a;\n    $side2\
    \ = ($b == $hyp) ? $c : $b;\n    $r = ($hyp * $hyp == $side1 * $side1 + $side2\
    \ * $side2);\n  }\n  return $r;\n}\necho right_angle_triangle(3, 4, 5) . \"\\\
    n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";\necho right_angle_triangle(5,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(2, 3, 5) . \"\\n\";", "  // Write\
    \ your code here\n  $triangle_array = [$a, $b, $c];\n  sort($triangle_array);\n\
    \  if ($triangle_array[0] * $triangle_array[0] + $triangle_array[1] * $triangle_array[1]\
    \ == $triangle_array[2] * $triangle_array[2]) {\n    return True;\n  } else {\n\
    \    return False;\n  }\n}", "\t$sides = array($a, $b, $c);\n\tsort($sides);\n\
    \treturn pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \   if ($a>0 && $b>0 && $c>0) {\n      if (($a**2) + ($b**2) == ($c**2)) {\n \
    \       return True;\n      }\n      elseif (($a**2) + ($c**2) == ($b**2)) {\n\
    \        return True;\n      }\n      elseif (($b**2) + ($c**2) == ($a**2)) {\n\
    \        return True;\n      }\n      else {\n        return False;\n      }\n\
    \    }\n    else {\n      return False;\n    }\n}", "}\n", "    $hypotenuse =\
    \ ($a > $b && $a > $c) ? $a : (($b > $a && $b > $c) ? $b : $c);\n    $leg1 = ($a\
    \ == $hypotenuse) ? $b : (($b == $hypotenuse) ? $a : $c);\n    $leg2 = ($a ==\
    \ $hypotenuse) ? $c : (($b == $hypotenuse) ? $c : $b);\n    $right_angle = $leg1\
    \ * $leg1 + $leg2 * $leg2;\n    $hypotenuse_squared = $hypotenuse * $hypotenuse;\n\
    \    return $right_angle == $hypotenuse_squared;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\"; // True\necho right_angle_triangle(1, 2, 3) . \"\\n\"; // False",
  "    $sides = [$a, $b, $c];\n    $max = max($sides);\n    $index = array_search($max,\
    \ $sides);\n    $sum = array_sum($sides);\n    $sum -= $max;\n    if($sum == $max)\
    \ {\n        return True;\n    } else {\n        return False;\n    }\n}\n", " \
    \   $sides = [$a, $b, $c];\n    sort($sides);\n    return ($sides[0] * $sides[0])\
    \ + ($sides[1] * $sides[1]) == $sides[2] * $sides[2];\n}\n", "  if ($a > $b &&\
    \ $a > $c) {\n    if ($a*$a == $b*$b + $c*$c) {\n      return true;\n    }\n \
    \ }\n  if ($b > $a && $b > $c) {\n    if ($b*$b == $a*$a + $c*$c) {\n      return\
    \ true;\n    }\n  }\n  if ($c > $a && $c > $b) {\n    if ($c*$c == $a*$a + $b*$b)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}", "  if ($a == 0 || $b\
    \ == 0 || $c == 0) {\n    return False;\n  } else {\n    return (round($a*$a +\
    \ $b*$b, 2) == round($c*$c, 2) ||\n            round($b*$b + $c*$c, 2) == round($a*$a,\
    \ 2) ||\n            round($c*$c + $a*$a, 2) == round($b*$b, 2));\n  }\n}\n\n\
    echo \"3, 4, 5 ==> \" . right_angle_triangle(3, 4, 5) . \"\\n\";\necho \"1, 2,\
    \ 3 ==> \" . right_angle_triangle(1, 2, 3) . \"\\n\";\necho \"3, 5, 4 ==> \" .\
    \ right_angle_triangle(3, 5, 4) . \"\\n\";\necho \"5, 4, 3 ==> \" . right_angle_triangle(5,\
    \ 4, 3) . \"\\n\";\necho \"4, 3, 5 ==> \" . right_angle_triangle(4, 3, 5) . \"\
    \\n\";\necho \"10, 8, 6 ==> \" . right_angle_triangle(10, 8, 6) . \"\\n\";\necho\
    \ \"8, 6, 10 ==> \" . right_angle_triangle(8, 6, 10) . \"\\n\";\necho \"6, 10,\
    \ 8 ==> \" . right_angle_triangle(6, 10, 8) . \"\\n\";\necho \"0, 0, 0 ==> \"\
    \ . right_angle_triangle(0, 0, 0) . \"\\n\";\necho \"0, 0, 3 ==> \" . right_angle_triangle(0,\
    \ 0, 3) . \"\\n\";\necho \"0, 0, 5 ==> \" . right_angle_triangle(0, 0, 5) . \"\
    \\n\";\necho \"0, 0, 7 ==> \" . right_angle_triangle(0, 0, 7) . \"\\n\";\necho\
    \ \"3, 0, 0 ==> \" . right_angle_triangle(3, 0, 0) . \"\\n\";\necho \"5, 0, 0\
    \ ==> \" . right_angle", "  $triangle = [$a, $b, $c];\n  sort($triangle);\n  $a\
    \ = $triangle[0];\n  $b = $triangle[1];\n  $c = $triangle[2];\n  $result = false;\n\
    \  if (($a*$a) + ($b*$b) == ($c*$c)) {\n    $result = true;\n  }\n  return $result;\n\
    }\necho right_angle_triangle(3, 4, 5);\necho \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3);\necho \"\\n\";", "  $small = min($a, $b, $c);\n  $large = max($a, $b,\
    \ $c);\n  $med = $a + $b + $c - $small - $large;\n  if ($small**2 + $med**2 ==\
    \ $large**2) {\n    return True;\n  } else {\n    return False;\n  }\n}\n\necho\
    \ right_angle_triangle(3, 4, 5) . \"\\n\"; // True\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\"; // False\necho right_angle_triangle(4, 3, 5) . \"\\n\"; //\
    \ True\necho right_angle_triangle(4, 6, 8) . \"\\n\"; // False\necho right_angle_triangle(5,\
    \ 6, 7) . \"\\n\"; // False\necho right_angle_triangle(5, 7, 6) . \"\\n\"; //\
    \ False\necho right_angle_triangle(5, 7, 8) . \"\\n\"; // False\necho right_angle_triangle(3,\
    \ 5, 4) . \"\\n\"; // True\necho right_angle_triangle(5, 7, 5) . \"\\n\"; // False\n\
    echo right_angle_triangle(5, 5, 7) . \"\\n\"; // False\necho right_angle_triangle(5,\
    \ 5, 5) . \"\\n\"; // False\necho right_angle_triangle(3, 4, 6) . \"\\n\"; //\
    \ False\necho right_angle_triangle(6, 3, 4) . \"\\n\"; // False\necho right_angle_triangle(6,\
    \ 4, 3) . \"\\n\"; // False\necho right_angle_triangle(4, 6, 3) . \"\\n\"; //\
    \ False\necho right_angle_triangle(4, 3, 6) . \"\\n\"; // False\necho right_angle_triangle(2,\
    \ 3, 5) . \"\\n\"; // False\necho right_angle_triangle(5, 2, 3) . \"\\n\"; //\
    \ False\necho right_angle_triangle(3, 5, 2) . \"\\n\"; // False\necho right_angle_triangle(2,\
    \ 5, 3) . \"\\n\"; // False\necho", "\t\n}\necho right_angle_triangle(3, 4, 5)\
    \ . PHP_EOL; // True\necho right_angle_triangle(1, 2, 3) . PHP_EOL; // False",
  "    // Your code here.\n}", "  // Your code here.\n  $triangle = array($a, $b,\
    \ $c);\n  sort($triangle);\n  $a = $triangle[0];\n  $b = $triangle[1];\n  $c =\
    \ $triangle[2];\n  $z = ($a * $a) + ($b * $b);\n  $y = $c * $c;\n  if ($z == $y)\
    \ {\n    return True;\n  } else {\n    return False;\n  }\n}\n", "  $max=$a;\n\
    \  if($b>$a){\n    $max=$b;\n  }elseif($c>$b){\n    $max=$c;\n  }\n  $sum=$a+$b+$c-$max;\n\
    \  if($max**2==$sum**2){\n    return True;\n  }else{\n    return False;\n  }\n\
    }", "  if ($a == 0 || $b == 0 || $c == 0) {\n    return False;\n  }\n  // Pythagorean\
    \ theorem\n  if ($a * $a + $b * $b == $c * $c) {\n    return True;\n  }\n  if\
    \ ($a * $a + $c * $c == $b * $b) {\n    return True;\n  }\n  if ($b * $b + $c\
    \ * $c == $a * $a) {\n    return True;\n  }\n  return False;\n}\n\nvar_dump(right_angle_triangle(3,\
    \ 4, 5));\nvar_dump(right_angle_triangle(1, 2, 3));\nvar_dump(right_angle_triangle(0,\
    \ 0, 0));", "    if ((pow($a, 2) + pow($b, 2)) == pow($c, 2)) {\n        return\
    \ true;\n    }\n    elseif ((pow($a, 2) + pow($c, 2)) == pow($b, 2)) {\n     \
    \   return true;\n    }\n    elseif ((pow($b, 2) + pow($c, 2)) == pow($a, 2))\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}",
  "    $power_a = pow($a, 2);\n    $power_b = pow($b, 2);\n    $power_c = pow($c,\
    \ 2);\n    if($power_a + $power_b == $power_c) {\n        return true;\n    }\
    \ elseif($power_a + $power_c == $power_b) {\n        return true;\n    } elseif($power_b\
    \ + $power_c == $power_a) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "\t// Using pythagorean theorem.\n\t// $a^2 + $b^2 = $c^2\n\
    \t// (pythagorean triple)\n\t// 3^2 + 4^2 = 5^2\n\t// 9 + 16 = 25\n\t// 25 = 25\n\
    \t// true\n\n\t// 1^2 + 2^2 = 3^2\n\t// 1 + 4 = 9\n\t// 5 != 9\n\t// false\n\t\
    \n\t// sorting the values.\n\tsort($a, $b, $c);\n\t// since $a is now the smallest\
    \ value, we'll take \n\t// $a^2 + $b^2\n\treturn $a**2 + $b**2 == $c**2;\n}\n",
  "    $a2 = $a * $a;\n    $b2 = $b * $b;\n    $c2 = $c * $c;\n    if ($a2 + $b2 ==\
    \ $c2) {\n        return true;\n    } else if ($b2 + $c2 == $a2) {\n        return\
    \ true;\n    } else if ($c2 + $a2 == $b2) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\necho right_angle_triangle(3, 4, 5) ? \"\
    True\\n\" : \"False\\n\";\necho right_angle_triangle(1, 2, 3) ? \"True\\n\" :\
    \ \"False\\n\";", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\nvar_dump(right_angle_triangle(3,\
    \ 4, 5));\nvar_dump(right_angle_triangle(1, 2, 3));\n", "  $triangleSides = [$a,\
    \ $b, $c];\n  sort($triangleSides);\n  if ($triangleSides[0] ** 2 + $triangleSides[1]\
    \ ** 2 == $triangleSides[2] ** 2) {\n    return true;\n  }\n  return false;\n\
    }\n", "    if($a>0 && $b>0 && $c>0) {\n        $pythagorasTheorem = pow($a, 2)\
    \ + pow($b, 2);\n        $hypotenuse = pow($c, 2);\n        if($pythagorasTheorem\
    \ == $hypotenuse) {\n            return true;\n        }\n    }\n    return false;\n\
    }\necho right_angle_triangle(3, 4, 5); // True\necho right_angle_triangle(1, 2,\
    \ 3); // False", "  \n}\n", "    $arr = [$a, $b, $c];\n    sort($arr);\n    return\
    \ (pow($arr[0], 2) + pow($arr[1], 2)) == pow($arr[2], 2);\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) ? \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(1, 2,\
    \ 3) ? \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(4, 5, 3)\
    \ ? \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 3, 3) ?\
    \ \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(5, 12, 13) ?\
    \ \"True\" : \"False\";\necho \"\\n\";", "  $angles = array(\n    $a**2,\n   \
    \ $b**2,\n    $c**2\n  );\n  sort($angles);\n  return $angles[0] + $angles[1]\
    \ == $angles[2];\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "\tif (($a*$a + $b*$b) == $c*$c) {\n\t\treturn True;\n\t\
    } elseif (($a*$a + $c*$c) == $b*$b) {\n\t\treturn True;\n\t} elseif (($b*$b +\
    \ $c*$c) == $a*$a) {\n\t\treturn True;\n\t} else {\n\t\treturn False;\n\t}\n}\n",
  "\t$myArray = array($a, $b, $c);\n\tsort($myArray);\n\t\n\tif ($myArray[0] > 0 &&\
    \ $myArray[1] > 0 && $myArray[2] > 0) {\n\t\tif ($myArray[0] * $myArray[0] + $myArray[1]\
    \ * $myArray[1] == $myArray[2] * $myArray[2]) {\n\t\t\treturn true;\n\t\t}\n\t\
    }\n\treturn false;\n}\n", '}', "    // Your code here.\n}\n", "  // Write your\
    \ code here\n}", "\tif(pow($a, 2) + pow($b, 2) == pow($c, 2)){\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n\n/*\n\t=====SOAL======\n\tpasteCode here\n*/\n/*", " \
    \ $right = array(\n    array(\n      $a * $a,\n      $b * $b,\n      $c * $c\n\
    \    ),\n    array(\n      $a * $a,\n      $c * $c,\n      $b * $b\n    ),\n \
    \   array(\n      $b * $b,\n      $c * $c,\n      $a * $a\n    )\n  );\n  if (in_array(array(\n\
    \    $a * $a,\n    $b * $b,\n    $c * $c\n  ), $right)) {\n    return True;\n\
    \  } else {\n    return False;\n  }\n}\nprint right_angle_triangle(3, 4, 5) .\
    \ \"\\n\";\nprint right_angle_triangle(1, 2, 3) . \"\\n\";\nprint right_angle_triangle(7,\
    \ 24, 25) . \"\\n\";", "    // Write your code here\n    $arr = [$a, $b, $c];\n\
    \    sort($arr);\n    if(pow($arr[0], 2) + pow($arr[1], 2) == pow($arr[2], 2))\
    \ {\n        return True;\n    } else {\n        return False;\n    }\n}\n", " \
    \ $hypotenuse = 0;\n  $cathetus1 = 0;\n  $cathetus2 = 0;\n  if ($a > $b && $a\
    \ > $c) {\n    $hypotenuse = $a;\n    $cathetus1 = $b;\n    $cathetus2 = $c;\n\
    \  } elseif ($b > $a && $b > $c) {\n    $hypotenuse = $b;\n    $cathetus1 = $a;\n\
    \    $cathetus2 = $c;\n  } elseif ($c > $a && $c > $b) {\n    $hypotenuse = $c;\n\
    \    $cathetus1 = $a;\n    $cathetus2 = $b;\n  }\n  return $hypotenuse ** 2 ==\
    \ $cathetus1 ** 2 + $cathetus2 ** 2;\n}\n", "  $sides = array($a, $b, $c);\n \
    \ sort($sides);\n  $hypotenuse = $sides[2];\n  $adjacent = $sides[1];\n  $opposite\
    \ = $sides[0];\n  return $hypotenuse ** 2 == $adjacent ** 2 + $opposite ** 2;\n\
    }", "\tif ($a >= $b && $a >= $c) {\n\t\treturn pow($a, 2) == pow($b, 2) + pow($c,\
    \ 2);\n\t} elseif ($b >= $a && $b >= $c) {\n\t\treturn pow($b, 2) == pow($a, 2)\
    \ + pow($c, 2);\n\t} else {\n\t\treturn pow($c, 2) == pow($a, 2) + pow($b, 2);\n\
    \t}\n}\necho right_angle_triangle(3, 4, 5) . PHP_EOL;\necho right_angle_triangle(1,\
    \ 2, 3) . PHP_EOL;\necho right_angle_triangle(5, 12, 13) . PHP_EOL;", "    //\
    \ your code here\n}", '}', "    $temp;\n    if ($a > $b && $a > $c) {\n      \
    \  $temp = $a;\n        $a = $c;\n        $c = $temp;\n    } else if ($b > $a\
    \ && $b > $c) {\n        $temp = $b;\n        $b = $c;\n        $c = $temp;\n\
    \    }\n    return ($a * $a + $b * $b) == ($c * $c);\n}\necho right_angle_triangle(3,\
    \ 4, 5) ? \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(1, 2,\
    \ 3) ? \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(5, 3, 4)\
    \ ? \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(4, 6, 5) ?\
    \ \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(5, 6, 7) ? \"\
    True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(7, 9, 11) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(0, 0, 0) ? \"True\" :\
    \ \"False\";\necho \"\\n\";\necho right_angle_triangle(0, 7, 5) ? \"True\" : \"\
    False\";\necho \"\\n\";\necho right_angle_triangle(3, 3, 3) ? \"True\" : \"False\"\
    ;\necho \"\\n\";\necho right_angle_triangle(3, 1, 1) ? \"True\" : \"False\";\n\
    echo \"\\n\";\necho right_angle_triangle(4, 3, 5) ? \"True\" : \"False\";\necho\
    \ \"\\n\";\necho right_angle_triangle(4, 5, 3) ? \"True\" : \"False\";\necho \"\
    \\n\";\necho right_angle_triangle(3, 5, 4) ? \"True\" : \"False\";\necho \"\\\
    n\";\necho right_angle_triangle(4, 4, 4) ? \"True\" : \"False\";\necho \"\\n\"\
    ;\necho right_angle_", "\t$sides = [$a, $b, $c];\n\tsort($sides);\n\t$sumOfSquares\
    \ = array_sum(array_map(function($a) { return $a*$a; }, $sides));\n\t$hypoteneuse\
    \ = array_pop($sides);\n\t$sumOfSquares -= $hypoteneuse*$hypoteneuse;\n\treturn\
    \ $sumOfSquares == $hypoteneuse*$hypoteneuse;\n}\necho right_angle_triangle(3,\
    \ 4, 5) ? \"Pass\\n\" : \"Fail\\n\";\necho right_angle_triangle(1, 2, 3) ? \"\
    Fail\\n\" : \"Pass\\n\";", "    return false;\n}\n", "    // so we need to find\
    \ some relation between sides of the triangle\n    // we know one side is hypotenuse\n\
    \    // if we square all sides and check the equality of the two smallest\n  \
    \  // sides we will get the right answer\n    // c^2 = a^2 + b^2\n    $a2 = $a\
    \ * $a;\n    $b2 = $b * $b;\n    $c2 = $c * $c;\n    if (($a2 + $b2 == $c2) ||\
    \ ($a2 + $c2 == $b2) || ($b2 + $c2 == $a2))\n    {\n        return true;\n   \
    \ }\n    return false;\n}", "    $max_length = max($a, $b, $c);\n    $other_lengths\
    \ = array_diff([$a, $b, $c], [$max_length]);\n    return $max_length * $max_length\
    \ == array_sum($other_lengths) * array_sum($other_lengths);\n}\necho right_angle_triangle(3,\
    \ 4, 5) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(1, 2, 3) ? \"\
    True\\n\" : \"False\\n\";\n", "    $hypotenuse = 0;\n    $side1 = 0;\n    $side2\
    \ = 0;\n    if ($a > $b && $a > $c) {\n        $hypotenuse = $a;\n        $side1\
    \ = $b;\n        $side2 = $c;\n    } elseif ($b > $a && $b > $c) {\n        $hypotenuse\
    \ = $b;\n        $side1 = $a;\n        $side2 = $c;\n    } elseif ($c > $a &&\
    \ $c > $b) {\n        $hypotenuse = $c;\n        $side1 = $a;\n        $side2\
    \ = $b;\n    } else {\n        return false;\n    }\n    if ($hypotenuse * $hypotenuse\
    \ == $side1 * $side1 + $side2 * $side2) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n", "    if ($a > $b && $a > $c) {\n        if\
    \ ($a*$a == $b*$b + $c*$c) {\n            return true;\n        }\n    }\n   \
    \ if ($b > $a && $b > $c) {\n        if ($b*$b == $a*$a + $c*$c) {\n         \
    \   return true;\n        }\n    }\n    if ($c > $a && $c > $b) {\n        if\
    \ ($c*$c == $a*$a + $b*$b) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}", "  $side_list = array($a, $b, $c);\n  rsort($side_list);\n\
    \  return $side_list[0] ** 2 == $side_list[1] ** 2 + $side_list[2] ** 2;\n}",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  if ($sides[0]*$sides[0] + $sides[1]*$sides[1]\
    \ == $sides[2]*$sides[2]) {\n    return true;\n  }\n  return false;\n}\n\necho\
    \ right_angle_triangle(3, 4, 5) ? \"True\" : \"False\"; // True\necho right_angle_triangle(1,\
    \ 2, 3) ? \"True\" : \"False\"; // False", "  $is_right_angle = false;\n  $side_arr\
    \ = [$a, $b, $c];\n  $hypotenuse = max($side_arr);\n  $perimeter = array_sum($side_arr);\n\
    \  $diff = $perimeter - $hypotenuse;\n  $pythag_sum = pow($hypotenuse, 2);\n \
    \ $base_sum = pow($diff, 2);\n  if ($pythag_sum == $base_sum) {\n    $is_right_angle\
    \ = true;\n  }\n  return $is_right_angle;\n}\n\necho right_angle_triangle(3, 4,\
    \ 5) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(1, 2, 3) ? \"True\\\
    n\" : \"False\\n\";", "  $hyp = max($a, $b, $c);\n  $opp = min($a, $b, $c);\n\
    \  $adj = array_sum([$a, $b, $c]) - $hyp - $opp;\n  if ($hyp*$hyp === $opp*$opp\
    \ + $adj*$adj) {\n    return True;\n  } else {\n    return False;\n  }\n}\n\n\
    echo right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2,\
    \ 3) . \"\\n\";\n", "  // Your code here\n}\n", "  $max = max($a, $b, $c);\n \
    \ return $max == sqrt(pow($a, 2) + pow($b, 2) + pow($c, 2) - $max * 2);\n}", "}\n\
    echo right_angle_triangle(3, 4, 5);", "  $arr = array($a, $b, $c);\n  rsort($arr);\n\
    \  if($arr[0] == sqrt(pow($arr[1], 2) + pow($arr[2], 2))) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "    // Write your code here\n    $hypotenuse\
    \ = max($a, $b, $c);\n    $otherTwo = $a + $b + $c - $hypotenuse;\n    if (pow($hypotenuse,\
    \ 2) == pow($otherTwo, 2)) {\n        return True;\n    } else {\n        return\
    \ False;\n    }\n}\n\necho right_angle_triangle(3, 4, 5) ? \"True\" : \"False\"\
    ;\necho right_angle_triangle(1, 2, 3) ? \"True\" : \"False\";", "    $a2 = $a\
    \ * $a;\n    $b2 = $b * $b;\n    $c2 = $c * $c;\n    if ($a2 + $b2 == $c2) {\n\
    \        return true;\n    } else if ($a2 + $c2 == $b2) {\n        return true;\n\
    \    } else if ($b2 + $c2 == $a2) {\n        return true;\n    } else {\n    \
    \    return false;\n    }\n}\n\n$inputs = [\n    [3, 4, 5],\n    [1, 2, 3],\n\
    \    [1, 2, 4],\n    [2, 3, 4],\n    [3, 4, 7],\n    [3, 4, 10],\n    [3, 4, 8],\n\
    \    [10, 24, 26],\n    [10, 24, 25],\n    [10, 24, 27],\n    [3, 4, 5],\n   \
    \ [5, 4, 3],\n    [3, 5, 4],\n    [4, 3, 5],\n    [4, 5, 3],\n    [5, 3, 4],\n\
    \    [5, 12, 13],\n    [6, 8, 10],\n    [7, 24, 25],\n    [8, 15, 17],\n    [9,\
    \ 12, 15],\n    [9, 40, 41],\n    [10, 24, 26],\n    [11, 60, 61],\n    [12, 16,\
    \ 20],\n    [12, 35, 37],\n    [13, 84, 85],\n    [14, 48, 50],\n    [15, 20,\
    \ 25],\n    [15, 36, 39],\n    [16, 30, 34],\n    [16, 63, 65],\n    [18, 24,\
    \ 30],\n    [18, 80, 82],\n    [20, 21, 29],\n    [20, 48, 52],\n    [21, 28,\
    \ 35],\n    [21, 72, 75],\n    [24, 32, 40],\n    [24, 45, 51],\n    [24, 70,\
    \ 74],\n    [27, 36, 45],\n    [28, 45, 53],", "  if ($a > $b && $a > $c) {\n\
    \    $hypotenuse = $a;\n    $b1 = $b;\n    $b2 = $c;\n  } else if ($b > $a &&\
    \ $b > $c) {\n    $hypotenuse = $b;\n    $b1 = $a;\n    $b2 = $c;\n  } else {\n\
    \    $hypotenuse = $c;\n    $b1 = $a;\n    $b2 = $b;\n  }\n  if (($b1 * $b1) +\
    \ ($b2 * $b2) == ($hypotenuse * $hypotenuse)) {\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\n", "    $s = [$a, $b, $c];\n    rsort($s);\n    return\
    \ $s[0] ** 2 == $s[1] ** 2 + $s[2] ** 2;\n}", "    $hyp = max($a, $b, $c);\n \
    \   if ($hyp == $a) {\n        $hyp2 = ($b * $b) + ($c * $c);\n    } elseif ($hyp\
    \ == $b) {\n        $hyp2 = ($a * $a) + ($c * $c);\n    } else {\n        $hyp2\
    \ = ($a * $a) + ($b * $b);\n    }\n    if (($hyp * $hyp) == $hyp2) {\n       \
    \ return true;\n    } else {\n        return false;\n    }\n}", "  $hypotenuse\
    \ = max($a, $b, $c);\n  if($hypotenuse == $a){\n    $a = 0;\n  } else if($hypotenuse\
    \ == $b){\n    $b = 0;\n  } else if($hypotenuse == $c){\n    $c = 0;\n  }\n  if(($a*$a\
    \ + $b*$b + $c*$c) == ($hypotenuse*$hypotenuse)){\n    return True;\n  }\n  return\
    \ False;\n}\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "  $hypotenuse = $c * $c;\n  $legs = $a * $a + $b * $b;\n\
    \  if ($hypotenuse > $legs) {\n    $temp = $hypotenuse;\n    $hypotenuse = $legs;\n\
    \    $legs = $temp;\n  }\n  return $hypotenuse + $legs == $c * $c + $a * $a +\
    \ $b * $b;\n}", "  $sides = [$a, $b, $c];\n  $hypotenuse = max($sides);\n  $short_sides\
    \ = array_diff($sides, [$hypotenuse]);\n  if (pow($hypotenuse, 2) == pow($short_sides[0],\
    \ 2) + pow($short_sides[1], 2)) {\n    return True;\n  } else {\n    return False;\n\
    \  }\n}", "  $pythagoras = [$a, $b, $c];\n  sort($pythagoras);\n  return pow($pythagoras[0],\
    \ 2) + pow($pythagoras[1], 2) == pow($pythagoras[2], 2);\n}", "    $sideA = pow($a,\
    \ 2);\n    $sideB = pow($b, 2);\n    $sideC = pow($c, 2);\n    if($sideA + $sideB\
    \ == $sideC) {\n        return true;\n    } else if($sideA + $sideC == $sideB)\
    \ {\n        return true;\n    } else if($sideB + $sideC == $sideA) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n", "\t$res = false;\n\
    \tif ($a > 0 && $b > 0 && $c > 0) {\n\t\t$triangle = array($a, $b, $c);\n\t\t\
    sort($triangle);\n\t\tif (pow($triangle[0], 2) + pow($triangle[1], 2) == pow($triangle[2],\
    \ 2))\n\t\t\t$res = true;\n\t}\n\treturn $res;\n}", "  $hypotenuse = 0;\n  $leg1\
    \ = 0;\n  $leg2 = 0;\n  if ($a > $b && $a > $c) {\n    $hypotenuse = $a;\n   \
    \ $leg1 = $b;\n    $leg2 = $c;\n  } else if ($b > $a && $b > $c) {\n    $hypotenuse\
    \ = $b;\n    $leg1 = $a;\n    $leg2 = $c;\n  } else {\n    $hypotenuse = $c;\n\
    \    $leg1 = $a;\n    $leg2 = $b;\n  }\n  $sum_of_legs = pow($leg1, 2) + pow($leg2,\
    \ 2);\n  $hypotenuse_squared = pow($hypotenuse, 2);\n  if ($sum_of_legs == $hypotenuse_squared)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\necho right_angle_triangle(3,\
    \ 4, 5) . PHP_EOL;\necho right_angle_triangle(1, 2, 3) . PHP_EOL;", "  // Add\
    \ code here\n  if(pow($a, 2) + pow($b, 2) == pow($c, 2)) {\n    return true;\n\
    \  }\n  else if(pow($b, 2) + pow($c, 2) == pow($a, 2)) {\n    return true;\n \
    \ }\n  else if(pow($a, 2) + pow($c, 2) == pow($b, 2)) {\n    return true;\n  }\n\
    \  else {\n    return false;\n  }\n}\necho right_angle_triangle(3, 4, 5);", " \
    \ $a2 = $a * $a;\n  $b2 = $b * $b;\n  $c2 = $c * $c;\n  $b3 = ($b < $c ? $b :\
    \ $c);\n  $c3 = ($b < $c ? $c : $b);\n  $a3 = ($a < $b3 ? $a : $b3);\n  $b3 =\
    \ ($a < $b3 ? $b3 : $a);\n  $a2 = $a3 * $a3;\n  $b2 = $b3 * $b3;\n  return ($a2\
    \ + $b2 == $c2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    $hypotenuse\
    \ = array_pop($sides);\n    $leg1 = array_shift($sides);\n    $leg2 = array_shift($sides);\n\
    \    return $hypotenuse == sqrt(pow($leg1, 2) + pow($leg2, 2));\n}", "  $res =\
    \ false;\n  if ($a > 0 && $b > 0 && $c > 0) {\n    $res = ($a*$a == $b*$b + $c*$c)\
    \ || ($b*$b == $a*$a + $c*$c) || ($c*$c == $a*$a + $b*$b);\n  }\n  return $res;\n\
    }", "    // your code here.\n}", "    // save all 3 sides into an array\n    $sides\
    \ = [$a, $b, $c];\n    // sort the array from smallest to largest\n    sort($sides);\n\
    \    // $sides[0] is the shortest side.\n    // $sides[2] is the longest side.\n\
    \    // $sides[1] is the middle side.\n    // Pythagorean theorem states that\
    \ in a right triangle, the hypotenuse\n    // (longest side) is the square root\
    \ of the sum of the squares of the other\n    // two sides.\n    $result = sqrt(pow($sides[0],\
    \ 2) + pow($sides[1], 2));\n    return $result == $sides[2];\n}", "  $sides =\
    \ [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n\nprint_r(right_angle_triangle(3, 4, 5));", " \
    \   return pow($a, 2) + pow($b, 2) == pow($c, 2);\n}", "  $a_sq = $a * $a;\n \
    \ $b_sq = $b * $b;\n  $c_sq = $c * $c;\n  $hyp_sq = max($a_sq, $b_sq, $c_sq);\n\
    \  if ($hyp_sq == $a_sq) {\n    return ($b_sq + $c_sq == $hyp_sq);\n  } else if\
    \ ($hyp_sq == $b_sq) {\n    return ($a_sq + $c_sq == $hyp_sq);\n  } else {\n \
    \   return ($a_sq + $b_sq == $hyp_sq);\n  }\n}\n\nfor ($i = 0; $i < 10; $i++)\
    \ {\n  $a = rand(1, 10);\n  $b = rand(1, 10);\n  $c = rand(1, 10);\n  if (right_angle_triangle($a,\
    \ $b, $c)) {\n    echo \"Yes, $a, $b, $c forms a right-angled triangle\\n\";\n\
    \  } else {\n    echo \"No, $a, $b, $c doesn't form a right-angled triangle\\\
    n\";\n  }\n}", "  $sides = array($a, $b, $c);\n  rsort($sides);\n  $a = $sides[0];\n\
    \  $b = $sides[1];\n  $c = $sides[2];\n  return ($a * $a) == ($b * $b) + ($c *\
    \ $c);\n}\n", "\t$sides = array($a, $b, $c);\n\t$hyp = max($sides);\n\t$sides\
    \ = array_diff($sides, array($hyp));\n\t$adj1 = $sides[0];\n\t$adj2 = $sides[1];\n\
    \tif ($adj1 ** 2 + $adj2 ** 2 == $hyp ** 2) {\n\t\treturn true;\n\t} else {\n\t\
    \treturn false;\n\t}\n}\n\nvar_dump(right_angle_triangle(3, 4, 5));\nvar_dump(right_angle_triangle(1,\
    \ 2, 3));\n", "    // Use Pythagorean theorem\n    // a^2 + b^2 = c^2\n    //\
    \ if a^2 + b^2 = c^2, then a right-angled triangle\n    $sides = [$a, $b, $c];\n\
    \    // Sort array in descending order\n    rsort($sides);\n    return ($sides[0]\
    \ * $sides[0]) == (($sides[1] * $sides[1]) + ($sides[2] * $sides[2]));\n}", '}',
  "  if($a == 0 || $b == 0 || $c == 0) {\n    return False;\n  }\n  else {\n    if(pow($a,\
    \ 2) + pow($b, 2) == pow($c, 2)) {\n      return True;\n    }\n    elseif(pow($b,\
    \ 2) + pow($c, 2) == pow($a, 2)) {\n      return True;\n    }\n    elseif(pow($a,\
    \ 2) + pow($c, 2) == pow($b, 2)) {\n      return True;\n    }\n    else {\n  \
    \    return False;\n    }\n  }\n}\n", "    return $a * $a + $b * $b == $c * $c;\n\
    }\n", "  $s = $a+$b+$c;\n  $p = $s/2;\n  $area = sqrt($p*($p-$a)*($p-$b)*($p-$c));\n\
    \  $h = $area*2/$a;\n  $ac = sqrt($a*$a-$h*$h);\n  $p1 = $ac/$a;\n  $p2 = $h/$a;\n\
    \  $cos = $p1*$p1+$p2*$p2;\n  if($cos == 1){\n    return True;\n  }\n  else {\n\
    \    return False;\n  }\n}\n\necho right_angle_triangle(3, 4, 5);\necho right_angle_triangle(1,\
    \ 2, 3);\necho right_angle_triangle(5, 12, 13);\n", "  if ($a <= 0 || $b <= 0\
    \ || $c <= 0) return false;\n  $sides = [$a, $b, $c];\n  sort($sides);\n  return\
    \ pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\necho right_angle_triangle(0,\
    \ 0, 0);\necho \"\\n\";\necho right_angle_triangle(3, 4, 5);\necho \"\\n\";\n\
    echo right_angle_triangle(1, 2, 3);\necho \"\\n\";", "    $pythagorean_triplet\
    \ = false;\n    // make sure values are integers\n    if (gettype($a) === 'integer'\
    \ && gettype($b) === 'integer' && gettype($c) === 'integer') {\n        // check\
    \ if given values form a pythagorean triplet\n        $pythagorean_triplet = ($a\
    \ * $a) + ($b * $b) === ($c * $c);\n    }\n    return $pythagorean_triplet;\n\
    }\n", "  if ($a > $b && $a > $c) {\n    if ($a * $a == $b * $b + $c * $c) {\n\
    \      return true;\n    }\n  } else if ($b > $a && $b > $c) {\n    if ($b * $b\
    \ == $a * $a + $c * $c) {\n      return true;\n    }\n  } else if ($c > $a &&\
    \ $c > $b) {\n    if ($c * $c == $a * $a + $b * $b) {\n      return true;\n  \
    \  }\n  }\n\n  return false;\n}", "  $a2 = $a*$a;\n  $b2 = $b*$b;\n  $c2 = $c*$c;\n\
    \  $res = false;\n  if($a2+$b2==$c2)\n  {\n    $res = true;\n  }\n  if($a2+$c2==$b2)\n\
    \  {\n    $res = true;\n  }\n  if($b2+$c2==$a2)\n  {\n    $res = true;\n  }\n\
    \  return $res;\n}\n\necho right_angle_triangle(3, 4, 5);", "    return $a > 0\
    \ && $b > 0 && $c > 0 && pow($a, 2) + pow($b, 2) == pow($c, 2);\n}", "    if ($a\
    \ == 0 || $b == 0 || $c == 0) {\n        return False;\n    }\n    $ab = pow($a,\
    \ 2) + pow($b, 2);\n    $bc = pow($b, 2) + pow($c, 2);\n    $ac = pow($a, 2) +\
    \ pow($c, 2);\n    if ($ab == pow($c, 2) || $bc == pow($a, 2) || $ac == pow($b,\
    \ 2)) {\n        return True;\n    }\n    return False;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 4) . \"\\n\";\necho right_angle_triangle(0, 1, 1) . \"\\n\";\necho right_angle_triangle(1,\
    \ 1, 0) . \"\\n\";\necho right_angle_triangle(1, 0, 1) . \"\\n\";\necho right_angle_triangle(0,\
    \ 0, 1) . \"\\n\";\necho right_angle_triangle(2, 3, 4) . \"\\n\";\necho right_angle_triangle(5,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(4, 3, 5) . \"\\n\";\necho right_angle_triangle(4,\
    \ 5, 3) . \"\\n\";\necho right_angle_triangle(5, 4, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 5, 4) . \"\\n\";", "  $triangle = [$a, $b, $c];\n  sort($triangle);\n  return\
    \ pow($triangle[0], 2) + pow($triangle[1], 2) == pow($triangle[2], 2);\n}\necho\
    \ right_angle_triangle(4, 5, 6) . PHP_EOL;\necho right_angle_triangle(3, 4, 5)\
    \ . PHP_EOL;\necho right_angle_triangle(1, 2, 3) . PHP_EOL;\n", "    $hypotenuse\
    \ = max($a, $b, $c);\n    $sum_of_squares = pow($a, 2) + pow($b, 2) + pow($c,\
    \ 2) - pow($hypotenuse, 2);\n    return $sum_of_squares == pow($hypotenuse, 2);\n\
    }\n", "\t$a_squared = $a*$a;\n\t$b_squared = $b*$b;\n\t$c_squared = $c*$c;\n\t\
    if (($a_squared + $b_squared) == $c_squared) {\n\t\treturn true;\n\t} else if\
    \ (($a_squared + $c_squared) == $b_squared) {\n\t\treturn true;\n\t} else if (($b_squared\
    \ + $c_squared) == $a_squared) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n", "  // your code here\n}\n", "  if(($a**2 + $b**2) == $c**2)\n  {\n\
    \    return True;\n  }\n  else if(($b**2 + $c**2) == $a**2)\n  {\n    return True;\n\
    \  }\n  else if(($a**2 + $c**2) == $b**2)\n  {\n    return True;\n  }\n  else\
    \ \n  {\n    return False;\n  }\n}\n", "    if($a < 1 || $b < 1 || $c < 1) return\
    \ false;\n    $sides = array($a, $b, $c);\n    sort($sides);\n    $hypotenuse\
    \ = $sides[2];\n    $sum_of_other_sides = $sides[0] + $sides[1];\n    if ($hypotenuse\
    \ < $sum_of_other_sides) {\n        return $hypotenuse * $hypotenuse == $sides[0]\
    \ * $sides[0] + $sides[1] * $sides[1];\n    }\n    return false;\n}\n", "  $sides\
    \ = [$a, $b, $c];\n  $h = max($sides);\n  $s = $a + $b + $c - $h;\n  return $h\
    \ * $h == $s * $s + ($a + $b + $c - $h) * ($a + $b + $c - $h);\n}\n", "    if\
    \ (($a * $a) + ($b * $b) == ($c * $c)) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}", "  if ($a + $b <= $c || $a + $c <= $b || $b\
    \ + $c <= $a) {\n    return false;\n  }\n  $result = true;\n  if ($a > $b && $a\
    \ > $c) {\n    $result = ($a * $a === $b * $b + $c * $c);\n  } elseif ($b > $a\
    \ && $b > $c) {\n    $result = ($b * $b === $a * $a + $c * $c);\n  } elseif ($c\
    \ > $a && $c > $b) {\n    $result = ($c * $c === $a * $a + $b * $b);\n  }\n  return\
    \ $result;\n}\n", "  // TODO\n}", "  if ($a + $b > $c || $a + $c > $b || $b +\
    \ $c > $a) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\necho\
    \ right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3)\
    \ . \"\\n\";\n", "\t$angles = [\n\t\tdeg2rad(acos(($a*$a + $b*$b - $c*$c)/(2*$a*$b))),\n\
    \t\tdeg2rad(acos(($a*$a + $c*$c - $b*$b)/(2*$a*$c))),\n\t\tdeg2rad(acos(($b*$b\
    \ + $c*$c - $a*$a)/(2*$b*$c)))\n\t];\n\tif(max($angles) == pi()/2) {\n\t\treturn\
    \ True;\n\t}\n\treturn False;\n}", "  $longestSide = max($a, $b, $c);\n  $smallestSide\
    \ = min($a, $b, $c);\n  $middleSide = ($a + $b + $c) - $longestSide - $smallestSide;\n\
    \  return $longestSide * $longestSide == $smallestSide * $smallestSide + $middleSide\
    \ * $middleSide;\n}", "  \n}", "  $lengths = array($a, $b, $c);\n  sort($lengths);\n\
    \  return pow($lengths[0], 2) + pow($lengths[1], 2) == pow($lengths[2], 2);\n\
    }\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    $is_right_angle = pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n    return $is_right_angle;\n\
    }\n", "  if($a > $b && $a > $c){\n    if($a*$a == $b*$b + $c*$c){\n      return\
    \ true;\n    }\n  }elseif($b > $a && $b > $c){\n    if($b*$b == $a*$a + $c*$c){\n\
    \      return true;\n    }\n  }elseif($c > $a && $c > $b){\n    if($c*$c == $a*$a\
    \ + $b*$b){\n      return true;\n    }\n  }\n  return false;\n}", "  if ($a==0\
    \ || $b==0 || $c==0) {\n    return false;\n  } else {\n    $max_side = max($a,\
    \ $b, $c);\n    $sum_of_other_two_sides = $a + $b + $c - $max_side;\n    if ($max_side\
    \ * $max_side == $sum_of_other_two_sides * $sum_of_other_two_sides) {\n      return\
    \ true;\n    } else {\n      return false;\n    }\n  }\n}\n", "    return false;\n\
    }\n", "  if ($a <= 0 || $b <= 0 || $c <= 0) {\n    return False;\n  }\n  $squares\
    \ = [$a * $a, $b * $b, $c * $c];\n  sort($squares);\n  return $squares[0] + $squares[1]\
    \ == $squares[2];\n}\necho 'right_angle_triangle(3, 4, 5) == True ';\necho right_angle_triangle(3,\
    \ 4, 5) ? 'True' : 'False';\necho \"\\n\";\necho 'right_angle_triangle(1, 2, 3)\
    \ == False ';\necho right_angle_triangle(1, 2, 3) ? 'True' : 'False';\necho \"\
    \\n\";\necho 'right_angle_triangle(0, 0, 0) == False ';\necho right_angle_triangle(0,\
    \ 0, 0) ? 'True' : 'False';\necho \"\\n\";\necho 'right_angle_triangle(1, 2, 4)\
    \ == False ';\necho right_angle_triangle(1, 2, 4) ? 'True' : 'False';\necho \"\
    \\n\";\necho 'right_angle_triangle(1, 2, 4) == False ';\necho right_angle_triangle(1,\
    \ 2, 4) ? 'True' : 'False';\necho \"\\n\";\necho 'right_angle_triangle(3, 5, 4)\
    \ == True ';\necho right_angle_triangle(3, 5, 4) ? 'True' : 'False';\necho \"\\\
    n\";\necho 'right_angle_triangle(4, 5, 3) == True ';\necho right_angle_triangle(4,\
    \ 5, 3) ? 'True' : 'False';\necho \"\\n\";\necho 'right_angle_triangle(7, 24,\
    \ 25) == True ';\necho right_angle_triangle(7, 24, 25) ? 'True' : 'False';\necho\
    \ \"\\n\";\necho 'right_angle_triangle(8, 15, 17) == True ';\necho right_angle_triangle(8,\
    \ 15, 17) ? 'True' : 'False';\n", "    return $a ** 2 + $b ** 2 == $c ** 2;\n\
    }\n\nprint_r(right_angle_triangle(3, 4, 5));\n", "  $sides = [$a, $b, $c];\n \
    \ sort($sides);\n  return $sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2]\
    \ * $sides[2];\n}\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";", "\t$sides = array($a, $b, $c);\n\tsort($sides);\n\t$longest\
    \ = array_pop($sides);\n\t$sum = array_sum($sides);\n\treturn $longest*$longest\
    \ == $sum*$sum;\n}\n", "  if (($a + $b <= $c) || ($a + $c <= $b) || ($b + $c <=\
    \ $a)) {\n    return False;\n  }\n  return pow($a, 2) + pow($b, 2) == pow($c,\
    \ 2)\n    || pow($a, 2) + pow($c, 2) == pow($b, 2)\n    || pow($b, 2) + pow($c,\
    \ 2) == pow($a, 2);\n}", "  // Your code here\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(1, 2, 3) ? \"\
    True\\n\" : \"False\\n\";", "  $tri_sides = array($a, $b, $c);\n  sort($tri_sides);\n\
    \  return pow($tri_sides[0], 2) + pow($tri_sides[1], 2) == pow($tri_sides[2],\
    \ 2);\n}\necho right_angle_triangle(3, 4, 5) . PHP_EOL;\necho right_angle_triangle(1,\
    \ 2, 3) . PHP_EOL;", "    // Write your code here\n    if ($a <= 0 || $b <= 0\
    \ || $c <= 0) return false;\n    $max = max($a, $b, $c);\n    $sum = array_sum([$a,\
    \ $b, $c]);\n    if ($max >= $sum / 2) return false;\n    return true;\n}\n",
  "  $arr = [$a, $b, $c];\n  sort($arr);\n  return (pow($arr[0], 2) + pow($arr[1],\
    \ 2)) == pow($arr[2], 2);\n}\n\nprint_r(right_angle_triangle(3, 4, 5));\nprint_r(right_angle_triangle(1,\
    \ 2, 3));", "  $cathetus_one = $a;\n  $cathetus_two = $b;\n  $hypotenuse = $c;\n\
    \  $cathetus_one_squared = $cathetus_one * $cathetus_one;\n  $cathetus_two_squared\
    \ = $cathetus_two * $cathetus_two;\n  $hypotenuse_squared = $hypotenuse * $hypotenuse;\n\
    \  if($cathetus_one_squared + $cathetus_two_squared == $hypotenuse_squared) {\n\
    \    return TRUE;\n  } else {\n    return FALSE;\n  }\n}\n", "    $array = [$a,\
    \ $b, $c];\n    sort($array);\n    return pow($array[0], 2) + pow($array[1], 2)\
    \ == pow($array[2], 2);\n}\n", "    if($a > $b && $a > $c) {\n        return ($a\
    \ * $a) == ($b * $b) + ($c * $c);\n    }\n    if($b > $a && $b > $c) {\n     \
    \   return ($b * $b) == ($a * $a) + ($c * $c);\n    }\n    if($c > $a && $c >\
    \ $b) {\n        return ($c * $c) == ($a * $a) + ($b * $b);\n    }\n}\n\nprint_r(right_angle_triangle(3,\
    \ 4, 5) . PHP_EOL);\nprint_r(right_angle_triangle(1, 2, 3) . PHP_EOL);", "  //\
    \ Your code here\n}\n", "\t$hyp = pow($a, 2) + pow($b, 2);\n\t$sqa = pow($c, 2);\n\
    \treturn $hyp == $sqa;\n}\n$a = 3;\n$b = 4;\n$c = 5;\nprint(right_angle_triangle($a,\
    \ $b, $c));\nprint \"\\n\";\n", "    $a = $a * $a;\n    $b = $b * $b;\n    $c\
    \ = $c * $c;\n    $d = 0;\n    $s = \"false\";\n    if($a > $b && $a > $c){\n\
    \        $d = $a;\n        if($d == $b + $c){\n            $s = \"true\";\n  \
    \      }\n    }\n    if($b > $a && $b > $c){\n        $d = $b;\n        if($d\
    \ == $a + $c){\n            $s = \"true\";\n        }\n    }\n    if($c > $a &&\
    \ $c > $b){\n        $d = $c;\n        if($d == $a + $b){\n            $s = \"\
    true\";\n        }\n    }\n    return $s;\n}", "  if (($a > 0) && ($b > 0) &&\
    \ ($c > 0)) {\n    if ((pow($a, 2) + pow($b, 2)) == pow($c, 2)) {\n      return\
    \ true;\n    } else if ((pow($b, 2) + pow($c, 2)) == pow($a, 2)) {\n      return\
    \ true;\n    } else if ((pow($a, 2) + pow($c, 2)) == pow($b, 2)) {\n      return\
    \ true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n\
    \  }\n}", "    $hypotenuse = max($a, $b, $c);\n    if ($hypotenuse == $a) {\n\
    \        $adjacent = $b;\n        $opposite = $c;\n    } elseif ($hypotenuse ==\
    \ $b) {\n        $adjacent = $a;\n        $opposite = $c;\n    } else {\n    \
    \    $adjacent = $a;\n        $opposite = $b;\n    }\n    if ($hypotenuse**2 ==\
    \ $adjacent**2 + $opposite**2) {\n        return TRUE;\n    } else {\n       \
    \ return FALSE;\n    }\n}", "  if ($a > $b && $a > $c) {\n    $hypotenuse = $a;\n\
    \    $adjacent = $b;\n    $opposite = $c;\n  } else if ($b > $a && $b > $c) {\n\
    \    $hypotenuse = $b;\n    $adjacent = $a;\n    $opposite = $c;\n  } else {\n\
    \    $hypotenuse = $c;\n    $adjacent = $a;\n    $opposite = $b;\n  }\n  if (($hypotenuse\
    \ * $hypotenuse) == ($adjacent * $adjacent) + ($opposite * $opposite)) {\n   \
    \ return True;\n  } else {\n    return False;\n  }\n}", "  $a = pow($a, 2);\n\
    \  $b = pow($b, 2);\n  $c = pow($c, 2);\n  if ($a + $b == $c || $a + $c == $b\
    \ || $b + $c == $a) {\n    return True;\n  } else {\n    return False;\n  }\n\
    }\n\necho right_angle_triangle(3, 4, 5);", "  $sides = array($a, $b, $c);\n  rsort($sides);\n\
    \  if (($sides[0] * $sides[0]) == ($sides[1] * $sides[1]) + ($sides[2] * $sides[2]))\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}", "  if ($a > $b\
    \ && $a > $c) {\n    if ($a * $a == $b * $b + $c * $c) {\n      return true;\n\
    \    }\n  }\n  if ($b > $a && $b > $c) {\n    if ($b * $b == $a * $a + $c * $c)\
    \ {\n      return true;\n    }\n  }\n  if ($c > $a && $c > $b) {\n    if ($c *\
    \ $c == $a * $a + $b * $b) {\n      return true;\n    }\n  }\n  return false;\n\
    }\necho right_angle_triangle(1, 1, 1);", "  if ($a > $b && $a > $c) {\n    return\
    \ pow($b, 2) + pow($c, 2) == pow($a, 2);\n  } else if ($b > $a && $b > $c) {\n\
    \    return pow($a, 2) + pow($c, 2) == pow($b, 2);\n  } else {\n    return pow($a,\
    \ 2) + pow($b, 2) == pow($c, 2);\n  }\n}", "    $bigs = max($a, $b, $c);\n   \
    \ $small = array_sum([$a, $b, $c]) - $bigs;\n    return $bigs * $bigs === $small\
    \ * $small + $bigs * $bigs;\n}\n", "    $arr = [$a, $b, $c];\n    sort($arr);\n\
    \    $c = $arr[2];\n    $b = $arr[1];\n    $a = $arr[0];\n    if (($a * $a) +\
    \ ($b * $b) == ($c * $c)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\n/*\n    ----TESTE----\n*/\n\necho right_angle_triangle(3,\
    \ 4, 5);\necho \"<br>\";\necho right_angle_triangle(1, 2, 3);", "  // BEGIN\n\
    \  $arr = [$a, $b, $c];\n  rsort($arr);\n  return $arr[0] * $arr[0] == $arr[1]\
    \ * $arr[1] + $arr[2] * $arr[2];\n  // END\n}\n", "  // Inputs are all positive\
    \ integers\n  if ($a <= 0 || $b <= 0 || $c <= 0) {\n    return False;\n  }\n \
    \ // The largest side is always less than the sum of the other two sides\n  if\
    \ ($a > $b + $c || $b > $a + $c || $c > $a + $b) {\n    return False;\n  }\n \
    \ // Pythagorean theorem holds\n  if ($a ** 2 + $b ** 2 == $c ** 2 ||\n      $a\
    \ ** 2 + $c ** 2 == $b ** 2 ||\n      $b ** 2 + $c ** 2 == $a ** 2) {\n    return\
    \ True;\n  }\n  return False;\n}\n", "  \n}\necho \"<pre>right_angle_triangle(3,\
    \ 4, 5)\\r\\n\";\nvar_dump(right_angle_triangle(3, 4, 5));\necho \"</pre>\";\n\
    echo \"<pre>right_angle_triangle(1, 2, 3)\\r\\n\";\nvar_dump(right_angle_triangle(1,\
    \ 2, 3));\necho \"</pre>\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
