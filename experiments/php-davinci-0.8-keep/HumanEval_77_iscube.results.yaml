name: HumanEval_77_iscube
language: php
results:
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$d = pow($a, 1/3);\n\
    \treturn floor($d) == $d;\n}\necho iscube(64);\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5kg_im1b.php:24\n\
    Stack trace:\n#0 /tmp/tmp5kg_im1b.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5kg_im1b.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return (bool)$a &&\
    \ is_int(pow($a, 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4z4_9g2.php:21\n\
    Stack trace:\n#0 /tmp/tmpa4z4_9g2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpa4z4_9g2.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif (pow($a, 1/3) ==\
    \ round(pow($a, 1/3))) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon4s_qq8.php:26\n\
    Stack trace:\n#0 /tmp/tmpon4s_qq8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpon4s_qq8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t\
    $c = $b * $b * $b;\n\tif ($c == $a) {\n\t\treturn 'True';\n\t} else {\n\t\treturn\
    \ 'False';\n\t}\n}\n\necho iscube(1);\necho \"<br>\";\necho iscube(2);\necho \"\
    <br>\";\necho iscube(-1);\necho \"<br>\";\necho iscube(64);\necho \"<br>\";\n\
    echo iscube(0);\necho \"<br>\";\necho iscube(180);\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "True<br>False<br>False<br>False<br>True<br>False<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmptxtriltl.php:39\nStack trace:\n#0 /tmp/tmptxtriltl.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptxtriltl.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_numeric(round(pow($a,\
    \ 1/3), 0));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpighgd7_s.php:22\n\
    Stack trace:\n#0 /tmp/tmpighgd7_s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpighgd7_s.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return ((pow((int)abs($a),\
    \ 1 / 3) % 1) == 0);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpontophoa.php:21\n\
    Stack trace:\n#0 /tmp/tmpontophoa.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpontophoa.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$result = is_int(cbrt($a));\n\
    \treturn $result;\n}\nvar_dump(iscube(64));\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmpmze6d8_3.php:13\n\
    Stack trace:\n#0 /tmp/tmpmze6d8_3.php(16): iscube(64)\n#1 {main}\n  thrown in\
    \ /tmp/tmpmze6d8_3.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a === 0) {\n\t\
    \treturn True;\n\t} else {\n\t\treturn is_int(pow($a, 1/3));\n\t}\n}\n\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon7_8bkk.php:31\n\
    Stack trace:\n#0 /tmp/tmpon7_8bkk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpon7_8bkk.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\t\
    return true;\n\t} else if ($a == 1) {\n\t\treturn true;\n\t} else if ($a == -1)\
    \ {\n\t\treturn true;\n\t} else if (pow(round(pow($a, 1/3)), 3) == $a) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a >= 0)\
    \ ? ((pow($a, 1 / 3) % 1 == 0) ? TRUE : FALSE) : TRUE;\n}\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpil1aftl_.php:22\n\
    Stack trace:\n#0 /tmp/tmpil1aftl_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpil1aftl_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $numbers = range(0,\
    \ abs($a));\n  return in_array(pow($a, 1/3), $numbers);\n}\n\necho iscube(1);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps39k3n5c.php:25\n\
    Stack trace:\n#0 /tmp/tmps39k3n5c.php(33): test()\n#1 {main}\n  thrown in /tmp/tmps39k3n5c.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return (pow($a, 1/3)\
    \ - intval(pow($a, 1/3)) == 0);\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotmrj3qx.php:22\n\
    Stack trace:\n#0 /tmp/tmpotmrj3qx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpotmrj3qx.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == intval(pow($a,\
    \ 1/3));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpulx9b16r.php:22\n\
    Stack trace:\n#0 /tmp/tmpulx9b16r.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpulx9b16r.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a < 0) {\n   \
    \ $a = abs($a);\n  }\n  $i = 1;\n  while ($i * $i * $i <= $a) {\n    if ($i *\
    \ $i * $i == $a) {\n      return true;\n    }\n    $i++;\n  }\n  return false;\n\
    }\necho iscube(64) . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9toughna.php:37\n\
    Stack trace:\n#0 /tmp/tmp9toughna.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9toughna.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$result = false;\n\t\
    if ($a == 0) {\n\t\t$result = true;\n\t} elseif ($a > 0) {\n\t\t$i = 1;\n\t\t\
    while ($i <= $a / 3) {\n\t\t\tif ($i * $i * $i == $a) {\n\t\t\t\t$result = true;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\t} else {\n\t\t$i = -1;\n\t\twhile\
    \ ($i >= $a / 3) {\n\t\t\tif ($i * $i * $i == $a) {\n\t\t\t\t$result = true;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\t$i--;\n\t\t}\n\t}\n\treturn $result;\n}\necho iscube(81);\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwj3wsfb.php:44\n\
    Stack trace:\n#0 /tmp/tmpnwj3wsfb.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpnwj3wsfb.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a == 0) {\n  \
    \  return true;\n  }\n  $i = 1;\n  while ($i * $i * $i < abs($a)) {\n    $i++;\n\
    \  }\n  return $i * $i * $i == abs($a);\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a == 0 ||\
    \ $a == 1 || $a == -1) ? True : sqrt($a) == intval(sqrt($a));\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzrbtbe0z.php:25\n\
    Stack trace:\n#0 /tmp/tmpzrbtbe0z.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzrbtbe0z.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\t\
    return true;\n\t}\n\tif ($a < 0) {\n\t\t$a = abs($a);\n\t}\n\tfor ($i = 1; $i\
    \ < $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\
    }\n\treturn false;\n}\necho iscube(1).\"\\n\";\necho iscube(2).\"\\n\";\necho\
    \ iscube(-1).\"\\n\";\necho iscube(64).\"\\n\";\necho iscube(0).\"\\n\";\necho\
    \ iscube(180).\"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv1z9c19t.php:37\n\
    Stack trace:\n#0 /tmp/tmpv1z9c19t.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpv1z9c19t.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if($a>0){\n     \
    \   return isset(exp($a, 1/3)) && $a==exp($a, 1/3);\n    }\n    return true;\n\
    }\necho iscube(64);\n\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use isset() on the result of an expression (you can\
    \ use \"null !== expression\" instead) in /tmp/tmpij5mvje_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) $a =\
    \ -1 * $a;\n    if ($a == 0) return true;\n    for ($i = 1; $i < $a / 2; $i++)\
    \ {\n        if ($i ** 3 == $a) return true;\n    }\n    return false;\n}\necho\
    \ iscube(0) . PHP_EOL;\necho iscube(1) . PHP_EOL;\necho iscube(5) . PHP_EOL;\n\
    echo iscube(27) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(100) . PHP_EOL;\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoie_fd06.php:31\n\
    Stack trace:\n#0 /tmp/tmpoie_fd06.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpoie_fd06.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a !== 1 &&\
    \ $a !== 0 && $a % 2 !== 0 ? false : true;\n}\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpykjgxr5y.php:21\n\
    Stack trace:\n#0 /tmp/tmpykjgxr5y.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpykjgxr5y.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $i = 1;\n    while($i\
    \ * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxoylrhk9.php:29\n\
    Stack trace:\n#0 /tmp/tmpxoylrhk9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxoylrhk9.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $cube = pow($a, 1/3);\n\
    \    if(is_int($cube)){\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\necho iscube(0);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46opp0bs.php:26\n\
    Stack trace:\n#0 /tmp/tmp46opp0bs.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp46opp0bs.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if($a<0) $a*=-1;\n\
    \  return is_int(cbrt($a));\n}\n\necho iscube(0) ? 'TRUE' : 'FALSE';\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmpruzaif5z.php:14\n\
    Stack trace:\n#0 /tmp/tmpruzaif5z.php(17): iscube(0)\n#1 {main}\n  thrown in /tmp/tmpruzaif5z.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_pfhn1wh.php:21\n\
    Stack trace:\n#0 /tmp/tmp_pfhn1wh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_pfhn1wh.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_numeric(pow($a,\
    \ 1/3));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu086jvac.php:21\n\
    Stack trace:\n#0 /tmp/tmpu086jvac.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu086jvac.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho\
    \ iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\"\
    ;\necho iscube(180) . \"<br>\";\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br><br><br>1<br>1<br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpw2jy91vv.php:30\nStack trace:\n#0 /tmp/tmpw2jy91vv.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmpw2jy91vv.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a >= 0)\
    \ ? ((int)pow($a, 1/3) == pow($a, 1/3)) : (abs($a) == 1);\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46hp3tkk.php:23\n\
    Stack trace:\n#0 /tmp/tmp46hp3tkk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp46hp3tkk.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $power = round(log($a,\
    \ 3));\n  return ($a == pow($power, 3));\n}\necho iscube(64) . \"<br>\";\necho\
    \ iscube(65) . \"<br>\";\necho iscube(0) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br><br><br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfimoysnd.php:24\n\
    Stack trace:\n#0 /tmp/tmpfimoysnd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfimoysnd.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    return ($a < 0) ? iscube(-$a) : is_int(pow($a,\
    \ 1 / 3));\n}\necho iscube(125);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq0o71f2i.php:24\n\
    Stack trace:\n#0 /tmp/tmpq0o71f2i.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq0o71f2i.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return sqrt($a) ==\
    \ intval(sqrt($a));\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho\
    \ iscube(64);\necho iscube(0);\necho iscube(180);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk814cf2v.php:28\n\
    Stack trace:\n#0 /tmp/tmpk814cf2v.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk814cf2v.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_numeric(pow($a,\
    \ 1/3));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7_devbt.php:21\n\
    Stack trace:\n#0 /tmp/tmpf7_devbt.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpf7_devbt.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(cbrt($a));\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp4h983y08.php:13\n\
    Stack trace:\n#0 /tmp/tmp4h983y08.php(17): iscube(1)\n#1 /tmp/tmp4h983y08.php(21):\
    \ candidate(1)\n#2 /tmp/tmp4h983y08.php(31): test()\n#3 {main}\n  thrown in /tmp/tmp4h983y08.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvry990wz.php:19\n\
    Stack trace:\n#0 /tmp/tmpvry990wz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvry990wz.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_int(cbrt($a));\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp013y_aqo.php:13\n\
    Stack trace:\n#0 /tmp/tmp013y_aqo.php(16): iscube(1)\n#1 /tmp/tmp013y_aqo.php(20):\
    \ candidate(1)\n#2 /tmp/tmp013y_aqo.php(30): test()\n#3 {main}\n  thrown in /tmp/tmp013y_aqo.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // your code\n}\n\
    echo iscube(0);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1j8b3azl.php:21\n\
    Stack trace:\n#0 /tmp/tmp1j8b3azl.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1j8b3azl.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == pow($a,\
    \ 1/3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3xfkcp3z.php:23\n\
    Stack trace:\n#0 /tmp/tmp3xfkcp3z.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3xfkcp3z.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       $a = $a * -1;\n    }\n    $root = pow($a, 1/3);\n    $temp = intval($root);\n\
    \    $cube = pow($temp, 3);\n    if ($cube == $a) {\n        return \"True\";\n\
    \    } else {\n        return \"False\";\n    }\n}\necho iscube(0);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "True\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpomf8emk5.php:31\n\
    Stack trace:\n#0 /tmp/tmpomf8emk5.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpomf8emk5.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if($a < 0) {\n  \
    \      $a = abs($a);\n    }\n    if(pow(round(pow($a, 1/3)), 3) == $a) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    $b = $a / abs($a);\n    $b = $b * pow(abs($a),\
    \ 1 / 3);\n    if (is_integer($b)) {\n        return true;\n    } else {\n   \
    \     return false;\n    }\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckg8jcn9.php:29\n\
    Stack trace:\n#0 /tmp/tmpckg8jcn9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpckg8jcn9.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$cube = pow($a, 1 /\
    \ 3);\n\treturn is_int($cube);\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwk4jzb0g.php:21\n\
    Stack trace:\n#0 /tmp/tmpwk4jzb0g.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwk4jzb0g.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a < 0) {\n   \
    \ $a = -$a;\n  }\n  for ($i = 0; $i <= $a; $i++) {\n    if ($i * $i * $i == $a)\
    \ {\n      return True;\n    }\n  }\n  return False;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n//  if(pow($a, 1/3)%1\
    \ == 0){\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzhlncwr5.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\t\
    return True;\n\t}\n\t$b = round(pow($a, 1 / 3));\n\tif (pow($b, 3) == $a) {\n\t\
    \treturn True;\n\t}\n\treturn False;\n}\necho(iscube(1) . \"<br>\");\necho(iscube(0)\
    \ . \"<br>\");\necho(iscube(180) . \"<br>\");\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br><br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqs5_1unm.php:32\n\
    Stack trace:\n#0 /tmp/tmpqs5_1unm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqs5_1unm.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn is_int(pow($a,\
    \ 1/3));\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4icuclgj.php:26\n\
    Stack trace:\n#0 /tmp/tmp4icuclgj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4icuclgj.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 1 || $a\
    \ == 0 || $a == -1) {\n        return True;\n    } elseif ($a < -1 || $a > 1)\
    \ {\n        $num = $a;\n        while ($num < 0) {\n            $num = $num +\
    \ 1;\n        }\n        for ($i = 1; $i < $num; $i++) {\n            if (pow($i,\
    \ 3) == $num) {\n                return True;\n            }\n        }\n    \
    \    return False;\n    }\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $cubed = pow($a,\
    \ 1/3);\n    return ($cubed % 1 == 0);\n}\n\necho iscube(0);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpldg51w2i.php:24\n\
    Stack trace:\n#0 /tmp/tmpldg51w2i.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpldg51w2i.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  // Your code here\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcd2uovtl.php:21\n\
    Stack trace:\n#0 /tmp/tmpcd2uovtl.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcd2uovtl.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $value = pow($a, (1/3));\n\
    \  $dec = strstr($value, '.');\n  if(empty($dec)) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $result = False;\n\
    \  for ($i = 1; $i <= $a; $i++) {\n    if ($i * $i * $i == $a) {\n      $result\
    \ = True;\n    }\n  }\n  return $result;\n}\n\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\necho iscube(8);\n\
    echo iscube(27);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrx55m5i.php:37\n\
    Stack trace:\n#0 /tmp/tmpjrx55m5i.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjrx55m5i.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $i = 1;\n    $a =\
    \ abs($a);\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    return\
    \ $i * $i * $i == $a;\n}\necho iscube(1) ? \"True\\n\" : \"False\\n\";\necho iscube(2)\
    \ ? \"True\\n\" : \"False\\n\";\necho iscube(-1) ? \"True\\n\" : \"False\\n\"\
    ;\necho iscube(64) ? \"True\\n\" : \"False\\n\";\necho iscube(0) ? \"True\\n\"\
    \ : \"False\\n\";\necho iscube(180) ? \"True\\n\" : \"False\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "True\nFalse\nTrue\nTrue\nFalse\nFalse\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptek8a1hs.php:37\nStack trace:\n#0 /tmp/tmptek8a1hs.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptek8a1hs.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a && intval(pow($a,\
    \ 1/3)) ** 3 == $a;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3o_pie58.php:23\n\
    Stack trace:\n#0 /tmp/tmp3o_pie58.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3o_pie58.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\t\
    return true;\n\t} elseif ($a > 0) {\n\t\treturn floor(cbrt($a)) ** 3 == $a;\n\t\
    } else {\n\t\treturn floor(-cbrt(-$a)) ** 3 == $a;\n\t}\n}\necho iscube(6) . \"\
    <br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180)\
    \ . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(4) . \"<br>\";\necho iscube(1)\
    \ . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(5) . \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmphdtojn8x.php:16\n\
    Stack trace:\n#0 /tmp/tmphdtojn8x.php(21): iscube(6)\n#1 {main}\n  thrown in /tmp/tmphdtojn8x.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tfor ($i = 1; $i * $i\
    \ * $i <= $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn True;\n\t\t\
    }\n\t}\n\treturn False;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyf6f_31t.php:27\n\
    Stack trace:\n#0 /tmp/tmpyf6f_31t.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyf6f_31t.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a == 0) {\n  \
    \  return true;\n  }\n  $i = 1;\n  while ($i * $i * $i < abs($a)) {\n    $i +=\
    \ 1;\n  }\n  return $i * $i * $i == abs($a);\n}\necho iscube(9) ? 'true' : 'false';\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 'false'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn is_int(pow($a,\
    \ 1/3));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4k5ficb.php:20\n\
    Stack trace:\n#0 /tmp/tmpx4k5ficb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpx4k5ficb.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif($a == 0) {\n\t\t\
    return true;\n\t} elseif($a < 0) {\n\t\treturn iscube(-1 * $a);\n\t} else {\n\t\
    \t$root = 0;\n\t\twhile($root * $root * $root < $a) {\n\t\t\t$root++;\n\t\t}\n\
    \t\treturn $root * $root * $root == $a;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn $a == 0 || sqrt($a)\
    \ == (int)sqrt($a);\n}\necho iscube(0);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjkxzosct.php:23\n\
    Stack trace:\n#0 /tmp/tmpjkxzosct.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjkxzosct.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $num = ceil(pow($a,\
    \ 1/3));\n  if($num * $num * $num == $a) {\n    return true;\n  } else {\n   \
    \ return false;\n  }\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_ve2h48.php:27\n\
    Stack trace:\n#0 /tmp/tmpz_ve2h48.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpz_ve2h48.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho\
    \ iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\"\
    ;\necho iscube(180) . \"<br>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1<br><br><br>1<br>1<br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp2gt67xcv.php:28\nStack trace:\n#0 /tmp/tmp2gt67xcv.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2gt67xcv.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$result = false;\n\t\
    for ($i = 0; $i <= $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\t$result =\
    \ true;\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxf1ja_6.php:28\n\
    Stack trace:\n#0 /tmp/tmpcxf1ja_6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcxf1ja_6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n}\n\necho iscube(1).\"\
    \\n\";\necho iscube(2).\"\\n\";\necho iscube(-1).\"\\n\";\necho iscube(64).\"\\\
    n\";\necho iscube(0).\"\\n\";\necho iscube(180).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprflo3soq.php:26\n\
    Stack trace:\n#0 /tmp/tmprflo3soq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprflo3soq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $cube = round(pow($a,1/3));\n\
    \    if ($cube ** 3 == $a) {\n        return \"True\\n\";\n    } else {\n    \
    \    return \"False\\n\";\n    }\n}\necho iscube(64);\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "True\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ga5zwy8.php:27\n\
    Stack trace:\n#0 /tmp/tmp_ga5zwy8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_ga5zwy8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if($a >= 0) {\n \
    \       return is_int(pow($a, 1/3));\n    } else {\n        return is_int(pow(abs($a),\
    \ 1/3));\n    }\n}\necho iscube(0);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphozfn6t8.php:25\n\
    Stack trace:\n#0 /tmp/tmphozfn6t8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphozfn6t8.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_int(cbrt($a));\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp9h_j2onk.php:13\n\
    Stack trace:\n#0 /tmp/tmp9h_j2onk.php(16): iscube(1)\n#1 /tmp/tmp9h_j2onk.php(20):\
    \ candidate(1)\n#2 /tmp/tmp9h_j2onk.php(30): test()\n#3 {main}\n  thrown in /tmp/tmp9h_j2onk.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$c = $a*$a*$a;\n\t\
    if($c == $a){\n\t\treturn true;\n\t}else {\n\t\treturn false;\n\t}\n}\necho iscube(2);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxkxtxqj.php:29\n\
    Stack trace:\n#0 /tmp/tmpfxkxtxqj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfxkxtxqj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $answer = false;\n\
    \    $cubic = 1;\n    while ($cubic**3 < $a) {\n        $cubic += 1;\n    }\n\
    \    if ($cubic**3 == $a) {\n        $answer = true;\n    }\n    return $answer;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3944ffxf.php:30\n\
    Stack trace:\n#0 /tmp/tmp3944ffxf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3944ffxf.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $temp = sqrt($a);\n\
    \    if($temp * $temp * $temp == $a) {\n        return true;\n    }\n    return\
    \ false;\n}\necho iscube(64);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdz0417se.php:27\n\
    Stack trace:\n#0 /tmp/tmpdz0417se.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdz0417se.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a == 0 ?\
    \ true : $a % 2 == 0 ? false : pow($a, 1/3) == round(pow($a, 1/3)));\n}\n\necho\
    \ iscube(0);\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1b62mmlr.php:24\n\
    Stack trace:\n#0 /tmp/tmp1b62mmlr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1b62mmlr.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n   if ($a >= 0) {\n \
    \     if ($a == 0) {\n         return true;\n      } else if ($a == 1) {\n   \
    \      return true;\n      } else {\n         return iscube(($a - 1));\n     \
    \ }\n   } else {\n      return iscube(($a * -1));\n   }\n}\necho iscube(0);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfc_i979.php:32\n\
    Stack trace:\n#0 /tmp/tmpmfc_i979.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpmfc_i979.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return True;\n    } elseif (abs($a) % 1 > 0) {\n        return False;\n\
    \    } else {\n        $a = sqrt(abs($a));\n        if ($a % 1 == 0) {\n     \
    \       return True;\n        } else {\n            return False;\n        }\n\
    \    }\n}\necho iscube(2);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp464qu5im.php:33\n\
    Stack trace:\n#0 /tmp/tmp464qu5im.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp464qu5im.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow($a,\
    \ 1/3);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_cvk4kw.php:22\n\
    Stack trace:\n#0 /tmp/tmpi_cvk4kw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpi_cvk4kw.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_int(cbrt($a));\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp2fj8hvgv.php:13\n\
    Stack trace:\n#0 /tmp/tmp2fj8hvgv.php(16): iscube(1)\n#1 /tmp/tmp2fj8hvgv.php(20):\
    \ candidate(1)\n#2 /tmp/tmp2fj8hvgv.php(30): test()\n#3 {main}\n  thrown in /tmp/tmp2fj8hvgv.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t\
    if ($b == floor($b)) {\n\t\t$c = $b * $b;\n\t\tif ($c == $a) {\n\t\t\treturn True;\n\
    \t\t}\n\t}\n\treturn False;\n}\necho iscube(0);\necho iscube(1);\necho iscube(2);\n\
    echo iscube(3);\necho iscube(8);\necho iscube(9);\necho iscube(27);\necho iscube(28);\n\
    echo iscube(64);\necho iscube(65);\necho iscube(71);\necho iscube(100);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125);\necho\
    \ iscube(125);\necho iscube(125);\necho iscube(125);\necho iscube(125\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_g58wwrp.php on line 86\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $c=pow($a,1/3);\n\
    \    if (is_int($c)){\n        return true;\n    }else {\n        return false;\n\
    \    }\n  }\n\n  echo iscube(64);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesoplc28.php:27\n\
    Stack trace:\n#0 /tmp/tmpesoplc28.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpesoplc28.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return (bool)pow($a,\
    \ 1/3);\n}\necho iscube(27) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppz9tsw27.php:22\n\
    Stack trace:\n#0 /tmp/tmppz9tsw27.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppz9tsw27.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn pow($a, 1/3)\
    \ == intval(pow($a, 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgq9_s08.php:23\n\
    Stack trace:\n#0 /tmp/tmpmgq9_s08.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmgq9_s08.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 1 == 0)\
    \ {\n        $y = round(pow($a, 1/3));\n        if (pow($y, 3) == $a) {\n    \
    \        return true;\n        } else {\n            return false;\n        }\n\
    \    } else {\n        return false;\n    }\n}\n\necho iscube(1) ==> True;\necho\
    \ iscube(2) ==> False;\necho iscube(-1) ==> True;\necho iscube(64) ==> True;\n\
    echo iscube(0) ==> True;\necho iscube(180) ==> False;\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp97xuk30d.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % 2 !=\
    \ 0) ? true : false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprzz4n7i5.php:24\n\
    Stack trace:\n#0 /tmp/tmprzz4n7i5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprzz4n7i5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return (pow($a, 1/3)\
    \ - (int)pow($a, 1/3) == 0);\n}\necho iscube(2) . \"<br>\";\necho iscube(0) .\
    \ \"<br>\";\necho iscube(0.0) . \"<br>\";\necho iscube(1) . \"<br>\";\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "<br>1<br>1<br>1<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7y7deeq.php:27\n\
    Stack trace:\n#0 /tmp/tmpq7y7deeq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq7y7deeq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a >= 0 && $a\
    \ == pow(round(pow($a, 1 / 3)), 3);\n}\n\nfunction candidate(...$args) {\n   \
    \ return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpysymxi7_.php:23\n\
    Stack trace:\n#0 /tmp/tmpysymxi7_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpysymxi7_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn (pow($a, 1/3)\
    \ % 1 == 0);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyu3a12p6.php:21\n\
    Stack trace:\n#0 /tmp/tmpyu3a12p6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyu3a12p6.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t// your code here\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyssxuyvp.php:21\n\
    Stack trace:\n#0 /tmp/tmpyssxuyvp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyssxuyvp.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) return\
    \ true;\n    if ($a < 0) $a = abs($a);\n    for ($i = 1; $i <= $a; $i++) {\n \
    \       if ($i * $i * $i == $a) return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a==0 ? true\
    \ : $a>0 ? is_int(pow($a,1/3)) : is_int(pow(abs($a),1/3));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqlq23d7.php:21\n\
    Stack trace:\n#0 /tmp/tmpsqlq23d7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsqlq23d7.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $a = abs($a);\n  $c\
    \ = pow($a, 1/3);\n  return ($c == intval($c));\n}\n\necho iscube(27);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0stdck88.php:27\n\
    Stack trace:\n#0 /tmp/tmp0stdck88.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0stdck88.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $cube = pow($a, 1\
    \ / 3);\n    return floor($cube) == $cube;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_qqarv0.php:24\n\
    Stack trace:\n#0 /tmp/tmp5_qqarv0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5_qqarv0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return sqrt($a) ==\
    \ floor(sqrt($a));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvu_kz9c2.php:22\n\
    Stack trace:\n#0 /tmp/tmpvu_kz9c2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvu_kz9c2.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return  $a === 1\
    \ || is_int(pow($a, 1/3));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstnv5f_j.php:22\n\
    Stack trace:\n#0 /tmp/tmpstnv5f_j.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpstnv5f_j.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = $a * -1;\n    }\n\
    \    if ($a == 1) {\n        return true;\n    }\n    $num = 1;\n    while (pow($num,\
    \ 3) < $a) {\n        $num++;\n    }\n    if (pow($num, 3) == $a) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    } else if ($a < 0) {\n        $a = $a * -1;\n    }\n\
    \    $remainder = $a % 3;\n    $a = ($a - $remainder) / 3;\n    if ($remainder\
    \ == 0) {\n        return iscube($a);\n    } else {\n        return false;\n \
    \   }\n}\necho iscube(3) . \"\\n\"; // true\necho iscube(0) . \"\\n\"; // true\n\
    echo iscube(1) . \"\\n\"; // true\necho iscube(2) . \"\\n\"; // false\necho iscube(4)\
    \ . \"\\n\"; // false\necho iscube(9) . \"\\n\"; // true\necho iscube(63) . \"\
    \\n\"; // false\necho iscube(64) . \"\\n\"; // true\necho iscube(65) . \"\\n\"\
    ; // false\necho iscube(66) . \"\\n\"; // false\necho iscube(27) . \"\\n\"; //\
    \ true\necho iscube(15625) . \"\\n\"; // true\necho iscube(15624) . \"\\n\"; //\
    \ false\necho iscube(15623) . \"\\n\"; // false\necho iscube(15622) . \"\\n\"\
    ; // false\necho iscube(15621) . \"\\n\"; // false\necho iscube(15620) . \"\\\
    n\"; // false\necho iscube(15619) . \"\\n\"; // false\necho iscube(15618) . \"\
    \\n\"; // false\necho iscube(15617) . \"\\n\"; // false\necho iscube(15616) .\
    \ \"\\n\"; // false\necho iscube(15615) . \"\\n\"; // false\necho iscube(15614)\
    \ . \"\\n\"; // false\necho iscube(15613) . \"\\n\"; // false\necho iscube(15612)\
    \ . \"\\n\"; // false\necho iscube(15611) . \"\\n\"; // false\necho iscube(15610)\
    \ . \"\\n\"; // false\necho iscube(15609) . \"\\n\"; // false\necho iscube(15608)\
    \ . \"\\n\"; // false\necho iscube(15607) . \"\\n\"; // false\necho\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpryefczx4.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $b = cbrt($a);\n  return\
    \ $b == round($b);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp4dxql43t.php:13\n\
    Stack trace:\n#0 /tmp/tmp4dxql43t.php(18): iscube(1)\n#1 /tmp/tmp4dxql43t.php(22):\
    \ candidate(1)\n#2 /tmp/tmp4dxql43t.php(32): test()\n#3 {main}\n  thrown in /tmp/tmp4dxql43t.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a === 0 ||\
    \ abs($a) === round(pow(abs($a), 1/3));\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvyx51a35.php:20\n\
    Stack trace:\n#0 /tmp/tmpvyx51a35.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvyx51a35.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a >= 0 &&\
    \ pow((int)pow($a, 1/3), 3) == $a;\n}\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0g7stn9e.php:23\n\
    Stack trace:\n#0 /tmp/tmp0g7stn9e.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0g7stn9e.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(cbrt($a));\n\
    }\n\necho iscube(0) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(180) .\
    \ PHP_EOL;\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmpfe7mn_zw.php:13\n\
    Stack trace:\n#0 /tmp/tmpfe7mn_zw.php(16): iscube(0)\n#1 {main}\n  thrown in /tmp/tmpfe7mn_zw.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ (1/3)));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y5pscop.php:20\n\
    Stack trace:\n#0 /tmp/tmp3y5pscop.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp3y5pscop.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a > 0) {\n\t\t\
    return is_int(pow($a, 1/3));\n\t}\n\telse {\n\t\treturn is_int(pow(abs($a), 1/3));\n\
    \t}\n}\necho iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\necho iscube(-1)\
    \ . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\necho iscube(180)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu071bjid.php:31\n\
    Stack trace:\n#0 /tmp/tmpu071bjid.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu071bjid.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  // Your code here\n\
    \  return $a == 0 ? true : sqrt($a) == floor(sqrt($a));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbj7gq343.php:24\n\
    Stack trace:\n#0 /tmp/tmpbj7gq343.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbj7gq343.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // put your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9d172l8q.php:21\n\
    Stack trace:\n#0 /tmp/tmp9d172l8q.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9d172l8q.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $cur = 0;\n    $n\
    \ = 1;\n    while ($cur < $a) {\n        $cur = $n * $n * $n;\n        $n += 1;\n\
    \    }\n    return $cur == $a;\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_hwpmjl.php:34\n\
    Stack trace:\n#0 /tmp/tmpf_hwpmjl.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpf_hwpmjl.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if($a == 0) {\n \
    \       return true;\n    } else if($a == 1) {\n        return true;\n    } else\
    \ if($a == -1) {\n        return true;\n    } else {\n        $root = sqrt($a);\n\
    \        $cube = $root * $root * $root;\n        if($cube == $a) {\n         \
    \   return true;\n        } else {\n            return false;\n        }\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5it8_kj.php:38\n\
    Stack trace:\n#0 /tmp/tmpt5it8_kj.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpt5it8_kj.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_numeric(pow($a,\
    \ 1/3));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_l9d4w7k.php:21\n\
    Stack trace:\n#0 /tmp/tmp_l9d4w7k.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_l9d4w7k.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // Your code here\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp54yvn_64.php:21\n\
    Stack trace:\n#0 /tmp/tmp54yvn_64.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp54yvn_64.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $num = sqrt($a);\n\
    \  return (bool) (($num * $num * $num) == $a);\n}\n\necho iscube(1);\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98vnh0ue.php:26\n\
    Stack trace:\n#0 /tmp/tmp98vnh0ue.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp98vnh0ue.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tfor ($i = 1; $i <=\
    \ $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\
    \treturn false;\n}\n\necho iscube(1) . \"\\n\"; // True\necho iscube(2) . \"\\\
    n\"; // False\necho iscube(-1) . \"\\n\"; // True\necho iscube(64) . \"\\n\";\
    \ // True\necho iscube(0) . \"\\n\"; // True\necho iscube(180) . \"\\n\"; // False\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsx7o6d6y.php:35\n\
    Stack trace:\n#0 /tmp/tmpsx7o6d6y.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpsx7o6d6y.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return ($a == 0 ||\
    \ $a > 0 && pow($a, 1 / 3) == round(pow($a, 1 / 3)));\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjg6g7rt7.php:22\n\
    Stack trace:\n#0 /tmp/tmpjg6g7rt7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjg6g7rt7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $i = 1;\n    while($i*$i*$i\
    \ <= $a) {\n        if ($i*$i*$i == $a) {\n            return True;\n        }\n\
    \        $i++;\n    }\n    return False;\n}\necho iscube(0);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8y7wj30.php:30\n\
    Stack trace:\n#0 /tmp/tmps8y7wj30.php(38): test()\n#1 {main}\n  thrown in /tmp/tmps8y7wj30.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a != 0 && isset(array_flip(range(1,1000))[round(pow($a,\
    \ 1/3))]);\n}\necho iscube(1) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(2)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(-1) ? 'TRUE' : 'FALSE';\necho\
    \ \"\\n\";\necho iscube(64) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(0)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(180) ? 'TRUE' : 'FALSE';\necho\
    \ \"\\n\";\necho iscube(32) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(24)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(23) ? 'TRUE' : 'FALSE';\necho\
    \ \"\\n\";\necho iscube(22) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(21)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(20) ? 'TRUE' : 'FALSE';\necho\
    \ \"\\n\";\necho iscube(200) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(8)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(125) ? 'TRUE' : 'FALSE';\necho\
    \ \"\\n\";\necho iscube(27) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(125)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(1000) ? 'TRUE' : 'FALSE';\n\
    echo \"\\n\";\necho iscube(625) ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(216)\
    \ ? 'TRUE' : 'FALSE';\necho \"\\n\";\necho iscube(729) ? 'TRUE' : 'FALSE';\necho\
    \ \"\\n\";\necho iscube(343) ? 'TRUE' :\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxm7b95rp.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $result = false;\n\
    \    for ($i = 1; $i <= $a; $i++) {\n        if ($i * $i * $i == $a) {\n     \
    \       $result = true;\n        }\n    }\n    return $result;\n}\n\necho iscube(8);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4g8v73x.php:30\n\
    Stack trace:\n#0 /tmp/tmpd4g8v73x.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpd4g8v73x.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$b = cbrt($a);\n\t\
    $c = pow($b, 3);\n\treturn $c == $a;\n}\necho iscube(1) . \"\\n\";\necho iscube(2)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmper2xa8ib.php:13\n\
    Stack trace:\n#0 /tmp/tmper2xa8ib.php(17): iscube(1)\n#1 {main}\n  thrown in /tmp/tmper2xa8ib.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return ($a == pow($a,1/3))\
    \ ? true : false;\n}\necho iscube(1);\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixt8g9nd.php:24\n\
    Stack trace:\n#0 /tmp/tmpixt8g9nd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpixt8g9nd.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$a = abs($a);\n\tfor\
    \ ($i = 0; $i < $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\necho iscube(1) ? 'True' : 'False';\necho \"<br>\"\
    ;\necho iscube(2) ? 'True' : 'False';\necho \"<br>\";\necho iscube(-1) ? 'True'\
    \ : 'False';\necho \"<br>\";\necho iscube(64) ? 'True' : 'False';\necho \"<br>\"\
    ;\necho iscube(0) ? 'True' : 'False';\necho \"<br>\";\necho iscube(180) ? 'True'\
    \ : 'False';\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "False<br>False<br>False<br>True<br>False<br>False\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmptoq20k8a.php:37\nStack trace:\n#0 /tmp/tmptoq20k8a.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptoq20k8a.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $sq = sqrt($a);\n \
    \ $cub = pow($sq, 3);\n  return $cub === $a;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkret0332.php:22\n\
    Stack trace:\n#0 /tmp/tmpkret0332.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkret0332.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\t\
    return true;\n\t} else {\n\t\t$root = round(pow($a, 1/3));\n\t\treturn $root*$root*$root\
    \ == $a;\n\t}\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplxm7ql2.php:33\n\
    Stack trace:\n#0 /tmp/tmpplxm7ql2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpplxm7ql2.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $b = 0;\n  for ($i\
    \ = 1; $i < $a + 1; $i++) {\n    $b += $i;\n    if ($b === $a) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\necho iscube(64);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp83wm5l64.php:30\n\
    Stack trace:\n#0 /tmp/tmp83wm5l64.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp83wm5l64.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a > 0 && pow(round(pow($a,\
    \ 1/3)), 3) == $a || $a == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdppw5jre.php:23\n\
    Stack trace:\n#0 /tmp/tmpdppw5jre.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdppw5jre.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc1_laq7w.php:28\n\
    Stack trace:\n#0 /tmp/tmpc1_laq7w.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpc1_laq7w.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $i = 1;\n    while\
    \ ($i < $a) {\n        $i = $i * 3;\n    }\n    if ($i == $a) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\necho iscube(1) . \"\
    <br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1<br><br><br><br><br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmptk3ccsq5.php:37\nStack trace:\n#0 /tmp/tmptk3ccsq5.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmptk3ccsq5.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a > 0) {\n        return is_int(cbrt($a));\n\
    \    }\n    if ($a < 0) {\n        return is_int(cbrt(abs($a)));\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp3sfy320b.php:17\n\
    Stack trace:\n#0 /tmp/tmp3sfy320b.php(24): iscube(1)\n#1 /tmp/tmp3sfy320b.php(28):\
    \ candidate(1)\n#2 /tmp/tmp3sfy320b.php(38): test()\n#3 {main}\n  thrown in /tmp/tmp3sfy320b.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == (int)pow($a,\
    \ 1/3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ya_pnxw.php:23\n\
    Stack trace:\n#0 /tmp/tmp5ya_pnxw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5ya_pnxw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\n\necho iscube(1); //=> True\necho iscube(2); //=> False\necho iscube(-1);\
    \ //=> True\necho iscube(64); //=> True\necho iscube(0); //=> True\necho iscube(180);\
    \ //=> False\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmxhi6m4.php:27\n\
    Stack trace:\n#0 /tmp/tmpnmxhi6m4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnmxhi6m4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t//todo\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1pvi3g93.php:20\n\
    Stack trace:\n#0 /tmp/tmp1pvi3g93.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1pvi3g93.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(floor(pow($a,\
    \ 1/3)), 3);\n}\necho iscube(1); // True\necho \"\\n\";\necho iscube(2); // False\n\
    echo \"\\n\";\necho iscube(-1); // True\necho \"\\n\";\necho iscube(64); // True\n\
    echo \"\\n\";\necho iscube(0); // True\necho \"\\n\";\necho iscube(180); // False\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb7etssy.php:34\n\
    Stack trace:\n#0 /tmp/tmpqb7etssy.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpqb7etssy.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  \treturn (bool)sqrt($a)\
    \ == sqrt($a);\n}\necho iscube(1) . '<br>';\necho iscube(2) . '<br>';\necho iscube(-1)\
    \ . '<br>';\necho iscube(64) . '<br>';\necho iscube(0) . '<br>';\necho iscube(180)\
    \ . '<br>';\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1<br>1<br>1<br>1<br>1<br>1<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpvor7e3zj.php:27\nStack trace:\n#0 /tmp/tmpvor7e3zj.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmpvor7e3zj.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a >= 0 &&\
    \ floor(cbrt($a)) == cbrt($a));\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp9_2k0l5a.php:13\n\
    Stack trace:\n#0 /tmp/tmp9_2k0l5a.php(17): iscube(1)\n#1 /tmp/tmp9_2k0l5a.php(21):\
    \ candidate(1)\n#2 /tmp/tmp9_2k0l5a.php(31): test()\n#3 {main}\n  thrown in /tmp/tmp9_2k0l5a.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       $a = abs($a);\n    }\n    if ($a == 0) {\n        return true;\n    }\n\
    \    $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn is_int(pow($a,1/3));\n\
    }\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"\
    <br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180)\
    \ . \"<br>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<br><br><br><br><br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmps8oazx_9.php:26\nStack trace:\n#0 /tmp/tmps8oazx_9.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmps8oazx_9.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == abs(pow(round(pow($a,\
    \ 1 / 3)), 3));\n}\necho iscube(1);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpns3a5v7v.php:23\n\
    Stack trace:\n#0 /tmp/tmpns3a5v7v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpns3a5v7v.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a != 0 &&\
    \ round(pow($a, 1/3)) == pow($a, 1/3);\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbp_zx1ui.php:23\n\
    Stack trace:\n#0 /tmp/tmpbp_zx1ui.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbp_zx1ui.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a == 0 || $a ==\
    \ 1) {\n\t\treturn true;\n\t} elseif ($a == -1) {\n\t\treturn true;\n\t} elseif\
    \ ($a < 0) {\n\t\treturn false;\n\t} else {\n\t\tfor ($i = 1; $i <= $a; $i++)\
    \ {\n\t\t\tif ($i ** 3 == $a) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn\
    \ false;\n\t}\n}\n\necho iscube(1);\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a == 0)\
    \ ? true : (bool) (round(pow($a, 1/3)) ** 3 == $a);\n}\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_i4hivxc.php:23\n\
    Stack trace:\n#0 /tmp/tmp_i4hivxc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_i4hivxc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $i = 0;\n    while($i\
    \ * $i * $i <= $a) {\n        if ($i * $i * $i == $a) return true;\n        $i++;\n\
    \    }\n    return false;\n}\necho \"iscube(-1) = \";\nvar_dump(iscube(-1));\n\
    echo \"iscube(180) = \";\nvar_dump(iscube(180));\necho \"iscube(64) = \";\nvar_dump(iscube(64));\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "iscube(-1) = bool(false)\niscube(180) = bool(false)\niscube(64) = bool(true)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvr12pekx.php:33\nStack\
    \ trace:\n#0 /tmp/tmpvr12pekx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvr12pekx.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return ($a>=0) && ($a\
    \ == pow(round(pow($a,1/3)),3));\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9ze419v.php:23\n\
    Stack trace:\n#0 /tmp/tmpi9ze419v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpi9ze419v.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $result = sqrt($a);\n\
    \    return (is_int($result)) ? true : false;\n}\necho iscube(0);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1xm56laj.php:22\n\
    Stack trace:\n#0 /tmp/tmp1xm56laj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1xm56laj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a >= 0) {\n\
    \        return (round(pow($a, 1 / 3)) ** 3 == $a);\n    } else {\n        return\
    \ (-1 * round(pow(abs($a), 1 / 3)) ** 3 == $a);\n    }\n}\n\necho iscube(27);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '1'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ (pow($a, 1/3) - floor(pow($a, 1/3))) == 0;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehm0jbe2.php:22\n\
    Stack trace:\n#0 /tmp/tmpehm0jbe2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpehm0jbe2.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn (bool) is_int($a)\
    \ && $a>=0 && round(pow($a,1/3))==pow($a,1/3);\n}\necho (iscube(1) ? 'TRUE' :\
    \ 'FALSE').'<br>';\necho (iscube(2) ? 'TRUE' : 'FALSE').'<br>';\necho (iscube(-1)\
    \ ? 'TRUE' : 'FALSE').'<br>';\necho (iscube(64) ? 'TRUE' : 'FALSE').'<br>';\n\
    echo (iscube(0) ? 'TRUE' : 'FALSE').'<br>';\necho (iscube(180) ? 'TRUE' : 'FALSE').'<br>';\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "TRUE<br>FALSE<br>FALSE<br>FALSE<br>TRUE<br>FALSE<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpi48jwjra.php:28\nStack trace:\n#0 /tmp/tmpi48jwjra.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi48jwjra.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       $a = -1 * $a;\n    }\n    if ($a == 0) {\n        return true;\n    }\n\
    \    if ($a == 1) {\n        return true;\n    }\n    $temp = $a;\n    $result\
    \ = 1;\n    while ($result < $temp) {\n        $result *= 3;\n    }\n    if ($result\
    \ == $temp) {\n        return true;\n    }\n    return false;\n}\necho iscube(1)\
    \ . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1<br><br>1<br><br>1<br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpanc858bt.php:46\nStack trace:\n#0 /tmp/tmpanc858bt.php(53): test()\n\
    #1 {main}\n  thrown in /tmp/tmpanc858bt.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return (isset($a) &&\
    \ (abs($a) == round(pow($a, 1/3))));\n}\nprint_r(iscube(27));\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiq1bfemw.php:23\n\
    Stack trace:\n#0 /tmp/tmpiq1bfemw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpiq1bfemw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return pow($a, (1 /\
    \ 3)) == floor(pow($a, (1 / 3)));\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4x6bufvz.php:23\n\
    Stack trace:\n#0 /tmp/tmp4x6bufvz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4x6bufvz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if($a == 0){\n    return\
    \ true;\n  }else if($a > 0){\n    return is_int(pow($a, 1 / 3));\n  }else{\n \
    \   return is_int(pow(abs($a), 1 / 3)) ? true : false;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp382pn5qr.php:26\n\
    Stack trace:\n#0 /tmp/tmp382pn5qr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp382pn5qr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ ($a * $a * $a) == abs($a);\n}\n\necho iscube(1) . \"<br>\"; // 1\necho iscube(8)\
    \ . \"<br>\"; // 0\necho iscube(27) . \"<br>\"; // 1\necho iscube(64) . \"<br>\"\
    ; // 1\necho iscube(26) . \"<br>\"; // 0\necho iscube(1728) . \"<br>\"; // 1\n\
    echo iscube(-729) . \"<br>\"; // 1\necho iscube(-1) . \"<br>\"; // 1\necho iscube(0)\
    \ . \"<br>\"; // 1\necho iscube(1.0) . \"<br>\"; // 1\necho iscube(1.5) . \"<br>\"\
    ; // 0\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1<br><br><br><br><br><br><br><br>1<br>1<br><br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5a7ej6lo.php:35\nStack trace:\n#0 /tmp/tmp5a7ej6lo.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5a7ej6lo.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$b = $a * $a * $a;\n\
    \treturn $a == $b;\n}\necho \"iscube(1) ==> \".iscube(1).\"\\n\";\necho \"iscube(2)\
    \ ==> \".iscube(2).\"\\n\";\necho \"iscube(-1) ==> \".iscube(-1).\"\\n\";\necho\
    \ \"iscube(64) ==> \".iscube(64).\"\\n\";\necho \"iscube(0) ==> \".iscube(0).\"\
    \\n\";\necho \"iscube(180) ==> \".iscube(180).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "iscube(1) ==> 1\niscube(2) ==> \niscube(-1) ==> 1\niscube(64) ==> \niscube(0)\
    \ ==> 1\niscube(180) ==> \n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp6pawvhtv.php:30\nStack trace:\n#0 /tmp/tmp6pawvhtv.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6pawvhtv.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return !fmod($a,\
    \ pow($a, 1 / 3));\n}\necho (int)iscube(0);\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ixgev9h.php:23\n\
    Stack trace:\n#0 /tmp/tmp1ixgev9h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1ixgev9h.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t// your code here\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8271gci9.php:20\n\
    Stack trace:\n#0 /tmp/tmp8271gci9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8271gci9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return round(cbrt($a))\
    \ ** 3 == $a;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp2p8_ela5.php:13\n\
    Stack trace:\n#0 /tmp/tmp2p8_ela5.php(16): iscube(1)\n#1 /tmp/tmp2p8_ela5.php(20):\
    \ candidate(1)\n#2 /tmp/tmp2p8_ela5.php(30): test()\n#3 {main}\n  thrown in /tmp/tmp2p8_ela5.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a==0) {\n  \
    \      return true;\n    }\n    if ($a>0) {\n        $i = 1;\n        while ($i<$a)\
    \ {\n            $i = $i + 1;\n            if (pow($i,3) == $a) {\n          \
    \      return true;\n            }\n        }\n    }\n    if ($a<0) {\n      \
    \  $i = -1;\n        while ($i>$a) {\n            $i = $i - 1;\n            if\
    \ (pow($i,3) == $a) {\n                return true;\n            }\n        }\n\
    \    }\n    return false;\n}\nprint_r (iscube(27));\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcycw4rm1.php:42\n\
    Stack trace:\n#0 /tmp/tmpcycw4rm1.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpcycw4rm1.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_numeric(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkto1cpb.php:22\n\
    Stack trace:\n#0 /tmp/tmpdkto1cpb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdkto1cpb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_numeric(pow($a,\
    \ 1 / 3));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0gyqjmv.php:21\n\
    Stack trace:\n#0 /tmp/tmpt0gyqjmv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpt0gyqjmv.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       $a = -$a;\n    }\n    if ($a == 0) {\n        return true;\n    }\n  \
    \  $lower = 0;\n    $upper = $a;\n    while ($lower <= $upper) {\n        $mid\
    \ = floor(($lower + $upper) / 2);\n        $midCube = $mid * $mid * $mid;\n  \
    \      if ($midCube < $a) {\n            $lower = $mid + 1;\n        } else if\
    \ ($midCube > $a) {\n            $upper = $mid - 1;\n        } else {\n      \
    \      return true;\n        }\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74u6n7q2.php:19\n\
    Stack trace:\n#0 /tmp/tmp74u6n7q2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp74u6n7q2.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) return\
    \ true;\n    $c = round(pow($a, 1/3));\n    return $c * $c * $c == $a;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprx2wu4kj.php:24\n\
    Stack trace:\n#0 /tmp/tmprx2wu4kj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprx2wu4kj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if (abs($a) === 0)\
    \ return true;\n    if (abs($a) === 1) return true;\n    if ($a < 0) $a = abs($a);\n\
    \    $c = round(pow($a, 1/3));\n    if ($c * $c * $c === $a) return true;\n  \
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_92r921.php:29\n\
    Stack trace:\n#0 /tmp/tmpe_92r921.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpe_92r921.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $a = abs($a);\n \
    \   $res = floor(cbrt($a));\n    if (pow($res, 3) == $a) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmpqslynb4x.php:14\n\
    Stack trace:\n#0 /tmp/tmpqslynb4x.php(23): iscube(1)\n#1 /tmp/tmpqslynb4x.php(27):\
    \ candidate(1)\n#2 /tmp/tmpqslynb4x.php(37): test()\n#3 {main}\n  thrown in /tmp/tmpqslynb4x.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t// Your code here.\n\
    \tfor ($i = 0; $i < abs($a); $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq0hinda.php:27\n\
    Stack trace:\n#0 /tmp/tmplq0hinda.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplq0hinda.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $cubic = pow(sqrt($a),\
    \ 3);\n    if ($cubic == $a) {\n        return True;\n    } else {\n        return\
    \ False;\n    }\n}\necho iscube(64);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxbqr7sr.php:28\n\
    Stack trace:\n#0 /tmp/tmpnxbqr7sr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnxbqr7sr.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // edge cases when\
    \ input is 0 or 1\n    if ($a < 2) {\n        return true;\n    }\n    // set\
    \ the initial guess of the cube root to half of the input value\n    $guess =\
    \ $a / 2;\n    // continue to guess until guess is within 1 of the previous guess\n\
    \    while ($guess - 1 < $guess * $guess * $guess / $a) {\n        // $guess =\
    \ ($guess + $a / $guess / $guess) / 2;\n        $guess = ($guess + $a / $guess\
    \ / $guess) / 2;\n    }\n    // if the guess is within 1 of the previous guess,\n\
    \    // return whether the guess is equal to the input divided by the guess cubed\n\
    \    return $guess - 1 >= $guess * $guess * $guess / $a;\n}\n\necho '<pre>';\n\
    var_dump(iscube(1));\nvar_dump(iscube(2));\nvar_dump(iscube(-1));\nvar_dump(iscube(64));\n\
    var_dump(iscube(0));\nvar_dump(iscube(180));\necho '</pre>';\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: b'<pre>bool(true)\n'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // Your code here\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68y9_u1a.php:20\n\
    Stack trace:\n#0 /tmp/tmp68y9_u1a.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp68y9_u1a.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a >= 0 && pow($a,\
    \ 1/3) == floor(pow($a, 1/3));\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxna_qi9.php:23\n\
    Stack trace:\n#0 /tmp/tmpjxna_qi9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjxna_qi9.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn isset(sqrt($a)\
    \ % sqrt($a));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use isset() on the result of an expression (you can\
    \ use \"null !== expression\" instead) in /tmp/tmpi_vem63f.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn is_int(pow($a,\
    \ 1/3));\n}\necho iscube(1);\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpygv441ld.php:22\n\
    Stack trace:\n#0 /tmp/tmpygv441ld.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpygv441ld.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    //write your code\
    \ here\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgi4jrtz.php:20\n\
    Stack trace:\n#0 /tmp/tmpjgi4jrtz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjgi4jrtz.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_int(pow($a,\
    \ 1/3));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx0fopss0.php:20\n\
    Stack trace:\n#0 /tmp/tmpx0fopss0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpx0fopss0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return isset(array_count_values([$a\
    \ ** (1/3)])[$a ** (1/3)]);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmpugt6oo4q.php on line 13\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpugt6oo4q.php:21\nStack trace:\n#0 /tmp/tmpugt6oo4q.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpugt6oo4q.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $c = 0;\n  while ($c\
    \ ** 3 < $a) {\n    $c++;\n  }\n  return $c ** 3 == $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojuxafpn.php:27\n\
    Stack trace:\n#0 /tmp/tmpojuxafpn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpojuxafpn.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn is_int(cbrt($a));\n\
    }\n\necho iscube(64);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp3efw0yqo.php:13\n\
    Stack trace:\n#0 /tmp/tmp3efw0yqo.php(16): iscube(64)\n#1 {main}\n  thrown in\
    \ /tmp/tmp3efw0yqo.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$c = false;\n\tfor\
    \ ($i = 0; $i <= $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\t$c = true;\n\
    \t\t}\n\t}\n\treturn $c;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw48uye2k.php:29\n\
    Stack trace:\n#0 /tmp/tmpw48uye2k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpw48uye2k.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if($a == 1) {\n  \t\
    return true;\n  } else if($a <= 0) {\n  \treturn true;\n  } else {\n  \t$square\
    \ = sqrt($a);\n  \t$whole = floor($square);\n  \t$cubed = pow($whole, 3);\n  \t\
    if($cubed == $a) {\n  \t\treturn true;\n  \t} else {\n  \t\treturn false;\n  \t\
    }\n  }\n}\necho iscube(180);\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7a7gs9ln.php:38\n\
    Stack trace:\n#0 /tmp/tmp7a7gs9ln.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7a7gs9ln.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a < 0)\n    $a\
    \ = -$a;\n  return (int)(pow($a, 1 / 3)) ** 3 == $a;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuoti5z2c.php:23\n\
    Stack trace:\n#0 /tmp/tmpuoti5z2c.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuoti5z2c.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a === 0 ?\
    \ true : intval(round(pow($a, 1 / 3))) ** 3 === $a;\n}\necho iscube(1);\necho\
    \ \"\\n\";\necho iscube(2);\necho \"\\n\";\necho iscube(-1);\necho \"\\n\";\n\
    echo iscube(64);\necho \"\\n\";\necho iscube(0);\necho \"\\n\";\necho iscube(180);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjmggk6q.php:34\n\
    Stack trace:\n#0 /tmp/tmptjmggk6q.php(42): test()\n#1 {main}\n  thrown in /tmp/tmptjmggk6q.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn ($a === 0 ||\
    \ $a % (int)cbrt($a) === 0) ? true : false;\n}\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp_thgx69v.php:13\n\
    Stack trace:\n#0 /tmp/tmp_thgx69v.php(16): iscube(1)\n#1 /tmp/tmp_thgx69v.php(20):\
    \ candidate(1)\n#2 /tmp/tmp_thgx69v.php(30): test()\n#3 {main}\n  thrown in /tmp/tmp_thgx69v.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return round(pow($a,\
    \ 1/3)) === $a;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhjxlbb5.php:21\n\
    Stack trace:\n#0 /tmp/tmprhjxlbb5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprhjxlbb5.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a > 0) {\n\t\t\
    $x = floor(pow($a, 1/3));\n\t\tif (pow($x, 3) == $a) {\n\t\t\treturn True;\n\t\
    \t}\n\t}\n\telseif ($a < 0) {\n\t\t$x = floor(pow($a, 1/3));\n\t\tif (pow($x,\
    \ 3) == $a) {\n\t\t\treturn True;\n\t\t}\n\t}\n\telse {\n\t\treturn True;\n\t\
    }\n\treturn False;\n}\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\n\
    echo iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"\
    <br>\";\necho iscube(180) . \"<br>\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br><br><br><br>1<br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpcfpllczy.php:43\nStack trace:\n#0 /tmp/tmpcfpllczy.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmpcfpllczy.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if($a === 0) {\n\
    \        return true;\n    }\n    $cube = 0;\n    while($cube <= abs($a)) {\n\
    \        if($cube === abs($a)) {\n            return true;\n        }\n      \
    \  $cube++;\n        $cube *= $cube;\n    }\n    return false;\n}\necho iscube(1);\
    \ // True\necho iscube(2); // False\necho iscube(-1); // True\necho iscube(64);\
    \ // True\necho iscube(0); // True\necho iscube(180); // False\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoq19fjyb.php:40\n\
    Stack trace:\n#0 /tmp/tmpoq19fjyb.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpoq19fjyb.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $result = false;\n\
    \    for ($i = 1; $i < $a; $i++) {\n        if ($i * $i * $i == $a) {\n      \
    \      $result = true;\n        }\n    }\n    return $result;\n}\n\necho iscube(1)\
    \ . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "<br><br><br>1<br><br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpb8u05mqm.php:33\nStack trace:\n#0 /tmp/tmpb8u05mqm.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpb8u05mqm.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$i = 1;\n\twhile ($i\
    \ * $i * $i < $a) {\n\t\t$i++;\n\t}\n\treturn $i * $i * $i == $a;\n}\necho iscube(0);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99de8bgg.php:27\n\
    Stack trace:\n#0 /tmp/tmp99de8bgg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp99de8bgg.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $b = abs($a);\n  $x\
    \ = pow($b, (1/3));\n  $y = round($x);\n  if($b==0) {\n  \treturn \"True\";\n\
    \  }\n  elseif($b==$y*$y*$y) {\n  \treturn \"True\";\n  }\n  else {\n  \treturn\
    \ \"False\";\n  }\n}\necho iscube(1) . \"<br/>\";\necho iscube(2) . \"<br/>\"\
    ;\necho iscube(-1) . \"<br/>\";\necho iscube(64) . \"<br/>\";\necho iscube(0)\
    \ . \"<br/>\";\necho iscube(180) . \"<br/>\";\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "True<br/>False<br/>True<br/>True<br/>True<br/>False<br/>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpf2tms5x3.php:37\nStack trace:\n\
    #0 /tmp/tmpf2tms5x3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpf2tms5x3.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if($a % $a == 0){\n\
    \    return true;\n  } else{\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphekzngay.php:26\n\
    Stack trace:\n#0 /tmp/tmphekzngay.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphekzngay.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  // your code here\n\
    }\necho iscube(64) ? 'True' : 'False', \"\\n\";\necho iscube(180) ? 'True' : 'False',\
    \ \"\\n\";\necho iscube(0) ? 'True' : 'False', \"\\n\";\necho iscube(1) ? 'True'\
    \ : 'False', \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "False\nFalse\nFalse\nFalse\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp2mwgicqh.php:24\nStack trace:\n#0 /tmp/tmp2mwgicqh.php(34): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2mwgicqh.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn pow($a, 1 /\
    \ 3) == (int) pow($a, 1 / 3);\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkngc0fnv.php:23\n\
    Stack trace:\n#0 /tmp/tmpkngc0fnv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkngc0fnv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow($a,\
    \ 1/3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprp59qcuz.php:23\n\
    Stack trace:\n#0 /tmp/tmprp59qcuz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprp59qcuz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a < 0) {\n   \
    \ $a = abs($a);\n  }\n  for ($i = 0; $i < $a; $i++) {\n    if ($i * $i * $i ==\
    \ $a) {\n      return true;\n    }\n  }\n  return false;\n}\n\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphayvj038.php:35\n\
    Stack trace:\n#0 /tmp/tmphayvj038.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphayvj038.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a >= 0 &&\
    \ abs(pow($a, 1/3)) % 1 == 0) ? true : false;\n}\necho iscube(1).\"\\n\";\necho\
    \ iscube(2).\"\\n\";\necho iscube(-1).\"\\n\";\necho iscube(64).\"\\n\";\necho\
    \ iscube(0).\"\\n\";\necho iscube(180).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxxo8t0hl.php:27\n\
    Stack trace:\n#0 /tmp/tmpxxo8t0hl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxxo8t0hl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == (int)pow($a,\
    \ 1/3);\n}\n\nvar_dump(iscube(1));\nvar_dump(iscube(2));\nvar_dump(iscube(-1));\n\
    var_dump(iscube(64));\nvar_dump(iscube(0));\nvar_dump(iscube(180));\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "bool(true)\nbool(false)\nbool(false)\nbool(false)\nbool(true)\nbool(false)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8aqo3sbz.php:29\nStack\
    \ trace:\n#0 /tmp/tmp8aqo3sbz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8aqo3sbz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a > 0 &&\
    \ ($a == pow(round(pow($a, 1/3)), 3) || $a == pow(round(pow($a, 1/3)), 3));\n\
    }\n\necho iscube(125);\necho iscube(90);\necho iscube(64);\necho iscube(63);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp89zwmp3g.php:27\n\
    Stack trace:\n#0 /tmp/tmp89zwmp3g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp89zwmp3g.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       $a = $a * -1;\n    }\n    $c = pow($a, 1/3);\n    if ($c == floor($c))\
    \ {\n        return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2gw7vxk.php:32\n\
    Stack trace:\n#0 /tmp/tmpt2gw7vxk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpt2gw7vxk.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    // Your code here\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvvb95hfg.php:20\n\
    Stack trace:\n#0 /tmp/tmpvvb95hfg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvvb95hfg.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow($a,\
    \ 1/3);\n}\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjp3jdk0x.php:29\n\
    Stack trace:\n#0 /tmp/tmpjp3jdk0x.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjp3jdk0x.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a > 0 ? (bool)pow($a,\
    \ 1/3) : true;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dzawyni.php:22\n\
    Stack trace:\n#0 /tmp/tmp_dzawyni.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_dzawyni.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a < 0) {\n   \
    \ $a = -$a;\n  }\n  if ($a === 0) {\n    return True;\n  }\n  $root = pow($a,\
    \ 1/3);\n  return $root * $root * $root === $a;\n}\necho iscube(1) ? \"True<br>\"\
    \ : \"False<br>\";\necho iscube(2) ? \"True<br>\" : \"False<br>\";\necho iscube(-1)\
    \ ? \"True<br>\" : \"False<br>\";\necho iscube(64) ? \"True<br>\" : \"False<br>\"\
    ;\necho iscube(0) ? \"True<br>\" : \"False<br>\";\necho iscube(180) ? \"True<br>\"\
    \ : \"False<br>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "False<br>False<br>False<br>False<br>True<br>False<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmprlv6kj7m.php:33\nStack trace:\n#0 /tmp/tmprlv6kj7m.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprlv6kj7m.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a && intval(round(pow($a,\
    \ 1/3))) ** 3 == $a;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptmrhpuqz.php:22\n\
    Stack trace:\n#0 /tmp/tmptmrhpuqz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptmrhpuqz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == round(pow($a,\
    \ 1/3));\n}\necho iscube(64);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_5qyku1.php:23\n\
    Stack trace:\n#0 /tmp/tmpi_5qyku1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpi_5qyku1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a > 0) {\n\t\t\
    return is_int(round(pow($a, 1/3)));\n\t}\n\treturn is_int(round(pow(abs($a), 1/3)));\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5iyfmn04.php:24\n\
    Stack trace:\n#0 /tmp/tmp5iyfmn04.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5iyfmn04.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a < 0) {\n   \
    \ $a = abs($a);\n  }\n  if ($a > 0) {\n    $b = pow($a, 1/3);\n    $c = round($b);\n\
    \    if ($c == $b) {\n      $ans = True;\n    } else {\n      $ans = False;\n\
    \    }\n  } else {\n    $ans = True;\n  }\n  return $ans;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpygn01qh5.php:37\n\
    Stack trace:\n#0 /tmp/tmpygn01qh5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpygn01qh5.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$i = pow($a, 1/3);\n\
    \tif(($i * $i * $i) == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho\
    \ iscube(1); echo \"<br>\";\necho iscube(2); echo \"<br>\";\necho iscube(-1);\
    \ echo \"<br>\";\necho iscube(64); echo \"<br>\";\necho iscube(0); echo \"<br>\"\
    ;\necho iscube(180); echo \"<br>\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br>1<br><br><br>1<br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpv1_1v2iv.php:31\nStack trace:\n#0 /tmp/tmpv1_1v2iv.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpv1_1v2iv.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return (pow((int)pow($a,\
    \ 1/3), 3) == $a) ? true : false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp05y_7lf5.php:23\n\
    Stack trace:\n#0 /tmp/tmp05y_7lf5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp05y_7lf5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $cube = $a * $a *\
    \ $a;\n    if ($a == 0) {\n        return true;\n    } else if ($a < 0) {\n  \
    \      return true;\n    } else if ($a == $cube) {\n        return true;\n   \
    \ } else {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplgtkqdl8.php:32\n\
    Stack trace:\n#0 /tmp/tmplgtkqdl8.php(39): test()\n#1 {main}\n  thrown in /tmp/tmplgtkqdl8.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$b = 1;\n\twhile ($b*$b*$b\
    \ <= $a) {\n\t\tif ($b*$b*$b == $a) return true;\n\t\t$b = $b + 1;\n\t}\n\treturn\
    \ false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_w_2qd0.php:27\n\
    Stack trace:\n#0 /tmp/tmpp_w_2qd0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpp_w_2qd0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn floor(pow($a,\
    \ 1/3)) == pow($a, 1/3);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnm4wp3z1.php:22\n\
    Stack trace:\n#0 /tmp/tmpnm4wp3z1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpnm4wp3z1.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn !($a % 2) &&\
    \ !(sqrt($a) % 1);\n}\necho iscube(2) . \"<br>\";\necho iscube(1) . \"<br>\";\n\
    echo iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"\
    <br>\";\necho iscube(180) . \"<br>\";\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1<br><br><br>1<br>1<br>1<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpg9r6ixf4.php:27\nStack trace:\n#0 /tmp/tmpg9r6ixf4.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmpg9r6ixf4.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
