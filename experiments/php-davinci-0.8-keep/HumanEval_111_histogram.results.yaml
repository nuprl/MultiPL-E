name: HumanEval_111_histogram
language: php
results:
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $arr = explode(' ', $test);\n    $array = array_count_values($arr);\n\
    \    $maxKey = array_search(max($array), $array);\n    $max = $array[$maxKey];\n\
    \    $results = [];\n    foreach ($array as $key => $value) {\n        if ($value\
    \ == $max) {\n            $results[$key] = $value;\n        }\n    }\n    return\
    \ $results;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_qdm0ix.php:35\n\
    Stack trace:\n#0 /tmp/tmp3_qdm0ix.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3_qdm0ix.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $array = explode(' ', $test);\n  $count = [];\n\
    \  foreach ($array as $char) {\n    if (isset($count[$char])) {\n      $count[$char]++;\n\
    \    } else {\n      $count[$char] = 1;\n    }\n  }\n  return $count;\n}\n\n$test\
    \ = 'a b c';\n$actual = histogram($test);\n$expected = ['a' => 1, 'b' => 1, 'c'\
    \ => 1];\nif ($actual != $expected) {\n  echo \"FAILED: histogram('$test')\\n\"\
    ;\n  echo \"  actual: \"; print_r($actual); echo \"\\n\";\n  echo \"expected:\
    \ \"; print_r($expected); echo \"\\n\";\n} else {\n  echo \"PASSED: histogram('$test')\\\
    n\";\n}\n\n$test = 'a b b a';\n$actual = histogram($test);\n$expected = ['a' =>\
    \ 2, 'b' => 2];\nif ($actual != $expected) {\n  echo \"FAILED: histogram('$test')\\\
    n\";\n  echo \"  actual: \"; print_r($actual); echo \"\\n\";\n  echo \"expected:\
    \ \"; print_r($expected); echo \"\\n\";\n} else {\n  echo \"PASSED: histogram('$test')\\\
    n\";\n}\n\n$test = 'a b c a b';\n$actual = histogram($test);\n$expected = ['a'\
    \ => 2, 'b' => 2];\nif ($actual != $expected) {\n  echo \"FAILED: histogram('$test')\\\
    n\";\n  echo \"  actual: \"; print_r($actual); echo \"\\n\";\n  echo \"expected:\
    \ \"; print_r($expected); echo \"\\n\";\n} else {\n  echo \"PASSED: histogram('$test')\\\
    n\";\n}\n\n$test = 'b b b b a';\n$actual = histogram($test);\n$expected = ['b'\
    \ => 4];\nif ($actual != $expected) {\n  echo \"FAILED: histogram('$test')\\n\"\
    ;\n  echo \" \nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk2m_x8ro.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$count = count_chars($test, 1);\n\t$c = 0;\n\t\
    foreach ($count as $key => $val) {\n\t\tif ($val > $c) {\n\t\t\t$c = $val;\n\t\
    \t}\n\t}\n\t$result = array();\n\tforeach ($count as $key => $val) {\n\t\tif ($val\
    \ == $c) {\n\t\t\t$result[chr($key)] = $val;\n\t\t}\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0dxq3lq6.php:32\n\
    Stack trace:\n#0 /tmp/tmp0dxq3lq6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0dxq3lq6.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$var = explode(\" \", $test);\n\t$histogram = array_count_values($var);\n\
    \tarsort($histogram);\n\t$max = reset($histogram);\n\t$result = array_filter($histogram,\
    \ function($val) use ($max) {\n\t\treturn $val == $max;\n\t});\n\treturn $result;\n\
    }\n\n$result = histogram('a b c');\nprint_r($result);\n\n$result = histogram('a\
    \ b b a');\nprint_r($result);\n\n$result = histogram('a b c a b');\nprint_r($result);\n\
    \n$result = histogram('b b b b a');\nprint_r($result);\n\n$result = histogram('');\n\
    print_r($result);\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpbrynxg0m.php:47\nStack trace:\n#0 /tmp/tmpbrynxg0m.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbrynxg0m.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    // format the string to be in an array\n    $test\
    \ = explode(' ', $test);\n    // sort the array\n    sort($test);\n    // start\
    \ counting the letters\n    $counter = 0;\n    $letters = [];\n    $holder = $test[0];\n\
    \    foreach ($test as $index => $letter) {\n        if ($letter == $holder) {\n\
    \            $counter++;\n        } else {\n            $letters[$holder] = $counter;\n\
    \            $counter = 1;\n            $holder = $letter;\n        }\n    }\n\
    \    $letters[$holder] = $counter;\n    // loop through the letters array\n  \
    \  foreach ($letters as $letter => $count) {\n        // find the max value\n\
    \        $max = max($letters);\n        // only keep the keys with the max value\n\
    \        if ($count == $max) {\n            $results[$letter] = $count;\n    \
    \    }\n    }\n    return $results;\n}\nvar_dump(histogram('a b c')); // {'a':\
    \ 1, 'b': 1, 'c': 1}\nvar_dump(histogram('a b b a')); // {'a': 2, 'b': 2}\nvar_dump(histogram('a\
    \ b c a b')); // {'a': 2, 'b': 2}\nvar_dump(histogram('b b b b a')); // {'b':\
    \ 4}\nvar_dump(histogram('')); // {}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpb76ebj3x.php:54\nStack trace:\n#0 /tmp/tmpb76ebj3x.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb76ebj3x.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $split = explode(' ', $test);\n    $sort = array_count_values($split);\n\
    \    $max = max($sort);\n    $out = array();\n    foreach ($sort as $key => $value)\
    \ {\n        if ($value == $max) {\n            $out[$key] = $value;\n       \
    \ }\n    }\n    print_r($out);\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [a] => 2\n    [b] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplchgajqd.php:29\nStack trace:\n#0 /tmp/tmplchgajqd.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplchgajqd.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $characters = explode(' ', $test);\n  $count =\
    \ [];\n  foreach ($characters as $char) {\n    if (isset($count[$char])) {\n \
    \     $count[$char] += 1;\n    } else {\n      $count[$char] = 1;\n    }\n  }\n\
    \  arsort($count);\n  $result = array_flip($count);\n  return array_slice($result,\
    \ 0, 1);\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchjpryjy.php:31\n\
    Stack trace:\n#0 /tmp/tmpchjpryjy.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpchjpryjy.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpup_xzl8t.php:19\n\
    Stack trace:\n#0 /tmp/tmpup_xzl8t.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpup_xzl8t.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test_array = explode(\" \", $test);\n    $letter_array\
    \ = [];\n    foreach ($test_array as $word) {\n        $letter_array[$word] =\
    \ 0;\n    }\n    foreach ($test_array as $word) {\n        $letter_array[$word]\
    \ += 1;\n    }\n    $counter = 0;\n    $high_letter = \"\";\n    foreach ($letter_array\
    \ as $letter => $value) {\n        if ($value > $counter) {\n            $counter\
    \ = $value;\n            $high_letter = $letter;\n        }\n    }\n    $ret_array\
    \ = [$high_letter => $counter];\n    foreach ($letter_array as $letter => $value)\
    \ {\n        if ($value == $counter && $letter != $high_letter) {\n          \
    \  $ret_array[$letter] = $counter;\n        }\n    }\n    return $ret_array;\n\
    }\necho \"Expected result: {'a': 2, 'b': 2}:\\n\";\nprint_r(histogram('a b b a'));\n\
    echo \"Expected result: {'b': 4}:\\n\";\nprint_r(histogram('b b b b a'));\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Expected result: {'a': 2, 'b': 2}:\nArray\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\nExpected result: {'b': 4}:\nArray\n(\n    [b] => 4\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpqbvu9h02.php:51\nStack trace:\n\
    #0 /tmp/tmpqbvu9h02.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqbvu9h02.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test_array = explode(\" \", $test);\n    $histo\
    \ = array_count_values($test_array);\n    $histo_array = array();\n    $max =\
    \ max($histo);\n    foreach ($histo as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $histo_array[$key] = $value;\n        }\n    }\n    return\
    \ $histo_array;\n}\n\nprint_r(histogram('a b c'));\nprint_r(histogram('a b b a'));\n\
    print_r(histogram('a b c a b'));\nprint_r(histogram('b b b b a'));\nprint_r(histogram(''));\n\
    \nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpm2iy77qr.php:41\nStack trace:\n#0 /tmp/tmpm2iy77qr.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpm2iy77qr.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $myArr = explode(\" \", $test);\n    $myArr =\
    \ array_count_values($myArr);\n    arsort($myArr);\n    foreach ($myArr as $key\
    \ => $value) {\n        if ($value == max($myArr)) {\n            echo \"key is\
    \ $key and value is $value\\n\";\n        }\n    }\n}\nhistogram('a b c');\nhistogram('a\
    \ b b a');\nhistogram('a b c a b');\nhistogram('b b b b a');\nhistogram('');\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "key is a and value is 1\nkey is b and value is 1\nkey is c and value is\
    \ 1\nkey is a and value is 2\nkey is b and value is 2\nkey is a and value is 2\n\
    key is b and value is 2\nkey is b and value is 4\nkey is  and value is 1\nkey\
    \ is a and value is 2\nkey is b and value is 2\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgj0_tr5v.php:31\nStack trace:\n#0 /tmp/tmpgj0_tr5v.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgj0_tr5v.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $countArray = [];\n    if (strlen($test) > 0)\
    \ {\n        $testArray = explode(\" \", $test);\n        for ($i = 0; $i < count($testArray);\
    \ $i++) {\n            if (array_key_exists($testArray[$i], $countArray)) {\n\
    \                $countArray[$testArray[$i]] += 1;\n            } else {\n   \
    \             $countArray[$testArray[$i]] = 1;\n            }\n        }\n   \
    \ }\n    return $countArray;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7l8hvve1.php:31\n\
    Stack trace:\n#0 /tmp/tmp7l8hvve1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7l8hvve1.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $arr = [];\n  $test = trim($test);\n  if (strlen($test)\
    \ > 0) {\n    $test = explode(' ', $test);\n    foreach ($test as $key => $value)\
    \ {\n      if (array_key_exists($value, $arr)) {\n        $arr[$value]++;\n  \
    \    } else {\n        $arr[$value] = 1;\n      }\n    }\n    $max = max($arr);\n\
    \    foreach ($arr as $key => $value) {\n      if ($value != $max) {\n       \
    \ unset($arr[$key]);\n      }\n    }\n  }\n  return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $explodeString = explode(\" \", $test);\n  $arrayCount\
    \ = array_count_values($explodeString);\n  $maxValue = max($arrayCount);\n  $result\
    \ = array_filter($arrayCount, function($val) use ($maxValue) {\n      return $val\
    \ == $maxValue;\n  });\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3pyk4f6h.php:32\n\
    Stack trace:\n#0 /tmp/tmp3pyk4f6h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3pyk4f6h.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    // your code here\n    $arr = explode(\" \",\
    \ $test);\n    $histogram = [];\n    foreach ($arr as $val) {\n        if (array_key_exists($val,\
    \ $histogram)) {\n            $histogram[$val] += 1;\n        } else {\n     \
    \       $histogram[$val] = 1;\n        }\n    }\n    // get the highest value\
    \ in the array\n    $maxVal = max($histogram);\n    // create new array with only\
    \ the highest value\n    $result = array_filter($histogram, function ($value)\
    \ use ($maxVal) {\n        return $value == $maxVal;\n    });\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepx4r_2i.php:41\n\
    Stack trace:\n#0 /tmp/tmpepx4r_2i.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpepx4r_2i.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test = explode(' ', $test);\n    $dict = [];\n\
    \    foreach ($test as $i) {\n        if (!array_key_exists($i, $dict)) {\n  \
    \          $dict[$i] = 1;\n        } else {\n            $dict[$i] += 1;\n   \
    \     }\n    }\n    $max = max($dict);\n    $max_letter = array_keys($dict, $max);\n\
    \    return array_fill_keys($max_letter, $max);\n}\nprint_r(histogram('a b c'));\n\
    print_r(histogram('a b b a'));\nprint_r(histogram('a b c a b'));\nprint_r(histogram('b\
    \ b b b a'));\nprint_r(histogram(''));\n\nfunction candidate(...$args) {\n   \
    \ return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpy0tto3l_.php:42\nStack trace:\n#0 /tmp/tmpy0tto3l_.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpy0tto3l_.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test = str_split($test);\n    $hist = array_count_values($test);\n\
    \    if (count($hist) == 0) {\n        return array();\n    } else {\n       \
    \ return array_filter($hist, function($var) {\n            return ($var == max($GLOBALS['hist']));\n\
    \        });\n    }\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp4e37v8cg.php on line 18\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmp4e37v8cg.php on line 18\n\nWarning:\
    \ max(): When only one parameter is given, it must be an array in /tmp/tmp4e37v8cg.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4e37v8cg.php:27\n\
    Stack trace:\n#0 /tmp/tmp4e37v8cg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4e37v8cg.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $result = [];\n  $array = explode(' ', $test);\n\
    \  $max = count($array);\n  $max_value = 1;\n  foreach ($array as $key => $val)\
    \ {\n    $value = count(array_keys($array, $val));\n    if ($value >= $max_value)\
    \ {\n      $max_value = $value;\n      $result[$val] = $value;\n    }\n  }\n \
    \ return $result;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_3bz72v.php:36\n\
    Stack trace:\n#0 /tmp/tmpm_3bz72v.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpm_3bz72v.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$histogram = [];\n\t$letters = explode(' ', $test);\n\
    \tforeach ($letters as $letter) {\n\t\tif (!array_key_exists($letter, $histogram))\
    \ {\n\t\t\t$histogram[$letter] = 1;\n\t\t} else {\n\t\t\t$histogram[$letter]++;\n\
    \t\t}\n\t}\n\t$max = 0;\n\tforeach ($histogram as $key => $value) {\n\t\tif ($value\
    \ > $max) {\n\t\t\t$max = $value;\n\t\t}\n\t}\n\tforeach ($histogram as $key =>\
    \ $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($histogram[$key]);\n\t\t}\n\
    \t}\n\treturn $histogram;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwv0l9yn3.php:45\n\
    Stack trace:\n#0 /tmp/tmpwv0l9yn3.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpwv0l9yn3.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $letters_array = explode(' ', $test);\n  $count_array\
    \ = array_count_values($letters_array);\n  $max_count = max($count_array);\n \
    \ $max_keys = array_keys($count_array, $max_count);\n  $max_letter = [];\n  foreach\
    \ ($max_keys as $key) {\n    $max_letter[$key] = $max_count;\n  }\n  return $max_letter;\n\
    }\necho implode(', ', histogram('a b c')) . PHP_EOL;\necho implode(', ', histogram('a\
    \ b b a')) . PHP_EOL;\necho implode(', ', histogram('a b c a b')) . PHP_EOL;\n\
    echo implode(', ', histogram('b b b b a')) . PHP_EOL;\necho implode(', ', histogram(''))\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1, 1, 1\n2, 2\n2, 2\n4\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp5j8ed1b4.php:38\nStack trace:\n#0 /tmp/tmp5j8ed1b4.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5j8ed1b4.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $test = trim($test);\n  if (strlen($test) === 0)\
    \ {\n    return array();\n  }\n  $test = preg_split('/\\s+/', $test);\n  $indexes\
    \ = array_count_values($test);\n  $max = max($indexes);\n  $final = array();\n\
    \  foreach ($indexes as $key => $value) {\n    if ($value === $max) {\n      $final[$key]\
    \ = $value;\n    }\n  }\n  return $final;\n}\necho json_encode(histogram('a b\
    \ c a b c'));\necho PHP_EOL;\necho json_encode(histogram('a b b a'));\necho PHP_EOL;\n\
    echo json_encode(histogram('a b c a b'));\necho PHP_EOL;\necho json_encode(histogram('b\
    \ b b b a'));\necho PHP_EOL;\necho json_encode(histogram(''));\necho PHP_EOL;\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "{\"a\":2,\"b\":2,\"c\":2}\n{\"a\":2,\"b\":2}\n{\"a\":2,\"b\":2}\n{\"b\"\
    :4}\n[]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = [];\n    foreach (array_count_values(str_split($test))\
    \ as $key => $value) {\n        if ($value > max($result)) {\n            $result\
    \ = [$key => $value];\n        } elseif ($value == max($result)) {\n         \
    \   $result[$key] = $value;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmphuza12xs.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphuza12xs.php:27\n\
    Stack trace:\n#0 /tmp/tmphuza12xs.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphuza12xs.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $rarr = array();\n  $iarr = str_split($test);\n\
    \  $iarr = array_count_values($iarr);\n  foreach ($iarr as $key => $value) {\n\
    \    if ($value > 1) {\n      $rarr[$key] = $value;\n    }\n  }\n  return $rarr;\n\
    }\necho 'histogram(\\'b b b b a\\')' . ' ' . json_encode(histogram('b b b b a'));\n\
    echo \"\\n\";\necho 'histogram(\\'b b b b a\\')' . ' ' . json_encode(histogram('b\
    \ b b b a'));\necho \"\\n\";\necho 'histogram(\\'a b c\\')' . ' ' . json_encode(histogram('a\
    \ b c'));\necho \"\\n\";\necho 'histogram(\\'a b b a\\')' . ' ' . json_encode(histogram('a\
    \ b b a'));\necho \"\\n\";\necho 'histogram(\\'a b c a b\\')' . ' ' . json_encode(histogram('a\
    \ b c a b'));\necho \"\\n\";\necho 'histogram(\\'\\')' . ' ' . json_encode(histogram(''));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "histogram('b b b b a') {\"b\":4,\" \":4}\nhistogram('b b b b a') {\"b\"\
    :4,\" \":4}\nhistogram('a b c') {\" \":2}\nhistogram('a b b a') {\"a\":2,\" \"\
    :3,\"b\":2}\nhistogram('a b c a b') {\"a\":2,\" \":4,\"b\":2}\nhistogram('') []\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpib7mw4ap.php:39\nStack\
    \ trace:\n#0 /tmp/tmpib7mw4ap.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpib7mw4ap.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = explode(' ', $test);\n    $collection\
    \ = [];\n    foreach ($letters as $letter) {\n        if (!isset($collection[$letter]))\
    \ {\n            $collection[$letter] = 1;\n        } else {\n            $collection[$letter]++;\n\
    \        }\n    }\n    arsort($collection);\n    foreach ($collection as $letter\
    \ => $count) {\n        if ($count == current($collection)) {\n            $final[$letter]\
    \ = $count;\n        }\n    }\n    return $final;\n}\n\nvar_dump(histogram('a\
    \ b c'));\nvar_dump(histogram('a b b a'));\nvar_dump(histogram('a b c a b'));\n\
    var_dump(histogram('b b b b a'));\nvar_dump(histogram(''));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmprjo2eld0.php:46\nStack trace:\n#0 /tmp/tmprjo2eld0.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprjo2eld0.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test = explode(' ', $test);\n    $newArr = [];\n\
    \    foreach ($test as $key => $value) {\n        if (isset($newArr[$value]))\
    \ {\n            $newArr[$value]++;\n        } else {\n            $newArr[$value]\
    \ = 1;\n        }\n    }\n    return $newArr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7uwyk12j.php:30\n\
    Stack trace:\n#0 /tmp/tmp7uwyk12j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7uwyk12j.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    // Your code here\n    $testArr = explode(\"\
    \ \", $test);\n    $ansArr = [];\n    $ansHisto = [];\n    foreach ($testArr as\
    \ $val) {\n        if (isset($ansArr[$val])) {\n            $ansArr[$val]++;\n\
    \        } else {\n            $ansArr[$val] = 1;\n        }\n    }\n    arsort($ansArr);\n\
    \    $maxCount = 0;\n    foreach ($ansArr as $key => $val) {\n        if ($val\
    \ == current($ansArr)) {\n            $maxCount = $val;\n            $ansHisto[$key]\
    \ = $val;\n        }\n    }\n    return $ansHisto;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqgtm1mxq.php:44\n\
    Stack trace:\n#0 /tmp/tmpqgtm1mxq.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqgtm1mxq.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $array = explode(' ', $test);\n    $histogram\
    \ = [];\n    foreach ($array as $value) {\n        if (isset($histogram[$value]))\
    \ {\n            $histogram[$value] += 1;\n        } else {\n            $histogram[$value]\
    \ = 1;\n        }\n    }\n    $max = 0;\n    $maxs = [];\n    foreach ($histogram\
    \ as $key => $value) {\n        if ($value > $max) {\n            $max = $value;\n\
    \            $maxs = [$key => $value];\n        } elseif ($value == $max) {\n\
    \            $maxs[$key] = $value;\n        }\n    }\n    return $maxs;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5are0y2z.php:44\n\
    Stack trace:\n#0 /tmp/tmp5are0y2z.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp5are0y2z.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$result = [];\n\tforeach (explode(' ', $test) as\
    \ $letter) {\n\t\tif (!isset($result[$letter])) {\n\t\t\t$result[$letter] = 0;\n\
    \t\t}\n\t\t$result[$letter]++;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsa6j8rbu.php:28\n\
    Stack trace:\n#0 /tmp/tmpsa6j8rbu.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsa6j8rbu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test = str_split($test);\n    foreach ($test\
    \ as $key => $value) {\n        if (isset($result[$value])) {\n            $result[$value]\
    \ += 1;\n        } else {\n            $result[$value] = 1;\n        }\n    }\n\
    \    arsort($result);\n    $return = reset($result);\n    $return = array_keys($result,\
    \ $return);\n    foreach ($return as $key => $value) {\n        $return[$value]\
    \ = $result[$value];\n        unset($return[$key]);\n    }\n    return $return;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp578n69wb.php:34\n\
    Stack trace:\n#0 /tmp/tmp578n69wb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp578n69wb.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$arr = explode(' ', $test);\n\t$letters = [];\n\
    \t$counts = [];\n\t$ret = [];\n\tforeach ($arr as $v) {\n\t\tif (!in_array($v,\
    \ $letters)) {\n\t\t\t$letters[] = $v;\n\t\t\t$counts[] = 1;\n\t\t} else {\n\t\
    \t\t$index = array_search($v, $letters);\n\t\t\t$counts[$index]++;\n\t\t}\n\t\
    }\n\t$max = max($counts);\n\t$max_index = array_search($max, $counts);\n\tfor\
    \ ($i = 0; $i < count($counts); $i++) {\n\t\tif ($counts[$i] == $max) {\n\t\t\t\
    $ret[$letters[$i]] = $max;\n\t\t}\n\t}\n\treturn $ret;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_ov31eu.php:46\n\
    Stack trace:\n#0 /tmp/tmpa_ov31eu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa_ov31eu.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppa_k7cst.php:20\n\
    Stack trace:\n#0 /tmp/tmppa_k7cst.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppa_k7cst.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$letters = explode(' ', $test);\n\t$result = [];\n\
    \t\n\tforeach ($letters as $letter) {\n\t\tif (isset($result[$letter])) {\n\t\t\
    \t$result[$letter]++;\n\t\t} else {\n\t\t\t$result[$letter] = 1;\n\t\t}\n\t}\n\
    \t\n\t$max = max($result);\n\t$maxes = [];\n\t\n\tforeach ($result as $letter\
    \ => $count) {\n\t\tif ($count == $max) {\n\t\t\t$maxes[$letter] = $count;\n\t\
    \t}\n\t}\n\t\n\treturn $maxes;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmped1e0ba9.php:46\n\
    Stack trace:\n#0 /tmp/tmped1e0ba9.php(50): test()\n#1 {main}\n  thrown in /tmp/tmped1e0ba9.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test = explode(' ', $test);\n    $temp = [];\n\
    \    $result = [];\n    foreach ($test as $val) {\n        if (array_key_exists($val,\
    \ $temp)) {\n            $temp[$val] += 1;\n        } else {\n            $temp[$val]\
    \ = 1;\n        }\n    }\n    $max = max($temp);\n    foreach ($temp as $key =>\
    \ $val) {\n        if ($val == $max) {\n            $result[$key] = $val;\n  \
    \      }\n    }\n    return $result;\n}\nvar_dump(histogram('a b c'));\nvar_dump(histogram('a\
    \ b b a'));\nvar_dump(histogram('a b c a b'));\nvar_dump(histogram('b b b b a'));\n\
    var_dump(histogram(''));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp85sv34m_.php:46\nStack trace:\n#0 /tmp/tmp85sv34m_.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp85sv34m_.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $arr = array_count_values(explode(' ', $test));\n\
    \    $keys = array_keys($arr, max($arr));\n    $result = array_intersect_key($arr,\
    \ array_flip($keys));\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvut18hd_.php:28\n\
    Stack trace:\n#0 /tmp/tmpvut18hd_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvut18hd_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6sj1aad.php:20\n\
    Stack trace:\n#0 /tmp/tmpa6sj1aad.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpa6sj1aad.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $arr = explode(' ', $test);\n  $counts = array_count_values($arr);\n\
    \  $max_count = max($counts);\n  $arr_max = array_keys($counts, $max_count);\n\
    \  return array_intersect_key($counts, array_flip($arr_max));\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65nnqj_m.php:29\n\
    Stack trace:\n#0 /tmp/tmp65nnqj_m.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp65nnqj_m.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t// Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_tq0zre.php:20\n\
    Stack trace:\n#0 /tmp/tmpy_tq0zre.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy_tq0zre.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $result = [];\n  foreach (explode(' ', $test) as\
    \ $char) {\n    isset($result[$char]) ? $result[$char]++ : $result[$char] = 1;\n\
    \  }\n  asort($result);\n  $max = array_pop($result);\n  foreach ($result as $key\
    \ => $value) {\n    if ($value == $max) {\n      $result[$key] = $max;\n    }\
    \ else {\n      unset($result[$key]);\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdprxupvu.php:33\n\
    Stack trace:\n#0 /tmp/tmpdprxupvu.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpdprxupvu.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $testArray = explode(\" \", $test);\n    $testArrayUnique\
    \ = array_unique($testArray);\n    $testResult = array();\n    foreach ($testArrayUnique\
    \ as $v) {\n        $testResult[$v] = count(array_keys($testArray, $v));\n   \
    \ }\n    asort($testResult);\n    $testResult = array_reverse($testResult);\n\
    \    $max = max($testResult);\n    foreach ($testResult as $key => $value) {\n\
    \        if ($value != $max) {\n            unset($testResult[$key]);\n      \
    \  }\n    }\n    return $testResult;\n}\n\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjmf_gh0o.php:34\n\
    Stack trace:\n#0 /tmp/tmpjmf_gh0o.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjmf_gh0o.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = array();\n    $letters = explode('\
    \ ', $test);\n    foreach ($letters as $letter) {\n        $count = 0;\n     \
    \   foreach ($letters as $compare) {\n            if ($letter == $compare) {\n\
    \                $count++;\n            }\n        }\n        $result[$letter]\
    \ = $count;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd0n6cj_d.php:31\n\
    Stack trace:\n#0 /tmp/tmpd0n6cj_d.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpd0n6cj_d.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = [];\n    $temp = [];\n    $arr = explode('\
    \ ', $test);\n    foreach ($arr as $key => $value) {\n        if (isset($temp[$value]))\
    \ {\n            $temp[$value] += 1;\n        } else {\n            $temp[$value]\
    \ = 1;\n        }\n    }\n    $max = 0;\n    foreach ($temp as $key => $value)\
    \ {\n        if ($value > $max) {\n            $max = $value;\n        }\n   \
    \ }\n    foreach ($temp as $key => $value) {\n        if ($value == $max) {\n\
    \            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwv69yyng.php:46\n\
    Stack trace:\n#0 /tmp/tmpwv69yyng.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpwv69yyng.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = [];\n    $letters = explode(' ', $test);\n\
    \    foreach ($letters as $letter) {\n        if (!isset($result[$letter])) {\n\
    \            $result[$letter] = 0;\n        }\n        $result[$letter]++;\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlb7sg8b.php:29\n\
    Stack trace:\n#0 /tmp/tmpdlb7sg8b.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpdlb7sg8b.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $wordArray = explode(\" \", $test);\n    $wordArray\
    \ = array_count_values($wordArray);\n    arsort($wordArray);\n    $sortedArray\
    \ = [];\n    foreach ($wordArray as $key => $value) {\n        if ($value == $wordArray[key($wordArray)])\
    \ {\n            $sortedArray[$key] = $value;\n        }\n    }\n    return $sortedArray;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7f45cmxz.php:34\n\
    Stack trace:\n#0 /tmp/tmp7f45cmxz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7f45cmxz.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $testArray = explode(\" \", $test);\n  $histogram\
    \ = array_count_values($testArray);\n  $maxValue = max($histogram);\n  $result\
    \ = array_filter($histogram, function($v) use ($maxValue) {\n    return $v ==\
    \ $maxValue;\n  });\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp588x87d1.php:32\n\
    Stack trace:\n#0 /tmp/tmp588x87d1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp588x87d1.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n   $test = preg_split('/\\s+/', $test);\n   $counts\
    \ = array_count_values($test);\n   arsort($counts);\n   $max = max($counts);\n\
    \   $result = array_filter($counts, function($v) use ($max) { return $v == $max;\
    \ });\n   return $result;\n}\necho \"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5mi1abv.php:32\n\
    Stack trace:\n#0 /tmp/tmpq5mi1abv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpq5mi1abv.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $letter_counts = [];\n  $letters = explode(' ',\
    \ $test);\n  // foreach ($letters as $letter) {\n  //   if (array_key_exists($letter,\
    \ $letter_counts)) {\n  //     $letter_counts[$letter] += 1;\n  //   } else {\n\
    \  //     $letter_counts[$letter] = 1;\n  //   }\n  // }\n  foreach ($letters\
    \ as $letter) {\n    if (isset($letter_counts[$letter])) {\n      $letter_counts[$letter]\
    \ += 1;\n    } else {\n      $letter_counts[$letter] = 1;\n    }\n  }\n  return\
    \ $letter_counts;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkl67us3.php:37\n\
    Stack trace:\n#0 /tmp/tmpxkl67us3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxkl67us3.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $test = explode(' ', $test);\n  $results = [];\n\
    \  foreach ($test as $char) {\n    isset($results[$char]) ? $results[$char]++\
    \ : $results[$char] = 1;\n  }\n  return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq3wvzgy_.php:26\n\
    Stack trace:\n#0 /tmp/tmpq3wvzgy_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq3wvzgy_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $letters = explode(' ', $test);\n  $count = [];\n\
    \  foreach ($letters as $letter) {\n    $count[$letter] = (isset($count[$letter]))\
    \ ? $count[$letter] + 1 : 1;\n  }\n  arsort($count);\n  reset($count);\n  $key\
    \ = key($count);\n  $histogram = [];\n  foreach ($count as $letter => $value)\
    \ {\n    if ($value == $count[$key]) {\n      $histogram[$letter] = $value;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9onj63a.php:40\n\
    Stack trace:\n#0 /tmp/tmpr9onj63a.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpr9onj63a.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test = explode(' ', $test);\n    $counts = array_count_values($test);\n\
    \    arsort($counts);\n    $most = $counts[0];\n    $return = [];\n    foreach\
    \ ($counts as $key => $value) {\n        if ($value == $most) {\n            $return[$key]\
    \ = $value;\n        }\n    }\n    return $return;\n}\nvar_dump(histogram('a b\
    \ c a b'));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(0) {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmp11_25w.php:30\n\
    Stack trace:\n#0 /tmp/tmpmp11_25w.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmp11_25w.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $myArr = explode(\" \", $test);\n  $myCountArr\
    \ = array_count_values($myArr);\n  $myMaxArr = array_keys($myCountArr, max($myCountArr));\n\
    \  $myHistogram = array();\n  foreach ($myMaxArr as $key => $value) {\n    $myHistogram[$value]\
    \ = max($myCountArr);\n  }\n  return $myHistogram;\n}\necho \"<pre>\";\nprint_r(histogram('a\
    \ b c'));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram('a b b a'));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram('a b c a b'));\necho \"\
    </pre>\";\n\necho \"<pre>\";\nprint_r(histogram('b b b b a'));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(histogram(''));\necho \"</pre>\";\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5f4kj_ht.php:52\n\
    Stack trace:\n#0 /tmp/tmp5f4kj_ht.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp5f4kj_ht.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\tif (!$test) return array();\n\t$dictionary = array();\n\
    \t$test = explode(' ', $test);\n\tforeach ($test as $letter) {\n\t\tif (array_key_exists($letter,\
    \ $dictionary)) {\n\t\t\t$dictionary[$letter] += 1;\n\t\t} else {\n\t\t\t$dictionary[$letter]\
    \ = 1;\n\t\t}\n\t}\n\t$max = max($dictionary);\n\tforeach ($dictionary as $key\
    \ => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($dictionary[$key]);\n\t\
    \t}\n\t}\n\treturn $dictionary;\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = array();\n    $arr = explode(' ', $test);\n\
    \    $max = 1;\n    foreach ($arr as $v) {\n        if (!isset($result[$v])) {\n\
    \            $result[$v] = 1;\n        } else {\n            $result[$v]++;\n\
    \        }\n        if ($result[$v] > $max) {\n            $max = $result[$v];\n\
    \        }\n    }\n    $final_result = array();\n    foreach ($result as $k =>\
    \ $v) {\n        if ($v == $max) {\n            $final_result[$k] = $v;\n    \
    \    }\n    }\n    return $final_result;\n}\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvb02osa1.php:45\n\
    Stack trace:\n#0 /tmp/tmpvb02osa1.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpvb02osa1.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\tif ($test == \"\") {\n\t\treturn [];\n\t}\n\t\n\
    \t$str = str_split($test);\n\t$counts = array_count_values($str);\n\t$max_count\
    \ = max($counts);\n\t\n\t$result = [];\n\tforeach ($counts as $key => $value)\
    \ {\n\t\tif ($value == $max_count) {\n\t\t\t$result[$key] = $value;\n\t\t}\n\t\
    }\n\t\n\treturn $result;\n}\n\necho \"histogram('a b c') = \";\nvar_dump(histogram('a\
    \ b c'));\necho \"histogram('a b b a') = \";\nvar_dump(histogram('a b b a'));\n\
    echo \"histogram('a b c a b') = \";\nvar_dump(histogram('a b c a b'));\necho \"\
    histogram('b b b b a') = \";\nvar_dump(histogram('b b b b a'));\necho \"histogram('')\
    \ = \";\nvar_dump(histogram(''));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "histogram('a b c') = array(1) {\n  [\" \"]=>\n  int(2)\n}\nhistogram('a\
    \ b b a') = array(1) {\n  [\" \"]=>\n  int(3)\n}\nhistogram('a b c a b') = array(1)\
    \ {\n  [\" \"]=>\n  int(4)\n}\nhistogram('b b b b a') = array(2) {\n  [\"b\"]=>\n\
    \  int(4)\n  [\" \"]=>\n  int(4)\n}\nhistogram('') = array(0) {\n}\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp9lf94a6t.php:45\nStack trace:\n\
    #0 /tmp/tmp9lf94a6t.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9lf94a6t.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $the_list = explode(\" \", $test);\n    $the_dict\
    \ = array();\n    $the_dict = count_occurrences($the_list);\n    return $the_dict;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_occurrences()\
    \ in /tmp/tmp8haacdcc.php:14\nStack trace:\n#0 /tmp/tmp8haacdcc.php(18): histogram('a\
    \ b b a')\n#1 /tmp/tmp8haacdcc.php(22): candidate('a b b a')\n#2 /tmp/tmp8haacdcc.php(32):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8haacdcc.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = str_split($test);\n    $results =\
    \ [];\n    foreach ($letters as $letter) {\n        if (!isset($results[$letter]))\
    \ {\n            $results[$letter] = 0;\n        }\n        $results[$letter]++;\n\
    \    }\n    return $results;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd75fhbis.php:28\n\
    Stack trace:\n#0 /tmp/tmpd75fhbis.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpd75fhbis.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $chars = explode(' ', $test);\n    $hist = [];\n\
    \    foreach ($chars as $char) {\n        if (array_key_exists($char, $hist))\
    \ {\n            $hist[$char]++;\n        } else {\n            $hist[$char] =\
    \ 1;\n        }\n    }\n    return $hist;\n}\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wp212f1.php:29\n\
    Stack trace:\n#0 /tmp/tmp3wp212f1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3wp212f1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = [];\n    foreach (explode(' ', $test)\
    \ as $word) {\n        if (!isset($result[$word])) {\n            $result[$word]\
    \ = 0;\n        }\n        $result[$word]++;\n    }\n    asort($result);\n   \
    \ $max = max($result);\n    $values = array_filter($result, function ($item) use\
    \ ($max) {\n        return $item === $max;\n    });\n    return $values;\n}\n\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbx25iz1_.php:38\n\
    Stack trace:\n#0 /tmp/tmpbx25iz1_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbx25iz1_.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $splitStr = explode(\" \", $test);\n    $maxCount\
    \ = 0;\n    $maxStr = \"\";\n    $dict = [];\n    for ($i = 0; $i < count($splitStr);\
    \ $i++) {\n        $currentCount = 0;\n        for ($j = 0; $j < count($splitStr);\
    \ $j++) {\n            if ($splitStr[$i] == $splitStr[$j]) {\n               \
    \ $currentCount++;\n            }\n        }\n        if ($currentCount > $maxCount)\
    \ {\n            $maxCount = $currentCount;\n            $maxStr = $splitStr[$i];\n\
    \        }\n    }\n    $dict[$maxStr] = $maxCount;\n    return $dict;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdy8_ie_5.php:37\n\
    Stack trace:\n#0 /tmp/tmpdy8_ie_5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpdy8_ie_5.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$letters = [];\n\t$lettersCount = [];\n\t$maxCount\
    \ = 1;\n\t$charArray = str_split($test);\n\tforeach ($charArray as $char) {\n\t\
    \tif (is_null($letters[$char])) {\n\t\t\t$letters[$char] = 1;\n\t\t} else {\n\t\
    \t\t$letters[$char]++;\n\t\t}\n\t}\n\tforeach ($letters as $key => $value) {\n\
    \t\tif ($value > $maxCount) {\n\t\t\t$maxCount = $value;\n\t\t}\n\t}\n\tforeach\
    \ ($letters as $key => $value) {\n\t\tif ($value === $maxCount) {\n\t\t\t$lettersCount[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $lettersCount;\n}\nprint_r(histogram('a b c'));\n\
    print_r(histogram('a b b a'));\nprint_r(histogram('a b c a b'));\nprint_r(histogram('b\
    \ b b b a'));\nprint_r(histogram(''));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ssakqwz.php:45\nStack\
    \ trace:\n#0 /tmp/tmp1ssakqwz.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp1ssakqwz.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $arr = explode(' ', $test);\n    $countArr =\
    \ array_count_values($arr);\n    $result = [];\n    $result[key($countArr)] =\
    \ current($countArr);\n    foreach ($countArr as $key => $value) {\n        if\
    \ ($value > current($countArr)) {\n            $result = [];\n            $result[$key]\
    \ = $value;\n        } elseif ($value == current($countArr)) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    ksort($result);\n    return $result;\n}\nvar_dump(histogram('a\
    \ b c'));\nvar_dump(histogram('a b b a'));\nvar_dump(histogram('a b c a b'));\n\
    var_dump(histogram('b b b b a'));\nvar_dump(histogram(''));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfh5_wlj4.php:40\nStack trace:\n#0 /tmp/tmpfh5_wlj4.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfh5_wlj4.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = explode(' ', $test);\n    $histogram\
    \ = [];\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    arsort($histogram);\n    return $histogram;\n}\n\
    \nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpszbv485c.php:31\n\
    Stack trace:\n#0 /tmp/tmpszbv485c.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpszbv485c.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $holder = [];\n  $test = explode(' ', $test);\n\
    \  $arr = array_count_values($test);\n  $keys = array_keys($arr);\n  $max = max($arr);\n\
    \  foreach ($keys as $key) {\n    if ($arr[$key] == $max) {\n      $holder[$key]\
    \ = $max;\n    }\n  }\n  return $holder;\n}\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzk0l2fa.php:36\n\
    Stack trace:\n#0 /tmp/tmpjzk0l2fa.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjzk0l2fa.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $result = array();\n  if ($test == '') {\n    return\
    \ $result;\n  }\n  $array = explode(' ', $test);\n  $max = array_count_values($array);\n\
    \  $max = max($max);\n  foreach ($array as $value) {\n    if (array_key_exists($value,\
    \ $result)) {\n      $result[$value]++;\n    } else {\n      $result[$value] =\
    \ 1;\n    }\n  }\n  foreach ($result as $value => $key) {\n    if ($key != $max)\
    \ {\n      unset($result[$value]);\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = explode(' ', $test);\n    $occurrence\
    \ = [];\n    foreach ($letters as $letter) {\n        if (!array_key_exists($letter,\
    \ $occurrence)) {\n            $occurrence[$letter] = 1;\n        } else {\n \
    \           $occurrence[$letter]++;\n        }\n    }\n    return $occurrence;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidrg1io_.php:30\n\
    Stack trace:\n#0 /tmp/tmpidrg1io_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpidrg1io_.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $result = [];\n  foreach (explode(' ', $test) as\
    \ $letter) {\n    if (!isset($result[$letter])) {\n      $result[$letter] = 0;\n\
    \    }\n    $result[$letter]++;\n  }\n  $max = max($result);\n  $result = array_filter($result,\
    \ function($value) use ($max) {\n    return $value == $max;\n  });\n  return $result;\n\
    }\n\nvar_dump(histogram('a b c'));\nvar_dump(histogram('a b b a'));\nvar_dump(histogram('a\
    \ b c a b'));\nvar_dump(histogram('b b b b a'));\nvar_dump(histogram(''));\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpes_gmawz.php:42\nStack trace:\n#0 /tmp/tmpes_gmawz.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpes_gmawz.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $result = array();\n  $test_split = explode(\"\
    \ \", $test);\n  $count = array_count_values($test_split);\n  $max_value = max($count);\n\
    \  $count = array_flip($count);\n  $key = $count[$max_value];\n  $result[$key]\
    \ = $max_value;\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpapdjsbrr.php:27\n\
    Stack trace:\n#0 /tmp/tmpapdjsbrr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpapdjsbrr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    // ...\n}\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zzbmc35.php:20\n\
    Stack trace:\n#0 /tmp/tmp2zzbmc35.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2zzbmc35.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $arr = explode(' ', $test);\n    $dict = [];\n\
    \    $max = 0;\n    foreach ($arr as $a) {\n        if (array_key_exists($a, $dict))\
    \ {\n            $dict[$a]++;\n        } else {\n            $dict[$a] = 1;\n\
    \        }\n        if ($dict[$a] > $max) {\n            $max = $dict[$a];\n \
    \       }\n    }\n    foreach ($dict as $k => $v) {\n        if ($v != $max) {\n\
    \            unset($dict[$k]);\n        }\n    }\n    return $dict;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq8yfug4z.php:43\n\
    Stack trace:\n#0 /tmp/tmpq8yfug4z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpq8yfug4z.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $splitArr = str_split($test);\n    $histArr =\
    \ array_count_values($splitArr);\n    return $histArr;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12ef2utz.php:21\n\
    Stack trace:\n#0 /tmp/tmp12ef2utz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp12ef2utz.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  // your code here\n  $array = explode(\" \", $test);\n\
    \  $dictionary = [];\n  for ($i = 0; $i < count($array); $i++) {\n    if (!array_key_exists($array[$i],\
    \ $dictionary)) {\n      $dictionary[$array[$i]] = 1;\n    } else {\n      $dictionary[$array[$i]]++;\n\
    \    }\n  }\n  $max = -1;\n  foreach ($dictionary as $key => $value) {\n    if\
    \ ($value > $max) {\n      $max = $value;\n    }\n  }\n  foreach ($dictionary\
    \ as $key => $value) {\n    if ($value != $max) {\n      unset($dictionary[$key]);\n\
    \    }\n  }\n  if (count($dictionary) == 0) {\n    return [];\n  }\n  return $dictionary;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76qitr1d.php:50\n\
    Stack trace:\n#0 /tmp/tmp76qitr1d.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp76qitr1d.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $array = explode(' ', $test);\n  //$array = ['a',\
    \ 'b', 'c'];\n  $counter = 0;\n  $array_count = [];\n  $return = [];\n  $max =\
    \ 0;\n  foreach ($array as $key => $value) {\n    if (!in_array($value, $array_count))\
    \ {\n      $array_count[] = $value;\n      $return[$value] = 1;\n    } else {\n\
    \      $return[$value] += 1;\n    }\n  }\n  $max = max($return);\n  $keys = array_keys($return,\
    \ $max);\n  $new_array = [];\n  foreach ($keys as $key => $value) {\n    $new_array[$value]\
    \ = $max;\n  }\n  return $new_array;\n}\n\necho '<pre>';\nprint_r(histogram('a\
    \ b c'));\necho '</pre>';\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpmysgq2ld.php:49\nStack trace:\n\
    #0 /tmp/tmpmysgq2ld.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmysgq2ld.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = [];\n    $letters = str_split($test);\n\
    \    foreach ($letters as $letter) {\n        if ($letter == ' ') {\n        \
    \    continue;\n        }\n        if (array_key_exists($letter, $result)) {\n\
    \            $result[$letter]++;\n        } else {\n            $result[$letter]\
    \ = 1;\n        }\n    }\n    $max = max($result);\n    $maxes = [];\n    foreach\
    \ ($result as $key => $value) {\n        if ($value == $max) {\n            $maxes[$key]\
    \ = $value;\n        }\n    }\n    return $maxes;\n}\n\necho 'a b c == ';\nvar_dump(histogram('a\
    \ b c'));\necho 'a b b a == ';\nvar_dump(histogram('a b b a'));\necho 'a b c a\
    \ b == ';\nvar_dump(histogram('a b c a b'));\necho 'b b b b a == ';\nvar_dump(histogram('b\
    \ b b b a'));\necho 'empty == ';\nvar_dump(histogram(''));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "a b c == array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"\
    c\"]=>\n  int(1)\n}\na b b a == array(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n\
    \  int(2)\n}\na b c a b == array(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n\
    }\nb b b b a == array(1) {\n  [\"b\"]=>\n  int(4)\n}\nempty == array(1) {\n  [\"\
    \"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqx5uw34t.php:55\n\
    Stack trace:\n#0 /tmp/tmpqx5uw34t.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpqx5uw34t.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $a = preg_split('/[\\s]+/', $test);\n    $arr\
    \ = array_count_values($a);\n    $max = max($arr);\n    $result = array();\n \
    \   foreach ($arr as $key => $value) {\n        if ($value == $max) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz5oajmov.php:35\n\
    Stack trace:\n#0 /tmp/tmpz5oajmov.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpz5oajmov.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $arr = array_count_values(str_split($test));\n\
    \    $max = max($arr);\n    $key = array_search($max, $arr);\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value == $max) {\n     \
    \       $result[$key] = $value;\n        }\n    }\n    return $result;\n}\nprint_r(histogram(\"\
    a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"\
    ));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmprtb3dvmd.php:33\nStack\
    \ trace:\n#0 /tmp/tmprtb3dvmd.php(43): test()\n#1 {main}\n  thrown in /tmp/tmprtb3dvmd.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $histogram = [];\n    $test = explode(' ', $test);\n\
    \    foreach ($test as $letter) {\n        if (isset($histogram[$letter])) {\n\
    \            $histogram[$letter] += 1;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    arsort($histogram);\n    $result = $histogram;\n\
    \    $count = array_shift($histogram);\n    foreach ($histogram as $letter =>\
    \ $value) {\n        if ($value < $count) {\n            unset($result[$letter]);\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahh107rd.php:43\n\
    Stack trace:\n#0 /tmp/tmpahh107rd.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpahh107rd.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $output = [];\n    $count = [];\n    $letters\
    \ = explode(' ', $test);\n    foreach ($letters as $letter) {\n        if (array_key_exists($letter,\
    \ $output)) {\n            $output[$letter]++;\n        } else {\n           \
    \ $output[$letter] = 1;\n        }\n    }\n    return $output;\n}\n\n$res = histogram('a\
    \ b c');\necho '<pre>';\nprint_r($res);\necho '</pre>';\n\n$res = histogram('a\
    \ b b a');\necho '<pre>';\nprint_r($res);\necho '</pre>';\n\n$res = histogram('a\
    \ b c a b');\necho '<pre>';\nprint_r($res);\necho '</pre>';\n\n$res = histogram('b\
    \ b b b a');\necho '<pre>';\nprint_r($res);\necho '</pre>';\n\n$res = histogram('');\n\
    echo '<pre>';\nprint_r($res);\necho '</pre>';\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n    [c] => 1\n)\n</pre><pre>Array\n(\n    [b] => 4\n    [a] => 1\n)\n</pre><pre>Array\n\
    (\n    [] => 1\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw1c7jzqt.php:55\n\
    Stack trace:\n#0 /tmp/tmpw1c7jzqt.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpw1c7jzqt.php\
    \ on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $histogram = array();\n    $letters = str_split($test);\n\
    \    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    print_r($histogram);\n    $highest = max($histogram);\n\
    \    foreach ($histogram as $key => $value) {\n        if ($value == $highest)\
    \ {\n            echo \"$key => $value\\n\";\n        }\n    }\n}\nhistogram('a\
    \ b c');\nhistogram('a b b a');\nhistogram('a b c a b');\nhistogram('b b b b a');\n\
    histogram('');\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [a] => 1\n    [ ] => 2\n    [b] => 1\n    [c] => 1\n)\n \
    \ => 2\nArray\n(\n    [a] => 2\n    [ ] => 3\n    [b] => 2\n)\n  => 3\nArray\n\
    (\n    [a] => 2\n    [ ] => 4\n    [b] => 2\n    [c] => 1\n)\n  => 4\nArray\n\
    (\n    [b] => 4\n    [ ] => 4\n    [a] => 1\n)\nb => 4\n  => 4\nArray\n(\n   \
    \ [] => 1\n)\n => 1\nArray\n(\n    [a] => 2\n    [ ] => 3\n    [b] => 2\n)\n \
    \ => 3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4q_7mjf.php:39\n\
    Stack trace:\n#0 /tmp/tmpp4q_7mjf.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpp4q_7mjf.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$test = explode(' ', $test);\n\t$result = [];\n\
    \tforeach ($test as $key => $value) {\n\t\tif (isset($result[$value])) {\n\t\t\
    \t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] = 1;\n\t\t}\n\t}\n\t\
    $last_value = max($result);\n\t$last_key = array_search($last_value, $result);\n\
    \t$key = [$last_key => $last_value];\n\tforeach ($result as $key => $value) {\n\
    \t\tif ($value == $last_value) {\n\t\t\t$keys[] = $key;\n\t\t}\n\t}\n\treturn\
    \ [$keys[0] => $last_value];\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7hs4vuj.php:36\n\
    Stack trace:\n#0 /tmp/tmpw7hs4vuj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpw7hs4vuj.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  //create an array of the letters in $test\n  $letterArray\
    \ = explode(\" \", $test);\n  //create an array to hold the resulting histogram\n\
    \  $resultArray = [];\n  //create a variable to hold the letter that is currently\
    \ being counted\n  $current = \"\";\n  //create a variable to hold the number\
    \ of times the letter appears\n  $appearances = 0;\n  //iterate through the array\n\
    \  foreach ($letterArray as $letter) {\n    //if the letter doesn't equal the\
    \ last letter, then reset the current letter and its count\n    if ($letter !=\
    \ $current) {\n      $current = $letter;\n      $appearances = 1;\n    }\n   \
    \ //if the letter is the same as the last one, then increment the count\n    else\
    \ {\n      $appearances++;\n    }\n    //add the current letter and its count\
    \ to the resulting array\n    $resultArray[$current] = $appearances;\n  }\n  //find\
    \ the letter with the highest count\n  $max = array_keys($resultArray, max($resultArray));\n\
    \  //create an array to hold the final resulting letters and their counts\n  $finalResult\
    \ = [];\n  //iterate through the resulting array\n  foreach ($resultArray as $key\
    \ => $value) {\n    //if the letter has the highest count\n    if (in_array($key,\
    \ $max)) {\n      //add the letter and its count to the final resulting array\n\
    \      $finalResult[$key] = $value;\n    }\n  }\n  //return the final resulting\
    \ array\n  return $finalResult;\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0ol8r72.php:54\n\
    Stack trace:\n#0 /tmp/tmpo0ol8r72.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpo0ol8r72.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test = preg_split('/\\s+/', $test);\n    $a\
    \ = array_count_values($test);\n    arsort($a);\n    $b = array_keys($a);\n  \
    \  $x = $b[0];\n    $y = $a[$x];\n    return array_intersect_key($a, array_flip(array_keys($a,\
    \ $y)));\n}\necho implode(', ', histogram('a b c a b'));\necho \"\\n\";\necho\
    \ implode(', ', histogram('b b b b a'));\necho \"\\n\";\necho implode(', ', histogram('a\
    \ b c'));\necho \"\\n\";\necho implode(', ', histogram('a b b a'));\necho \"\\\
    n\";\necho implode(', ', histogram(''));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2, 2\n4\n1, 1, 1\n2, 2\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9c2xgqci.php:41\nStack trace:\n#0 /tmp/tmp9c2xgqci.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9c2xgqci.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $arr = array_count_values(str_split($test));\n\
    \  arsort($arr);\n  $max = current($arr);\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value < $max) {\n      unset($arr[$key]);\n    }\n  }\n  return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgkokeobc.php:27\n\
    Stack trace:\n#0 /tmp/tmpgkokeobc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgkokeobc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$chars = explode(' ', $test);\n\t$counts = array_count_values($chars);\n\
    \t$sorted = array_filter($counts, function($val) use ($counts) {\n\t\treturn $val\
    \ === max($counts);\n\t});\n\treturn $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2jtdekqk.php:30\n\
    Stack trace:\n#0 /tmp/tmp2jtdekqk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2jtdekqk.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test = trim($test);\n    if (strlen($test) >\
    \ 0) {\n        $test = explode(' ', $test);\n        $counts = array_count_values($test);\n\
    \        $max = max($counts);\n        $result = array_keys($counts, $max);\n\
    \        $keys = array_fill_keys($result, $max);\n        return $keys;\n    }\
    \ else {\n        return array();\n    }\n}\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $arr = explode(' ', $test);\n    $maxValue =\
    \ 0;\n    $maxKey = '';\n    $result = [];\n    foreach ($arr as $value) {\n \
    \       if (!isset($result[$value])) {\n            $result[$value] = 1;\n   \
    \     } else {\n            $result[$value]++;\n        }\n        if ($result[$value]\
    \ > $maxValue) {\n            $maxValue = $result[$value];\n            $maxKey\
    \ = $value;\n        }\n    }\n    return array_flip(array_filter($result, function\
    \ ($key) use ($maxValue) {\n        return $key == $maxValue;\n    }, ARRAY_FILTER_USE_KEY));\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp267dart7.php:36\n\
    Stack trace:\n#0 /tmp/tmp267dart7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp267dart7.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  // Your code here\n  $letters = explode(' ', $test);\n\
    \  $dict = [];\n  $current_max = 0;\n  foreach ($letters as $letter) {\n    if\
    \ (!isset($dict[$letter])) {\n      $dict[$letter] = 1;\n    } else {\n      $dict[$letter]++;\n\
    \    }\n    if ($dict[$letter] > $current_max) {\n      $current_max = $dict[$letter];\n\
    \    }\n  }\n  $result = [];\n  foreach ($dict as $key => $value) {\n    if ($value\
    \ == $current_max) {\n      $result[$key] = $value;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6yj80j2h.php:46\n\
    Stack trace:\n#0 /tmp/tmp6yj80j2h.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6yj80j2h.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test_split = explode(' ', $test);\n    $count\
    \ = [];\n    $count_result = [];\n    foreach ($test_split as $value) {\n    \
    \    if (!array_key_exists($value, $count)) {\n            $count[$value] = 1;\n\
    \        } else {\n            $count[$value] += 1;\n        }\n    }\n    foreach\
    \ ($count as $key => $value) {\n        if (array_key_exists($value, $count_result))\
    \ {\n            $count_result[$value][] = $key;\n        } else {\n         \
    \   $count_result[$value] = [];\n            $count_result[$value][] = $key;\n\
    \        }\n    }\n    return $count_result[max(array_keys($count_result))];\n\
    }\n\nhistogram('b b b b a');\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi0dp82u5.php:39\n\
    Stack trace:\n#0 /tmp/tmpi0dp82u5.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpi0dp82u5.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\tif (!$test) {\n\t\treturn [];\n\t}\n\t$out = [];\n\
    \t$words = explode(' ', $test);\n\tforeach ($words as $word) {\n\t\t$out[$word]\
    \ = array_key_exists($word, $out) ? $out[$word] + 1 : 1;\n\t}\n\t$max = max($out);\n\
    \t$max_letter = [];\n\tforeach ($out as $key => $value) {\n\t\tif ($value == $max)\
    \ {\n\t\t\t$max_letter[$key] = $value;\n\t\t}\n\t}\n\treturn $max_letter;\n}\n\
    \nclass HistogramTest extends TestCase {\n\tpublic function testFixedTests() {\n\
    \t\t$this->assertEquals(['a' => 1, 'b' => 1, 'c' => 1], histogram('a b c'));\n\
    \t\t$this->assertEquals(['a' => 2, 'b' => 2], histogram('a b b a'));\n\t\t$this->assertEquals(['a'\
    \ => 2, 'b' => 2], histogram('a b c a b'));\n\t\t$this->assertEquals(['b' => 4],\
    \ histogram('b b b b a'));\n\t\t$this->assertEquals([], histogram(''));\n\t}\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Class 'TestCase' not found in /tmp/tmppr4l_jmg.php:30\n\
    Stack trace:\n#0 {main}\n  thrown in /tmp/tmppr4l_jmg.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    // The solution is here\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8h328ww.php:19\n\
    Stack trace:\n#0 /tmp/tmpl8h328ww.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpl8h328ww.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = explode(' ', $test);\n    $results\
    \ = [];\n    foreach ($letters as $letter) {\n        if (!isset($results[$letter]))\
    \ {\n            $results[$letter] = 0;\n        }\n        $results[$letter]++;\n\
    \    }\n    arsort($results);\n    $max_value = $results[key($results)];\n   \
    \ $result = [];\n    foreach ($results as $letter => $value) {\n        if ($value\
    \ == $max_value) {\n            $result[$letter] = $value;\n        }\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpii22j4wf.php:41\n\
    Stack trace:\n#0 /tmp/tmpii22j4wf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpii22j4wf.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = array();\n    $letters = str_split($test);\n\
    \    $tmp = array();\n    foreach ($letters as $letter) {\n        if (isset($tmp[$letter]))\
    \ {\n            $tmp[$letter]++;\n        } else {\n            $tmp[$letter]\
    \ = 1;\n        }\n    }\n    $max = max($tmp);\n    foreach ($tmp as $k => $v)\
    \ {\n        if ($v === $max) {\n            $result[$k] = $v;\n        }\n  \
    \  }\n    return $result;\n}\n\n$a = 'a b c';\n$b = 'a b b a';\n$c = 'a b c a\
    \ b';\n$d = 'b b b b a';\n$e = '';\n$test_a = histogram($a);\n$test_b = histogram($b);\n\
    $test_c = histogram($c);\n$test_d = histogram($d);\n$test_e = histogram($e);\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lic7cn_.php:46\n\
    Stack trace:\n#0 /tmp/tmp3lic7cn_.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp3lic7cn_.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = explode(' ', $test);\n    $frequency\
    \ = array_count_values($letters);\n    $max_key = max($frequency);\n    $result\
    \ = array();\n    foreach ($frequency as $key => $value) {\n        if ($value\
    \ == $max_key) {\n            $result[$key] = $value;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjpr_yp4.php:35\n\
    Stack trace:\n#0 /tmp/tmpjjpr_yp4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjjpr_yp4.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test = explode(' ', $test);\n    $counts = array_count_values($test);\n\
    \    return array_filter($counts, function($value) use ($counts) {\n        return\
    \ $value == max($counts);\n    });\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwi9_87_e.php:30\n\
    Stack trace:\n#0 /tmp/tmpwi9_87_e.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwi9_87_e.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $aTest = explode(' ', $test);\n  $aLength = count($aTest);\n\
    \  $aResult = [];\n  if ($aLength == 0) {\n    return $aResult;\n  }\n  foreach\
    \ ($aTest as $key => $value) {\n    if (array_key_exists($value, $aResult)) {\n\
    \      $aResult[$value]++;\n    } else {\n      $aResult[$value] = 1;\n    }\n\
    \  }\n  arsort($aResult);\n  $aResult2 = array_slice($aResult, 0, 1, true);\n\
    \  return array_combine(array_keys($aResult2), array_values($aResult2));\n}\n\
    print_r(histogram('a b c'));\nprint_r(histogram('a b b a'));\nprint_r(histogram('a\
    \ b c a b'));\nprint_r(histogram('b b b b a'));\nprint_r(histogram(''));\nprint_r(histogram('a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp58kcr358.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $h = [];\n    foreach (explode(' ', $test) as\
    \ $letter) {\n        if (!isset($h[$letter])) {\n            $h[$letter] = 0;\n\
    \        }\n        $h[$letter]++;\n    }\n    $max_count = max($h);\n    $max_letters\
    \ = [];\n    foreach ($h as $letter => $count) {\n        if ($count == $max_count)\
    \ {\n            $max_letters[$letter] = $count;\n        }\n    }\n    return\
    \ $max_letters;\n}\n\n$tests = [\n    ['a b c', ['a' => 1, 'b' => 1, 'c' => 1]],\n\
    \    ['a b b a', ['a' => 2, 'b' => 2]],\n    ['a b c a b', ['a' => 2, 'b' => 2]],\n\
    \    ['b b b b a', ['b' => 4]],\n    ['', []],\n];\n\nforeach ($tests as $test)\
    \ {\n    $actual = histogram($test[0]);\n    $expected = $test[1];\n    $passed\
    \ = $actual == $expected;\n    if ($passed) {\n        echo '\u2705 ';\n    }\
    \ else {\n        echo '\u274C ';\n    }\n    echo \"histogram('{$test[0]}')\\\
    n\";\n    echo \"   actual  : \" . print_r($actual, true) . \"\\n\";\n    echo\
    \ \"   expected: \" . print_r($expected, true) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\u2705 histogram('a b c')\n   actual  : Array\n(\n    [a] => 1\n    [b]\
    \ => 1\n    [c] => 1\n)\n\n   expected: Array\n(\n    [a] => 1\n    [b] => 1\n\
    \    [c] => 1\n)\n\n\u2705 histogram('a b b a')\n   actual  : Array\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\n\n   expected: Array\n(\n    [a] => 2\n    [b] => 2\n\
    )\n\n\u2705 histogram('a b c a b')\n   actual  : Array\n(\n    [a] => 2\n    [b]\
    \ => 2\n)\n\n   expected: Array\n(\n    [a] => 2\n    [b] => 2\n)\n\n\u2705 histogram('b\
    \ b b b a')\n   actual  : Array\n(\n    [b] => 4\n)\n\n   expected: Array\n(\n\
    \    [b] => 4\n)\n\n\u274C histogram('')\n   actual  : Array\n(\n    [] => 1\n\
    )\n\n   expected: Array\n(\n)\n\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp601b4d7q.php:61\nStack trace:\n#0 /tmp/tmp601b4d7q.php(65): test()\n\
    #1 {main}\n  thrown in /tmp/tmp601b4d7q.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  // echo $test . PHP_EOL;\n  $arr = explode(' ',\
    \ $test);\n  $hist = [];\n  foreach ($arr as $key => $value) {\n    if (!key_exists($value,\
    \ $hist))\n      $hist[$value] = 1;\n    else\n      $hist[$value] += 1;\n  }\n\
    \  $max = max($hist);\n  $ret = [];\n  foreach ($hist as $key => $value) {\n \
    \   if ($value == $max)\n      $ret[$key] = $value;\n  }\n  return $ret;\n}\n\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6ssik_h.php:41\n\
    Stack trace:\n#0 /tmp/tmpn6ssik_h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpn6ssik_h.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n$result = [];\n\n$array = explode(' ', $test);\n\
    foreach ($array as $value) {\n    if (!array_key_exists($value, $result)) {\n\
    \        $result[$value] = 1;\n    } else {\n        $result[$value]++;\n    }\n\
    }\n\nreturn $result;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpueaglgxn.php:31\n\
    Stack trace:\n#0 /tmp/tmpueaglgxn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpueaglgxn.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$test = trim($test);\n\t$test = preg_replace('/\\\
    s+/', ' ', $test);\n\t$test = explode(' ', $test);\n\t$count = count($test);\n\
    \t$test = array_count_values($test);\n\tarsort($test);\n\t$count2 = array_values($test);\n\
    \tif ($count2[0] > $count2[1]) {\n\t\t$val = array_keys($test, max($test));\n\t\
    \t$test = array_fill_keys($val, max($test));\n\t}\n\treturn $test;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3m4wbku.php:31\n\
    Stack trace:\n#0 /tmp/tmpc3m4wbku.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpc3m4wbku.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $array = explode(' ', $test);\n    $dict = [];\n\
    \    foreach ($array as $value) {\n        if (array_key_exists($value, $dict))\
    \ {\n            $dict[$value] += 1;\n        } else {\n            $dict[$value]\
    \ = 1;\n        }\n    }\n    return $dict;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7g134578.php:30\n\
    Stack trace:\n#0 /tmp/tmp7g134578.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7g134578.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letter_string = \"\";\n    $letter_array = explode(\"\
    \ \", $test);\n    $letter_count_array = array_count_values($letter_array);\n\
    \    $letter_count_max = max($letter_count_array);\n    $return_array = array();\n\
    \    foreach ($letter_count_array as $letter => $count) {\n        if ($count\
    \ == $letter_count_max) {\n            $return_array[$letter] = $count;\n    \
    \    }\n    }\n    return $return_array;\n}\n\necho implode(\"; \", histogram(\"\
    \"));\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpicke_u2b.php:38\n\
    Stack trace:\n#0 /tmp/tmpicke_u2b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpicke_u2b.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$final_arr = array();\n\t$exploded_arr = explode(\"\
    \ \", $test);\n\tforeach ($exploded_arr as $key => $value) {\n\t\tif (array_key_exists($value,\
    \ $final_arr)) {\n\t\t\t$final_arr[$value] += 1;\n\t\t} else {\n\t\t\t$final_arr[$value]\
    \ = 1;\n\t\t}\n\t}\n\t$max_value = max($final_arr);\n\t$filter_arr = array_filter($final_arr,\
    \ function($var) use ($max_value) {\n\t\treturn $var == $max_value;\n\t});\n\t\
    echo \"histogram({$test}) ==> \";\n\tprint_r($filter_arr);\n\techo \"\\n\";\n\
    }\n\n$test_cases = array('a b c', 'a b b a', 'a b c a b', 'b b b b a', '');\n\n\
    foreach ($test_cases as $key => $value) {\n\thistogram($value);\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "histogram(a b c) ==> Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n\
    )\n\nhistogram(a b b a) ==> Array\n(\n    [a] => 2\n    [b] => 2\n)\n\nhistogram(a\
    \ b c a b) ==> Array\n(\n    [a] => 2\n    [b] => 2\n)\n\nhistogram(b b b b a)\
    \ ==> Array\n(\n    [b] => 4\n)\n\nhistogram() ==> Array\n(\n    [] => 1\n)\n\n\
    histogram(a b b a) ==> Array\n(\n    [a] => 2\n    [b] => 2\n)\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmphttshukd.php:40\nStack trace:\n\
    #0 /tmp/tmphttshukd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmphttshukd.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = [];\n    $array = explode(' ', $test);\n\
    \    if (!empty($array)) {\n        foreach ($array as $item) {\n            if\
    \ (array_key_exists($item, $result)) {\n                $result[$item] += 1;\n\
    \            } else {\n                $result[$item] = 1;\n            }\n  \
    \      }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpht5spgbc.php:31\n\
    Stack trace:\n#0 /tmp/tmpht5spgbc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpht5spgbc.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $test = preg_split('/ /', $test);\n  $result =\
    \ [];\n  $max = 0;\n  foreach ($test as $character) {\n    if (!isset($result[$character]))\
    \ {\n      $result[$character] = 1;\n    } else {\n      $result[$character] +=\
    \ 1;\n    }\n    if ($result[$character] > $max) {\n      $max = $result[$character];\n\
    \    }\n  }\n  $result = array_filter($result, function($value) use ($max) {\n\
    \    return $value == $max;\n  });\n  ksort($result);\n  return $result;\n}\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpditxdsr5.php:39\n\
    Stack trace:\n#0 /tmp/tmpditxdsr5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpditxdsr5.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$letters = explode(' ', $test);\n\t$results = [];\n\
    \tforeach ($letters as $letter) {\n\t\tif (isset($results[$letter])) {\n\t\t\t\
    $results[$letter]++;\n\t\t} else {\n\t\t\t$results[$letter] = 1;\n\t\t}\n\t}\n\
    \tarsort($results);\n\t$max = max($results);\n\t$ret = [];\n\tforeach ($results\
    \ as $key => $val) {\n\t\tif ($val == $max) {\n\t\t\t$ret[$key] = $val;\n\t\t\
    }\n\t}\n\treturn $ret;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvriofego.php:43\n\
    Stack trace:\n#0 /tmp/tmpvriofego.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpvriofego.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $words_array = explode(' ', $test);\n    $words_count_array\
    \ = array_count_values($words_array);\n    $max_count = max($words_count_array);\n\
    \    $histogram = array();\n    foreach ($words_count_array as $word => $count)\
    \ {\n        if ($count == $max_count) {\n            $histogram[$word] = $count;\n\
    \        }\n    }\n    return $histogram;\n}\n$test = 'a b c';\necho $test.'<br>';\n\
    print_r(histogram($test));\n$test = 'a b b a';\necho '<br>'.$test.'<br>';\nprint_r(histogram($test));\n\
    $test = 'a b c a b';\necho '<br>'.$test.'<br>';\nprint_r(histogram($test));\n\
    $test = 'b b b b a';\necho '<br>'.$test.'<br>';\nprint_r(histogram($test));\n\
    $test = '';\necho '<br>'.$test.'<br>';\nprint_r(histogram($test));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "a b c<br>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>a b\
    \ b a<br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>a b c a b<br>Array\n(\n\
    \    [a] => 2\n    [b] => 2\n)\n<br>b b b b a<br>Array\n(\n    [b] => 4\n)\n<br><br>Array\n\
    (\n    [] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgsi7p56q.php:49\n\
    Stack trace:\n#0 /tmp/tmpgsi7p56q.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgsi7p56q.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $words = explode(' ', $test);\n  $letters = [];\n\
    \  foreach ($words as $word) {\n    if (array_key_exists($word, $letters)) {\n\
    \      $letters[$word]++;\n    } else {\n      $letters[$word] = 1;\n    }\n \
    \ }\n  arsort($letters);\n  $max = array_search(max($letters), $letters);\n  $result\
    \ = [];\n  foreach ($letters as $key => $value) {\n    if ($value == $letters[$max])\
    \ {\n      $result[$key] = $value;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihrtd1hu.php:42\n\
    Stack trace:\n#0 /tmp/tmpihrtd1hu.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpihrtd1hu.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $array = explode(' ', $test);\n    $letter_counts\
    \ = array_count_values($array);\n    // if there are no chars, return an empty\
    \ array\n    if(empty($letter_counts)) {\n        return array();\n    }\n   \
    \ // find the highest letter count\n    $max_occurence = max($letter_counts);\n\
    \    // find all letters with the highest count\n    $result = array_filter($letter_counts,\
    \ function($letter_count) use ($max_occurence) {\n        return $letter_count\
    \ == $max_occurence;\n    });\n    // return the result\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp34y6srf7.php:39\n\
    Stack trace:\n#0 /tmp/tmp34y6srf7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp34y6srf7.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test_arr = explode(' ', $test);\n    $cnt =\
    \ count($test_arr);\n    $max = 0;\n    $result = [];\n    for ($i = 0; $i < $cnt;\
    \ $i++) {\n        $result[$test_arr[$i]] = 0;\n    }\n    for ($i = 0; $i < $cnt;\
    \ $i++) {\n        $result[$test_arr[$i]]++;\n        if ($result[$test_arr[$i]]\
    \ > $max) {\n            $max = $result[$test_arr[$i]];\n        }\n    }\n  \
    \  $answer = [];\n    foreach ($result as $key => $value) {\n        if ($value\
    \ == $max) {\n            $answer[$key] = $value;\n        }\n    }\n    return\
    \ $answer;\n}\n\necho \"histogram('a b c') == \";\nprint_r(histogram('a b c'));\n\
    echo \"<br>\";\necho \"histogram('a b b a') == \";\nprint_r(histogram('a b b a'));\n\
    echo \"<br>\";\necho \"histogram('a b c a b') == \";\nprint_r(histogram('a b c\
    \ a b'));\necho \"<br>\";\necho \"histogram('b b b b a') == \";\nprint_r(histogram('b\
    \ b b b a'));\necho \"<br>\";\necho \"histogram('') == \";\nprint_r(histogram(''));\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "histogram('a b c') == Array\n(\n    [a] => 1\n    [b] => 1\n    [c] =>\
    \ 1\n)\n<br>histogram('a b b a') == Array\n(\n    [a] => 2\n    [b] => 2\n)\n\
    <br>histogram('a b c a b') == Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>histogram('b\
    \ b b b a') == Array\n(\n    [b] => 4\n)\n<br>histogram('') == Array\n(\n    []\
    \ => 1\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtuu99yc.php:60\n\
    Stack trace:\n#0 /tmp/tmpdtuu99yc.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpdtuu99yc.php\
    \ on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = explode(' ', $test);\n    $count =\
    \ array_count_values($letters);\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyzipmuq5.php:22\n\
    Stack trace:\n#0 /tmp/tmpyzipmuq5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyzipmuq5.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = array_count_values(str_split($test));\n\
    \    $max_count = max($letters);\n    $counts = [];\n    foreach ($letters as\
    \ $key => $value) {\n        if ($value == $max_count) {\n            $counts[$key]\
    \ = $value;\n        }\n    }\n    return $counts;\n}\necho implode(\" \", histogram(\"\
    b b b b a\"));\necho \"\\n\";\necho implode(\" \", histogram(\"a b c\"));\necho\
    \ \"\\n\";\necho implode(\" \", histogram(\"a b b a\"));\necho \"\\n\";\necho\
    \ implode(\" \", histogram(\"a b c a b\"));\necho \"\\n\";\necho implode(\" \"\
    , histogram(\"b b b b a\"));\necho \"\\n\";\necho implode(\" \", histogram(\"\"\
    ));\necho \"\\n\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4 4\n2\n3\n4\n4 4\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpw715aof3.php:39\nStack trace:\n#0 /tmp/tmpw715aof3.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpw715aof3.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $chars = explode(' ', $test);\n    $histogram\
    \ = [];\n    foreach ($chars as $char) {\n        if (array_key_exists($char,\
    \ $histogram)) {\n            $histogram[$char]++;\n        } else {\n       \
    \     $histogram[$char] = 1;\n        }\n    }\n    // $max = array_search(max($histogram),\
    \ $histogram);\n    $max = max($histogram);\n    $maxValues = [];\n    foreach\
    \ ($histogram as $key => $value) {\n        if ($value == $max) {\n          \
    \  $maxValues[$key] = $value;\n        }\n    }\n    return $maxValues;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxqv3gpa.php:42\n\
    Stack trace:\n#0 /tmp/tmpcxqv3gpa.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcxqv3gpa.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  \n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82rlbkeg.php:19\n\
    Stack trace:\n#0 /tmp/tmp82rlbkeg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp82rlbkeg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $result = [];\n  $testArr = explode(' ', $test);\n\
    \  foreach ($testArr as $val) {\n    if (isset($result[$val])) {\n      $result[$val]\
    \ += 1;\n    } else {\n      $result[$val] = 1;\n    }\n  }\n  $max = max($result);\n\
    \  return array_filter($result, function($num) use ($max) {\n    return $num ==\
    \ $max;\n  });\n}\nprint_r(histogram('a b c'));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpswbk0_ry.php:38\nStack trace:\n#0 /tmp/tmpswbk0_ry.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpswbk0_ry.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $chars = str_split($test);\n    $char_count =\
    \ [];\n    $count = [];\n    foreach ($chars as $char) {\n        if (isset($char_count[$char]))\
    \ {\n            $char_count[$char] += 1;\n        } else {\n            $char_count[$char]\
    \ = 1;\n        }\n    }\n    $max = max($char_count);\n    $keys = array_keys($char_count,\
    \ $max);\n    foreach ($keys as $key) {\n        $count[$key] = $max;\n    }\n\
    \    return $count;\n}\n\nprint_r(histogram('a b c'));\nprint_r(histogram('a b\
    \ b a'));\nprint_r(histogram('a b c a b'));\nprint_r(histogram('b b b b a'));\n\
    print_r(histogram(''));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2rb6sdc.php:40\nStack\
    \ trace:\n#0 /tmp/tmpb2rb6sdc.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpb2rb6sdc.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $letters = explode(' ', $test);\n  $result = [];\n\
    \  foreach ($letters as $letter) {\n    if (!isset($result[$letter])) {\n    \
    \  $result[$letter] = 0;\n    }\n    $result[$letter]++;\n  }\n  $repeated = max($result);\n\
    \  $repeatedLetters = [];\n  foreach ($result as $letter => $value) {\n    if\
    \ ($value == $repeated) {\n      $repeatedLetters[$letter] = $value;\n    }\n\
    \  }\n  return $repeatedLetters;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3d2nhvr.php:41\n\
    Stack trace:\n#0 /tmp/tmpp3d2nhvr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpp3d2nhvr.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test_array = explode(\" \", $test);\n    $dict\
    \ = [];\n    $max = 0;\n    foreach ($test_array as $letter) {\n        if (array_key_exists($letter,\
    \ $dict)) {\n            $dict[$letter]++;\n        } else {\n            $dict[$letter]\
    \ = 1;\n        }\n        if ($dict[$letter] > $max) {\n            $max = $dict[$letter];\n\
    \        }\n    }\n    return array_filter($dict, function($v) use ($max) { return\
    \ $v == $max; }, ARRAY_FILTER_USE_BOTH);\n}\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdb6vrvtx.php:39\n\
    Stack trace:\n#0 /tmp/tmpdb6vrvtx.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpdb6vrvtx.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $array = explode(' ', $test);\n  $result = [];\n\
    \  foreach ($array as $value) {\n    if (!isset($result[$value])) {\n      $result[$value]\
    \ = 1;\n    } else {\n      $result[$value]++;\n    }\n  }\n  foreach ($result\
    \ as $key => $value) {\n    if ($value < 2) {\n      unset($result[$key]);\n \
    \   }\n  }\n  return $result;\n}\n\necho '<h2>Given a string representing a space\
    \ separated lowercase letters, return a dictionary</h2>';\necho '<p>histogram(\\\
    'a b c\\') == {\\'a\\': 1, \\'b\\': 1, \\'c\\': 1}</p>';\necho '<pre>';\nprint_r(histogram('a\
    \ b c'));\necho '</pre>';\necho '<p>histogram(\\'a b b a\\') == {\\'a\\': 2, \\\
    'b\\': 2}</p>';\necho '<pre>';\nprint_r(histogram('a b b a'));\necho '</pre>';\n\
    echo '<p>histogram(\\'a b c a b\\') == {\\'a\\': 2, \\'b\\': 2}</p>';\necho '<pre>';\n\
    print_r(histogram('a b c a b'));\necho '</pre>';\necho '<p>histogram(\\'b b b\
    \ b a\\') == {\\'b\\': 4}</p>';\necho '<pre>';\nprint_r(histogram('b b b b a'));\n\
    echo '</pre>';\necho '<p>histogram(\\'\\') == {}</p>';\necho '<pre>';\nprint_r(histogram(''));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<h2>Given a string representing a space separated lowercase letters, return\
    \ a dictionary</h2><p>histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}</p><pre>Array\n\
    (\n)\n</pre><p>histogram('a b b a') == {'a': 2, 'b': 2}</p><pre>Array\n(\n   \
    \ [a] => 2\n    [b] => 2\n)\n</pre><p>histogram('a b c a b') == {'a': 2, 'b':\
    \ 2}</p><pre>Array\n(\n    [a] => 2\n    [b] => 2\n)\n</pre><p>histogram('b b\
    \ b b a') == {'b': 4}</p><pre>Array\n(\n    [b] => 4\n)\n</pre><p>histogram('')\
    \ == {}</p><pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp1qt3wso8.php:57\nStack trace:\n#0 /tmp/tmp1qt3wso8.php(65): test()\n\
    #1 {main}\n  thrown in /tmp/tmp1qt3wso8.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $count = 0;\n  $letters = [];\n  $results = [];\n\
    \  $test_array = explode(' ', $test);\n  if (!empty($test_array)) {\n    foreach\
    \ ($test_array as $item) {\n      if (isset($letters[$item])) {\n        $letters[$item]++;\n\
    \      } else {\n        $letters[$item] = 1;\n      }\n    }\n    $count = max($letters);\n\
    \    foreach ($letters as $key => $value) {\n      if ($value == $count) {\n \
    \       $results[$key] = $value;\n      }\n    }\n  }\n  return $results;\n}\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdy9f2asu.php:44\n\
    Stack trace:\n#0 /tmp/tmpdy9f2asu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpdy9f2asu.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$test = explode(' ', $test);\n\t$histogram = [];\n\
    \tforeach ($test as $val) {\n\t\tif(!array_key_exists($val, $histogram)) {\n\t\
    \t\t$histogram[$val] = 1;\n\t\t} else {\n\t\t\t$histogram[$val]++;\n\t\t}\n\t\
    }\n\treturn $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfl_wxoo.php:30\n\
    Stack trace:\n#0 /tmp/tmpyfl_wxoo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyfl_wxoo.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n$letters = explode(' ', $test);\n$count = array_count_values($letters);\n\
    $result = [];\n\nforeach ($count as $letter => $total) {\n    if ($total > 1)\
    \ {\n        $result[$letter] = $total;\n    }\n}\n\nprint_r($result);\n\n}\n\n\
    histogram('a b c'); // {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a'); // {'a':\
    \ 2, 'b': 2}\nhistogram('a b c a b'); // {'a': 2, 'b': 2}\nhistogram('b b b b\
    \ a'); // {'b': 4}\nhistogram(''); // {}\nfunction candidate(...$args) {\n   \
    \ return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [b] => 4\n)\nArray\n(\n)\nArray\n(\n  \
    \  [a] => 2\n    [b] => 2\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp69hjlea5.php:36\nStack trace:\n#0 /tmp/tmp69hjlea5.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmp69hjlea5.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $count = [];\n  $temp = explode(' ', $test);\n\
    \  foreach ($temp as $key => $value) {\n    if (!isset($count[$value])) {\n  \
    \    $count[$value] = 1;\n    } else {\n      $count[$value] += 1;\n    }\n  }\n\
    \  $max = max($count);\n  foreach ($count as $key => $value) {\n    if ($value\
    \ !== $max) {\n      unset($count[$key]);\n    }\n  }\n  return $count;\n}\necho\
    \ \"\\n\";\nvar_dump(histogram('a b c'));\necho \"\\n\";\nvar_dump(histogram('a\
    \ b b a'));\necho \"\\n\";\nvar_dump(histogram('a b c a b'));\necho \"\\n\";\n\
    var_dump(histogram('b b b b a'));\necho \"\\n\";\nvar_dump(histogram(''));\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\narray(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\n\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\n\n\
    array(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\n\narray(1) {\n  [\"\
    b\"]=>\n  int(4)\n}\n\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpx8jonak0.php:50\nStack trace:\n#0 /tmp/tmpx8jonak0.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx8jonak0.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = [];\n    $testArray = explode(' ',\
    \ $test);\n    $maxRepetition = 0;\n    foreach ($testArray as $value) {\n   \
    \     if (isset($result[$value])) {\n            $result[$value]++;\n        }\
    \ else {\n            $result[$value] = 1;\n        }\n        if ($result[$value]\
    \ > $maxRepetition) {\n            $maxRepetition = $result[$value];\n       \
    \ }\n    }\n    foreach ($result as $key => $value) {\n        if ($value != $maxRepetition)\
    \ {\n            unset($result[$key]);\n        }\n    }\n    return $result;\n\
    }\necho histogram('a b c');\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpys__c4p7.php:44\n\
    Stack trace:\n#0 /tmp/tmpys__c4p7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpys__c4p7.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = [];\n    $test = preg_split('/[\\s,]+/',\
    \ $test);\n    foreach ($test as $value) {\n        if (isset($result[$value]))\
    \ {\n            $result[$value] += 1;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    arsort($result);\n    $final_result = [];\n    $max\
    \ = 0;\n    foreach ($result as $key => $value) {\n        if ($value >= $max)\
    \ {\n            $max = $value;\n            $final_result[$key] = $value;\n \
    \       }\n    }\n    return $final_result;\n}\necho \"<pre>\";\nprint_r(histogram('a\
    \ b c'));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram('a b b a'));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram('a b c a b'));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram('b b b b a'));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(''));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7jyxjmcj.php:58\n\
    Stack trace:\n#0 /tmp/tmp7jyxjmcj.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp7jyxjmcj.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $test = str_replace(\" \", \"\", $test);\n  $arr\
    \ = str_split($test);\n  $result = [];\n  foreach ($arr as $letter) {\n    if\
    \ (array_key_exists($letter, $result)) {\n      $result[$letter]++;\n    } else\
    \ {\n      $result[$letter] = 1;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbnne73k6.php:30\n\
    Stack trace:\n#0 /tmp/tmpbnne73k6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbnne73k6.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $input = explode(' ',$test);\n    $count = [];\n\
    \    foreach ($input as $letter) {\n        if (array_key_exists($letter, $count))\
    \ {\n            $count[$letter] += 1;\n        } else {\n            $count[$letter]\
    \ = 1;\n        }\n    }\n    $max = array_search(max($count), $count);\n    return\
    \ [$max => $count[$max]];\n}\nprint_r(histogram('a b c'));\nprint_r(histogram('a\
    \ b b a'));\nprint_r(histogram('a b c a b'));\nprint_r(histogram('b b b b a'));\n\
    print_r(histogram(''));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [a] => 1\n)\nArray\n(\n    [a] => 2\n)\nArray\n(\n    [a]\
    \ => 2\n)\nArray\n(\n    [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp63puqn4y.php:34\nStack trace:\n\
    #0 /tmp/tmp63puqn4y.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp63puqn4y.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $testArray = str_split($test);\n  $result = [];\n\
    \  foreach ($testArray as $letter) {\n    if (!array_key_exists($letter, $result))\
    \ {\n      $result[$letter] = 1;\n    } else {\n      $result[$letter]++;\n  \
    \  }\n  }\n  arsort($result);\n  foreach ($result as $key => $value) {\n    if\
    \ ($value != $result[$key + 1]) {\n      break;\n    }\n  }\n  $filtered = array_filter($result,\
    \ function($value) use ($value) {\n    return $value == $value;\n  });\n  return\
    \ $filtered;\n}\n\necho implode(\", \", histogram('a b c')) . \"\\n\";\necho implode(\"\
    , \", histogram('a b b a')) . \"\\n\";\necho implode(\", \", histogram('a b c\
    \ a b')) . \"\\n\";\necho implode(\", \", histogram('b b b b a')) . \"\\n\";\n\
    echo implode(\", \", histogram('')) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Cannot use lexical variable $value as a parameter name in\
    \ /tmp/tmpmnqh5a6_.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n$words = explode(\" \", $test);\n$count = array_count_values($words);\n\
    $max = max($count);\n\nforeach ($count as $key => $value) {\n  if ($value != $max)\
    \ {\n    unset($count[$key]);\n  }\n}\nreturn $count;\n}\nprint_r(histogram('b\
    \ b b b a'));\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [b] => 4\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpm928yuc7.php:36\nStack trace:\n#0 /tmp/tmpm928yuc7.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpm928yuc7.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $arr_str = explode(' ', $test);\n    $result\
    \ = [];\n    foreach ($arr_str as $value) {\n        if (empty($result[$value]))\
    \ {\n            $result[$value] = 1;\n        } else {\n            $result[$value]\
    \ += 1;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplneylq0m.php:29\n\
    Stack trace:\n#0 /tmp/tmplneylq0m.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplneylq0m.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test2 = explode(\" \", $test);\n    $dictionary\
    \ = [];\n    foreach ($test2 as $letter) {\n        if (array_key_exists($letter,\
    \ $dictionary)) {\n            $dictionary[$letter] += 1;\n        } else {\n\
    \            $dictionary[$letter] = 1;\n        }\n    }\n    arsort($dictionary);\n\
    \    foreach ($dictionary as $key => $value) {\n        if ($value == $dictionary[$key\
    \ - 1]) {\n            $key = $key - 1;\n            $dictionary[$key] = $value;\n\
    \            unset($dictionary[$key + 1]);\n        }\n    }\n    return $dictionary;\n\
    }\n\nvar_dump(histogram(\"a b c\"));\nvar_dump(histogram(\"a b b a\"));\nvar_dump(histogram(\"\
    a b c a b\"));\nvar_dump(histogram(\"b b b b a\"));\nvar_dump(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php on line\
    \ 23\narray(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\n\nWarning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php\
    \ on line 23\n\nWarning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php\
    \ on line 23\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\n\n\
    Warning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php on line 23\n\n\
    Warning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php on line 23\n\n\
    Warning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php on line 23\n\
    array(3) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n  [\"c\"]=>\n  int(1)\n\
    }\n\nWarning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php on line\
    \ 23\n\nWarning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php on line\
    \ 23\narray(2) {\n  [\"b\"]=>\n  int(4)\n  [\"a\"]=>\n  int(1)\n}\n\nWarning:\
    \ A non-numeric value encountered in /tmp/tmpeugxbxyy.php on line 23\narray(1)\
    \ {\n  [\"\"]=>\n  int(1)\n}\n\nWarning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php\
    \ on line 23\n\nWarning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php\
    \ on line 23\n\nWarning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php\
    \ on line 23\n\nWarning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php\
    \ on line 23\n\nWarning: A non-numeric value encountered in /tmp/tmpeugxbxyy.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeugxbxyy.php:43\n\
    Stack trace:\n#0 /tmp/tmpeugxbxyy.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpeugxbxyy.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letterArray = explode(\" \", $test);\n    $dictionary\
    \ = [];\n    $sortedDictionary = [];\n    $maxCount = 0;\n    foreach ($letterArray\
    \ as $letter) {\n        if (!array_key_exists($letter, $dictionary)) {\n    \
    \        $dictionary[$letter] = 1;\n        } else {\n            $dictionary[$letter]++;\n\
    \        }\n    }\n    foreach ($dictionary as $key => $value) {\n        if ($value\
    \ > $maxCount) {\n            $maxCount = $value;\n        }\n    }\n    foreach\
    \ ($dictionary as $key => $value) {\n        if ($value == $maxCount) {\n    \
    \        $sortedDictionary[$key] = $value;\n        }\n    }\n    return $sortedDictionary;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2ebxfvo.php:46\n\
    Stack trace:\n#0 /tmp/tmpm2ebxfvo.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpm2ebxfvo.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $dict = [];\n  foreach (explode(' ', $test) as\
    \ $letter) {\n    if (isset($dict[$letter])) {\n      $dict[$letter] += 1;\n \
    \   } else {\n      $dict[$letter] = 1;\n    }\n  }\n  $highest = max($dict);\n\
    \  $result = [];\n  foreach ($dict as $letter => $count) {\n    if ($count ==\
    \ $highest) {\n      $result[$letter] = $count;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjyic1aaf.php:41\n\
    Stack trace:\n#0 /tmp/tmpjyic1aaf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjyic1aaf.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $characters = str_split($test);\n  $letters = [];\n\
    \  $bins = [];\n  foreach ($characters as $character) {\n    if ($character !=\
    \ ' ') {\n      $letters[] = $character;\n    }\n  }\n  foreach ($letters as $letter)\
    \ {\n    if (!isset($bins[$letter])) {\n      $bins[$letter] = 1;\n    } else\
    \ {\n      $bins[$letter]++;\n    }\n  }\n  if (count($bins) > 0) {\n    $max\
    \ = max($bins);\n    foreach ($bins as $key => $value) {\n      if ($value !=\
    \ $max) {\n        unset($bins[$key]);\n      }\n    }\n  }\n  return $bins;\n\
    }\nprint_r(histogram('a b c'));\nprint_r(histogram('a b b a'));\nprint_r(histogram('a\
    \ b c a b'));\nprint_r(histogram('b b b b a'));\nprint_r(histogram(''));\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgn_5fcnf.php:53\nStack trace:\n#0 /tmp/tmpgn_5fcnf.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgn_5fcnf.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $letters = explode(' ', $test);\n  if (empty($letters))\
    \ {\n    return [];\n  }\n  sort($letters);\n  $letterCount = [];\n  $currentLetter\
    \ = $letters[0];\n  $currentCount = 0;\n  $maxCount = 0;\n  foreach ($letters\
    \ as $letter) {\n    if ($letter === $currentLetter) {\n      $currentCount++;\n\
    \    } else {\n      $letterCount[$currentLetter] = $currentCount;\n      $currentLetter\
    \ = $letter;\n      $currentCount = 1;\n    }\n    if ($currentCount > $maxCount)\
    \ {\n      $maxCount = $currentCount;\n    }\n  }\n  $letterCount[$currentLetter]\
    \ = $currentCount;\n  $result = [];\n  foreach ($letterCount as $letter => $count)\
    \ {\n    if ($count === $maxCount) {\n      $result[$letter] = $count;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpps8d_z2y.php:51\n\
    Stack trace:\n#0 /tmp/tmpps8d_z2y.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpps8d_z2y.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $arr = explode(' ', $test);\n    $arrCount =\
    \ array_count_values($arr);\n    $arrMax = array_keys($arrCount, max($arrCount));\n\
    \    return array_flip($arrMax);\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpks5a_l7x.php:23\n\
    Stack trace:\n#0 /tmp/tmpks5a_l7x.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpks5a_l7x.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    // Your code here\n    $test_array = explode(\"\
    \ \", $test);\n    $uniq_test_array = array_unique($test_array);\n    $final_result\
    \ = [];\n    foreach ($uniq_test_array as $uniq_test) {\n        $final_result[$uniq_test]\
    \ = count(array_keys($test_array, $uniq_test));\n    }\n    $max_value = max($final_result);\n\
    \    foreach ($final_result as $letter => $value) {\n        if ($value != $max_value)\
    \ {\n            unset($final_result[$letter]);\n        }\n    }\n    return\
    \ $final_result;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcannxv14.php:38\n\
    Stack trace:\n#0 /tmp/tmpcannxv14.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcannxv14.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $letters = explode(' ', $test);\n  // print_r($letters);\n\
    \  // print_r(array_count_values($letters));\n  $highest = 0;\n  $result = [];\n\
    \  foreach (array_count_values($letters) as $letter => $count) {\n    if ($count\
    \ > $highest) {\n      $highest = $count;\n      $result = [];\n      $result[$letter]\
    \ = $count;\n    } elseif ($count == $highest) {\n      $result[$letter] = $count;\n\
    \    }\n  }\n  // print_r($result);\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuix4ioi.php:40\n\
    Stack trace:\n#0 /tmp/tmpiuix4ioi.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpiuix4ioi.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = array();\n    $arr = explode(' ', $test);\n\
    \    foreach ($arr as $char) {\n        if (!array_key_exists($char, $result))\
    \ {\n            $result[$char] = 1;\n        } else {\n            $result[$char]++;\n\
    \        }\n    }\n    arsort($result);\n    if (count($result) == 0) {\n    \
    \    return $result;\n    }\n    $max = max($result);\n    foreach ($result as\
    \ $key => $value) {\n        if ($value != $max) {\n            unset($result[$key]);\n\
    \        }\n    }\n    return $result;\n}\necho json_encode(histogram('a b c'));\n\
    echo json_encode(histogram('a b b a'));\necho json_encode(histogram('a b c a b'));\n\
    echo json_encode(histogram('b b b b a'));\necho json_encode(histogram(''));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "{\"a\":1,\"b\":1,\"c\":1}{\"a\":2,\"b\":2}{\"a\":2,\"b\":2}{\"b\":4}{\"\
    \":1}\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplalxw2xj.php:49\n\
    Stack trace:\n#0 /tmp/tmplalxw2xj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmplalxw2xj.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $arr = explode(' ', $test);\n  $result = [];\n\
    \  foreach ($arr as $value) {\n    if (array_key_exists($value, $result)) {\n\
    \      $result[$value]++;\n    } else {\n      $result[$value] = 1;\n    }\n \
    \ }\n  $result = array_filter($result, function($value){\n    return $value >\
    \ 1;\n  });\n  return $result;\n}\n\necho print_r(histogram('a b c'));\necho \"\
    \\n\";\necho print_r(histogram('a b b a'));\necho \"\\n\";\necho print_r(histogram('a\
    \ b c a b'));\necho \"\\n\";\necho print_r(histogram('b b b b a'));\necho \"\\\
    n\";\necho print_r(histogram(''));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n1\nArray\n(\n    [a] => 2\n    [b] => 2\n)\n1\nArray\n(\n\
    \    [a] => 2\n    [b] => 2\n)\n1\nArray\n(\n    [b] => 4\n)\n1\nArray\n(\n)\n\
    1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmn_92h_v.php:44\n\
    Stack trace:\n#0 /tmp/tmpmn_92h_v.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpmn_92h_v.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n   $words = explode(' ', $test);\n   $wordCount =\
    \ array_count_values($words);\n   $maxCount = max($wordCount);\n   return array_filter($wordCount,\
    \ function($key) use ($maxCount) {\n       return $key == $maxCount;\n   }, ARRAY_FILTER_USE_KEY);\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1qp1cmd.php:24\n\
    Stack trace:\n#0 /tmp/tmpl1qp1cmd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpl1qp1cmd.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $counted = array_count_values(explode(' ', $test));\n\
    \  $counts = array_count_values($counted);\n  krsort($counts);\n  $max = array_shift($counts);\n\
    \  $result = array_filter($counted, function($v) use ($max) {\n    return $v ==\
    \ $max;\n  });\n  ksort($result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplm5v5f9_.php:30\n\
    Stack trace:\n#0 /tmp/tmplm5v5f9_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplm5v5f9_.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $letters = explode(' ', $test);\n  $counter = array_count_values($letters);\n\
    \  $highest = max($counter);\n  $output = array();\n  foreach ($counter as $key\
    \ => $value) {\n    if ($value == $highest) {\n      $output[$key] = $value;\n\
    \    }\n  }\n  return $output;\n}\necho histogram('a b c');\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_cfrdsmx.php:35\n\
    Stack trace:\n#0 /tmp/tmp_cfrdsmx.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_cfrdsmx.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $test_arr = explode(' ', $test);\n  $counts = array_count_values($test_arr);\n\
    \  arsort($counts);\n  foreach ($counts as $key => $value) {\n    $letters[$key]\
    \ = $value;\n  }\n  return $letters;\n}\nprint_r(histogram('a b c'));\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsaob0ong.php:27\nStack trace:\n#0 /tmp/tmpsaob0ong.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsaob0ong.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $letters = explode(' ', $test);\n  $counts = array_count_values($letters);\n\
    \  arsort($counts);\n  $top_count = current($counts);\n  $res = array_filter($counts,\
    \ function($v) use ($top_count) {\n    return $v === $top_count;\n  });\n  return\
    \ $res;\n}\n\necho \"histogram('a b c') == \";\nvar_dump(histogram('a b c'));\n\
    echo \"histogram('a b b a') == \";\nvar_dump(histogram('a b b a'));\necho \"histogram('a\
    \ b c a b') == \";\nvar_dump(histogram('a b c a b'));\necho \"histogram('b b b\
    \ b a') == \";\nvar_dump(histogram('b b b b a'));\necho \"histogram('') == \"\
    ;\nvar_dump(histogram(''));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "histogram('a b c') == array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n\
    \  int(1)\n  [\"c\"]=>\n  int(1)\n}\nhistogram('a b b a') == array(2) {\n  [\"\
    a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\nhistogram('a b c a b') == array(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\nhistogram('b b b b a') ==\
    \ array(1) {\n  [\"b\"]=>\n  int(4)\n}\nhistogram('') == array(1) {\n  [\"\"]=>\n\
    \  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjv6db7rg.php:43\n\
    Stack trace:\n#0 /tmp/tmpjv6db7rg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpjv6db7rg.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $array = explode(' ', $test);\n  $array_length\
    \ = count($array);\n  $group_nums = array();\n  $group_nums_length = 0;\n  $group_letters\
    \ = array();\n  $group_letters_length = 0;\n  $group_letters_nums = array();\n\
    \  $group_letters_nums_length = 0;\n  $results = array();\n  $results_length =\
    \ 0;\n  $bool_num = 0;\n  $bool_letter = 0;\n  $bool_letter_num = 0;\n  $num =\
    \ 0;\n  $group_letter = 0;\n  $group_letter_num = 0;\n  $num_index = 0;\n  $group_letter_index\
    \ = 0;\n  $group_letter_num_index = 0;\n  for ($i = 0; $i < $array_length; $i++)\
    \ {\n    if ($i != $array_length - 1) {\n      $num = $array[$i];\n      $bool_num\
    \ = 0;\n      for ($j = 0; $j < $group_nums_length; $j++) {\n        if ($num\
    \ == $group_nums[$j]) {\n          $bool_num = 1;\n          $num_index = $j;\n\
    \        }\n      }\n      if ($bool_num == 0) {\n        $group_nums[$group_nums_length]\
    \ = $num;\n        $group_nums_length++;\n      }\n      $group_letter = $array[$i]\
    \ . $array[$i + 1];\n      $bool_letter = 0;\n      for ($j = 0; $j < $group_letters_length;\
    \ $j++) {\n        if ($group_letter == $group_letters[$j]) {\n          $bool_letter\
    \ = 1;\n          $group_letter_index = $j;\n        }\n      }\n      if ($bool_letter\
    \ == 0) {\n        $group_letters[$group_letters_length] = $group_letter;\n  \
    \      $group_letters_length++;\n      }\n      $group_letter_num = $array[$i]\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphazo3p5e.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = explode(' ', $test);\n    $results\
    \ = [];\n    foreach ($letters as $letter) {\n        if (isset($results[$letter]))\
    \ {\n            $results[$letter]++;\n        } else {\n            $results[$letter]\
    \ = 1;\n        }\n    }\n    $resultCount = array_search(max($results), $results);\n\
    \    $results = array_filter($results, function ($val) use ($resultCount) {\n\
    \        return $val === $resultCount;\n    });\n    return $results;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk68rxnj4.php:33\n\
    Stack trace:\n#0 /tmp/tmpk68rxnj4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpk68rxnj4.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $histo = array();\n    $histo = explode(\" \"\
    , $test);\n    $count = array_count_values($histo);\n    $max = max($count);\n\
    \    $ret = array();\n    foreach ($count as $key => $value) {\n        if ($value\
    \ == $max) {\n            $ret[$key] = $value;\n        }\n    }\n    return $ret;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1wq6fru.php:35\n\
    Stack trace:\n#0 /tmp/tmpo1wq6fru.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpo1wq6fru.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $array = explode(' ', $test);\n    $result =\
    \ [];\n    foreach ($array as $val) {\n        if (!array_key_exists($val, $result))\
    \ {\n            $result[$val] = 1;\n        } else {\n            $result[$val]++;\n\
    \        }\n    }\n    $max = 0;\n    foreach ($result as $val) {\n        if\
    \ ($val > $max) {\n            $max = $val;\n        }\n    }\n    foreach ($result\
    \ as $key => $val) {\n        if ($val < $max) {\n            unset($result[$key]);\n\
    \        }\n    }\n    return $result;\n}\nprint_r(histogram('a b c'));\nprint_r(histogram('a\
    \ b b a'));\nprint_r(histogram('a b c a b'));\nprint_r(histogram('b b b b a'));\n\
    print_r(histogram(''));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmctfpb49.php:50\nStack trace:\n#0 /tmp/tmpmctfpb49.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmctfpb49.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = str_split($test);\n    $arr = [];\n\
    \    foreach ($letters as $letter) {\n        if (isset($arr[$letter])) {\n  \
    \          $arr[$letter]++;\n        } else {\n            $arr[$letter] = 1;\n\
    \        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n   \
    \ return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprg59aw9j.php:29\n\
    Stack trace:\n#0 /tmp/tmprg59aw9j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprg59aw9j.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\tif (strlen($test) === 0) {\n\t\treturn array();\n\
    \t}\n\t$words = explode(' ', $test);\n\t$histogram = array();\n\tforeach ($words\
    \ as $word) {\n\t\tif (array_key_exists($word, $histogram)) {\n\t\t\t$histogram[$word]\
    \ += 1;\n\t\t} else {\n\t\t\t$histogram[$word] = 1;\n\t\t}\n\t}\n\t$maximum =\
    \ array_reduce($histogram, function($max, $current) {\n\t\treturn max($max, $current);\n\
    \t});\n\treturn array_filter($histogram, function($value) use ($maximum) {\n\t\
    \treturn $value === $maximum;\n\t}, ARRAY_FILTER_USE_BOTH);\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $temp = explode(\" \", $test);\n  $max = 0;\n \
    \ $arr = [];\n  $ret = [];\n  for ($i = 0; $i < count($temp); $i++) {\n    if\
    \ (isset($arr[$temp[$i]])) {\n      $arr[$temp[$i]]++;\n    } else {\n      $arr[$temp[$i]]\
    \ = 1;\n    }\n    if ($arr[$temp[$i]] > $max) {\n      $max = $arr[$temp[$i]];\n\
    \    }\n  }\n  foreach ($arr as $key => $value) {\n    if ($value == $max) {\n\
    \      $ret[$key] = $value;\n    }\n  }\n  return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4jv0ly8p.php:44\n\
    Stack trace:\n#0 /tmp/tmp4jv0ly8p.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp4jv0ly8p.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = explode(' ', $test);\n    $histogram\
    \ = [];\n    foreach ($letters as $key => $letter) {\n        $histogram[$letter]\
    \ = @$histogram[$letter] + 1;\n    }\n    // Find the highest number of occurences.\n\
    \    $highest = 0;\n    foreach ($histogram as $letter => $number) {\n       \
    \ if ($number > $highest) {\n            $highest = $number;\n        }\n    }\n\
    \    // If there are multiple letters with the same number of occurrences,\n \
    \   // add them to a $common dictionary.\n    $common = [];\n    foreach ($histogram\
    \ as $letter => $number) {\n        if ($number == $highest) {\n            $common[$letter]\
    \ = $number;\n        }\n    }\n    return $common;\n}\n\nvar_dump(histogram('a\
    \ b c'));\nvar_dump(histogram('a b b a'));\nvar_dump(histogram('a b c a b'));\n\
    var_dump(histogram('b b b b a'));\nvar_dump(histogram(''));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9dkdsy2a.php:51\nStack trace:\n#0 /tmp/tmp9dkdsy2a.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9dkdsy2a.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test = trim($test);\n    if ($test == \"\")\
    \ {\n        return [];\n    }\n    $words = explode(\" \", $test);\n    $maxCount\
    \ = 0;\n    $maxOccurringWords = [];\n    foreach ($words as $word) {\n      \
    \  $count = count(array_keys($words, $word));\n        if ($count > $maxCount)\
    \ {\n            $maxCount = $count;\n            $maxOccurringWords = [$word\
    \ => $count];\n        } else if ($count == $maxCount) {\n            $maxOccurringWords[$word]\
    \ = $count;\n        }\n    }\n    return $maxOccurringWords;\n}\n\n$test = \"\
    a b c\";\n$expected = [\"a\" => 1, \"b\" => 1, \"c\" => 1];\necho \"For test:\
    \ '$test', expected:\" . PHP_EOL;\nvar_dump($expected);\necho \"Got:\" . PHP_EOL;\n\
    var_dump(histogram($test));\n\n$test = \"a b b a\";\n$expected = [\"a\" => 2,\
    \ \"b\" => 2];\necho \"For test: '$test', expected:\" . PHP_EOL;\nvar_dump($expected);\n\
    echo \"Got:\" . PHP_EOL;\nvar_dump(histogram($test));\n\n$test = \"a b c a b\"\
    ;\n$expected = [\"a\" => 2, \"b\" => 2];\necho \"For test: '$test', expected:\"\
    \ . PHP_EOL;\nvar_dump($expected);\necho \"Got:\" . PHP_EOL;\nvar_dump(histogram($test));\n\
    \n$test = \"b b b b a\";\n$expected = [\"b\" => 4];\necho \"For test: '$test',\
    \ expected:\" . PHP_EOL;\nvar_dump($expected);\necho \"Got:\" . PHP_EOL;\nvar_dump(histogram($test));\n\
    \n$test = \"\";\n$expected = [];\necho \"For test: '$test', expected:\" . PHP_EOL;\n\
    var_dump($expected);\necho \"Got:\" . PHP_EOL;\nvar_dump(histogram($test));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "For test: 'a b c', expected:\narray(3) {\n  [\"a\"]=>\n  int(1)\n  [\"\
    b\"]=>\n  int(1)\n  [\"c\"]=>\n  int(1)\n}\nGot:\narray(3) {\n  [\"a\"]=>\n  int(1)\n\
    \  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n  int(1)\n}\nFor test: 'a b b a', expected:\n\
    array(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\nGot:\narray(2) {\n\
    \  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\nFor test: 'a b c a b', expected:\n\
    array(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\nGot:\narray(2) {\n\
    \  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\nFor test: 'b b b b a', expected:\n\
    array(1) {\n  [\"b\"]=>\n  int(4)\n}\nGot:\narray(1) {\n  [\"b\"]=>\n  int(4)\n\
    }\nFor test: '', expected:\narray(0) {\n}\nGot:\narray(0) {\n}\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $arr = explode(' ', $test);\n    $res = [];\n\
    \    foreach ($arr as $item) {\n        if (!array_key_exists($item, $res)) {\n\
    \            $res[$item] = 1;\n        } else {\n            $res[$item]++;\n\
    \        }\n    }\n    foreach ($res as $key => $value) {\n        if ($value\
    \ == max($res)) {\n            $res2[$key] = $value;\n        }\n    }\n    return\
    \ $res2;\n}\n$test = 'a b c';\nvar_dump(histogram($test));\n\n$test2 = 'a b b\
    \ a';\nvar_dump(histogram($test2));\n\n$test3 = 'a b c a b';\nvar_dump(histogram($test3));\n\
    \n$test4 = 'b b b b a';\nvar_dump(histogram($test4));\n\n$test5 = '';\nvar_dump(histogram($test5));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxjqxeec0.php:53\nStack trace:\n#0 /tmp/tmpxjqxeec0.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxjqxeec0.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test = str_split($test);\n    $freq = array_count_values($test);\n\
    \    $max = max($freq);\n    $mode = array_filter($freq, function($v) use ($max)\
    \ {\n        return $v == $max;\n    });\n    asort($mode);\n    return $mode;\n\
    }\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqm2aj7f8.php:26\n\
    Stack trace:\n#0 /tmp/tmpqm2aj7f8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqm2aj7f8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $letter_array = explode(' ', $test);\n  $letter_array\
    \ = array_count_values($letter_array);\n  $max_letter = max($letter_array);\n\
    \  $result = array();\n  foreach ($letter_array as $key => $value) {\n    if ($value\
    \ == $max_letter) {\n      $result[$key] = $value;\n    }\n  }\n  return $result;\n\
    }\n\n$tests = array(\n  'a b c' => array('a' => 1, 'b' => 1, 'c' => 1),\n  'a\
    \ b b a' => array('a' => 2, 'b' => 2),\n  'a b c a b' => array('a' => 2, 'b' =>\
    \ 2),\n  'b b b b a' => array('b' => 4),\n  '' => array(),\n);\n\nforeach ($tests\
    \ as $input => $expected) {\n  $result = histogram($input);\n  echo \"\\n\\n\"\
    ;\n  echo \"input: '$input'\\n\";\n  echo \"result: \";\n  print_r($result);\n\
    \  echo \"expected: \";\n  print_r($expected);\n  echo ($result == $expected)\
    \ ? \"PASS\\n\" : \"FAIL\\n\";\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\ninput: 'a b c'\nresult: Array\n(\n    [a] => 1\n    [b] => 1\n    [c]\
    \ => 1\n)\nexpected: Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nPASS\n\
    \n\ninput: 'a b b a'\nresult: Array\n(\n    [a] => 2\n    [b] => 2\n)\nexpected:\
    \ Array\n(\n    [a] => 2\n    [b] => 2\n)\nPASS\n\n\ninput: 'a b c a b'\nresult:\
    \ Array\n(\n    [a] => 2\n    [b] => 2\n)\nexpected: Array\n(\n    [a] => 2\n\
    \    [b] => 2\n)\nPASS\n\n\ninput: 'b b b b a'\nresult: Array\n(\n    [b] => 4\n\
    )\nexpected: Array\n(\n    [b] => 4\n)\nPASS\n\n\ninput: ''\nresult: Array\n(\n\
    \    [] => 1\n)\nexpected: Array\n(\n)\nFAIL\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpoia4gx00.php:53\nStack trace:\n#0 /tmp/tmpoia4gx00.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpoia4gx00.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $histo = [];\n  $test = explode(' ', $test);\n\
    \  foreach ($test as $key => $value) {\n    if (array_key_exists($value, $histo))\
    \ {\n      $histo[$value]++;\n    } else {\n      $histo[$value] = 1;\n    }\n\
    \  }\n  return $histo;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdi0cvfr7.php:29\n\
    Stack trace:\n#0 /tmp/tmpdi0cvfr7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpdi0cvfr7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$test_hist = [];\n\t$test_arr = explode(' ', $test);\n\
    \t\n\tforeach ($test_arr as $letter) {\n\t\t$test_hist[$letter] = (isset($test_hist[$letter]))\
    \ ? $test_hist[$letter] + 1 : 1;\n\t}\n\t\n\t$max_count = 0;\n\t$max_letters =\
    \ [];\n\tforeach ($test_hist as $letter => $count) {\n\t\tif ($count >= $max_count)\
    \ {\n\t\t\t$max_count = $count;\n\t\t\t$max_letters[$letter] = $count;\n\t\t}\n\
    \t}\n\t\n\treturn $max_letters;\n}\n\n$tests = [\n\t'a b c' => ['a' => 1, 'b'\
    \ => 1, 'c' => 1],\n\t'a b b a' => ['a' => 2, 'b' => 2],\n\t'a b c a b' => ['a'\
    \ => 2, 'b' => 2],\n\t'b b b b a' => ['b' => 4],\n\t'' => []\n];\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lton_cv.php:50\n\
    Stack trace:\n#0 /tmp/tmp7lton_cv.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp7lton_cv.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$test = str_split($test);\n\t$frequencies = array_count_values($test);\n\
    \tarsort($frequencies);\n\t$max_value = array_values($frequencies)[0];\n\t$max_frequency\
    \ = array_keys($frequencies, $max_value);\n\t$max_frequency = array_flip($max_frequency);\n\
    \tforeach ($max_frequency as $key => $value) {\n\t\t$max_frequency[$key] = $max_value;\n\
    \t}\n\treturn $max_frequency;\n}\nvar_dump(histogram('a b c'));\nvar_dump(histogram('a\
    \ b b a'));\nvar_dump(histogram('a b c a b'));\nvar_dump(histogram('b b b b a'));\n\
    var_dump(histogram(''));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [\" \"]=>\n  int(2)\n}\narray(1) {\n  [\" \"]=>\n  int(3)\n\
    }\narray(1) {\n  [\" \"]=>\n  int(4)\n}\narray(2) {\n  [\"b\"]=>\n  int(4)\n \
    \ [\" \"]=>\n  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpapxqemqg.php:33\nStack trace:\n\
    #0 /tmp/tmpapxqemqg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpapxqemqg.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $x = [];\n    $test = explode(' ', $test);\n\
    \    foreach ($test as $key => $value) {\n        if (isset($x[$value])) {\n \
    \           $x[$value]++;\n        } else {\n            $x[$value] = 1;\n   \
    \     }\n    }\n    arsort($x);\n    foreach ($x as $key => $value) {\n      \
    \  if ($value != $x[key($x)]) {\n            unset($x[$key]);\n        }\n   \
    \ }\n    return $x;\n}\n\nvar_dump(histogram('a b c'));\nvar_dump(histogram('a\
    \ b b a'));\nvar_dump(histogram('a b c a b'));\nvar_dump(histogram('b b b b a'));\n\
    var_dump(histogram(''));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpcfcn3gzr.php:46\nStack trace:\n#0 /tmp/tmpcfcn3gzr.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcfcn3gzr.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $countArray = [];\n  $test = str_replace(' ', '',\
    \ $test);\n  $strArray = str_split($test);\n  foreach ($strArray as $letter) {\n\
    \    if (!isset($countArray[$letter])) {\n      $countArray[$letter] = 1;\n  \
    \  } else {\n      $countArray[$letter]++;\n    }\n  }\n  arsort($countArray);\n\
    \  $mostCommon = max($countArray);\n  foreach ($countArray as $key => $value)\
    \ {\n    if ($value != $mostCommon) {\n      unset($countArray[$key]);\n    }\n\
    \  }\n  return $countArray;\n}\n\nprint_r(histogram('a b c'));\nprint_r(histogram('a\
    \ b b a'));\nprint_r(histogram('a b c a b'));\nprint_r(histogram('b b b b a'));\n\
    print_r(histogram(''));\nprint_r(histogram('a'));\nprint_r(histogram('a a'));\n\
    print_r(histogram('a a a'));\nprint_r(histogram('a a a a'));\nprint_r(histogram('a\
    \ a a a a'));\nprint_r(histogram('a a a a a a'));\nprint_r(histogram('a a a a\
    \ a a a'));\nprint_r(histogram('a a a a a a a a'));\nprint_r(histogram('a a a\
    \ a a a a a a'));\nprint_r(histogram('a a a a a a a a a a'));\nprint_r(histogram('a\
    \ a a a a a a a a a a'));\nprint_r(histogram('a a a a a a a a a a a a'));\nprint_r(histogram('a\
    \ a a a a a a a a a a a a'));\nprint_r(histogram('a a a a a a a a a a a a a a'));\n\
    print_r(histogram('a a a a a a a a a a a a a a a'));\nprint_r(histogram('a\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpndfl7qta.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $result = [];\n  $words = explode(' ', $test);\n\
    \  foreach ($words as $word) {\n    if (isset($result[$word])) {\n      $result[$word]++;\n\
    \    } else {\n      $result[$word] = 1;\n    }\n  }\n  return $result;\n}\n\n\
    $test = 'b b b b a';\necho \"Given string: $test\\n\";\necho \"Result: \";\nprint_r(histogram($test));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Given string: b b b b a\nResult: Array\n(\n    [b] => 4\n    [a] => 1\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdtd8mrz.php:35\n\
    Stack trace:\n#0 /tmp/tmptdtd8mrz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmptdtd8mrz.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test_array = explode(\" \", $test);\n    $result\
    \ = array_count_values($test_array);\n    $max_value = max($result);\n    foreach\
    \ ($result as $key => $value) {\n        if ($value !== $max_value) {\n      \
    \      unset($result[$key]);\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0sd2mhvr.php:33\n\
    Stack trace:\n#0 /tmp/tmp0sd2mhvr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0sd2mhvr.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $counts = [];\n  foreach (explode(' ', $test) as\
    \ $letter) {\n    $counts[$letter] = isset($counts[$letter]) ? $counts[$letter]\
    \ + 1 : 1;\n  }\n  return $counts;\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jvqf21u.php:24\n\
    Stack trace:\n#0 /tmp/tmp5jvqf21u.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5jvqf21u.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $new_array = [];\n  $count = 0;\n  $test_array\
    \ = explode(\" \", $test);\n  foreach ($test_array as $letter) {\n    if (array_key_exists($letter,\
    \ $new_array)) {\n      $new_array[$letter] += 1;\n    } else {\n      $new_array[$letter]\
    \ = 1;\n    }\n  }\n  return $new_array;\n}\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6etoz8r5.php:30\n\
    Stack trace:\n#0 /tmp/tmp6etoz8r5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6etoz8r5.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $letters = explode(' ', $test);\n  $count = array_count_values($letters);\n\
    \  return $count;\n}\necho histogram('a b c');\necho histogram('a b b a');\necho\
    \ histogram('a b c a b');\necho histogram('b b b b a');\necho histogram('');\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "ArrayArrayArrayArrayArray\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp0zoe5t6b.php:27\nStack trace:\n#0 /tmp/tmp0zoe5t6b.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmp0zoe5t6b.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$test = explode(' ', $test);\n\t$r = array();\n\
    \tforeach ($test as $v) {\n\t\t$r[$v] = isset($r[$v]) ? $r[$v] + 1 : 1;\n\t}\n\
    \treturn $r;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpakv5zz1g.php:26\n\
    Stack trace:\n#0 /tmp/tmpakv5zz1g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpakv5zz1g.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $testArray = explode(\" \", $test);\n    $testArray\
    \ = array_count_values($testArray);\n    $maxCount = max($testArray);\n    $maxCountArray\
    \ = array_keys($testArray, $maxCount);\n    $result = array();\n    foreach ($maxCountArray\
    \ as $value) {\n        $result[$value] = $maxCount;\n    }\n    return $result;\n\
    }\necho \"<pre>\";\nprint_r(histogram('a b c'));\necho \"</pre>\";\n\necho \"\
    <pre>\";\nprint_r(histogram('a b b a'));\necho \"</pre>\";\n\necho \"<pre>\";\n\
    print_r(histogram('a b c a b'));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram('b\
    \ b b b a'));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram(''));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6csd0yfn.php:52\n\
    Stack trace:\n#0 /tmp/tmp6csd0yfn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp6csd0yfn.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$arr = explode(' ', $test);\n\t$dictionary = [];\n\
    \t$count = 0;\n\t$value = null;\n\t$result = [];\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif (isset($dictionary[$value])) {\n\t\t\t$dictionary[$value] += 1;\n\t\
    \t} else {\n\t\t\t$dictionary[$value] = 1;\n\t\t}\n\t}\n\tforeach ($dictionary\
    \ as $key => $value) {\n\t\tif ($value > $count) {\n\t\t\t$count = $value;\n\t\
    \t}\n\t}\n\tforeach ($dictionary as $key => $value) {\n\t\tif ($value == $count)\
    \ {\n\t\t\t$result[$key] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$test\
    \ = 'a b c';\n$expected = ['a' => 1, 'b' => 1, 'c' => 1];\n$actual = histogram($test);\n\
    var_dump($actual);\necho '<hr>';\n$test = 'a b b a';\n$expected = ['a' => 2, 'b'\
    \ => 2];\n$actual = histogram($test);\nvar_dump($actual);\necho '<hr>';\n$test\
    \ = 'a b c a b';\n$expected = ['a' => 2, 'b' => 2];\n$actual = histogram($test);\n\
    var_dump($actual);\necho '<hr>';\n$test = 'b b b b a';\n$expected = ['b' => 4];\n\
    $actual = histogram($test);\nvar_dump($actual);\necho '<hr>';\n$test = '';\n$expected\
    \ = [];\n$actual = histogram($test);\nvar_dump($actual);\necho '<hr>';\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\n<hr>array(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\n\
    <hr>array(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\n<hr>array(1)\
    \ {\n  [\"b\"]=>\n  int(4)\n}\n<hr>array(1) {\n  [\"\"]=>\n  int(1)\n}\n<hr>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp3ww3_f2u.php:73\nStack\
    \ trace:\n#0 /tmp/tmp3ww3_f2u.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp3ww3_f2u.php\
    \ on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $test_arr = explode(' ', $test);\n  $count = array_count_values($test_arr);\n\
    \  $keys = array_keys($count);\n  $values = array_values($count);\n  $max = max($values);\n\
    \  $to_return = [];\n  foreach ($count as $key => $value) {\n    if ($value ==\
    \ $max) {\n      $to_return[$key] = $value;\n    }\n  }\n  return $to_return;\n\
    }\necho '{\"b\": 4}' == json_encode(histogram('b b b b a'));\necho '{\"a\": 2,\
    \ \"b\": 2}' == json_encode(histogram('a b c a b'));\necho '{\"a\": 2, \"b\":\
    \ 2}' == json_encode(histogram('a b b a'));\necho '{\"a\": 1, \"b\": 1, \"c\"\
    : 1}' == json_encode(histogram('a b c'));\necho '{}' == json_encode(histogram(''));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_8ym2df.php:41\n\
    Stack trace:\n#0 /tmp/tmp7_8ym2df.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7_8ym2df.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = explode(' ', $test);\n    // First\
    \ extract all the letters, set them as keys in an array,\n    // and set their\
    \ count to 0.\n    $letterCount = array_reduce($letters, function($carry, $letter)\
    \ {\n        if (!array_key_exists($letter, $carry)) {\n            $carry[$letter]\
    \ = 0;\n        }\n        return $carry;\n    }, []);\n    // Next add one to\
    \ the count for each letter.\n    $letterCount = array_reduce($letters, function($carry,\
    \ $letter) {\n        $carry[$letter]++;\n        return $carry;\n    }, $letterCount);\n\
    \    // Next find the highest count for a letter.\n    $max = max($letterCount);\n\
    \    // Finally, find all letters with that highest count.\n    $result = array_reduce($letterCount,\
    \ function($carry, $value, $key) use ($max) {\n        if ($value == $max) {\n\
    \            $carry[$key] = $value;\n        }\n        return $carry;\n    },\
    \ []);\n    return $result;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught ArgumentCountError: Too few arguments to function\
    \ {closure}(), 2 passed and exactly 3 expected in /tmp/tmp0jeabcp7.php:29\nStack\
    \ trace:\n#0 [internal function]: {closure}(Array, 2)\n#1 /tmp/tmp0jeabcp7.php(34):\
    \ array_reduce(Array, Object(Closure), Array)\n#2 /tmp/tmp0jeabcp7.php(38): histogram('a\
    \ b b a')\n#3 /tmp/tmp0jeabcp7.php(42): candidate('a b b a')\n#4 /tmp/tmp0jeabcp7.php(52):\
    \ test()\n#5 {main}\n  thrown in /tmp/tmp0jeabcp7.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $string = explode(\" \", $test);\n    $chars\
    \ = array_count_values($string);\n    arsort($chars);\n    foreach ($chars as\
    \ $key => $value) {\n        if ($value == max($chars)) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvafx_wsl.php:33\n\
    Stack trace:\n#0 /tmp/tmpvafx_wsl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvafx_wsl.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $array = explode(' ', $test);\n  $new_array = array_count_values($array);\n\
    \  arsort($new_array);\n  foreach ($new_array as $key => $value) {\n    if ($value\
    \ == max($new_array)) {\n      $result[$key] = $value;\n    }\n  }\n  return $result;\n\
    }\n\necho histogram('a b c') . ' == {\\'a\\': 1, \\'b\\': 1, \\'c\\': 1}' . PHP_EOL;\n\
    echo histogram('a b b a') . ' == {\\'a\\': 2, \\'b\\': 2}' . PHP_EOL;\necho histogram('a\
    \ b c a b') . ' == {\\'a\\': 2, \\'b\\': 2}' . PHP_EOL;\necho histogram('b b b\
    \ b a') . ' == {\\'b\\': 4}' . PHP_EOL;\necho histogram('') . ' == {}' . PHP_EOL;\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array == {'a': 1, 'b': 1, 'c': 1}\nArray == {'a': 2, 'b': 2}\nArray ==\
    \ {'a': 2, 'b': 2}\nArray == {'b': 4}\nArray == {}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpcw4r6659.php:39\nStack trace:\n#0 /tmp/tmpcw4r6659.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcw4r6659.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $testArr = explode(' ', $test);\n    $letterCount\
    \ = array_count_values($testArr);\n    $letterMax = array_search(max($letterCount),\
    \ $letterCount);\n    $results = [];\n    foreach ($letterCount as $key => $value)\
    \ {\n        if ($value == $letterCount[$letterMax]) {\n            $results[$key]\
    \ = $value;\n        }\n    }\n    return $results;\n}\n\nvar_dump(histogram('a\
    \ b c'));\nvar_dump(histogram('a b b a'));\nvar_dump(histogram('a b c a b'));\n\
    var_dump(histogram('b b b b a'));\nvar_dump(histogram(''));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppjgmltip.php:40\nStack trace:\n#0 /tmp/tmppjgmltip.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppjgmltip.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $testArr = explode(' ', $test);\n  $testSort =\
    \ array_count_values($testArr);\n  $max = max($testSort);\n  $solution = array();\n\
    \  foreach ($testSort as $key => $value) {\n    if ($value == $max) {\n      $solution[$key]\
    \ = $value;\n    }\n  }\n  return $solution;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7itvjs19.php:34\n\
    Stack trace:\n#0 /tmp/tmp7itvjs19.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7itvjs19.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    // TODO: Implement me\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4l3h0u6r.php:20\n\
    Stack trace:\n#0 /tmp/tmp4l3h0u6r.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4l3h0u6r.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = [];\n    $letters = str_split($test);\n\
    \    foreach ($letters as $letter) {\n        if (!array_key_exists($letter, $result))\
    \ {\n            $result[$letter] = 1;\n        } else {\n            $result[$letter]\
    \ += 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5pciqzd.php:29\n\
    Stack trace:\n#0 /tmp/tmpq5pciqzd.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpq5pciqzd.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$test = explode(' ',$test);\n\t$result = array();\n\
    \tforeach ($test as $key => $value) {\n\t\tif (isset($result[$value])) {\n\t\t\
    \t$result[$value] += 1;\n\t\t} else {\n\t\t\t$result[$value] = 1;\n\t\t}\n\t}\n\
    \treturn $result;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nlfff7k.php:29\n\
    Stack trace:\n#0 /tmp/tmp4nlfff7k.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4nlfff7k.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $a = preg_split('/[\\s]+/', $test);\n  $newArray\
    \ = array_count_values($a);\n  foreach ($newArray as $key => $value) {\n    $newValue[$key]\
    \ = $value;\n  }\n  return $newValue;\n}\n\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpph531ylp.php:26\n\
    Stack trace:\n#0 /tmp/tmpph531ylp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpph531ylp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letter = '';\n    $test = explode(' ', $test);\n\
    \    $result = [];\n    foreach ($test as $value) {\n        if (!isset($result[$value]))\
    \ {\n            $result[$value] = 1;\n        } else {\n            $result[$value]++;\n\
    \        }\n    }\n    arsort($result);\n    $max = array_values($result)[0];\n\
    \    foreach ($result as $key => $value) {\n        if ($value < $max) {\n   \
    \         unset($result[$key]);\n        }\n    }\n    return $result;\n}\nvar_dump(histogram('a\
    \ b c'));\nvar_dump(histogram('a b b a'));\nvar_dump(histogram('a b c a b'));\n\
    var_dump(histogram('b b b b a'));\nvar_dump(histogram(''));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n\
    \  int(1)\n}\narray(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\narray(1) {\n  [\"b\"]=>\n\
    \  int(4)\n}\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7j1qaqzf.php:47\nStack trace:\n#0 /tmp/tmp7j1qaqzf.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7j1qaqzf.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $test = str_replace(' ', '', $test);\n  $array\
    \ = str_split($test);\n  $count = array_count_values($array);\n  $maxCount = max($count);\n\
    \  $result = array_filter($count, function($v) use ($maxCount) {\n    return $v\
    \ == $maxCount;\n  });\n  return $result;\n}\n\necho '<pre>histogram(\"a b c\"\
    )</pre>';\nvar_dump(histogram('a b c'));\necho '<pre>histogram(\"a b b a\")</pre>';\n\
    var_dump(histogram('a b b a'));\necho '<pre>histogram(\"a b c a b\")</pre>';\n\
    var_dump(histogram('a b c a b'));\necho '<pre>histogram(\"b b b b a\")</pre>';\n\
    var_dump(histogram('b b b b a'));\necho '<pre>histogram(\"\")</pre>';\nvar_dump(histogram(''));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>histogram(\"a b c\")</pre>array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"\
    b\"]=>\n  int(1)\n  [\"c\"]=>\n  int(1)\n}\n<pre>histogram(\"a b b a\")</pre>array(2)\
    \ {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\n<pre>histogram(\"a b c a\
    \ b\")</pre>array(2) {\n  [\"a\"]=>\n  int(2)\n  [\"b\"]=>\n  int(2)\n}\n<pre>histogram(\"\
    b b b b a\")</pre>array(1) {\n  [\"b\"]=>\n  int(4)\n}\n<pre>histogram(\"\")</pre>array(1)\
    \ {\n  [\"\"]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmptkqlm_b8.php:43\nStack trace:\n#0 /tmp/tmptkqlm_b8.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmptkqlm_b8.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $testArr = explode(' ', $test);\n    $newArray\
    \ = [];\n    foreach ($testArr as $key => $value) {\n        if (!array_key_exists($value,\
    \ $newArray)) {\n            $newArray[$value] = 1;\n        } else {\n      \
    \      $newArray[$value] += 1;\n        }\n    }\n    $max = max($newArray);\n\
    \    $maxOcc = array_keys($newArray, $max);\n    return array_combine($maxOcc,\
    \ array_fill(0, count($maxOcc), $max));\n}\necho '<pre>';\nprint_r(histogram('a\
    \ b c'));\necho '</pre>';\necho '<pre>';\nprint_r(histogram('a b b a'));\necho\
    \ '</pre>';\necho '<pre>';\nprint_r(histogram('a b c a b'));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(histogram('b b b b a'));\necho '</pre>';\necho '<pre>';\n\
    print_r(histogram(''));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdjavg48.php:51\n\
    Stack trace:\n#0 /tmp/tmptdjavg48.php(55): test()\n#1 {main}\n  thrown in /tmp/tmptdjavg48.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $histogram = [];\n    $letters = explode(' ',\
    \ $test);\n    for ($i = 0; $i < count($letters); $i++) {\n        $letter = $letters[$i];\n\
    \        if (in_array($letter, array_keys($histogram))) {\n            $histogram[$letter]++;\n\
    \        } else {\n            $histogram[$letter] = 1;\n        }\n    }\n  \
    \  arsort($histogram);\n    $max_value = max($histogram);\n    $max_keys = array_keys($histogram,\
    \ $max_value);\n    $max_histogram = [];\n    foreach ($max_keys as $key) {\n\
    \        $max_histogram[$key] = $max_value;\n    }\n    return $max_histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5etxzjxi.php:43\n\
    Stack trace:\n#0 /tmp/tmp5etxzjxi.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp5etxzjxi.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $testArr = explode(' ', $test);\n    $results\
    \ = [];\n    $max = 0;\n    foreach ($testArr as $letter) {\n        if (array_key_exists($letter,\
    \ $results)) {\n            $results[$letter] += 1;\n        } else {\n      \
    \      $results[$letter] = 1;\n        }\n        if ($results[$letter] > $max)\
    \ {\n            $max = $results[$letter];\n        }\n    }\n    foreach ($results\
    \ as $letter => $count) {\n        if ($count < $max) {\n            unset($results[$letter]);\n\
    \        }\n    }\n    return $results;\n}\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vethdo8.php:43\n\
    Stack trace:\n#0 /tmp/tmp0vethdo8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0vethdo8.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n\t$h = [];\n\t$t = explode(' ', $test);\n\t$max =\
    \ 0;\n\tforeach ($t as $e) {\n\t\t$h[$e] = isset($h[$e]) ? $h[$e] + 1 : 1;\n\t\
    \t$max = max($max, $h[$e]);\n\t}\n\treturn array_filter($h, function($x) use ($max)\
    \ {\n\t\treturn $x == $max;\n\t});\n}\n\necho \"histogram('a b c')\\n\";\nvar_dump(histogram('a\
    \ b c'));\necho \"histogram('a b b a')\\n\";\nvar_dump(histogram('a b b a'));\n\
    echo \"histogram('a b c a b')\\n\";\nvar_dump(histogram('a b c a b'));\necho \"\
    histogram('b b b b a')\\n\";\nvar_dump(histogram('b b b b a'));\necho \"histogram('')\\\
    n\";\nvar_dump(histogram(''));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "histogram('a b c')\narray(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(1)\n\
    \  [\"c\"]=>\n  int(1)\n}\nhistogram('a b b a')\narray(2) {\n  [\"a\"]=>\n  int(2)\n\
    \  [\"b\"]=>\n  int(2)\n}\nhistogram('a b c a b')\narray(2) {\n  [\"a\"]=>\n \
    \ int(2)\n  [\"b\"]=>\n  int(2)\n}\nhistogram('b b b b a')\narray(1) {\n  [\"\
    b\"]=>\n  int(4)\n}\nhistogram('')\narray(1) {\n  [\"\"]=>\n  int(1)\n}\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp0cm68sw7.php:45\nStack trace:\n\
    #0 /tmp/tmp0cm68sw7.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp0cm68sw7.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $letters = str_split($test);\n    $letterCount\
    \ = array_count_values($letters);\n    arsort($letterCount);\n    $countMax =\
    \ array_keys($letterCount)[0];\n    $result = [];\n    foreach ($letterCount as\
    \ $key => $value) {\n        if ($value === $countMax) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpal5nq9nd.php:30\n\
    Stack trace:\n#0 /tmp/tmpal5nq9nd.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpal5nq9nd.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $array = explode(' ', $test);\n    $hash = array_count_values($array);\n\
    \    arsort($hash);\n    $max = max($hash);\n    $result = array_keys($hash, $max);\n\
    \    $resp = array();\n    foreach ($result as $key) {\n        $resp[$key] =\
    \ $max;\n    }\n    return $resp;\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf842n8ax.php:34\n\
    Stack trace:\n#0 /tmp/tmpf842n8ax.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpf842n8ax.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $result = [];\n    $letters = explode(' ', $test);\n\
    \    foreach ($letters as $letter) {\n        if (!array_key_exists($letter, $result))\
    \ {\n            $result[$letter] = 1;\n        } else {\n            $result[$letter]++;\n\
    \        }\n    }\n    return $result;\n}\necho json_encode(histogram('a b c a\
    \ b'));\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "{\"a\":2,\"b\":2,\"c\":1}\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpm0yul17w.php:30\nStack trace:\n#0 /tmp/tmpm0yul17w.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmpm0yul17w.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $res = array();\n    $tab = explode(\" \", $test);\n\
    \    $max = 0;\n    foreach ($tab as $val) {\n        if (array_key_exists($val,\
    \ $res)) {\n            $res[$val]++;\n        } else {\n            $res[$val]\
    \ = 1;\n        }\n        if ($res[$val] > $max) {\n            $max = $res[$val];\n\
    \        }\n    }\n    foreach ($res as $key => $val) {\n        if ($val < $max)\
    \ {\n            unset($res[$key]);\n        }\n    }\n    return $res;\n}\n\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcu2l28q.php:44\n\
    Stack trace:\n#0 /tmp/tmplcu2l28q.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplcu2l28q.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $letters = explode(' ', $test);\n  $output = [];\n\
    \  foreach ($letters as $letter) {\n    $output[$letter] = 0;\n  }\n  foreach\
    \ ($letters as $letter) {\n    $output[$letter] += 1;\n  }\n  $max = max($output);\n\
    \  $key = [];\n  foreach ($output as $k => $v) {\n    if ($v == $max) {\n    \
    \  $key[] = $k;\n    }\n  }\n  $result = [];\n  foreach ($key as $value) {\n \
    \   $result[$value] = $max;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0gv1fffp.php:45\n\
    Stack trace:\n#0 /tmp/tmp0gv1fffp.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp0gv1fffp.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $a = explode(' ', $test);\n    $b = array_count_values($a);\n\
    \    $r = array();\n    $max = 0;\n    foreach ($b as $k => $v) {\n        if\
    \ ($v > $max) {\n            $max = $v;\n            $r = array($k => $v);\n \
    \       } elseif ($v == $max) {\n            $r[$k] = $v;\n        }\n    }\n\
    \    return $r;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37ybx7_o.php:38\n\
    Stack trace:\n#0 /tmp/tmp37ybx7_o.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp37ybx7_o.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $charCount = [];\n    $test = str_split($test);\n\
    \    foreach ($test as $char) {\n        $charCount[$char] = ($charCount[$char]\
    \ ?? 0) + 1;\n    }\n    $maxCount = max($charCount);\n    return array_filter($charCount,\
    \ function ($count) use ($maxCount) {\n        return $count === $maxCount;\n\
    \    }, ARRAY_FILTER_USE_BOTH);\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmproqoirgw.php:28\n\
    Stack trace:\n#0 /tmp/tmproqoirgw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmproqoirgw.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  //    Write your code here\n    $test_arr = str_split($test);\n\
    \    $len = count($test_arr);\n    $count_arr = [];\n    $result = [];\n    $max\
    \ = 0;\n    for ($i = 0; $i < $len; $i++) {\n        if (array_key_exists($test_arr[$i],\
    \ $count_arr)) {\n            $count_arr[$test_arr[$i]] = $count_arr[$test_arr[$i]]\
    \ + 1;\n        } else {\n            $count_arr[$test_arr[$i]] = 1;\n       \
    \ }\n    }\n    foreach ($count_arr as $key => $value) {\n        if ($value >\
    \ $max) {\n            $max = $value;\n        }\n    }\n    foreach ($count_arr\
    \ as $key => $value) {\n        if ($value == $max) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    return $result;\n}\n\necho implode(', ', histogram('a\
    \ b c'));\necho \"\\n\";\necho implode(', ', histogram('a b b a'));\necho \"\\\
    n\";\necho implode(', ', histogram('a b c a b'));\necho \"\\n\";\necho implode(',\
    \ ', histogram('b b b b a'));\necho \"\\n\";\necho implode(', ', histogram(''));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n3\n4\n4, 4\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu50yvmr2.php:53\n\
    Stack trace:\n#0 /tmp/tmpu50yvmr2.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpu50yvmr2.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $occurrences = [];\n  foreach (explode(' ', $test)\
    \ as $letter) {\n    if (!array_key_exists($letter, $occurrences)) {\n      $occurrences[$letter]\
    \ = 0;\n    }\n    $occurrences[$letter]++;\n  }\n  $max_value = max($occurrences);\n\
    \  return array_filter($occurrences, function($value) use ($max_value) {\n   \
    \ return $value == $max_value;\n  });\n}\n\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdeyz_ctp.php:36\n\
    Stack trace:\n#0 /tmp/tmpdeyz_ctp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdeyz_ctp.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $test_array = explode(\" \", $test);\n  $frequency\
    \ = array_count_values($test_array);\n  arsort($frequency);\n  $max_value = max($frequency);\n\
    \  foreach ($frequency as $key => $value) {\n    if ($value < $max_value) {\n\
    \      unset($frequency[$key]);\n    }\n  }\n  return $frequency;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifav6067.php:35\n\
    Stack trace:\n#0 /tmp/tmpifav6067.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpifav6067.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $counts = [];\n    foreach (str_split($test)\
    \ as $letter) {\n        if (isset($counts[$letter])) {\n            $counts[$letter]++;\n\
    \        } else {\n            $counts[$letter] = 1;\n        }\n    }\n    $max\
    \ = max($counts);\n    $result = [];\n    foreach ($counts as $letter => $count)\
    \ {\n        if ($count == $max) {\n            $result[$letter] = $count;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjf8wp5g1.php:35\n\
    Stack trace:\n#0 /tmp/tmpjf8wp5g1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjf8wp5g1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $arr = array_count_values(explode(' ', $test));\n\
    \    arsort($arr);\n    $max = max($arr);\n    foreach($arr as $key => $value)\
    \ {\n        if ($value < $max) {\n            unset($arr[$key]);\n        }\n\
    \    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvyjtbkiv.php:33\n\
    Stack trace:\n#0 /tmp/tmpvyjtbkiv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvyjtbkiv.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $input = preg_split('/\\s+/', $test);\n    $output\
    \ = [];\n    foreach ($input as $char) {\n        isset($output[$char]) ? $output[$char]++\
    \ : $output[$char] = 1;\n    }\n    $max = max($output);\n    $output = array_filter($output,\
    \ function ($value) use ($max) {\n        return $value == $max;\n    });\n  \
    \  return $output;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppvn8b8b4.php:35\n\
    Stack trace:\n#0 /tmp/tmppvn8b8b4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmppvn8b8b4.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $test_array = explode(\" \", $test);\n    $char_counter\
    \ = [];\n    foreach ($test_array as $char) {\n        if (isset($char_counter[$char]))\
    \ {\n            $char_counter[$char]++;\n        } else {\n            $char_counter[$char]\
    \ = 1;\n        }\n    }\n    arsort($char_counter);\n    $top_char = array_keys($char_counter)[0];\n\
    \    $top_count = $char_counter[$top_char];\n    foreach ($char_counter as $char\
    \ => $count) {\n        if ($count < $top_count) {\n            unset($char_counter[$char]);\n\
    \        }\n    }\n    return $char_counter;\n}\n\necho histogram('a b c');\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvflbo93.php:44\n\
    Stack trace:\n#0 /tmp/tmpqvflbo93.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqvflbo93.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $words = explode(' ', $test);\n  $result = [];\n\
    \  foreach ($words as $word) {\n    if (array_key_exists($word, $result)) {\n\
    \      $result[$word]++;\n    } else {\n      $result[$word] = 1;\n    }\n  }\n\
    \  $max = max($result);\n  $histogram = [];\n  foreach ($result as $key => $value)\
    \ {\n    if ($value == $max) {\n      $histogram[$key] = $value;\n    }\n  }\n\
    \  return $histogram;\n}\n\n$test1 = 'a b c';\nprint_r(histogram($test1));\n$test2\
    \ = 'a b b a';\nprint_r(histogram($test2));\n$test3 = 'a b c a b';\nprint_r(histogram($test3));\n\
    $test4 = 'b b b b a';\nprint_r(histogram($test4));\n$test5 = '';\nprint_r(histogram($test5));\n\
    $test6 = 'a b c d e f g h i j k l m n o p q r s t u v w x y z';\nprint_r(histogram($test6));\n\
    $test7 = 'a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h\
    \ i j k l m n o p q r s t u v w x y z';\nprint_r(histogram($test7));\n$test8 =\
    \ 'a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpod3zet9f.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n  $max = 0;\n  $test = array_count_values(str_split($test));\n\
    \  $output = [];\n  foreach ($test as $item => $value) {\n    if ($value == $max)\
    \ {\n      $output[] = $item;\n    } elseif ($value > $max) {\n      $max = $value;\n\
    \      $output = [$item];\n    }\n  }\n  return array_fill_keys($output, $max);\n\
    }\nvar_dump(histogram('a b c a b'));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(1) {\n  [\" \"]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8lb739sf.php:31\nStack trace:\n#0 /tmp/tmp8lb739sf.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8lb739sf.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    // histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\
    function histogram($test) {\n    $array = explode(' ', $test);\n    $result =\
    \ [];\n    foreach ($array as $key => $value) {\n        if (isset($result[$value]))\
    \ {\n            $result[$value] += 1;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbjgq85fk.php:29\n\
    Stack trace:\n#0 /tmp/tmpbjgq85fk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbjgq85fk.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
