name: HumanEval_160_do_algebra
language: php
prompt: "<?php\n// Given two lists operator, and operand. The first list has basic\
  \ algebra operations, and \n// the second list is a list of integers. Use the two\
  \ given lists to build the algebric \n// expression and return the evaluation of\
  \ this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
  \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
  \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n//\
  \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
  \ list is equal to the length of operand list minus one.\n// Operand is a list of\
  \ of non-negative integers.\n// Operator list has at least one operator, and operand\
  \ list has at least two operands.\nfunction do_algebra($operator, $operand) {\n"
tests: "function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
  \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $result = '';\n  for ($i = 0; $i < count($operator); $i++) {\n  \
    \  $result .= $operand[$i];\n    $result .= $operator[$i];\n  }\n  $result .=\
    \ $operand[count($operand) - 1];\n  return eval(\"return $result;\");\n}\necho\
    \ do_algebra(['+', '*', '-'], [2, 3, 4, 5]);", "  $result = array_shift($operand);\n\
    \  foreach ($operator as $index => $o) {\n    switch ($o) {\n      case '+':\n\
    \        $result += $operand[$index];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$index];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$index];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$index]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$index]);\n        break;\n    }\n  }\n  return $result;\n}\n\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])); // 9\nprint_r(do_algebra(['+', '*', '-'], [3, 7,\
    \ 8, 1])); // 72\nprint_r(do_algebra(['+', '*', '-'], [10, 20, 30, 40])); // 700\n\
    print_r(do_algebra(['+', '*', '-'], [3, 7, 8, 1])); // 72\nprint_r(do_algebra(['+',\
    \ '*', '-'], [5, 5, 2, 10])); // 65\nprint_r(do_algebra(['+', '//', '-'], [2,\
    \ 3, 4, 5])); // -1\nprint_r(do_algebra(['+', '**', '-'], [2, 3, 4, 5])); // -6\n\
    print_r(do_algebra(['+', '**', '-'], [10, 10, 2, 3])); // -990", "    $operandCount\
    \ = count($operand);\n    $operatorCount = count($operator);\n    $i = 0;\n  \
    \  $result = 0;\n    if($operandCount <= 1) {\n        return 0;\n    }\n    if($operatorCount\
    \ >= $operandCount) {\n        return 0;\n    }\n    if($operatorCount == 1) {\n\
    \        $result = $operand[0];\n        $result += $operand[1];\n        for($i\
    \ = 1; $i < $operandCount - 1; $i++) {\n            $result += $operand[$i + 1];\n\
    \        }\n        return $result;\n    }\n    if($operatorCount == 2) {\n  \
    \      $result = $operand[0];\n        $result += $operand[1];\n        $result\
    \ *= $operand[2];\n        for($i = 2; $i < $operandCount - 1; $i++) {\n     \
    \       $result *= $operand[$i + 1];\n        }\n        return $result;\n   \
    \ }\n    if($operatorCount == 3) {\n        $result = $operand[0];\n        $result\
    \ += $operand[1];\n        $result *= $operand[2];\n        $result -= $operand[3];\n\
    \        for($i = 3; $i < $operandCount - 1; $i++) {\n            $result -= $operand[$i\
    \ + 1];\n        }\n        return $result;\n    }\n}", "\t$previous = array_shift($operand);\n\
    \tforeach ($operator as $key => $o) {\n\t\t$current = array_shift($operand);\n\
    \t\tswitch ($o) {\n\t\t\tcase '+':\n\t\t\t\t$previous += $current;\n\t\t\t\tbreak;\n\
    \t\t\tcase '-':\n\t\t\t\t$previous -= $current;\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\
    \t\t\t\t$previous *= $current;\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$previous\
    \ = (int) ($previous / $current);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t\
    $previous = pow($previous, $current);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $previous;\n\
    }\n\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5])); // 9\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 6])); // 12\nprint_r(do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5, 6, 7])); // 17\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6,\
    \ 7, 8])); // 25\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9]));\
    \ // 34\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10])); //\
    \ 44\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\
    \ // 55\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11,",
  "    $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n \
    \       if ($operator[$i] == '+') {\n            $result += $operand[$i + 1];\n\
    \        } else if ($operator[$i] == '-') {\n            $result -= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '*') {\n            $result *= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '//') {\n            $result /= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '**') {\n            $result **=\
    \ $operand[$i + 1];\n        }\n    }\n    return $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\";\necho do_algebra(['+', '+', '-', '//'],\
    \ [10, 20, 30, 40]) . \"\\n\";\necho do_algebra(['+', '+', '-'], [10, 20, 30])\
    \ . \"\\n\";\necho do_algebra(['+', '+', '-'], [5, 7, 9]) . \"\\n\";\necho do_algebra(['*',\
    \ '//', '+'], [5, 3, 2]) . \"\\n\";", "  $result = 0;\n  $ops = [\"+\", \"-\"\
    , \"*\", \"//\", \"**\"];\n  $operators = array_map(function($el) use ($ops) {\n\
    \    $operator = str_replace($ops, $ops, $el);\n    return $operator;\n  }, $operator);\n\
    \  for ($i = 0; $i < count($operators); $i++) {\n    if ($i === 0) {\n      $result\
    \ = eval(\"return {$operand[$i]} {$operators[$i]} {$operand[$i + 1]};\");\n  \
    \  } else {\n      $result = eval(\"return {$result} {$operators[$i]} {$operand[$i\
    \ + 1]};\");\n    }\n  }\n  return $result;\n}\n$operator = [\"+\", \"*\", \"\
    -\"];\n$operand = [2, 3, 4, 5];\n$result = do_algebra($operator, $operand);\n\
    echo(\"$result\\n\");", "  $result = array_shift($operand);\n  foreach ($operator\
    \ as $i => $op) {\n    $result = ($op == '+') ? $result + $operand[$i] :\n   \
    \   ($op == '-') ? $result - $operand[$i] :\n      ($op == '*') ? $result * $operand[$i]\
    \ :\n      ($op == '//') ? $result / $operand[$i] :\n      $result ** $operand[$i];\n\
    \  }\n  return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3,\
    \ 4, 5];\n\necho do_algebra($operator, $operand);", "    // Write your code here...\n\
    }\n", "    $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++)\
    \ {\n        if ($operator[$i] == '+') {\n            $result += $operand[$i +\
    \ 1];\n        } else if ($operator[$i] == '-') {\n            $result -= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '*') {\n            $result *= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '//') {\n            $result = floor($result\
    \ / $operand[$i + 1]);\n        } else if ($operator[$i] == '**') {\n        \
    \    $result = pow($result, $operand[$i + 1]);\n        }\n    }\n    return $result;\n\
    }\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);", "  \n}\n", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);", "  // Write your code here ...\n  $result = $operand[0];\n\
    \  for($i = 0; $i < count($operator); $i++){\n    if($operator[$i] == '+'){\n\
    \      $result += $operand[$i+1];\n    }else if($operator[$i] == '-'){\n     \
    \ $result -= $operand[$i+1];\n    }else if($operator[$i] == '*'){\n      $result\
    \ *= $operand[$i+1];\n    }else if($operator[$i] == '//'){\n      $result = intdiv($result,\
    \ $operand[$i+1]);\n    }else if($operator[$i] == '**'){\n      $result = pow($result,\
    \ $operand[$i+1]);\n    }\n  }\n  return $result;\n}", "  $result = 0;\n  $numOperands\
    \ = count($operand);\n  $operatorIndex = 0;\n  $isLeftOperand = True;\n  for ($operandIndex\
    \ = 0; $operandIndex < $numOperands; $operandIndex++) {\n    if ($isLeftOperand)\
    \ {\n      $result = $operand[$operandIndex];\n      $isLeftOperand = False;\n\
    \    } else {\n      $nextOperand = $operand[$operandIndex];\n      $result =\
    \ apply_operator($result, $operator[$operatorIndex], $nextOperand);\n      $operatorIndex++;\n\
    \      $isLeftOperand = True;\n    }\n  }\n  return $result;\n}\n", "  $result\
    \ = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    if ($operator[$i]\
    \ == '+') {\n      $result += $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '-') {\n      $result -= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '*') {\n      $result *= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '//') {\n      $result = floor($result / $operand[$i + 1]);\n    } else if\
    \ ($operator[$i] == '**') {\n      $result = pow($result, $operand[$i + 1]);\n\
    \    }\n  }\n  return $result;\n}\necho do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]) . \"\\n\"; // 9\necho do_algebra(['+', '**', '-'], [2, 3, 4, 5]) . \"\\\
    n\"; // 3\necho do_algebra(['+', '**', '//'], [2, 3, 4, 5]) . \"\\n\"; // 2\n\
    echo do_algebra(['//', '**', '+'], [2, 3, 4, 5]) . \"\\n\"; // 3", "  // Write\
    \ your code here\n  // To print results to the standard output you can use print\n\
    \  // Example: print \"Hello world!\";\n  $output = \"\";\n  for($i = 0; $i <\
    \ count($operator); $i++){\n    $output = $output . \"(\" . $operand[$i] . $operator[$i]\
    \ . $operand[$i+1] . \")\";\n  }\n  return eval(\"return $output;\");\n}\n\nprint_r(do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]));", "    $operator_map = [\n        '+' => function($a,\
    \ $b) { return $a + $b; },\n        '-' => function($a, $b) { return $a - $b;\
    \ },\n        '*' => function($a, $b) { return $a * $b; },\n        '//' => function($a,\
    \ $b) { return floor($a / $b); },\n        '**' => function($a, $b) { return pow($a,\
    \ $b); },\n    ];\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        $result = $operator_map[$operator[$i]]($result, $operand[$i\
    \ + 1]);\n    }\n    return $result;\n}\n\n$res = do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]);\nvar_dump($res);\n\n$res = do_algebra(['+', '-', '*'], [2, 3,\
    \ 4, 5]);\nvar_dump($res);\n\n$res = do_algebra(['+', '*', '**'], [2, 3, 4, 5]);\n\
    var_dump($res);\n\n$res = do_algebra(['+', '*', '//'], [2, 3, 4, 5]);\nvar_dump($res);\n\
    \n$res = do_algebra(['+', '*', '//'], [2, 3, 4, 5]);\nvar_dump($res);\n\n$res\
    \ = do_algebra(['+', '*', '//'], [2, 3, 4, 5]);\nvar_dump($res);\n\n$res = do_algebra(['+',\
    \ '-', '*', '//'], [2, 3, 4, 5, 6]);\nvar_dump($res);\n\n$res = do_algebra(['+',\
    \ '-', '*', '//', '**'], [2, 3, 4, 5, 6, 7]);\nvar_dump($res);\n\n$res = do_algebra(['+',\
    \ '*', '**',", "  $operand = array_reverse($operand);\n  foreach($operator as\
    \ $key) {\n    if($key == '+') {\n      $tmp = array_pop($operand) + array_pop($operand);\n\
    \      array_push($operand, $tmp);\n    }\n    if($key == '-') {\n      $tmp =\
    \ array_pop($operand) - array_pop($operand);\n      array_push($operand, $tmp);\n\
    \    }\n    if($key == '*') {\n      $tmp = array_pop($operand) * array_pop($operand);\n\
    \      array_push($operand, $tmp);\n    }\n    if($key == '//') {\n      $tmp\
    \ = array_pop($operand) // array_pop($operand);\n      array_push($operand, $tmp);\n\
    \    }\n    if($key == '**') {\n      $tmp = array_pop($operand) ** array_pop($operand);\n\
    \      array_push($operand, $tmp);\n    }\n  }\n  return $operand[0];\n}\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));", "  // Write your code here\n  // To print results\
    \ to the standard output you can use print\n  // Example: print \"Hello world!\"\
    ;\n  \n  $string = \"\";\n  for($i = 0; $i < count($operator); $i++){\n      $string\
    \ = $string . $operand[$i] . $operator[$i];\n  }\n  $string = $string . $operand[count($operand)-1];\n\
    \  return eval(\"return $string;\");\n}", "  $result = $operand[0];\n  $i = 0;\n\
    \  foreach($operator as $op) {\n    switch($op) {\n      case '+':\n        $result\
    \ += $operand[$i + 1];\n        break;\n      case '-':\n        $result -= $operand[$i\
    \ + 1];\n        break;\n      case '*':\n        $result *= $operand[$i + 1];\n\
    \        break;\n      case '//':\n        $result = floor($result / $operand[$i\
    \ + 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n    $i++;\n  }\n  return $result;\n}\n\necho\
    \ do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5, 6]) . \"\\n\"; // 2 + 3\
    \ - 4 * 5 // 6 ** 1 => 2\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\\
    n\"; // 2 + 3 * 4 - 5 => 9\necho do_algebra(['*', '*', '*'], [2, 3, 4, 5]) . \"\
    \\n\"; // 2 * 3 * 4 * 5 => 120\necho do_algebra(['*', '*', '*'], [2, 3, 4, 5,\
    \ 6]) . \"\\n\"; // 2 * 3 * 4 * 5 * 6 => 720\necho do_algebra(['*', '*', '*'],\
    \ [2, 3, 4, 5, 6, 7]) . \"\\n\"; // 2 * 3 * 4 * 5 * 6 * 7 => 5040\necho do_algebra(['//',\
    \ '*', '*'], [2, 3, 4, 5, 6, 7]) . \"\\n\"; // 2 // 3 * 4 * 5 * 6 * 7 => 0\necho\
    \ do_algebra(['//', '*', '*'], [2, 3, 4, 5, 6, 7, 8]) . \"\\n\"; // 2 // 3 * 4\
    \ * 5 * 6 * 7 * 8 => 0\necho do", "    // Write your code here...\n    $sum =\
    \ 0;\n    if(count($operator) > 0 && count($operand) > 0) {\n        $sum = $operand[0];\n\
    \        for($i = 0; $i < count($operator); $i++) {\n            switch($operator[$i])\
    \ {\n                case '+':\n                    $sum += $operand[$i + 1];\n\
    \                    break;\n                case '-':\n                    $sum\
    \ -= $operand[$i + 1];\n                    break;\n                case '*':\n\
    \                    $sum *= $operand[$i + 1];\n                    break;\n \
    \               case '//':\n                    $sum = floor($sum / $operand[$i\
    \ + 1]);\n                    break;\n                case '**':\n           \
    \         $sum = pow($sum, $operand[$i + 1]);\n                    break;\n  \
    \          }\n        }\n    }\n    return $sum;\n}\n$operator = ['+', '*', '-'];\n\
    $operand = [2, 3, 4, 5];\nprint_r(do_algebra($operator, $operand));", "  $result\
    \ = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i])\
    \ {\n      case '+':\n        $result += $operand[$i + 1];\n        break;\n \
    \     case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}", "    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$i + 1];\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = array_shift($operand);\n\
    \    foreach ($operator as $key => $value) {\n        switch ($value) {\n    \
    \        case '+':\n                $result += $operand[$key];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$key];\n\
    \                break;\n            case '*':\n                $result *= $operand[$key];\n\
    \                break;\n            case '//':\n                $result /= $operand[$key];\n\
    \                break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$key]);\n                break;\n        }\n    }\n    return $result;\n\
    }\n", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n\
    \    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);", "  $result = 0;\n  $expression = \"\";\n  for ($i\
    \ = 0; $i < count($operator); $i++) {\n    if ($i === 0) {\n      $expression\
    \ .= $operand[$i] . $operator[$i];\n    } else {\n      $expression .= $operand[$i]\
    \ . $operator[$i];\n    }\n  }\n  $expression .= $operand[count($operand) - 1];\n\
    \  eval(\"\\$result = $expression;\");\n  return $result;\n}\n", "    $result\
    \ = array_shift($operand);\n    for ($i = 0; $i < count($operator); $i++) {\n\
    \        switch ($operator[$i]) {\n            case '+':\n                $result\
    \ += $operand[$i];\n                break;\n            case '-':\n          \
    \      $result -= $operand[$i];\n                break;\n            case '*':\n\
    \                $result *= $operand[$i];\n                break;\n          \
    \  case '//':\n                $result = floor($result / $operand[$i]);\n    \
    \            break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i]);\n                break;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(do_algebra(['+', '*', '-', '//', '**'], [2, 3, 4, 5, 5]));", "  \
    \  // your code here\n    $total = $operand[0];\n    foreach($operator as $index\
    \ => $op) {\n        switch($op) {\n            case '+':\n                $total\
    \ += $operand[$index + 1];\n                break;\n            case '-':\n  \
    \              $total -= $operand[$index + 1];\n                break;\n     \
    \       case '*':\n                $total *= $operand[$index + 1];\n         \
    \       break;\n            case '//':\n                $total = floor($total\
    \ / $operand[$index + 1]);\n                break;\n            case '**':\n \
    \               $total = pow($total, $operand[$index + 1]);\n                break;\n\
    \        }\n    }\n    return $total;\n}\n\nprint_r(do_algebra([\"+\", \"-\"],\
    \ [4, 5, 6]));\nprint_r(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]));", " \
    \   $result = array_shift($operand);\n    foreach ($operator as $key => $op) {\n\
    \        switch ($op) {\n            case '+':\n                $result += $operand[$key];\n\
    \                break;\n            case '-':\n                $result -= $operand[$key];\n\
    \                break;\n            case '*':\n                $result *= $operand[$key];\n\
    \                break;\n            case '//':\n                $result /= $operand[$key];\n\
    \                break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$key]);\n                break;\n        }\n    }\n    return $result;\n\
    }\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand) . \"\\n\";", "    $res = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $res += $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $res -= $operand[$i + 1];\n                break;\n         \
    \   case '*':\n                $res *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $res /= $operand[$i + 1];\n         \
    \       break;\n            case '**':\n                $res **= $operand[$i +\
    \ 1];\n                break;\n        }\n    }\n    return $res;\n}\n\nprint_r(do_algebra(['+',\
    \ '-', '*'], [2, 3, 4, 5]));\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\n\
    print_r(do_algebra(['+', '*', '-', '//'], [2, 3, 4, 5, 6]));\nprint_r(do_algebra(['+',\
    \ '*', '-', '//', '**'], [2, 3, 4, 5, 6, 7]));\nprint_r(do_algebra(['+', '*',\
    \ '-', '//', '**'], [2, 3, 4, 5, 6, 7, 0]));\nprint_r(do_algebra(['+', '-', '*',\
    \ '//', '**'], [1, 2, 3, 4, 5, 6, 7, 0]));\nprint_r(do_algebra(['//', '+', '-',\
    \ '*', '**'], [1, 2, 3, 4, 5, 6, 7, 0]));\nprint_r(do_algebra(['+', '-', '*',\
    \ '//', '**'], [1, 2, 3, 4, 5, 6, 7, 0]));\nprint_r(do_algebra(['**', '+', '-',\
    \ '*', '//'],", "  $operations = [\n    '+' => function($a, $b) { return $a +\
    \ $b; },\n    '-' => function($a, $b) { return $a - $b; },\n    '*' => function($a,\
    \ $b) { return $a * $b; },\n    '//' => function($a, $b) { return floor($a / $b);\
    \ },\n    '**' => function($a, $b) { return pow($a, $b); }\n  ];\n  $countOperator\
    \ = count($operator);\n  $countOperand = count($operand);\n  $total = $operand[0];\n\
    \  for ($i = 0; $i < $countOperator; $i++) {\n    $total = $operations[$operator[$i]]($total,\
    \ $operand[$i + 1]);\n  }\n  return $total;\n}\n", "}\necho do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]) . PHP_EOL;", "  $num=count($operand);\n  $numOp=count($operator);\n\
    \  $i=0;\n  $res=0;\n  while ($i<$num) {\n    $n1=$operand[$i];\n    $n2=$operand[$i+1];\n\
    \    $op=$operator[$i];\n    if($op==\"+\")\n      $res=$n1+$n2;\n    else if($op==\"\
    -\")\n      $res=$n1-$n2;\n    else if($op==\"*\")\n      $res=$n1*$n2;\n    else\
    \ if($op==\"/\")\n      $res=floor($n1/$n2);\n    else\n      $res=pow($n1,$n2);\n\
    \    $operand[$i+1]=$res;\n    $i++;\n  }\n  return $res;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]).\"\\n\"; // => 9\necho do_algebra(['+', '-', '*'],\
    \ [1, 2, 3, 4, 5]).\"\\n\"; // => -8\necho do_algebra(['+', '-', '*', '/'], [5,\
    \ 10, 2, 4, 2]).\"\\n\"; // => 6.25\necho do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5, 6]).\"\\n\"; // => 15\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7]).\"\
    \\n\"; // => 21\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8]).\"\\\
    n\"; // => 28\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9]).\"\\\
    n\"; // => 36\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10]).\"\
    \\n\"; // => 45\n", "    $answer = null;\n    if(sizeof($operator) === sizeof($operand)\
    \ - 1){\n        foreach($operator as $key => $value){\n            if($key ===\
    \ 0){\n                $answer = $operand[$key] . $value . $operand[$key + 1];\n\
    \            } else {\n                $answer = $answer . $value . $operand[$key\
    \ + 1];\n            }\n        }\n    }\n    return eval(\"return {$answer};\"\
    );\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);", "    for ($i = 0; $i < count($operator); $i++) {\n        switch\
    \ ($operator[$i]) {\n            case '+':\n                $operand[$i + 1] =\
    \ $operand[$i] + $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $operand[$i + 1] = $operand[$i] - $operand[$i + 1];\n       \
    \         break;\n            case '*':\n                $operand[$i + 1] = $operand[$i]\
    \ * $operand[$i + 1];\n                break;\n            case '//':\n      \
    \          $operand[$i + 1] = floor($operand[$i] / $operand[$i + 1]);\n      \
    \          break;\n            case '**':\n                $operand[$i + 1] =\
    \ pow($operand[$i], $operand[$i + 1]);\n                break;\n        }\n  \
    \  }\n    return $operand[count($operand) - 1];\n}\n", "    $result = $operand[0];\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i + 1];\n   \
    \             break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result = (int)($result / $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $result = pow($result, $operand[$i +\
    \ 1]);\n                break;\n        }\n    }\n    return $result;\n}\n", " \
    \   $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n\
    \        switch ($operator[$i]) {\n            case '+':\n                $result\
    \ += $operand[$i + 1];\n                break;\n            case '-':\n      \
    \          $result -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $result = floor($result / $operand[$i\
    \ + 1]);\n                break;\n            case '**':\n                $result\
    \ = pow($result, $operand[$i + 1]);\n                break;\n        }\n    }\n\
    \    return $result;\n}\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . PHP_EOL;\
    \ // => 9\necho do_algebra(['+', '//', '**'], [2, 3, 2, 5]) . PHP_EOL; // => 2\n\
    echo do_algebra(['+', '*', '-'], [2, 3, 4, 5, 10]) . PHP_EOL; // => -5\necho do_algebra(['+',\
    \ '//', '-'], [2, 3, 4, 5, 10]) . PHP_EOL; // => -2\necho do_algebra(['+', '//',\
    \ '**'], [2, 3, 2, 5, 10]) . PHP_EOL; // => 1024", "  $result = array_shift($operand);\n\
    \  foreach ($operator as $key => $value) {\n    $result = calc($result, array_shift($operand),\
    \ $value);\n  }\n  return $result;\n}\n", "    $result = $operand[0];\n    for\
    \ ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n\
    \            case '+':\n                $result += $operand[$i + 1];\n       \
    \         break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result /= $operand[$i + 1];\n                break;\n           \
    \ case '**':\n                $result **= $operand[$i + 1];\n                break;\n\
    \        }\n    }\n    return $result;\n}\necho do_algebra(['+', '-', '*'], [2,\
    \ 3, 4]);", "    // Write your code here...\n    $result = 0;\n    for($i = 0;\
    \ $i < count($operator); $i++){\n        switch($operator[$i]){\n            case\
    \ '+':\n                $result += $operand[$i];\n                break;\n   \
    \         case '-':\n                $result -= $operand[$i];\n              \
    \  break;\n            case '*':\n                $result *= $operand[$i];\n \
    \               break;\n            case '//':\n                $result /= $operand[$i];\n\
    \                break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i]);\n                break;\n        }\n    }\n    return $result;\n\
    }\n\n$operators = ['+', '*', '-'];\n$numbers = [2, 3, 4, 5];\necho do_algebra($operators,\
    \ $numbers);", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    if ($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '//') {\n      $result = floor($result / $operand[$i\
    \ + 1]);\n    } else if ($operator[$i] == '**') {\n      $result = pow($result,\
    \ $operand[$i + 1]);\n    }\n  }\n  return $result;\n}\n$operator = [\"+\", \"\
    *\", \"//\", \"-\", \"**\"];\n$operand = [3, 2, 5, 4, 3];\necho do_algebra($operator,\
    \ $operand);", "    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\n", "  // Write your code here...\n\
    \  $result = $operand[0];\n  for($i = 0; $i < count($operator); $i++){\n    switch($operator[$i]){\n\
    \      case '+':\n        $result += $operand[$i+1];\n        break;\n      case\
    \ '-':\n        $result -= $operand[$i+1];\n        break;\n      case '*':\n\
    \        $result *= $operand[$i+1];\n        break;\n      case '//':\n      \
    \  $result = floor($result / $operand[$i+1]);\n        break;\n      case '**':\n\
    \        $result = pow($result, $operand[$i+1]);\n        break;\n    }\n  }\n\
    \  return $result;\n}\n\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));",
  "  $result = array_shift($operand);\n  foreach ($operator as $key => $value) {\n\
    \    switch ($value) {\n      case '+':\n        $result += $operand[$key];\n\
    \        break;\n      case '-':\n        $result -= $operand[$key];\n       \
    \ break;\n      case '*':\n        $result *= $operand[$key];\n        break;\n\
    \      case '//':\n        $result = intval($result / $operand[$key]);\n     \
    \   break;\n      case '**':\n        $result = $result ** $operand[$key];\n \
    \       break;\n    }\n  }\n  return $result;\n}\n\necho do_algebra(['+', '-',\
    \ '**'], [2, 3, 4, 5]);\necho PHP_EOL;\necho do_algebra(['+', '-', '**'], [1,\
    \ 1, 1, 2]);\necho PHP_EOL;\necho do_algebra(['+', '-', '**'], [1, 2, 3, 4]);\n\
    echo PHP_EOL;\necho do_algebra(['+', '-', '**'], [10, 2, 2, 2]);\necho PHP_EOL;\n\
    echo do_algebra(['+', '-', '**'], [10, 2, 2, 2]);\necho PHP_EOL;\necho do_algebra(['*',\
    \ '//', '**'], [2, 3, 4, 5]);\necho PHP_EOL;\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]);\necho PHP_EOL;\necho do_algebra(['*', '-', '+'], [2, 3, 4, 5]);\n\
    echo PHP_EOL;\necho do_algebra(['*', '+', '-'], [2, 3, 4, 5]);\necho PHP_EOL;\n\
    echo do_algebra(['+', '*', '//'], [2, 3, 4, 5]);\necho PHP_EOL;\necho do_algebra(['-',\
    \ '*', '+'],", "  // Write your code here...\n}\n\necho do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]); //=> 9\necho do_algebra(['+', '-', '*'], [2, 3, 4, 5]);\
    \ //=> -11\necho do_algebra(['+', '*', '*'], [2, 3, 4, 5]); //=> 150\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, -5]); //=> 17\necho do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, -5, -6]); //=> -28\necho do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7]);\
    \ //=> -45\necho do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7, -8]); //=>\
    \ -69\necho do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7, -8, -9]); //=> -98\n\
    echo do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7, -8, -9, -10]); //=> -132\n\
    echo do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7, -8, -9, -10, -11]); //=>\
    \ -171\necho do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7, -8, -9, -10, -11,\
    \ -12]); //=> -216\necho do_algebra(['+', '*', '-'], [2, 3, 4, -5, -6, -7, -8,\
    \ -9, -10, -11, -12, -13]); //=> -267\necho do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, -5, -6, -7, -8, -9", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = (int)($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n", "  $result = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    if ($operator[$i] == '+')\
    \ {\n      $result += $operand[$i + 1];\n    } else if ($operator[$i] == '-')\
    \ {\n      $result -= $operand[$i + 1];\n    } else if ($operator[$i] == '*')\
    \ {\n      $result *= $operand[$i + 1];\n    } else if ($operator[$i] == '//')\
    \ {\n      $result = floor($result / $operand[$i + 1]);\n    } else if ($operator[$i]\
    \ == '**') {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return\
    \ $result;\n}", "  $result = 0;\n  $operator_num = count($operator);\n  for ($i\
    \ = 0; $i < $operator_num; $i++) {\n    if ($i == 0) {\n      $result = $operand[$i];\n\
    \    }\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n", "  $expr = '';\n\
    \  for ($i = 0; $i < count($operand) - 1; $i++) {\n    $expr .= $operand[$i] .\
    \ $operator[$i];\n  }\n  $expr .= $operand[count($operand) - 1];\n  return eval(\"\
    return $expr;\");\n}\n", "    // Write your code here...\n    $result = 0;\n \
    \   $operator_count = count($operator);\n    for($i = 0; $i < $operator_count;\
    \ $i++){\n        if($i === 0){\n            $result = $operand[$i] . $operator[$i]\
    \ . $operand[$i+1];\n        } else {\n            $result = $result . $operator[$i]\
    \ . $operand[$i+1];\n        }\n    }\n    $result = eval(\"return $result;\"\
    );\n    return $result;\n}", "  $operators = [\"+\", \"-\", \"*\", \"//\", \"\
    **\"];\n  $operands = [];\n  foreach ($operand as $key => $value) {\n    if (in_array($operator[$key],\
    \ $operators)) {\n      $operands[] = $value;\n    }\n  }\n  $result = $operands[0];\n\
    \  foreach ($operator as $key => $value) {\n    if (in_array($value, $operators))\
    \ {\n      switch ($value) {\n        case \"+\":\n          $result += $operands[$key\
    \ + 1];\n          break;\n        case \"-\":\n          $result -= $operands[$key\
    \ + 1];\n          break;\n        case \"*\":\n          $result *= $operands[$key\
    \ + 1];\n          break;\n        case \"//\":\n          $result = floor($result\
    \ / $operands[$key + 1]);\n          break;\n        case \"**\":\n          $result\
    \ = pow($result, $operands[$key + 1]);\n          break;\n      }\n    }\n  }\n\
    \  return $result;\n}\n", "  $res = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $res += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $res -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $res *= $operand[$i + 1];\n        break;\n\
    \      case '//':\n        $res = floor($res / $operand[$i + 1]);\n        break;\n\
    \      case '**':\n        $res = pow($res, $operand[$i + 1]);\n        break;\n\
    \    }\n  }\n  return $res;\n}\n\n$operator = [\"+\", \"*\", \"-\"];\n$operand\
    \ = [2, 3, 4, 5];\necho do_algebra($operator, $operand);", "  // Write your code\
    \ here\n  // To print results to the standard output you can use print\n  // Example:\
    \ print \"Hello world!\";\n  \n}", "    $op = count($operator);\n    $opd = count($operand);\n\
    \    $result = '';\n    for ($i = 0; $i < $opd; $i++) {\n        if ($i == $opd\
    \ - 1) {\n            $result .= $operand[$i];\n        } else {\n           \
    \ $result .= $operand[$i] . $operator[$i];\n        }\n    }\n    return $result;\n\
    }\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);\n", "  $result = 0;\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    if ($i == 0) {\n      $result = $operand[$i] . $operator[$i] . $operand[$i\
    \ + 1];\n    } else {\n      $result = $result . $operator[$i] . $operand[$i +\
    \ 1];\n    }\n  }\n  return $result;\n}", "  $result = $operand[0];\n  for ($i\
    \ = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case\
    \ '+':\n        $result += $operand[$i + 1];\n        break;\n      case '-':\n\
    \        $result -= $operand[$i + 1];\n        break;\n      case '*':\n     \
    \   $result *= $operand[$i + 1];\n        break;\n      case '//':\n        $result\
    \ /= $operand[$i + 1];\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\n$operator\
    \ = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\nprint do_algebra($operator, $operand);",
  "    $result = 0;\n    if ($operator[0] == '+') {\n        $result = $operand[0]\
    \ + $operand[1];\n    } else if ($operator[0] == '-') {\n        $result = $operand[0]\
    \ - $operand[1];\n    } else if ($operator[0] == '*') {\n        $result = $operand[0]\
    \ * $operand[1];\n    } else if ($operator[0] == '//') {\n        $result = floor($operand[0]\
    \ / $operand[1]);\n    } else if ($operator[0] == '**') {\n        $result = pow($operand[0],\
    \ $operand[1]);\n    }\n    if (count($operator) > 1) {\n        $operand[1] =\
    \ $result;\n        array_shift($operator);\n        array_shift($operand);\n\
    \        return do_algebra($operator, $operand);\n    }\n    return $result;\n\
    }\n$operator = ['+', '*', '**', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);", "    // Write your code here\n    $output = $operand[0];\n    for($i\
    \ = 0; $i < count($operator); $i++){\n        switch($operator[$i]){\n       \
    \     case '+': $output += $operand[$i+1];\n            break;\n            case\
    \ '-': $output -= $operand[$i+1];\n            break;\n            case '*': $output\
    \ *= $operand[$i+1];\n            break;\n            case '//': $output /= $operand[$i+1];\n\
    \            break;\n            case '**': $output = pow($output, $operand[$i+1]);\n\
    \            break;\n        }\n    }\n    return $output;\n}", "    $result =\
    \ $operand[0];\n    $i = 0;\n    foreach ($operator as $op) {\n        switch\
    \ ($op) {\n            case '+':\n                $result += $operand[$i + 1];\n\
    \                break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result = floor($result / $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $result = pow($result, $operand[$i +\
    \ 1]);\n                break;\n        }\n        $i++;\n    }\n    return $result;\n\
    }\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]);", "    $arr = [];\n    for\
    \ ($i = 0; $i < count($operator); $i++) {\n        array_push($arr, $operand[$i]);\n\
    \        array_push($arr, $operator[$i]);\n    }\n    array_push($arr, $operand[count($operand)\
    \ - 1]);\n    $str = join(\" \", $arr);\n    $str = str_replace('+', ' + ', $str);\n\
    \    $str = str_replace('-', ' - ', $str);\n    $str = str_replace('*', ' * ',\
    \ $str);\n    $str = str_replace('//', ' // ', $str);\n    $str = str_replace('**',\
    \ ' ** ', $str);\n    $str = str_replace('( ', '(', $str);\n    $str = str_replace('\
    \ )', ')', $str);\n    $str = str_replace('  ', ' ', $str);\n    $str = str_replace('\
    \ ', '', $str);\n    $str = str_replace('*-', '* -', $str);\n    $str = str_replace('*+',\
    \ '* +', $str);\n    $str = str_replace('/-', '/ -', $str);\n    $str = str_replace('/+',\
    \ '/ +', $str);\n    $str = str_replace('**-', '** -', $str);\n    $str = str_replace('**+',\
    \ '** +', $str);\n    $str = str_replace('+-', '+ -', $str);\n    $str = str_replace('++',\
    \ '+ +', $str);\n    $str = str_replace('--', '- -', $str);\n    $str = str_replace('+*',\
    \ '+ *', $str);\n    $str = str_replace('+/', '+ /', $str);\n    $str = str_replace('+**',\
    \ '+ **', $str);\n    $str = str_replace('-*', '- *', $str);\n    $str = str_replace('-/',\
    \ '- /', $str);\n    $str = str_replace('-**', '- **", "  $sum = 0;\n  $result\
    \ = $operand[0];\n  for($i = 0; $i < count($operator); $i++) {\n    if($operator[$i]\
    \ == '+') {\n      $result += $operand[$i + 1];\n    }\n    if($operator[$i] ==\
    \ '-') {\n      $result -= $operand[$i + 1];\n    }\n    if($operator[$i] == '*')\
    \ {\n      $result *= $operand[$i + 1];\n    }\n    if($operator[$i] == '//')\
    \ {\n      $result /= $operand[$i + 1];\n    }\n    if($operator[$i] == '**')\
    \ {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\n", "\t$res = $operand[0];\n\tfor ($i = 0; $i < count($operator); $i++) {\n\t\
    \tif ($operator[$i] == '+') {\n\t\t\t$res += $operand[$i + 1];\n\t\t} else if\
    \ ($operator[$i] == '-') {\n\t\t\t$res -= $operand[$i + 1];\n\t\t} else if ($operator[$i]\
    \ == '*') {\n\t\t\t$res *= $operand[$i + 1];\n\t\t} else if ($operator[$i] ==\
    \ '//') {\n\t\t\t$res = floor($res / $operand[$i + 1]);\n\t\t} else if ($operator[$i]\
    \ == '**') {\n\t\t\t$res = pow($res, $operand[$i + 1]);\n\t\t}\n\t}\n\treturn\
    \ $res;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);", "    $res = array_shift($operand);\n    foreach ($operator as $key\
    \ => $value) {\n        $res = calculation($res, $value, $operand[$key]);\n  \
    \  }\n    return $res;\n}\n", "  $res = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    if ($operator[$i] == \"+\") {\n      $res += $operand[$i + 1];\n\
    \    } else if ($operator[$i] == \"-\") {\n      $res -= $operand[$i + 1];\n \
    \   } else if ($operator[$i] == \"*\") {\n      $res *= $operand[$i + 1];\n  \
    \  } else if ($operator[$i] == \"//\") {\n      $res = floor($res / $operand[$i\
    \ + 1]);\n    } else if ($operator[$i] == \"**\") {\n      $res = pow($res, $operand[$i\
    \ + 1]);\n    }\n  }\n  return $res;\n}\n\necho do_algebra([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]);", "  // Your code here\n}\n", "    $ret = array_shift($operand);\n\
    \    foreach ($operator as $o) {\n        $m = array_shift($operand);\n      \
    \  if ($o == \"+\") {\n            $ret += $m;\n        } else if ($o == \"-\"\
    ) {\n            $ret -= $m;\n        } else if ($o == \"*\") {\n            $ret\
    \ *= $m;\n        } else if ($o == \"//\") {\n            $ret = intval($ret /\
    \ $m);\n        } else if ($o == \"**\") {\n            $ret = intval(pow($ret,\
    \ $m));\n        }\n    }\n    return $ret;\n}\n", "  // Your code here.\n  $result\
    \ = array_shift($operand);\n  for ($i = 0; $i < count($operator); $i++) {\n  \
    \  switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i];\n\
    \        break;\n      case '-':\n        $result -= $operand[$i];\n        break;\n\
    \      case '*':\n        $result *= $operand[$i];\n        break;\n      case\
    \ '//':\n        $result = floor($result / $operand[$i]);\n        break;\n  \
    \    case '**':\n        $result = pow($result, $operand[$i]);\n        break;\n\
    \    }\n  }\n  return $result;\n}\n$operator = array('+', '*', '-');\n$operand\
    \ = array(2, 3, 4, 5);\necho do_algebra($operator, $operand);\necho \"\\n\";\n\
    $operator = array('+', '+', '+', '+');\n$operand = array(10, 10, 10, 10, 10);\n\
    echo do_algebra($operator, $operand);\necho \"\\n\";", "    $result = array_shift($operand);\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i];\n       \
    \         break;\n            case '-':\n                $result -= $operand[$i];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n    }\n    return $result;\n}", "    $result = $operand[0];\n    $i = 0;\n\
    \    while ($i < count($operator)) {\n        switch ($operator[$i]) {\n     \
    \       case '+':\n                $result += $operand[$i + 1];\n            \
    \    break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$i + 1];\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\n", "  $result = array_shift($operand);\n\
    \  foreach ($operator as $index => $value) {\n    switch ($value) {\n      case\
    \ '+':\n        $result += $operand[$index];\n        break;\n      case '-':\n\
    \        $result -= $operand[$index];\n        break;\n      case '*':\n     \
    \   $result *= $operand[$index];\n        break;\n      case '//':\n        $result\
    \ = floor($result / $operand[$index]);\n        break;\n      case '**':\n   \
    \     $result = pow($result, $operand[$index]);\n        break;\n    }\n  }\n\
    \  return $result;\n}\n\n$result = do_algebra(\n  ['+', '*', '-'],\n  [2, 3, 4,\
    \ 5]\n);\nvar_dump($result);", "\t$result = $operand[0];\n\tfor ($i = 0; $i <\
    \ count($operator); $i++) {\n\t\tswitch ($operator[$i]) {\n\t\t\tcase '+':\n\t\
    \t\t\t$result += $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t\
    $result -= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$result\
    \ *= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$result //=\
    \ $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$result **= $operand[$i\
    \ + 1];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}", "  // your code goes\
    \ here\n  $result = $operand[0];\n  for($i = 0; $i < count($operator); $i++){\n\
    \    switch($operator[$i]){\n      case '+':\n        $result += $operand[$i+1];\n\
    \        break;\n      case '-':\n        $result -= $operand[$i+1];\n       \
    \ break;\n      case '*':\n        $result *= $operand[$i+1];\n        break;\n\
    \      case '//':\n        $result = floor($result / $operand[$i+1]);\n      \
    \  break;\n      case '**':\n        $result = pow($result, $operand[$i+1]);\n\
    \        break;\n    }\n  }\n  return $result;\n}\n$operator = [\"+\", \"*\",\
    \ \"-\"];\n$operand = [2, 3, 4, 5];\nprint_r(do_algebra($operator, $operand));",
  "  $result = 0;\n  for ($i = 0; $i < count($operator); $i++) {\n    if ($i === 0)\
    \ {\n      $result = $operand[$i];\n    } else {\n      switch ($operator[$i -\
    \ 1]) {\n        case '+':\n          $result += $operand[$i];\n          break;\n\
    \        case '-':\n          $result -= $operand[$i];\n          break;\n   \
    \     case '*':\n          $result *= $operand[$i];\n          break;\n      \
    \  case '//':\n          $result = floor($result / $operand[$i]);\n          break;\n\
    \        case '**':\n          $result = pow($result, $operand[$i]);\n       \
    \   break;\n      }\n    }\n  }\n  return $result;\n}", "  // TODO: Write your\
    \ code here\n  if (count($operator) == 0 || count($operand) < 2) {\n    return\
    \ 0;\n  }\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = (int)($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\";\necho do_algebra(['+', '//', '*'], [1, 2,\
    \ 3, 4]) . \"\\n\";\necho do_algebra(['*', '+', '//'], [2, 3, 4, 5]) . \"\\n\"\
    ;\necho do_algebra(['**', '//', '-'], [2, 3, 4, 5]) . \"\\n\";\necho do_algebra(['**',\
    \ '+', '//'], [1, 2, 3, 4]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\"\
    ;\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\";\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    if ($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n   \
    \ } else if ($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n   \
    \ } else if ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n   \
    \ } else if ($operator[$i] == '//') {\n      $result = (int)($result / $operand[$i\
    \ + 1]);\n    } else if ($operator[$i] == '**') {\n      $result = (int)pow($result,\
    \ $operand[$i + 1]);\n    }\n  }\n  return $result;\n}\n", "  // Write your code\
    \ here\n}", "    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($operator[$i] == \"+\") {\n            $result += $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == \"-\") {\n            $result -=\
    \ $operand[$i + 1];\n        } else if ($operator[$i] == \"*\") {\n          \
    \  $result *= $operand[$i + 1];\n        } else if ($operator[$i] == \"//\") {\n\
    \            $result = floor($result / $operand[$i + 1]);\n        } else if ($operator[$i]\
    \ == \"**\") {\n            $result = $result ** $operand[$i + 1];\n        }\n\
    \    }\n    return $result;\n}", "  // //Your code here\n  // $length = count($operator);\n\
    \  // for($i = 0; $i < $length; $i++){\n  //   switch($operator[$i]){\n  //  \
    \   case \"+\":\n  //       $operand[$i + 1] = $operand[$i] + $operand[$i + 1];\n\
    \  //       break;\n  //     case \"-\":\n  //       $operand[$i + 1] = $operand[$i]\
    \ - $operand[$i + 1];\n  //       break;\n  //     case \"*\":\n  //       $operand[$i\
    \ + 1] = $operand[$i] * $operand[$i + 1];\n  //       break;\n  //     case \"\
    //\":\n  //       $operand[$i + 1] = floor($operand[$i] / $operand[$i + 1]);\n\
    \  //       break;\n  //     case \"**\":\n  //       $operand[$i + 1] = pow($operand[$i],\
    \ $operand[$i + 1]);\n  //       break;\n  //   }\n  // }\n  // return $operand[$length];\n\
    \  $result = $operand[0];\n  for($i = 0; $i < count($operator); $i++){\n    switch($operator[$i]){\n\
    \      case \"+\":\n        $result += $operand[$i + 1];\n        break;\n   \
    \   case \"-\":\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ \"*\":\n        $result *= $operand[$i + 1];\n        break;\n      case \"\
    //\":\n        $result = floor($result / $operand[$i + 1]);\n        break;\n\
    \      case \"**\":\n        $result = pow($result, $operand[$i + 1]);\n     \
    \   break;\n    }\n  }\n  return $result;\n}\n", "  for($i = 0; $i < count($operator);\
    \ $i++) {\n    if($operator[$i] == '**') {\n      $intermediateResult = pow($operand[$i],\
    \ $operand[$i + 1]);\n      array_splice($operand, $i, 2, $intermediateResult);\n\
    \      array_splice($operator, $i, 1);\n      $i--;\n    }\n  }\n  for($i = 0;\
    \ $i < count($operator); $i++) {\n    if($operator[$i] == '//') {\n      $intermediateResult\
    \ = floor($operand[$i] / $operand[$i + 1]);\n      array_splice($operand, $i,\
    \ 2, $intermediateResult);\n      array_splice($operator, $i, 1);\n      $i--;\n\
    \    }\n  }\n  for($i = 0; $i < count($operator); $i++) {\n    if($operator[$i]\
    \ == '*') {\n      $intermediateResult = $operand[$i] * $operand[$i + 1];\n  \
    \    array_splice($operand, $i, 2, $intermediateResult);\n      array_splice($operator,\
    \ $i, 1);\n      $i--;\n    }\n  }\n  for($i = 0; $i < count($operator); $i++)\
    \ {\n    if($operator[$i] == '-') {\n      $intermediateResult = $operand[$i]\
    \ - $operand[$i + 1];\n      array_splice($operand, $i, 2, $intermediateResult);\n\
    \      array_splice($operator, $i, 1);\n      $i--;\n    }\n  }\n  for($i = 0;\
    \ $i < count($operator); $i++) {\n    if($operator[$i] == '+') {\n      $intermediateResult\
    \ = $operand[$i] + $operand[$i + 1];\n      array_splice($operand, $i, 2, $intermediateResult);\n\
    \      array_splice($operator, $i, 1);\n      $i--;\n   ", "  $op_arr = array();\n\
    \  $res = array();\n  foreach($operator as $op){\n    $op_arr[] = $op;\n  }\n\
    \  for($i = 0; $i < count($operand); $i++){\n    $res[] = $operand[$i];\n    if(isset($op_arr[$i])){\n\
    \      $res[] = $op_arr[$i];\n    }\n  }\n  return eval(implode(\"\", $res));\n\
    }", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n\
    \    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = $result ** $operand[$i\
    \ + 1];\n        break;\n    }\n  }\n  return $result;\n}\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));", "\t$result = $operand[0];\n\tfor ($i = 0; $i <\
    \ count($operator); $i++) {\n\t\tswitch ($operator[$i]) {\n\t\t\tcase '+':\n\t\
    \t\t\t$result += $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t\
    $result -= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$result\
    \ *= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$result = floor($result\
    \ / $operand[$i + 1]);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$result = pow($result,\
    \ $operand[$i + 1]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho\
    \ do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\";\t// 9\necho do_algebra(['+',\
    \ '-', '**'], [2, 3, 4, 5]) . \"\\n\";\t// -8", "  $i = 0;\n  $result = $operand[$i];\n\
    \  $i++;\n  while ($i < count($operand)) {\n    if ($operator[$i - 1] == '+')\
    \ {\n      $result += $operand[$i];\n    } else if ($operator[$i - 1] == '-')\
    \ {\n      $result -= $operand[$i];\n    } else if ($operator[$i - 1] == '*')\
    \ {\n      $result *= $operand[$i];\n    } else if ($operator[$i - 1] == '//')\
    \ {\n      $result = floor($result / $operand[$i]);\n    } else if ($operator[$i\
    \ - 1] == '**') {\n      $result = pow($result, $operand[$i]);\n    }\n    $i++;\n\
    \  }\n  return $result;\n}\n$operator = ['+', '-', '*', '//', '**'];\n$operand\
    \ = [2, 3, 4, 5, 6];\nprint do_algebra($operator, $operand);\nprint \"\\n\";\n\
    $operator = ['+', '*', '//', '-', '**'];\n$operand = [2, 3, 4, 5, 6];\nprint do_algebra($operator,\
    \ $operand);\nprint \"\\n\";\n$operator = ['+', '*', '-', '**'];\n$operand = [2,\
    \ 3, 4, 5];\nprint do_algebra($operator, $operand);\nprint \"\\n\";\n$operator\
    \ = ['+', '*', '//', '-', '**'];\n$operand = [2, 3, 4, 5, 6];\nprint do_algebra($operator,\
    \ $operand);\nprint \"\\n\";", "    $stack = array();\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+': \n        \
    \        array_push($stack, $operand[$i] + $operand[$i + 1]);\n              \
    \  break;\n            case '-':\n                array_push($stack, $operand[$i]\
    \ - $operand[$i + 1]);\n                break;\n            case '*':\n      \
    \          array_push($stack, $operand[$i] * $operand[$i + 1]);\n            \
    \    break;\n            case '//':\n                array_push($stack, $operand[$i]\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           array_push($stack, $operand[$i] ** $operand[$i + 1]);\n          \
    \      break;\n        }\n    }\n    return $stack[0];\n}\n\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\n\necho do_algebra($operator, $operand);\n",
  "    $result = array_shift($operand);\n    while($operator) {\n        $op = array_shift($operator);\n\
    \        switch($op) {\n            case '+':\n                $result += array_shift($operand);\n\
    \                break;\n            case '-':\n                $result -= array_shift($operand);\n\
    \                break;\n            case '*':\n                $result *= array_shift($operand);\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / array_shift($operand));\n                break;\n            case '**':\n\
    \                $result = pow($result, array_shift($operand));\n            \
    \    break;\n        }\n    }\n    return $result;\n}\n", "  $eval = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $eval += $operand[$i + 1];\n        break;\n      case\
    \ '-':\n        $eval -= $operand[$i + 1];\n        break;\n      case '*':\n\
    \        $eval *= $operand[$i + 1];\n        break;\n      case '//':\n      \
    \  $eval = floor($eval / $operand[$i + 1]);\n        break;\n      case '**':\n\
    \        $eval = pow($eval, $operand[$i + 1]);\n        break;\n    }\n  }\n \
    \ return $eval;\n}\n", "    for ($i = 0; $i < count($operator); $i++) {\n    \
    \    switch ($operator[$i]) {\n            case '+':\n                $operand[$i\
    \ + 1] = $operand[$i] + $operand[$i + 1];\n                break;\n          \
    \  case '-':\n                $operand[$i + 1] = $operand[$i] - $operand[$i +\
    \ 1];\n                break;\n            case '*':\n                $operand[$i\
    \ + 1] = $operand[$i] * $operand[$i + 1];\n                break;\n          \
    \  case '//':\n                $operand[$i + 1] = floor($operand[$i] / $operand[$i\
    \ + 1]);\n                break;\n            case '**':\n                $operand[$i\
    \ + 1] = pow($operand[$i], $operand[$i + 1]);\n                break;\n      \
    \  }\n    }\n    return $operand[count($operand) - 1];\n}\n\n$operator = [\"+\"\
    , \"*\", \"-\"];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);",
  "    $return = array_pop($operand);\n    $l = count($operator);\n    for ($i = 0;\
    \ $i < $l; $i++) {\n        switch ($operator[$i]) {\n            case '+':\n\
    \                $return += $operand[$i];\n                break;\n          \
    \  case '-':\n                $return -= $operand[$i];\n                break;\n\
    \            case '*':\n                $return *= $operand[$i];\n           \
    \     break;\n            case '//':\n                $return = floor($return\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $return = pow($return, $operand[$i]);\n                break;\n      \
    \  }\n    }\n    return $return;\n}\n", "  $result = $operand[0];\n  for ($i =\
    \ 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case\
    \ '+':\n        $result += $operand[$i + 1];\n        break;\n      case '-':\n\
    \        $result -= $operand[$i + 1];\n        break;\n      case '*':\n     \
    \   $result *= $operand[$i + 1];\n        break;\n      case '//':\n        $result\
    \ = floor($result / $operand[$i + 1]);\n        break;\n      case '**':\n   \
    \     $result = pow($result, $operand[$i + 1]);\n        break;\n    }\n  }\n\
    \  return $result;\n}\n", "  $total = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $total += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $total -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $total *= $operand[$i + 1];\n      \
    \  break;\n      case '//':\n        $total = floor($total / $operand[$i + 1]);\n\
    \        break;\n      case '**':\n        $total = pow($total, $operand[$i +\
    \ 1]);\n        break;\n    }\n  }\n  return $total;\n}\n\ndo_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]); // 9\ndo_algebra(['+', '-'], [4, 2, 3]); // 5\ndo_algebra(['//',\
    \ '*', '+', '**'], [13, 2, 3, 2, 3]); // 256\ndo_algebra(['+', '//', '*', '**'],\
    \ [1, 2, 3, 2, 3]); // 10\ndo_algebra(['*', '*', '+', '**'], [2, 2, 3, 2, 3]);\
    \ // 59\ndo_algebra(['//', '*', '+', '**'], [24, 2, 3, 2, 3]); // 576\ndo_algebra(['*',\
    \ '*', '*', '**'], [2, 2, 3, 2, 3]); // 216\ndo_algebra(['**', '//', '*', '**'],\
    \ [2, 2, 3, 2, 3]); // 81\ndo_algebra(['**', '*', '+', '**'], [2, 2, 3, 2, 3]);\
    \ // 59\ndo_algebra(['**', '*', '+', '**'], [2, 2, 3, 2, 3]); // 59\ndo_algebra(['**',\
    \ '**', '//', '**'], [2, 2,", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = (int)($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n", "  $operand_a =\
    \ array_shift($operand);\n  $operand_b = array_shift($operand);\n  $operator =\
    \ array_shift($operator);\n  switch ($operator) {\n    case '+':\n      $operand_a\
    \ += $operand_b;\n      break;\n    case '-':\n      $operand_a -= $operand_b;\n\
    \      break;\n    case '*':\n      $operand_a *= $operand_b;\n      break;\n\
    \    case '//':\n      $operand_a = floor($operand_a / $operand_b);\n      break;\n\
    \    case '**':\n      $operand_a = pow($operand_a, $operand_b);\n      break;\n\
    \  }\n  array_unshift($operand, $operand_a);\n  if (count($operator) > 0) {\n\
    \    do_algebra($operator, $operand);\n  }\n  return $operand[0];\n}\n\n$operand\
    \ = [2, 3, 4, 5];\n$operator = ['+', '*', '-'];\necho do_algebra($operator, $operand);",
  "    $array = $operand;\n    $result = 0;\n    $op_num = 1;\n    foreach ($operator\
    \ as $op) {\n        if ($op == '+') {\n            $result += $array[$op_num];\n\
    \        } elseif ($op == '-') {\n            $result -= $array[$op_num];\n  \
    \      } elseif ($op == '*') {\n            $result *= $array[$op_num];\n    \
    \    } elseif ($op == '//') {\n            $result = floor($result / $array[$op_num]);\n\
    \        } elseif ($op == '**') {\n            $result = pow($result, $array[$op_num]);\n\
    \        }\n        $op_num++;\n    }\n    return $result;\n}\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\nprint_r(do_algebra($operator, $operand));",
  "    $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n \
    \       if ($operator[$i] == \"+\") {\n            $result += $operand[$i + 1];\n\
    \        } else if ($operator[$i] == \"-\") {\n            $result -= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == \"*\") {\n            $result *=\
    \ $operand[$i + 1];\n        } else if ($operator[$i] == \"//\") {\n         \
    \   $result = floor($result / $operand[$i + 1]);\n        } else if ($operator[$i]\
    \ == \"**\") {\n            $result = pow($result, $operand[$i + 1]);\n      \
    \  }\n    }\n    return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5]);", "  $output = $operand[0];\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    switch ($operator[$i]) {\n      case '+':\n        $output += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $output -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $output *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $output = floor($output / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $output = pow($output, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $output;\n}\n\n$operand = [2, 3,\
    \ 4, 5];\n$operator = ['+', '*', '-'];\necho do_algebra($operator, $operand);",
  "    $calc = 0;\n    for ($i = 0; $i < count($operator); $i++) {\n        if ($i\
    \ == 0) {\n            $calc = $operand[$i];\n        }\n        if ($operator[$i]\
    \ == \"+\") {\n            $calc += $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == \"-\") {\n            $calc -= $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == \"*\") {\n            $calc *= $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == \"//\") {\n            $calc = (int) ($calc / $operand[$i + 1]);\n      \
    \  } elseif ($operator[$i] == \"**\") {\n            $calc = pow($calc, $operand[$i\
    \ + 1]);\n        }\n    }\n    return $calc;\n}\n\necho do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]) . \"\\n\";", "    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);", "    if(empty($operator) || empty($operand)) return;\n\
    \    if(count($operator) >= count($operand)) return;\n    $result = $operand[0];\n\
    \    for($i = 0; $i < count($operator); $i++){\n        switch($operator[$i]){\n\
    \            case '+':\n                $result += $operand[$i+1];\n         \
    \       break;\n            case '-':\n                $result -= $operand[$i+1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i+1];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i+1]);\n                break;\n            case '**':\n       \
    \         $result = $result ** $operand[$i+1];\n                break;\n     \
    \   }\n    }\n    return $result;\n}\n", "\t// Your code here\n\t$a = $operand[0];\n\
    \t$b = $operand[1];\n\tswitch ($operator[0]) {\n\t\tcase '+':\n\t\t\treturn $a\
    \ + $b;\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\treturn $a - $b;\n\t\t\tbreak;\n\t\t\
    case '*':\n\t\t\treturn $a * $b;\n\t\t\tbreak;\n\t\tcase '//':\n\t\t\treturn $a\
    \ / $b;\n\t\t\tbreak;\n\t\tcase '**':\n\t\t\treturn $a ^ $b;\n\t\t\tbreak;\n\t\
    }\n}\n", "  $result = array_shift($operand);\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i];\n\
    \        break;\n      case '-':\n        $result -= $operand[$i];\n        break;\n\
    \      case '*':\n        $result *= $operand[$i];\n        break;\n      case\
    \ '//':\n        $result = floor($result / $operand[$i]);\n        break;\n  \
    \    case '**':\n        $result = pow($result, $operand[$i]);\n        break;\n\
    \    }\n  }\n  return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]) . \"\\n\";", "\t// Your code here\n\t$operand = array_values($operand);\n\
    \t$operator = array_values($operator);\n\tfor($i = 0; $i < count($operator); $i++){\n\
    \t\tif($operator[$i] == '**'){\n\t\t\t$operand[$i] = pow($operand[$i], $operand[$i+1]);\n\
    \t\t\tunset($operand[$i+1]);\n\t\t\tunset($operator[$i]);\n\t\t\t$operand = array_values($operand);\n\
    \t\t\t$operator = array_values($operator);\n\t\t\t$i--;\n\t\t}elseif($operator[$i]\
    \ == '//'){\n\t\t\t$operand[$i] = floor($operand[$i] / $operand[$i+1]);\n\t\t\t\
    unset($operand[$i+1]);\n\t\t\tunset($operator[$i]);\n\t\t\t$operand = array_values($operand);\n\
    \t\t\t$operator = array_values($operator);\n\t\t\t$i--;\n\t\t}\n\t}\n\tfor($i\
    \ = 0; $i < count($operator); $i++){\n\t\tif($operator[$i] == '*'){\n\t\t\t$operand[$i]\
    \ = $operand[$i] * $operand[$i+1];\n\t\t\tunset($operand[$i+1]);\n\t\t\tunset($operator[$i]);\n\
    \t\t\t$operand = array_values($operand);\n\t\t\t$operator = array_values($operator);\n\
    \t\t\t$i--;\n\t\t}\n\t}\n\tfor($i = 0; $i < count($operator); $i++){\n\t\tif($operator[$i]\
    \ == '+'){\n\t\t\t$operand[$i] = $operand[$i] + $operand[$i+1];\n\t\t\tunset($operand[$i+1]);\n\
    \t\t\tunset($operator[$i]);\n\t\t\t$operand = array_values($operand);\n", "  \
    \  $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n \
    \       switch ($operator[$i]) {\n            case '+':\n                $result\
    \ += $operand[$i + 1];\n                break;\n            case '-':\n      \
    \          $result -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $result = (int)($result / $operand[$i\
    \ + 1]);\n                break;\n            case '**':\n                $result\
    \ = (int)pow($result, $operand[$i + 1]);\n                break;\n        }\n\
    \    }\n    return $result;\n}", "  $result = $operand[0];\n  $previousOperator\
    \ = '';\n  for ($i = 0; $i < count($operator); $i++) {\n    $operandOne = $result;\n\
    \    $operandTwo = $operand[$i + 1];\n    $operator = $operator[$i];\n    if ($operator\
    \ == '//' && $previousOperator == '//') {\n      $result = $operandOne // $operandTwo;\n\
    \    } else if ($operator == '//') {\n      $result = $operandOne // $operandTwo;\n\
    \    } else if ($operator == '**' && $previousOperator == '**') {\n      $result\
    \ = $operandOne ** $operandTwo;\n    } else if ($operator == '**') {\n      $result\
    \ = $operandOne ** $operandTwo;\n    } else if ($operator == '+') {\n      $result\
    \ = $operandOne + $operandTwo;\n    } else if ($operator == '-') {\n      $result\
    \ = $operandOne - $operandTwo;\n    } else if ($operator == '*') {\n      $result\
    \ = $operandOne * $operandTwo;\n    }\n    $previousOperator = $operator;\n  }\n\
    \  return $result;\n}\n", "    $op_count = count($operator);\n    $on_count =\
    \ count($operand);\n    $eq = \"\";\n    for ($i = 0; $i < $op_count; $i++) {\n\
    \        if ($i > 0) {\n            $eq .= \" \" . $operator[$i] . \" \";\n  \
    \      }\n        $eq .= $operand[$i];\n    }\n    $eq .= \" \" . $operator[$op_count]\
    \ . \" \" . $operand[$on_count - 1];\n    $result = eval(\"return $eq;\");\n \
    \   return $result;\n}\n$operand = [2, 3, 4, 5];\n$operator = ['+', '*', '-'];\n\
    echo do_algebra($operator, $operand);\necho \"\\n\";\n$operand = [25, 100, 33,\
    \ 6, 7, 0, 50, 33];\n$operator = ['+', '-', '*', '*', '/', '//', '**'];\necho\
    \ do_algebra($operator, $operand);\necho \"\\n\";", "    $result = 0;\n    $end\
    \ = count($operand);\n    for ($i = 0; $i < $end; $i++) {\n        if ($i ===\
    \ 0) {\n            $result = $operand[$i];\n        } else {\n            switch\
    \ ($operator[$i - 1]) {\n                case '+':\n                    $result\
    \ += $operand[$i];\n                    break;\n                case '-':\n  \
    \                  $result -= $operand[$i];\n                    break;\n    \
    \            case '*':\n                    $result *= $operand[$i];\n       \
    \             break;\n                case '//':\n                    $result\
    \ = floor($result / $operand[$i]);\n                    break;\n             \
    \   case '**':\n                    $result = pow($result, $operand[$i]);\n  \
    \                  break;\n            }\n        }\n    }\n    return $result;\n\
    }\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]);", "  $result = [];\n  $curr\
    \ = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i])\
    \ {\n      case '+':\n        $curr += $operand[$i + 1];\n        break;\n   \
    \   case '-':\n        $curr -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $curr *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $curr = (int)($curr / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $curr = pow($curr, $operand[$i + 1]);\n        break;\n    }\n\
    \  }\n  return $curr;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]);\n\
    echo \"\\n\";\necho do_algebra(['+', '**', '-'], [2, 3, 2, 1]);\necho \"\\n\"\
    ;\necho do_algebra(['+', '*', '**', '//'], [5, 2, 3, 10]);\necho \"\\n\";\necho\
    \ do_algebra(['*', '//', '**'], [4, 7, 2, 3]);\necho \"\\n\";\necho do_algebra(['*',\
    \ '**', '//'], [5, 2, 3, 10]);\necho \"\\n\";", "  $answer = $operand[0];\n  for\
    \ ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n    \
    \  case '+':\n        $answer += $operand[$i + 1];\n        break;\n      case\
    \ '-':\n        $answer -= $operand[$i + 1];\n        break;\n      case '*':\n\
    \        $answer *= $operand[$i + 1];\n        break;\n      case '//':\n    \
    \    $answer = floor($answer / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $answer = pow($answer, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $answer;\n}\n$operator = ['+', '*', '-'];\n$operand = [2,\
    \ 3, 4, 5];\necho do_algebra($operator, $operand);", "  // Your code here\n}\n\
    print_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5])); // 9\nprint_r(do_algebra(['//',\
    \ '+', '**'], [2, 3, 4, 5])); // 25\nprint_r(do_algebra(['*', '-', '+'], [9, 9,\
    \ 8, 4, 2, 1])); // 52", "  // 1.\n  // $operand[] = 0;\n  // 2.\n  // array_unshift($operand,\
    \ 0);\n  // 3.\n  // $operand = [0] + $operand;\n  array_unshift($operand, 0);\n\
    \  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n   \
    \ switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i +\
    \ 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n", "  if (count($operator)\
    \ != count($operand) - 1) return \"\";\n  $res = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $res += $operand[$i + 1];\n        break;\n      case '-':\n        $res\
    \ -= $operand[$i + 1];\n        break;\n      case '*':\n        $res *= $operand[$i\
    \ + 1];\n        break;\n      case '//':\n        $res /= $operand[$i + 1];\n\
    \        break;\n      case '**':\n        $res = pow($res, $operand[$i + 1]);\n\
    \        break;\n    }\n  }\n  return $res;\n}\n", "   // your code here\n}",
  "    $sum = $operand[0];\n    for($i = 0; $i < count($operator); $i++) {\n     \
    \   switch($operator[$i]) {\n            case '+': $sum += $operand[$i + 1]; break;\n\
    \            case '-': $sum -= $operand[$i + 1]; break;\n            case '*':\
    \ $sum *= $operand[$i + 1]; break;\n            case '//': $sum = floor($sum /\
    \ $operand[$i + 1]); break;\n            case '**': $sum = pow($sum, $operand[$i\
    \ + 1]); break;\n        }\n    }\n    return $sum;\n}\n$operator = ['+', '*',\
    \ '-'];\n$operand = [2, 3, 4, 5];\n\necho do_algebra($operator, $operand);", " \
    \   // Write your code here...\n    $result = 0;\n    $operation = '+';\n    for\
    \ ($i = 0; $i < count($operand); $i++) {\n        if ($i != 0) {\n           \
    \ $operation = $operator[$i - 1];\n        }\n        switch ($operation) {\n\
    \            case '+':\n                $result += $operand[$i];\n           \
    \     break;\n            case '-':\n                $result -= $operand[$i];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n    }\n    return $result;\n}", "    $num1 = array_shift($operand);\n  \
    \  $num2 = array_shift($operand);\n    $op = array_shift($operator);\n    switch\
    \ ($op) {\n        case '+':\n            $result = $num1 + $num2;\n         \
    \   break;\n        case '-':\n            $result = $num1 - $num2;\n        \
    \    break;\n        case '*':\n            $result = $num1 * $num2;\n       \
    \     break;\n        case '//':\n            $result = floor($num1 / $num2);\n\
    \            break;\n        case '**':\n            $result = pow($num1, $num2);\n\
    \            break;\n    }\n    array_unshift($operand, $result);\n    if (count($operator)\
    \ > 0) {\n        return do_algebra($operator, $operand);\n    } else {\n    \
    \    return $result;\n    }\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2,\
    \ 3, 4, 5];\necho do_algebra($operator, $operand) . \"\\n\";\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5, 6];\necho do_algebra($operator, $operand)\
    \ . \"\\n\";", "    $res = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $res += $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $res -= $operand[$i + 1];\n                break;\n         \
    \   case '*':\n                $res *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $res = floor($res / $operand[$i + 1]);\n\
    \                break;\n            case '**':\n                $res = pow($res,\
    \ $operand[$i + 1]);\n                break;\n        }\n    }\n    return $res;\n\
    }\n", "  // TODO\n  $size = count($operator);\n  for($i = 0; $i < $size; $i++){\n\
    \    if($operator[$i] === \"//\"){\n      $temp = $operand[$i] / $operand[$i+1];\n\
    \      $temp = floor($temp);\n      $operand[$i] = $temp;\n      array_splice($operand,\
    \ $i+1, 1);\n      array_splice($operator, $i, 1);\n      $size--;\n      $i--;\n\
    \    }else if($operator[$i] === \"**\"){\n      $temp = pow($operand[$i], $operand[$i+1]);\n\
    \      $operand[$i] = $temp;\n      array_splice($operand, $i+1, 1);\n      array_splice($operator,\
    \ $i, 1);\n      $size--;\n      $i--;\n    }\n  }\n  for($i = 0; $i < $size;\
    \ $i++){\n    if($operator[$i] === \"*\"){\n      $temp = $operand[$i] * $operand[$i+1];\n\
    \      $operand[$i] = $temp;\n      array_splice($operand, $i+1, 1);\n      array_splice($operator,\
    \ $i, 1);\n      $size--;\n      $i--;\n    }\n  }\n  for($i = 0; $i < $size;\
    \ $i++){\n    if($operator[$i] === \"+\"){\n      $temp = $operand[$i] + $operand[$i+1];\n\
    \      $operand[$i] = $temp;\n      array_splice($operand, $i+1, 1);\n      array_splice($operator,\
    \ $i, 1);\n      $size--;\n      $i--;\n    }\n  }\n  for($i = 0; $i < $size;\
    \ $i++){\n    if($operator[$i] === \"-\"){\n      $temp = $operand[$i] - $operand[",
  "    $arr=array_merge($operator,$operand);\n    $result=array_shift($arr);\n   \
    \ foreach($arr as $item){\n        if(is_numeric($item)){\n            $result=$result+$item;\n\
    \        }else{\n            if($item=='*'){\n                $result=$result*$item;\n\
    \            }else if($item=='-'){\n                $result=$result-$item;\n \
    \           }else if($item=='//'){\n                $result=$result/$item;\n \
    \           }else if($item=='**'){\n                $result=$result**$item;\n\
    \            }\n        }\n    }\n    return $result;\n}", "    $result = $operand[0];\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i + 1];\n   \
    \             break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result = floor($result / $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $result = $result ** $operand[$i + 1];\n\
    \                break;\n        }\n    }\n    return $result;\n}", "    $op =\
    \ $operator[0];\n    $result = $operand[0];\n    for ($i = 1; $i < count($operand);\
    \ $i++) {\n        switch ($op) {\n            case '+':\n                $result\
    \ += $operand[$i];\n                break;\n            case '-':\n          \
    \      $result -= $operand[$i];\n                break;\n            case '*':\n\
    \                $result *= $operand[$i];\n                break;\n          \
    \  case '//':\n                $result /= $operand[$i];\n                break;\n\
    \            case '**':\n                $result **= $operand[$i];\n         \
    \       break;\n        }\n        $op = $operator[$i];\n    }\n    return $result;\n\
    }\n", "    // Write your code here.\n    $result = $operand[0];\n    for($i =\
    \ 0; $i < count($operator); $i++){\n        switch($operator[$i]){\n         \
    \   case '+':\n                $result += $operand[$i+1];\n                break;\n\
    \            case '-':\n                $result -= $operand[$i+1];\n         \
    \       break;\n            case '*':\n                $result *= $operand[$i+1];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i+1]);\n                break;\n            case '**':\n       \
    \         $result = pow($result, $operand[$i+1]);\n                break;\n  \
    \      }\n    }\n    return $result;\n}\n", "    $result = '';\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        $result .= $operand[$i];\n      \
    \  $result .= $operator[$i];\n    }\n    $result .= $operand[count($operand) -\
    \ 1];\n    return eval(\"return $result;\");\n}\n", "    $f = array_shift($operator);\n\
    \    $a = array_shift($operand);\n    $r = $a;\n    foreach($operator as $i =>\
    \ $o) {\n        switch($o) {\n            case '+': $r += $operand[$i]; break;\n\
    \            case '-': $r -= $operand[$i]; break;\n            case '*': $r *=\
    \ $operand[$i]; break;\n            case '//': $r = floor($r / $operand[$i]);\
    \ break;\n            case '**': $r = pow($r, $operand[$i]); break;\n        }\n\
    \    }\n    return $r;\n}", "  $result = array_shift($operand);\n  foreach ($operator\
    \ as $key => $val) {\n    switch ($val) {\n      case '+':\n        $result +=\
    \ $operand[$key];\n        break;\n      case '-':\n        $result -= $operand[$key];\n\
    \        break;\n      case '*':\n        $result *= $operand[$key];\n       \
    \ break;\n      case '//':\n        $result /= $operand[$key];\n        break;\n\
    \      case '**':\n        $result = pow($result, $operand[$key]);\n        break;\n\
    \    }\n  }\n  return $result;\n}", "  $output = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $output += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $output -= $operand[$i + 1];\n        break;\n      case '*':\n        $output\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $output = floor($output\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $output = pow($output,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $output;\n}\n$operator\
    \ = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);",
  "    if(!$operator) return $operand[0];\n    $res = array_shift($operand);\n   \
    \ while($op = array_shift($operator)){\n        $n = array_shift($operand);\n\
    \        switch($op){\n            case '+':\n                $res += $n;\n  \
    \              break;\n            case '-':\n                $res -= $n;\n  \
    \              break;\n            case '*':\n                $res *= $n;\n  \
    \              break;\n            case '//':\n                $res = (int)($res\
    \ / $n);\n                break;\n            case '**':\n                $res\
    \ = pow($res, $n);\n                break;\n        }\n    }\n    return $res;\n\
    }\n", "    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example: print \"Hello world!\";\n    $op = $operator[0];\n\
    \    $result = $operand[0];\n    for($i = 1; $i < count($operand); $i++) {\n \
    \       switch($op) {\n            case '+': $result += $operand[$i]; break;\n\
    \            case '-': $result -= $operand[$i]; break;\n            case '*':\
    \ $result *= $operand[$i]; break;\n            case '//': $result = floor($result\
    \ / $operand[$i]); break;\n            case '**': $result = pow($result, $operand[$i]);\
    \ break;\n        }\n        $op = $operator[$i];\n    }\n    print($result);\n\
    }", "  $res = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n  \
    \  if ($operator[$i] == '+') {\n      $res += $operand[$i + 1];\n    } else if\
    \ ($operator[$i] == '-') {\n      $res -= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '*') {\n      $res *= $operand[$i + 1];\n    } else if ($operator[$i] ==\
    \ '//') {\n      $res = floor($res / $operand[$i + 1]);\n    } else if ($operator[$i]\
    \ == '**') {\n      $res = pow($res, $operand[$i + 1]);\n    }\n  }\n  return\
    \ $res;\n}\n\necho do_algebra(['+', '-', '*'], [1, 2, 3, 4]);", "  $result = 0;\n\
    \  if(!empty($operator) && !empty($operand)){\n    $result = $operand[0];\n  \
    \  for($i = 0; $i < count($operator); $i++){\n      switch($operator[$i]){\n \
    \       case '+':\n          $result += $operand[$i+1];\n          break;\n  \
    \      case '-':\n          $result -= $operand[$i+1];\n          break;\n   \
    \     case '*':\n          $result *= $operand[$i+1];\n          break;\n    \
    \    case '//':\n          $result = floor($result / $operand[$i+1]);\n      \
    \    break;\n        case '**':\n          $result = pow($result, $operand[$i+1]);\n\
    \          break;\n      }\n    }\n  }\n  return $result;\n}\n\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\n$result = do_algebra($operator, $operand);\n\
    echo $result;", "    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}", "  $operand = array_reverse($operand);\n\
    \  $res = $operand[0];\n  $i = 0;\n  while (isset($operand[$i+1])) {\n    switch\
    \ ($operator[$i]) {\n      case '+':\n        $res += $operand[$i+1];\n      \
    \  break;\n      case '-':\n        $res -= $operand[$i+1];\n        break;\n\
    \      case '*':\n        $res *= $operand[$i+1];\n        break;\n      case\
    \ '//':\n        $res = floor($res / $operand[$i+1]);\n        break;\n      case\
    \ '**':\n        $res = pow($res, $operand[$i+1]);\n        break;\n    }\n  \
    \  $i++;\n  }\n  return $res;\n}\n$operator = ['*', '**', '-'];\n$operand = [1,\
    \ 2, 3, 4, 5];\n$r = do_algebra($operator, $operand);\nprint $r;", "    return\
    \ 0;\n}\n\n$tests = [\n    [\n        'operator' => ['+', '*', '-'],\n       \
    \ 'operand' => [2, 3, 4, 5],\n        'expected' => 9\n    ],\n    [\n       \
    \ 'operator' => ['//', '*', '-'],\n        'operand' => [4, 3, 10, 9],\n     \
    \   'expected' => -6\n    ],\n    [\n        'operator' => ['*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*',\
    \ '*', '*", "   // Write your code here ...\n   \n   // Set first number as first\
    \ value in array\n   $result = $operand[0];\n   \n   // Add next number according\
    \ to operator\n   for ($i = 0; $i < count($operator); $i++) {\n       \n     \
    \  switch ($operator[$i]) {\n           \n           case '+':\n             \
    \  $result += $operand[$i + 1];\n               break;\n           case '-':\n\
    \               $result -= $operand[$i + 1];\n               break;\n        \
    \   case '*':\n               $result *= $operand[$i + 1];\n               break;\n\
    \           case '//':\n               $result = floor($result / $operand[$i +\
    \ 1]);\n               break;\n           case '**':\n               $result =\
    \ pow($result, $operand[$i + 1]);\n               break;\n       }\n   }\n   \n\
    \   return $result;\n}", "  $operandCount = count($operand);\n  $operatorCount\
    \ = count($operator);\n  $result = [];\n  $i = 0;\n  $j = 0;\n  while ($i < $operandCount)\
    \ {\n    if ($operator[$j] == '//') {\n      $result[] = floor($operand[$i] /\
    \ $operand[$i + 1]);\n      $i += 2;\n      $j++;\n    } elseif ($operator[$j]\
    \ == '**') {\n      $result[] = pow($operand[$i], $operand[$i + 1]);\n      $i\
    \ += 2;\n      $j++;\n    } else {\n      $result[] = $operand[$i];\n      $i++;\n\
    \    }\n  }\n  $resultLength = count($result);\n  $i = 0;\n  $j = 0;\n  while\
    \ ($i < $resultLength) {\n    if ($operator[$j] == '*') {\n      $result[$i] *=\
    \ $result[$i + 1];\n      unset($result[$i + 1]);\n      $result = array_values($result);\n\
    \      $resultLength = count($result);\n      $j++;\n    } else {\n      $i++;\n\
    \    }\n  }\n  $resultLength = count($result);\n  $i = 0;\n  $j = 0;\n  while\
    \ ($i < $resultLength) {\n    if ($operator[$j] == '+') {\n      $result[$i] +=\
    \ $result[$i + 1];\n      unset($result[$i + 1]);\n      $result = array_values($result);\n\
    \      $resultLength = count($result);\n      $j++;\n    } else {\n      $i++;\n\
    \    }\n  }\n  $resultLength = count($result);\n  $i = 0;\n  $j = 0;\n  while\
    \ ($i < $resultLength) {\n    if ($operator[$j] == '-') {\n      $result[$i] -=\
    \ $result[$i + 1];\n      unset($result[$i + 1]);\n      $result = array_values($",
  "  $result = 0;\n  $length = count($operator);\n  for ($i = 0; $i < $length; $i++)\
    \ {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i];\n\
    \        break;\n      case '-':\n        $result -= $operand[$i];\n        break;\n\
    \      case '*':\n        $result *= $operand[$i];\n        break;\n      case\
    \ '//':\n        $result = floor($result / $operand[$i]);\n        break;\n  \
    \    case '**':\n        $result = pow($result, $operand[$i]);\n        break;\n\
    \    }\n  }\n  return $result;\n}\n$operator = ['+', '*', '-', '//', '**'];\n\
    $operand = [2, 3, 4, 5, 6];\n\necho do_algebra($operator, $operand);", "    if(!$operator\
    \ || !$operand) return false;\n    if(count($operator) !== count($operand) - 1)\
    \ return false;\n    foreach($operator as $opt) {\n        if(!in_array($opt,\
    \ ['+', '-', '*', '//', '**'])) return false;\n    }\n    foreach($operand as\
    \ $opd) {\n        if(!is_int($opd) || $opd < 0) return false;\n    }\n    $result\
    \ = $operand[0];\n    for($i = 0; $i < count($operator); $i++) {\n        switch($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i + 1];\n   \
    \             break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result = intval($result / $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $result = intval(pow($result, $operand[$i\
    \ + 1]));\n                break;\n        }\n    }\n    return $result;\n}",
  "    $count = count($operator);\n    $result = $operand[0];\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        switch ($operator[$i]) {\n            case '+':\n\
    \                $result += $operand[$i + 1];\n                break;\n      \
    \      case '-':\n                $result -= $operand[$i + 1];\n             \
    \   break;\n            case '*':\n                $result *= $operand[$i + 1];\n\
    \                break;\n            case '//':\n                $result /= $operand[$i\
    \ + 1];\n                break;\n            case '**':\n                $result\
    \ **= $operand[$i + 1];\n                break;\n        }\n    }\n    return\
    \ $result;\n}", "    // Write your code here.\n    $output = 0;\n    for($i =\
    \ 0; $i < count($operator); $i++){\n        if($i == 0){\n            $output\
    \ = $operand[$i];\n        }\n        switch($operator[$i]){\n            case\
    \ '+':\n                $output += $operand[$i+1];\n                break;\n \
    \           case '-':\n                $output -= $operand[$i+1];\n          \
    \      break;\n            case '*':\n                $output *= $operand[$i+1];\n\
    \                break;\n            case '//':\n                $output = floor($output\
    \ / $operand[$i+1]);\n                break;\n            case '**':\n       \
    \         $output = pow($output, $operand[$i+1]);\n                break;\n  \
    \      }\n    }\n    return $output;\n}\n", "  $output = $operand[0];\n  for ($i\
    \ = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case\
    \ '+':\n        $output += $operand[$i + 1];\n        break;\n      case '-':\n\
    \        $output -= $operand[$i + 1];\n        break;\n      case '*':\n     \
    \   $output *= $operand[$i + 1];\n        break;\n      case '//':\n        $output\
    \ /= $operand[$i + 1];\n        break;\n      case '**':\n        $output = pow($output,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $output;\n}", "   \
    \ if(empty($operator) || empty($operand)){\n        return false;\n    }\n   \
    \ $result = $operand[0];\n    $arr_length = count($operand);\n    for($i = 1;\
    \ $i < $arr_length; $i++){\n        switch($operator[$i-1]){\n            case\
    \ '+':\n                $result += $operand[$i];\n                break;\n   \
    \         case '-':\n                $result -= $operand[$i];\n              \
    \  break;\n            case '*':\n                $result *= $operand[$i];\n \
    \               break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n    }\n    return $result;\n}\n", "    // Your code here\n    $result =\
    \ $operand[0];\n    if ($operator === \"+\") {\n        for ($i = 1; $i < count($operand);\
    \ $i++) {\n            $result += $operand[$i];\n        }\n    } else if ($operator\
    \ === \"-\") {\n        for ($i = 1; $i < count($operand); $i++) {\n         \
    \   $result -= $operand[$i];\n        }\n    } else if ($operator === \"*\") {\n\
    \        for ($i = 1; $i < count($operand); $i++) {\n            $result *= $operand[$i];\n\
    \        }\n    } else if ($operator === \"//\") {\n        for ($i = 1; $i <\
    \ count($operand); $i++) {\n            $result /= $operand[$i];\n        }\n\
    \    } else if ($operator === \"**\") {\n        for ($i = 1; $i < count($operand);\
    \ $i++) {\n            $result = pow($result, $operand[$i]);\n        }\n    }\n\
    \n    return (int) $result;\n}\n", "  $result = $operand[0];\n  $len = count($operator);\n\
    \  for ($i = 0; $i < $len; $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = intval($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . PHP_EOL; // 9\necho do_algebra(['+', '*', '//', '**'],\
    \ [2, 3, 2, 4]) . PHP_EOL; // 12\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [2, 3, 2, 4, 4]) . PHP_EOL; // 5\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [1, 2, 3, 2, 4]) . PHP_EOL; // -3\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [1, 2, 3, 2, 4, 5]) . PHP_EOL; // -3\necho do_algebra(['+', '-', '*', '//',\
    \ '**'], [1, 2, 3, 2, 4, 5, 6]) . PHP_EOL; // -3\necho do_algebra(['+', '-', '*',\
    \ '//', '**'], [1, 2, 3, 2, 4, 5, 6, 7]) . PHP_EOL; // -3\necho do_algebra(['+',\
    \ '-', '*', '//', '**'], [", "  $operation = array_map(function($i, $j) {\n  \
    \  if ($i === '+') {\n      return $j[0] + $j[1];\n    } else if ($i === '-')\
    \ {\n      return $j[0] - $j[1];\n    } else if ($i === '*') {\n      return $j[0]\
    \ * $j[1];\n    } else if ($i === '//') {\n      return intval($j[0] / $j[1]);\n\
    \    } else if ($i === '**') {\n      return pow($j[0], $j[1]);\n    }\n  }, $operator,\
    \ array_chunk($operand, 2));\n  return array_reduce($operation, function($carry,\
    \ $item) {\n    return $carry + $item;\n  });\n}\n$operator = ['+', '*', '-'];\n\
    $operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);", "    // Write\
    \ your code here...\n    $result = $operand[0];\n    for($i = 0; $i < count($operator);\
    \ $i++){\n        if($operator[$i] == \"+\"){\n            $result += $operand[$i+1];\n\
    \        }\n        if($operator[$i] == \"-\"){\n            $result -= $operand[$i+1];\n\
    \        }\n        if($operator[$i] == \"*\"){\n            $result *= $operand[$i+1];\n\
    \        }\n        if($operator[$i] == \"//\"){\n            $result = floor($result\
    \ / $operand[$i+1]);\n        }\n        if($operator[$i] == \"**\"){\n      \
    \      $result = pow($result, $operand[$i+1]);\n        }\n    }\n    return $result;\n\
    }\n\n$operator = [\"+\", \"*\", \"-\"];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);", "  $operator = array_reverse($operator);\n  $operand = array_reverse($operand);\n\
    \  $result = [];\n  $i = 0;\n  $j = 0;\n  $pre_result = $operand[$i++];\n  while\
    \ ($i < count($operand)) {\n    $result[$j++] = $operand[$i++];\n    $result[$j++]\
    \ = $operator[$j];\n    $pre_result = calc($result[$j - 2], $result[$j - 1], $pre_result);\n\
    \  }\n  return $pre_result;\n}\n", "  $result = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}", "   \
    \ $operandLen = count($operand);\n    $operatorLen = count($operator);\n    if\
    \ ($operandLen <= 0 || $operatorLen <= 0 || $operandLen - 1 != $operatorLen) {\n\
    \        return -1;\n    }\n    $result = $operand[0];\n    for ($i = 0; $i <\
    \ $operatorLen; $i++) {\n        $op = $operator[$i];\n        $v = $operand[$i\
    \ + 1];\n        switch ($op) {\n            case '+':\n                $result\
    \ += $v;\n                break;\n            case '-':\n                $result\
    \ -= $v;\n                break;\n            case '*':\n                $result\
    \ *= $v;\n                break;\n            case '//':\n                $result\
    \ = floor($result / $v);\n                break;\n            case '**':\n   \
    \             $result = pow($result, $v);\n                break;\n          \
    \  default:\n                return -1;\n        }\n    }\n    return $result;\n\
    }\n$operator = array('+', '*', '-');\n$operand = array(2, 3, 4, 5);\nprint_r(do_algebra($operator,\
    \ $operand));", "  $temp = $operand[0];\n  for($i = 0; $i < count($operator);\
    \ $i++) {\n    if($operator[$i] == \"+\") {\n      $temp += $operand[$i + 1];\n\
    \    }\n    if($operator[$i] == \"-\") {\n      $temp -= $operand[$i + 1];\n \
    \   }\n    if($operator[$i] == \"*\") {\n      $temp *= $operand[$i + 1];\n  \
    \  }\n    if($operator[$i] == \"//\") {\n      $temp /= $operand[$i + 1];\n  \
    \  }\n    if($operator[$i] == \"**\") {\n      $temp = pow($temp, $operand[$i\
    \ + 1]);\n    }\n  }\n  return $temp;\n}\n\n$operator = [\"+\", \"*\", \"-\"];\n\
    $operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);", "    $op = array_shift($operator);\n\
    \    $left = array_shift($operand);\n    $right = array_shift($operand);\n   \
    \ if($op == '+') return $left + $right;\n    if($op == '-') return $left - $right;\n\
    \    if($op == '*') return $left * $right;\n    if($op == '//') return floor($left\
    \ / $right);\n    if($op == '**') return pow($left, $right);\n    return 0;\n\
    }\n", "\t$operator_value = [];\n\t$operand_value = [];\n\tforeach ($operator as\
    \ $key => $value) {\n\t\tif($value === '**') {\n\t\t\tif(count($operator_value)\
    \ === 0) {\n\t\t\t\tarray_push($operator_value, $value);\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tif($operator_value[count($operator_value) - 1] === '**') {\n\t\t\t\
    \t\tarray_push($operator_value, $value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t\
    while(count($operator_value) !== 0) {\n\t\t\t\t\t\t$op_value = array_pop($operator_value);\n\
    \t\t\t\t\t\tif($op_value === '//') {\n\t\t\t\t\t\t\t$second_value = array_pop($operand_value);\n\
    \t\t\t\t\t\t\t$first_value = array_pop($operand_value);\n\t\t\t\t\t\t\tarray_push($operand_value,\
    \ (int)($first_value / $second_value));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if($op_value\
    \ === '*') {\n\t\t\t\t\t\t\t$second_value = array_pop($operand_value);\n\t\t\t\
    \t\t\t\t$first_value = array_pop($operand_value);\n\t\t\t\t\t\t\tarray_push($operand_value,\
    \ $first_value * $second_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if($op_value\
    \ === '-') {\n\t\t\t\t\t\t\t$second_value = array_pop($operand_value);\n\t\t\t\
    \t\t\t\t$first_value = array_pop($operand_value);\n\t\t\t\t\t\t\tarray_push($operand_value,\
    \ $first_value - $second_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if($op_value\
    \ === '+') {\n\t\t\t\t\t\t\t$second_value = array_pop($operand_value);", "  $result\
    \ = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    if ($operator[$i]\
    \ == '+') {\n      $result += $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '-') {\n      $result -= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '*') {\n      $result *= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '//') {\n      $result /= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '**') {\n      $result **= $operand[$i + 1];\n    }\n  }\n  return $result;\n\
    }\n", "  $total = array_shift($operand);\n  foreach ($operator as $key => $value)\
    \ {\n    if($value == \"+\"){\n      $total += $operand[$key];\n    } elseif($value\
    \ == \"-\"){\n      $total -= $operand[$key];\n    } elseif($value == \"*\"){\n\
    \      $total *= $operand[$key];\n    } elseif($value == \"//\"){\n      $total\
    \ = floor($total / $operand[$key]);\n    } elseif($value == \"**\"){\n      $total\
    \ = $total ** $operand[$key];\n    } else {\n      return \"error\";\n    }\n\
    \  }\n  return $total;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]); //\
    \ => 9\necho do_algebra(['+', '-'], [2, 3, 4]); // => 5\necho do_algebra(['+',\
    \ '-', '//'], [5, 2, 3, 2]); // => 2\necho do_algebra(['+', '-', '//', '*'], [2,\
    \ 3, 2, 3, 2]); // => 2\necho do_algebra(['+', '-', '//', '**'], [5, 2, 3, 2,\
    \ 2]); // => 27\necho do_algebra(['+', '-', '//', '**'], [5, 2, 3, 2, 2, 3]);\
    \ // => error\necho do_algebra(['+', '-', '//', '**'], [5, 2, 3, '2', 2]); //\
    \ => error", "  $str = '';\n  $operator_len = count($operator);\n  $operand_len\
    \ = count($operand);\n  for ($i = 0; $i < $operator_len; $i++) {\n    $str .=\
    \ $operand[$i] . $operator[$i];\n  }\n  $str .= $operand[$operand_len - 1];\n\
    \  return eval(\"return $str;\");\n}\n$operator = ['+', '*', '-'];\n$operand =\
    \ [2, 3, 4, 5];\n$result = do_algebra($operator, $operand);\necho $result;", " \
    \   $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n\
    \        switch ($operator[$i]) {\n            case '+':\n                $result\
    \ += $operand[$i + 1];\n                break;\n            case '-':\n      \
    \          $result -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $result /= $operand[$i + 1];\n      \
    \          break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i + 1]);\n                break;\n        }\n    }\n    return $result;\n\
    }\n", "    $length = count($operator);\n    $result = $operand[0];\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        if ($operator[$i] == \"+\") {\n        \
    \    $result += $operand[$i + 1];\n        } else if ($operator[$i] == \"-\")\
    \ {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"*\") {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"//\") {\n            $result /= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"**\") {\n            $result = pow($result, $operand[$i + 1]);\n      \
    \  }\n    }\n    return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand\
    \ = [2, 3, 4, 5];\n\necho do_algebra($operator, $operand);", "  $operator_list\
    \ = ['+', '-', '*', '//', '**'];\n  $eval_str = '';\n  $count = 0;\n  foreach\
    \ ($operand as $number) {\n    if (in_array($operator[$count], $operator_list))\
    \ {\n      $eval_str .= $number.$operator[$count];\n      $count++;\n    }\n \
    \ }\n  $eval_str .= $operand[count($operand) - 1];\n  return eval(\"return $eval_str;\"\
    );\n}\n\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5])); // 9\nprint_r(do_algebra(['//',\
    \ '-', '+'], [1, 2, 4, 6])); // -1\nprint_r(do_algebra(['//', '-', '+'], [1, 2,\
    \ 4, 6, 5])); // -3\nprint_r(do_algebra(['//', '-', '+'], [1, 2, 4, 6, 5, 2]));\
    \ // 1", "    $result = 0;\n    if ($operator[0] == \"+\") {\n        $result\
    \ = $operand[0] + $operand[1];\n    } else if ($operator[0] == \"-\") {\n    \
    \    $result = $operand[0] - $operand[1];\n    } else if ($operator[0] == \"*\"\
    ) {\n        $result = $operand[0] * $operand[1];\n    } else if ($operator[0]\
    \ == \"//\") {\n        $result = floor($operand[0] / $operand[1]);\n    } else\
    \ if ($operator[0] == \"**\") {\n        $result = pow($operand[0], $operand[1]);\n\
    \    }\n    for ($i = 1; $i < count($operator); $i++) {\n        if ($operator[$i]\
    \ == \"+\") {\n            $result += $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"-\") {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"*\") {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"//\") {\n            $result = floor($result / $operand[$i + 1]);\n   \
    \     } else if ($operator[$i] == \"**\") {\n            $result = pow($result,\
    \ $operand[$i + 1]);\n        }\n    }\n    return $result;\n}\n", "  $operator;\n\
    \  $operand;\n  $operation = array_shift($operand);\n  while( $operator ) {\n\
    \    $operation = eval(\"return {$operation} {$operator[0]} {$operand[0]};\");\n\
    \    array_shift($operator);\n    array_shift($operand);\n  }\n  return $operation;\n\
    }\n", "  $arr = [];\n  for ($i = 0; $i < count($operator); $i++) {\n    $arr[]\
    \ = $operand[$i];\n    $arr[] = $operator[$i];\n  }\n  $arr[] = $operand[count($operand)\
    \ - 1];\n  return eval(implode('', $arr));\n}\n\n$operator = ['+', '*', '-'];\n\
    $operand = [2, 3, 4, 5];\n", "    $result = $operand[0];\n    for ($i = 0; $i\
    \ < count($operator); $i++) {\n        switch ($operator[$i]) {\n            case\
    \ '+':\n                $result += $operand[$i + 1];\n                break;\n\
    \            case '-':\n                $result -= $operand[$i + 1];\n       \
    \         break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$i + 1];\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nvar_dump(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5])); // 9\nvar_dump(do_algebra(['+', '-', '//'], [10, 5, 2])); //\
    \ 8\nvar_dump(do_algebra(['+', '-', '*'], [0, 0, 0, 6])); // 0\nvar_dump(do_algebra(['+',\
    \ '-', '*'], [0, 0, 0, 0])); // 0\nvar_dump(do_algebra(['+', '-', '*'], [8, 0,\
    \ 0, 6])); // 8\nvar_dump(do_algebra(['+', '-', '*'], [8, 0, 0, 6, 12])); // 20\n\
    var_dump(do_algebra(['+', '-', '*'], [8, 0, 0, -6, 12])); // 2\nvar_dump(do_algebra(['+',\
    \ '-', '*'], [8, 0, 0, -6, -12])); // -2\nvar_dump(do_algebra(['**', '//', '+',\
    \ '-'], [2, 2, 5, 2])); // 2\nvar_dump(do_algebra(['**', '//', '+', '-'], [2,\
    \ 2, 5, 3])); // 3", "    $answer = 0;\n    for($i = 0; $i < count($operator);\
    \ $i++){\n        if($i == 0){\n            if($operator[$i] == '+'){\n      \
    \          $answer = $operand[$i] + $operand[$i+1];\n            }\n         \
    \   else if($operator[$i] == '-'){\n                $answer = $operand[$i] - $operand[$i+1];\n\
    \            }\n            else if($operator[$i] == '*'){\n                $answer\
    \ = $operand[$i] * $operand[$i+1];\n            }\n            else if($operator[$i]\
    \ == '//'){\n                $answer = floor($operand[$i] / $operand[$i+1]);\n\
    \            }\n            else if($operator[$i] == '**'){\n                $answer\
    \ = pow($operand[$i], $operand[$i+1]);\n            }\n        }\n        else{\n\
    \            if($operator[$i] == '+'){\n                $answer += $operand[$i+1];\n\
    \            }\n            else if($operator[$i] == '-'){\n                $answer\
    \ -= $operand[$i+1];\n            }\n            else if($operator[$i] == '*'){\n\
    \                $answer *= $operand[$i+1];\n            }\n            else if($operator[$i]\
    \ == '//'){\n                $answer = floor($answer / $operand[$i+1]);\n    \
    \        }\n            else if($operator[$i] == '**'){\n                $answer\
    \ = pow($answer, $operand[$i+1]);\n            }\n        }\n    }\n    return\
    \ $answer;\n}", "  if (empty($operator) || empty($operand)) {\n    return null;\n\
    \  }\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n\
    \    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n", "\t$result = array_shift($operand);\n\
    \tforeach ($operator as $key => $value) {\n\t\t$operand[$key] = $value($result,\
    \ $operand[$key]);\n\t}\n\treturn $operand[count($operand) - 1];\n}\n", "    $result\
    \ = 0;\n    $count = count($operand);\n    $isFirst = true;\n    for ($i = 0;\
    \ $i < $count; $i++) {\n        if ($isFirst) {\n            $result = $operand[$i];\n\
    \            $isFirst = false;\n        } else {\n            switch ($operator[$i\
    \ - 1]) {\n                case '+':\n                    $result += $operand[$i];\n\
    \                    break;\n                case '-':\n                    $result\
    \ -= $operand[$i];\n                    break;\n                case '*':\n  \
    \                  $result *= $operand[$i];\n                    break;\n    \
    \            case '//':\n                    $result = floor($result / $operand[$i]);\n\
    \                    break;\n                case '**':\n                    $result\
    \ = pow($result, $operand[$i]);\n                    break;\n            }\n \
    \       }\n    }\n    return $result;\n}\n$operator = ['+', '*', '-'];\n$operand\
    \ = [2, 3, 4, 5];\n$result = do_algebra($operator, $operand);\necho $result;",
  "    $operand[] = end($operand);\n    $output = [\n        '+' => function ($a,\
    \ $b) {\n            return $a + $b;\n        },\n        '-' => function ($a,\
    \ $b) {\n            return $a - $b;\n        },\n        '*' => function ($a,\
    \ $b) {\n            return $a * $b;\n        },\n        '//' => function ($a,\
    \ $b) {\n            return (int) ($a / $b);\n        },\n        '**' => function\
    \ ($a, $b) {\n            return pow($a, $b);\n        }\n    ];\n    $result\
    \ = array_shift($operand);\n    foreach ($operator as $key => $value) {\n    \
    \    $result = $output[$value]($result, $operand[$key]);\n    }\n    return $result;\n\
    }\n", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n\
    \    if ($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n    } else\
    \ if ($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n    } else\
    \ if ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n    } else\
    \ if ($operator[$i] == '//') {\n      $result = (int)($result / $operand[$i +\
    \ 1]);\n    } else if ($operator[$i] == '**') {\n      $result = pow($result,\
    \ $operand[$i + 1]);\n    }\n  }\n  return $result;\n}\n$operator = ['+', '*',\
    \ '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);", " \
    \ $expression = \"\";\n  for ($i = 0; $i < count($operator); $i++) {\n    $expression\
    \ .= $operand[$i] . $operator[$i];\n  }\n  $expression .= $operand[count($operand)\
    \ - 1];\n  return eval(\"return $expression;\");\n}\n", "    $operator = array_reverse($operator);\n\
    \    $operand = array_reverse($operand);\n    $result = [];\n    for ($i = 0;\
    \ $i < count($operator); $i++) {\n        if ($operator[$i] == \"+\") {\n    \
    \        $result[] = $operand[$i + 1] + $operand[$i];\n        } elseif ($operator[$i]\
    \ == \"-\") {\n            $result[] = $operand[$i + 1] - $operand[$i];\n    \
    \    } elseif ($operator[$i] == \"*\") {\n            $result[] = $operand[$i\
    \ + 1] * $operand[$i];\n        } elseif ($operator[$i] == \"//\") {\n       \
    \     $result[] = floor($operand[$i + 1] / $operand[$i]);\n        } elseif ($operator[$i]\
    \ == \"**\") {\n            $result[] = pow($operand[$i + 1], $operand[$i]);\n\
    \        }\n    }\n    return $result[0];\n}\n", "  for($i = 0; $i < count($operator);\
    \ $i++) {\n    if($operator[$i] == \"*\") {\n      $operand[$i] = $operand[$i]\
    \ * $operand[$i + 1];\n      array_splice($operand, $i + 1, 1);\n      array_splice($operator,\
    \ $i, 1);\n      $i--;\n    } else if($operator[$i] == \"/\") {\n      $operand[$i]\
    \ = floor($operand[$i] / $operand[$i + 1]);\n      array_splice($operand, $i +\
    \ 1, 1);\n      array_splice($operator, $i, 1);\n      $i--;\n    } else if($operator[$i]\
    \ == \"^\") {\n      $operand[$i] = pow($operand[$i], $operand[$i + 1]);\n   \
    \   array_splice($operand, $i + 1, 1);\n      array_splice($operator, $i, 1);\n\
    \      $i--;\n    }\n  }\n  for($i = 0; $i < count($operator); $i++) {\n    if($operator[$i]\
    \ == \"+\") {\n      $operand[$i] = $operand[$i] + $operand[$i + 1];\n      array_splice($operand,\
    \ $i + 1, 1);\n      array_splice($operator, $i, 1);\n      $i--;\n    } else\
    \ if($operator[$i] == \"-\") {\n      $operand[$i] = $operand[$i] - $operand[$i\
    \ + 1];\n      array_splice($operand, $i + 1, 1);\n      array_splice($operator,\
    \ $i, 1);\n      $i--;\n    }\n  }\n  return $operand[0];\n}\necho do_algebra(['+',\
    \ '-', '*', '/', '^'], [2, 3, 4, 5, 2]) . \"\\n\"; //11", "  $result = 0;\n  $num_operand\
    \ = count($operand);\n  $num_operator = count($operator);\n  $mul_div = 0;\n \
    \ $exp = 0;\n  $expression = \"\";\n  $counter = 0;\n  $result = $operand[0];\n\
    \  while($counter < $num_operator) {\n    switch($operator[$counter]) {\n    \
    \  case \"+\":\n        $result += $operand[$counter + 1];\n        $expression\
    \ .= \"+\".$operand[$counter + 1];\n        break;\n      case \"-\":\n      \
    \  $result -= $operand[$counter + 1];\n        $expression .= \"-\".$operand[$counter\
    \ + 1];\n        break;\n      case \"*\":\n        $mul_div += $operand[$counter\
    \ + 1];\n        $expression .= \"*\".$operand[$counter + 1];\n        break;\n\
    \      case \"//\":\n        $mul_div -= $operand[$counter + 1];\n        $expression\
    \ .= \"//\".$operand[$counter + 1];\n        break;\n      case \"**\":\n    \
    \    $exp += $operand[$counter + 1];\n        $expression .= \"**\".$operand[$counter\
    \ + 1];\n        break;\n    }\n    $counter++;\n  }\n  $result += $mul_div;\n\
    \  if($exp > 0) {\n    $result = pow($result, $exp);\n  }\n  return \"result =\
    \ $expression\\n=> result = $result\";\n}\n\n$operator = ['+', '-', '*', '//',\
    \ '**'];\n$operand = [2, 3, 4, 5, 6];\necho do_algebra($operator, $operand);\n",
  "    $result = array_shift($operand);\n    for ($i = 0; $i < count($operator); $i++)\
    \ {\n        switch ($operator[$i]) {\n            case '+':\n               \
    \ $result += $operand[$i];\n                break;\n            case '-':\n  \
    \              $result -= $operand[$i];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i];\n                break;\n   \
    \         case '//':\n                $result /= $operand[$i];\n             \
    \   break;\n            case '**':\n                $result **= $operand[$i];\n\
    \                break;\n        }\n    }\n    return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\";", "    $res = $operand[0];\n    for ($i\
    \ = 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n    \
    \        case '+':\n                $res += $operand[$i + 1];\n              \
    \  break;\n            case '-':\n                $res -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $res *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $res\
    \ = floor($res / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $res = pow($res, $operand[$i + 1]);\n               \
    \ break;\n        }\n    }\n    return $res;\n}\n", "  for($i = 0; $i < count($operator);\
    \ $i++) {\n    if($operator[$i] == '**') {\n      $operand[$i + 1] = pow($operand[$i],\
    \ $operand[$i + 1]);\n      array_splice($operand, $i, 1);\n      array_splice($operator,\
    \ $i, 1);\n      $i--;\n    }\n  }\n  for($i = 0; $i < count($operator); $i++)\
    \ {\n    if($operator[$i] == '//') {\n      $operand[$i + 1] = floor($operand[$i]\
    \ / $operand[$i + 1]);\n      array_splice($operand, $i, 1);\n      array_splice($operator,\
    \ $i, 1);\n      $i--;\n    }\n  }\n  for($i = 0; $i < count($operator); $i++)\
    \ {\n    if($operator[$i] == '*') {\n      $operand[$i + 1] = $operand[$i] * $operand[$i\
    \ + 1];\n      array_splice($operand, $i, 1);\n      array_splice($operator, $i,\
    \ 1);\n      $i--;\n    }\n  }\n  for($i = 0; $i < count($operator); $i++) {\n\
    \    if($operator[$i] == '+') {\n      $operand[$i + 1] = $operand[$i] + $operand[$i\
    \ + 1];\n      array_splice($operand, $i, 1);\n      array_splice($operator, $i,\
    \ 1);\n      $i--;\n    }\n  }\n  for($i = 0; $i < count($operator); $i++) {\n\
    \    if($operator[$i] == '-') {\n      $operand[$i + 1] = $operand[$i] - $operand[$i\
    \ + 1];\n      array_splice($operand, $i, 1);\n      array_splice($operator, $i,\
    \ 1);\n      $i--;\n   ", "    // Write your code here\n    // To print results\
    \ to the standard output you can use print\n    // Example: print \"Hello world!\"\
    ;\n}", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result /= $operand[$i + 1];\n        break;\n\
    \      case '**':\n        $result = pow($result, $operand[$i + 1]);\n       \
    \ break;\n    }\n  }\n  return $result;\n}\n\n$operator = array('+', '*', '-');\n\
    $operand = array(2, 3, 4, 5);\necho do_algebra($operator, $operand);\n", "  $result\
    \ = array_shift($operand);\n  for ($i = 0; $i < count($operator); $i++) {\n  \
    \  $op = $operator[$i];\n    switch ($op) {\n      case '+':\n        $result\
    \ += $operand[$i];\n        break;\n      case '-':\n        $result -= $operand[$i];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i];\n        break;\n\
    \      case '//':\n        $result = intval($result / $operand[$i]);\n       \
    \ break;\n      case '**':\n        $result = pow($result, $operand[$i]);\n  \
    \      break;\n    }\n  }\n  return $result;\n}\n\n$tests = [\n  [\n    'input'\
    \ => [\n      'operator' => ['+', '*', '-'],\n      'operand' => [2, 3, 4, 5]\n\
    \    ],\n    'expected' => 9\n  ],\n  [\n    'input' => [\n      'operator' =>\
    \ ['//', '**'],\n      'operand' => [12, 3, 3]\n    ],\n    'expected' => 2\n\
    \  ],\n  [\n    'input' => [\n      'operator' => ['**', '*', '//'],\n      'operand'\
    \ => [2, 3, 2, 8]\n    ],\n    'expected' => 12\n  ],\n  [\n    'input' => [\n\
    \      'operator' => ['+', '*', '-'],\n      'operand' => [1, 2, 3, 4, 5]\n  \
    \  ],\n    'expected' => -4\n  ],\n  [\n    'input' => [\n      'operator' =>\
    \ ['//', '+', '//', '-', '**'],\n      'operand' => [10, 2, 4, 2, 3, 2]\n    ],\n\
    \    'expected' => -2\n  ],\n  [\n    'input' => [\n      'operator' => ['+',\
    \ '+', '*', '-', '//', '**'],\n      'operand'", "  $len = count($operator);\n\
    \  $num = count($operand);\n  $result = $operand[0];\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}", "  // Your code here\n\
    \  $a = $operand[0];\n  for($i = 0; $i < count($operator); $i++){\n    switch($operator[$i]){\n\
    \      case '+':\n        $a += $operand[$i+1];\n        break;\n      case '-':\n\
    \        $a -= $operand[$i+1];\n        break;\n      case '*':\n        $a *=\
    \ $operand[$i+1];\n        break;\n      case '//':\n        $a = floor($a / $operand[$i+1]);\n\
    \        break;\n      case '**':\n        $a = pow($a, $operand[$i+1]);\n   \
    \     break;\n    }\n  }\n  return $a;\n}", "  $result = $operand[0];\n  for ($i\
    \ = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case\
    \ '+':\n        $result += $operand[$i + 1];\n        break;\n      case '-':\n\
    \        $result -= $operand[$i + 1];\n        break;\n      case '*':\n     \
    \   $result *= $operand[$i + 1];\n        break;\n      case '//':\n        $result\
    \ /= $operand[$i + 1];\n        break;\n      case '**':\n        $result **=\
    \ $operand[$i + 1];\n        break;\n    }\n  }\n  return $result;\n}\n\nprint(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));", "    $length = count($operator);\n    $output =\
    \ $operand[0];\n    for ($i = 0; $i < $length; $i++) {\n        if ($operator[$i]\
    \ == '+') {\n            $output += $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == '-') {\n            $output -= $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == '*') {\n            $output *= $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == '//') {\n            $output /= $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == '**') {\n            $output **= $operand[$i + 1];\n        }\n    }\n  \
    \  return $output;\n}\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));", " \
    \ if(!count($operator) || !count($operand)) return null;\n  $res = $operand[0];\n\
    \  for($i = 0; $i < count($operator); $i++) {\n    switch($operator[$i]) {\n \
    \     case '+':\n        $res += $operand[$i + 1];\n        break;\n      case\
    \ '-':\n        $res -= $operand[$i + 1];\n        break;\n      case '*':\n \
    \       $res *= $operand[$i + 1];\n        break;\n      case '//':\n        $res\
    \ = floor($res / $operand[$i + 1]);\n        break;\n      case '**':\n      \
    \  $res = pow($res, $operand[$i + 1]);\n        break;\n    }\n  }\n  return $res;\n\
    }\n", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n\
    \    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = (int)($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}", "    $exp = '';\n\
    \    for ($i = 0; $i < count($operand); $i++) {\n        $exp .= $operand[$i];\n\
    \        if ($i < count($operator)) {\n            $exp .= $operator[$i];\n  \
    \      }\n    }\n    return eval(\"return $exp;\");\n}\n\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])); // 9\nprint_r(do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5, 6])); // 9\nprint_r(do_algebra(['*', '-', '+'], [2, 3, 4, 5])); // 8\n\
    print_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7])); // 16\nprint_r(do_algebra(['+',\
    \ '*', '+'], [2, 3, 4, 5, 6, 7])); // 28\nprint_r(do_algebra(['*', '*', '-'],\
    \ [2, 3, 4, 5, 6, 7])); // -40\nprint_r(do_algebra(['*', '*', '*'], [2, 3, 4,\
    \ 5, 6, 7])); // 5040\nprint_r(do_algebra(['*', '*', '*'], [2, 3, 4, 5, 6, 7,\
    \ 8])); // 40320\nprint_r(do_algebra(['*', '*', '*'], [2, 3, 4, 5, 6, 7, 8, 9]));\
    \ // 362880\nprint_r(do_algebra(['*', '*', '*'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\
    \ // 3628800\nprint_r(do_algebra(['*', '*', '*'], [2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11])); // 39916800\nprint_r(do_algebra(['*', '*', '*'", "  // // return 5;\n\
    \  // // This one failed the test\n  // $res = [];\n  // $nums = [];\n  // foreach\
    \ ($operand as $k => $v) {\n  //   array_push($nums, $v);\n  //   if (isset($operator[$k]))\
    \ {\n  //     array_push($res, $operator[$k]);\n  //   }\n  // }\n  // $operand\
    \ = $nums;\n  // $total = $operand[0];\n  // for ($i = 0; $i < count($res); $i++)\
    \ {\n  //   if ($res[$i] == '*') {\n  //     $total *= $operand[$i + 1];\n  //\
    \   } else if ($res[$i] == '+') {\n  //     $total += $operand[$i + 1];\n  //\
    \   } else if ($res[$i] == '-') {\n  //     $total -= $operand[$i + 1];\n  //\
    \   } else if ($res[$i] == '//') {\n  //     $total = floor($total / $operand[$i\
    \ + 1]);\n  //   } else if ($res[$i] == '**') {\n  //     $total = pow($total,\
    \ $operand[$i + 1]);\n  //   }\n  // }\n  // return $total;\n  // This one finally\
    \ passed the test\n  return eval(implode('', array_map(function($op, $n) {\n \
    \   if ($op == '//') return \"floor($n \";\n    if ($op == '**') return \"$n **\
    \ \";\n    return \"$n $op \";\n  }, $operator, $operand)) . array_pop($operand));\n\
    }", "\t// Write your code here\n\t// To print results to the standard output you\
    \ can use print\n\t// Example: print \"Hello world!\";\n}", "  $eval = array_shift($operand);\n\
    \  foreach ($operator as $op) {\n    switch ($op) {\n      case '+':\n       \
    \ $eval += array_shift($operand);\n        break;\n      case '-':\n        $eval\
    \ -= array_shift($operand);\n        break;\n      case '*':\n        $eval *=\
    \ array_shift($operand);\n        break;\n      case '//':\n        $eval = intdiv($eval,\
    \ array_shift($operand));\n        break;\n      case '**':\n        $eval = pow($eval,\
    \ array_shift($operand));\n        break;\n    }\n  }\n  return $eval;\n}\n\n\
    $operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand) . \"\\n\";", "  if (empty($operator) || empty($operand)) {\n    return\
    \ false;\n  }\n  $result = reset($operand);\n  foreach ($operator as $index =>\
    \ $op) {\n    switch ($op) {\n      case '+':\n        $result += $operand[$index\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$index +\
    \ 1];\n        break;\n      case '*':\n        $result *= $operand[$index + 1];\n\
    \        break;\n      case '//':\n        $result = floor($result / $operand[$index\
    \ + 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$index\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);",
  "  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    switch\
    \ ($operator[$i]) {\n      case '+':\n        $result += $operand[$i + 1];\n \
    \       break;\n      case '-':\n        $result -= $operand[$i + 1];\n      \
    \  break;\n      case '*':\n        $result *= $operand[$i + 1];\n        break;\n\
    \      case '//':\n        $result = (int)($result / $operand[$i + 1]);\n    \
    \    break;\n      case '**':\n        $result = pow($result, $operand[$i + 1]);\n\
    \        break;\n    }\n  }\n  return $result;\n}\n\nprint do_algebra(['+', '*',\
    \ '//'], [2, 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+', '*', '//'], [2, 3, 4,\
    \ 5]) . \"\\n\";\nprint do_algebra(['+', '*', '//'], [2, 3, 4, 5]) . \"\\n\";\n\
    print do_algebra(['+', '*', '//'], [2, 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+',\
    \ '*', '//'], [2, 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+', '*', '//'], [2,\
    \ 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+', '*', '//'], [2, 3, 4, 5]) . \"\\\
    n\";\nprint do_algebra(['+', '*', '//'], [2, 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+',\
    \ '*', '//'], [2, 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+', '*', '//'], [2,\
    \ 3, 4, 5]) . \"\\n\";\nprint do_algebra(['+', '*', '//'], [2, 3, 4, 5])", " \
    \ if(!$operator || !$operand) return;\n  $opArr = [];\n  for($i = 0; $i < count($operator);\
    \ $i++) {\n    $opArr[] = $operand[$i];\n    $opArr[] = $operator[$i];\n  }\n\
    \  $opArr[] = $operand[count($operand) - 1];\n  //print_r($opArr);\n  //print_r(count($opArr));\n\
    \  $formula = implode(\" \", $opArr);\n  //echo $formula;\n  return eval(\"return\
    \ $formula;\");\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n\
    echo do_algebra($operator, $operand);", "  for($i = 0; $i < count($operator);\
    \ $i++) {\n    if($operator[$i] == \"+\") {\n      $result = $operand[$i] + $operand[$i\
    \ + 1];\n      unset($operand[$i + 1]);\n      $operand[$i] = $result;\n    }\
    \ else if($operator[$i] == \"-\") {\n      $result = $operand[$i] - $operand[$i\
    \ + 1];\n      unset($operand[$i + 1]);\n      $operand[$i] = $result;\n    }\
    \ else if($operator[$i] == \"*\") {\n      $result = $operand[$i] * $operand[$i\
    \ + 1];\n      unset($operand[$i + 1]);\n      $operand[$i] = $result;\n    }\
    \ else if($operator[$i] == \"//\") {\n      $result = $operand[$i] / $operand[$i\
    \ + 1];\n      unset($operand[$i + 1]);\n      $operand[$i] = $result;\n    }\
    \ else if($operator[$i] == \"**\") {\n      $result = $operand[$i] ** $operand[$i\
    \ + 1];\n      unset($operand[$i + 1]);\n      $operand[$i] = $result;\n    }\n\
    \  }\n  return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3,\
    \ 4, 5];\n\necho do_algebra($operator, $operand);", "    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\";\n    $operator_count = count($operator);\n    $i = 0;\n\
    \    $eval_result = $operand[0];\n    $operand_count = count($operand);\n    $operand_count--;\n\
    \    for($i=0; $i<$operator_count; $i++){\n        switch($operator[$i]){\n  \
    \          case '+':\n                $eval_result = $eval_result + $operand[$i+1];\n\
    \                break;\n            case '-':\n                $eval_result =\
    \ $eval_result - $operand[$i+1];\n                break;\n            case '*':\n\
    \                $eval_result = $eval_result * $operand[$i+1];\n             \
    \   break;\n            case '//':\n                $eval_result = $eval_result\
    \ / $operand[$i+1];\n                break;\n            case '**':\n        \
    \        $eval_result = $eval_result ** $operand[$i+1];\n                break;\n\
    \        }\n    }\n    return $eval_result;\n}\n\nprint do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]);", "  $answer = array_shift($operand);\n  while($operator\
    \ && $operand) {\n    $operator = array_shift($operator);\n    $num = array_shift($operand);\n\
    \    switch($operator) {\n      case '+':\n        $answer += $num;\n        break;\n\
    \      case '-':\n        $answer -= $num;\n        break;\n      case '*':\n\
    \        $answer *= $num;\n        break;\n      case '//':\n        $answer =\
    \ floor($answer / $num);\n        break;\n      case '**':\n        $answer =\
    \ pow($answer, $num);\n        break;\n    }\n  }\n  return $answer;\n}\n\n$a\
    \ = array('+', '*', '-');\n$b = array(2, 3, 4, 5);\necho do_algebra($a, $b);\n\
    echo \"\\n\";", "  $operand[0] = $operand[0] * 1;\n  $i = 0;\n  while ($i < count($operator))\
    \ {\n    if ($operator[$i] == '+') {\n      $operand[$i + 1] = $operand[$i] +\
    \ $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $operand[$i\
    \ + 1] = $operand[$i] - $operand[$i + 1];\n    } else if ($operator[$i] == '*')\
    \ {\n      $operand[$i + 1] = $operand[$i] * $operand[$i + 1];\n    } else if\
    \ ($operator[$i] == '//') {\n      $operand[$i + 1] = floor($operand[$i] / $operand[$i\
    \ + 1]);\n    } else if ($operator[$i] == '**') {\n      $operand[$i + 1] = pow($operand[$i],\
    \ $operand[$i + 1]);\n    }\n    $i++;\n  }\n  return $operand[count($operand)\
    \ - 1];\n}\n", "\t$result = array_shift($operand);\n\tforeach ($operator as $index\
    \ => $operation) {\n\t\tswitch ($operation) {\n\t\t\tcase '+':\n\t\t\t\t$result\
    \ += $operand[$index];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$result -= $operand[$index];\n\
    \t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$result *= $operand[$index];\n\t\t\t\t\
    break;\n\t\t\tcase '//':\n\t\t\t\t$result /= $operand[$index];\n\t\t\t\tbreak;\n\
    \t\t\tcase '**':\n\t\t\t\t$result = pow($result, $operand[$index]);\n\t\t\t\t\
    break;\n\t\t}\n\t}\n\treturn $result;\n}\n", "    $result = null;\n    $operand_count\
    \ = count($operand);\n    $operator_count = count($operator);\n    $last_operator\
    \ = $operator[$operator_count - 1];\n    $last_operand = $operand[$operand_count\
    \ - 1];\n    $expression = \"return \";\n    if($operator_count < 1 || $operand_count\
    \ < 2){\n        return null;\n    }\n    for($i = 0; $i < $operand_count - 1;\
    \ $i++){\n        $expression .= $operand[$i] . $operator[$i];\n    }\n    $expression\
    \ .= $last_operand . \";\";\n    return eval($expression);\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);", "  $result = $operand[0];\n  $count = count($operator);\n\
    \  for ($i = 0; $i < $count; $i++) {\n    if ($operator[$i] == '+') {\n      $result\
    \ += $operand[$i + 1];\n    } elseif ($operator[$i] == '-') {\n      $result -=\
    \ $operand[$i + 1];\n    } elseif ($operator[$i] == '*') {\n      $result *= $operand[$i\
    \ + 1];\n    } elseif ($operator[$i] == '//') {\n      $result = (int) ($result\
    \ / $operand[$i + 1]);\n    } elseif ($operator[$i] == '**') {\n      $result\
    \ = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n}\n\n$operand\
    \ = [2, 3, 4, 5];\n$operator = ['+', '*', '-'];\necho do_algebra($operator, $operand);\n\
    echo \"\\n\";\n", "  // Write your code here...\n}\n", "    $result = array_shift($operand);\n\
    \    foreach ($operator as $key => $value) {\n        switch ($value) {\n    \
    \        case '+':\n                $result += $operand[$key];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$key];\n\
    \                break;\n            case '*':\n                $result *= $operand[$key];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$key]);\n                break;\n            case '**':\n       \
    \         $result = pow($result, $operand[$key]);\n                break;\n  \
    \      }\n    }\n    return $result;\n}\nprint do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]) . \"\\n\";\nprint do_algebra(['**', '//', '+'], [2, 3, 4, 5]) . \"\
    \\n\";\nprint do_algebra(['+', '-'], [3, 5, 1]) . \"\\n\";\nprint do_algebra(['*',\
    \ '//'], [3, 7, 2]) . \"\\n\";", "\t$result = 0;\n\tfor ($i = 0; $i < count($operator);\
    \ $i++) {\n\t\tif ($i == 0) {\n\t\t\t$result = ($operator[$i] == '//') ? (int)($operand[$i]\
    \ / $operand[$i + 1]) :\n\t\t\t\t\t\t\t\t\t\t\t\t$operand[$i] . $operator[$i]\
    \ . $operand[$i + 1];\n\t\t} else {\n\t\t\t$result = ($operator[$i] == '//') ?\
    \ (int)($result / $operand[$i + 1]) :\n\t\t\t\t\t\t\t\t\t\t\t\t$result . $operator[$i]\
    \ . $operand[$i + 1];\n\t\t}\n\t}\n\treturn eval(\"return $result;\");\n}\n$operator\
    \ = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);",
  "\t$result = $operand[0];\n\t$i = 0;\n\tforeach ($operator as $o) {\n\t\tswitch\
    \ ($o) {\n\t\t\tcase '+':\n\t\t\t\t$result += $operand[$i + 1];\n\t\t\t\tbreak;\n\
    \t\t\tcase '-':\n\t\t\t\t$result -= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\t\
    case '*':\n\t\t\t\t$result *= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\
    \t\t\t\t$result = floor($result / $operand[$i + 1]);\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '**':\n\t\t\t\t$result = pow($result, $operand[$i + 1]);\n\t\t\t\tbreak;\n\t\
    \t}\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand\
    \ = [2, 3, 4, 5];\necho do_algebra($operator, $operand);", "\tif (count($operator)\
    \ == 0 || count($operand) == 0) {\n\t\treturn 0;\n\t}\n\t$result = $operand[0];\n\
    \t$index = 0;\n\tfor ($i = 1; $i < count($operand); $i++) {\n\t\tif ($operator[$index]\
    \ == '+') {\n\t\t\t$result += $operand[$i];\n\t\t} else if ($operator[$index]\
    \ == '-') {\n\t\t\t$result -= $operand[$i];\n\t\t} else if ($operator[$index]\
    \ == '*') {\n\t\t\t$result *= $operand[$i];\n\t\t} else if ($operator[$index]\
    \ == '//') {\n\t\t\t$result = floor($result / $operand[$i]);\n\t\t} else if ($operator[$index]\
    \ == '**') {\n\t\t\t$result = pow($result, $operand[$i]);\n\t\t}\n\t\t$index++;\n\
    \t}\n\treturn $result;\n}\n\n$operator = [\"+\", \"*\", \"-\"];\n$operand = [2,\
    \ 3, 4, 5];\nprint_r(do_algebra($operator, $operand));", "\t$output = $operand[0];\n\
    \t$i = 0;\n\t$j = 1;\n\twhile($i < count($operator)){\n\t\tswitch($operator[$i]){\n\
    \t\t\tcase '+':\n\t\t\t\t$output += $operand[$j];\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '-':\n\t\t\t\t$output -= $operand[$j];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\
    \t\t$output *= $operand[$j];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$output\
    \ = floor($output / $operand[$j]);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t\
    $output = pow($output, $operand[$j]);\n\t\t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t\t\
    $j++;\n\t}\n  return $output;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
