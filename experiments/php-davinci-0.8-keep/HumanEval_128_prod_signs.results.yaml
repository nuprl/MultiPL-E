name: HumanEval_128_prod_signs
language: php
results:
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\t$result\
    \ = 1;\n\tif (empty($arr)) {\n\t\treturn null;\n\t}\n\tforeach ($arr as $value)\
    \ {\n\t\tif ($value != 0) {\n\t\t\t$result *= $value / abs($value);\n\t\t}\n\t\
    }\n\treturn array_sum(array_map('abs', $arr)) * $result;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylj5kq9q.php:28\n\
    Stack trace:\n#0 /tmp/tmpylj5kq9q.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpylj5kq9q.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $signs\
    \ = array_map(function($el) {\n    if ($el < 0) return -1;\n    if ($el > 0) return\
    \ 1;\n    return 0;\n  }, $arr);\n  $product = array_product($signs);\n  $magnitudes\
    \ = array_map(function($el) {\n    return abs($el);\n  }, $arr);\n  $sum = array_sum($magnitudes);\n\
    \  if (count($arr) == 0) return;\n  return $sum * $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  // your\
    \ code here\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpppfpaf8l.php:18\n\
    Stack trace:\n#0 /tmp/tmpppfpaf8l.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpppfpaf8l.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $signs\
    \ = [];\n  $magnitudes = [];\n  if (count($arr) === 0) {\n    return null;\n \
    \ }\n  foreach ($arr as $value) {\n    if ($value < 0) {\n      $signs[] = -1;\n\
    \      $magnitudes[] = abs($value);\n    } else if ($value > 0) {\n      $signs[]\
    \ = 1;\n      $magnitudes[] = abs($value);\n    } else {\n      $signs[] = 0;\n\
    \      $magnitudes[] = abs($value);\n    }\n  }\n  return array_product($signs)\
    \ * array_sum($magnitudes);\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return NULL;\n    }\n    $num = 1;\n    $sum = 0;\n\
    \    foreach ($arr as $value) {\n        if ($value > 0) {\n            $num *=\
    \ 1;\n        } elseif ($value < 0) {\n            $num *= -1;\n        } else\
    \ {\n            $num *= 0;\n        }\n        $sum += abs($value);\n    }\n\
    \    return $sum * $num;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  // filter\
    \ with valid integer\n  $arr = array_filter($arr, function($x) {\n    return is_int($x);\n\
    \  });\n  if (count($arr) == 0) return null;\n  $arr = array_map(function($x)\
    \ {\n    // change the sign\n    if ($x < 0) return -1;\n    else if ($x > 0)\
    \ return 1;\n    else return 0;\n  }, $arr);\n  $sum = 0;\n  foreach ($arr as\
    \ $x) {\n    if ($x < 0) {\n      $sum -= $x;\n    } else {\n      $sum += $x;\n\
    \    }\n  }\n  return $sum;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_px38kt8.php:38\n\
    Stack trace:\n#0 /tmp/tmp_px38kt8.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_px38kt8.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(count($arr)\
    \ <= 0) {\n        return null;\n    }\n    return array_reduce($arr, function($carry,\
    \ $item) {\n        return $carry + $item * ($item >= 0 ? 1 : -1);\n    }, 0);\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9mdh8rd.php:23\n\
    Stack trace:\n#0 /tmp/tmpx9mdh8rd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpx9mdh8rd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $res\
    \ = array_product(array_map(function($x) {\n        if ($x > 0) return 1;\n  \
    \      if ($x < 0) return -1;\n        return 0;\n    }, $arr));\n    return array_reduce($arr,\
    \ function($carry, $x) use ($res) {\n        return $carry + abs($x) * $res;\n\
    \    }, 0);\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsufsa8o.php:28\n\
    Stack trace:\n#0 /tmp/tmpcsufsa8o.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpcsufsa8o.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    //\
    \ Write your code here\n    $count = 0;\n    $mult = 1;\n    if (count($arr) ==\
    \ 0)\n        return null;\n    foreach ($arr as $value) {\n        if ($value\
    \ != 0) {\n            $count += abs($value);\n            $mult *= ($value >\
    \ 0) ? 1 : -1;\n        }\n    }\n    return $count * $mult;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bckonvq.php:30\n\
    Stack trace:\n#0 /tmp/tmp_bckonvq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_bckonvq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $total\
    \ = 0;\n  if (!empty($arr)) {\n    $total = array_reduce($arr, function($carry,\
    \ $item) {\n      $sign = 1;\n      if ($item < 0) {\n        $sign = -1;\n  \
    \    } elseif ($item === 0) {\n        $sign = 0;\n      }\n      return $carry\
    \ + $sign * abs($item);\n    }, 1);\n  }\n  return $total;\n}\n\n$a = [1, 2, 2,\
    \ -4];\n$a = [0, 1];\n$a = [];\n\necho prod_signs($a) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcu_8xrxc.php:36\n\
    Stack trace:\n#0 /tmp/tmpcu_8xrxc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcu_8xrxc.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $prod\
    \ = 1;\n  foreach ($arr as $el) {\n    if ($el > 0) {\n      $prod *= 1;\n   \
    \ } elseif ($el < 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n\
    \    }\n  }\n  if ($prod === 0) {\n    return 0;\n  }\n  $magn = 0;\n  foreach\
    \ ($arr as $el) {\n    $magn += abs($el);\n  }\n  return $magn * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_phfecyg.php:39\n\
    Stack trace:\n#0 /tmp/tmp_phfecyg.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp_phfecyg.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (!count($arr)) return null;\n    $p = 1;\n    $s = 0;\n    foreach ($arr as\
    \ $i) {\n        $s += abs($i);\n        $p *= $i ? ($i > 0 ? 1 : -1) : 0;\n \
    \   }\n    return $s * $p;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $result\
    \ = 0;\n  if (count($arr) == 0) {\n    return NULL;\n  }\n  $prod_signs = 1;\n\
    \  foreach ($arr as $num) {\n    if ($num == 0) {\n      continue;\n    }\n  \
    \  $sign = $num > 0 ? 1 : -1;\n    $prod_signs *= $sign;\n    $result += abs($num);\n\
    \  }\n  return $result * $prod_signs;\n}\n\n$arr = [1, 2, 2, -4];\n$arr = [0,\
    \ 1];\n$arr = [];\necho prod_signs($arr);\nfunction candidate(...$args) {\n  \
    \  return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiyghn49q.php:37\n\
    Stack trace:\n#0 /tmp/tmpiyghn49q.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpiyghn49q.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\tif (count($arr)\
    \ == 0) {\n\t\treturn null;\n\t}\n\t$res = 1;\n\t$sum = 0;\n\tforeach ($arr as\
    \ $elem) {\n\t\tif ($elem != 0) {\n\t\t\t$res *= $elem / abs($elem);\n\t\t}\n\t\
    \t$sum += abs($elem);\n\t}\n\treturn $res * $sum;\n}\necho prod_signs([1, 2, 2,\
    \ -4]) . \"\\n\";\necho prod_signs([0, 1]) . \"\\n\";\necho prod_signs([]) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2,\
    \ 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbrka4sn.php:33\n\
    Stack trace:\n#0 /tmp/tmpmbrka4sn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpmbrka4sn.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $sum\
    \ = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum += abs($num);\n   \
    \ if ($num !== 0) $prod *= $num / abs($num);\n  }\n  return $sum * $prod;\n}\n\
    \nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9azllfq.php:26\n\
    Stack trace:\n#0 /tmp/tmpr9azllfq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpr9azllfq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  // check\
    \ whether array is empty or not\n  if (count($arr) == 0) {\n    return null;\n\
    \  }\n  // calculate each product of signs of each number in array\n  // and calculate\
    \ each magnitude of each integer in array\n  $product_of_signs = 1;\n  $sum_of_magnitudes\
    \ = 0;\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] == 0) {\n \
    \     $product_of_signs = 0;\n      $sum_of_magnitudes = 0;\n      break;\n  \
    \  }\n    elseif ($arr[$i] > 0) {\n      $product_of_signs *= 1;\n      $sum_of_magnitudes\
    \ += $arr[$i];\n    }\n    else {\n      $product_of_signs *= -1;\n      $sum_of_magnitudes\
    \ += abs($arr[$i]);\n    }\n  }\n  return $product_of_signs * $sum_of_magnitudes;\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $sum = 0;\n    $prod = 1;\n\
    \    foreach ($arr as $val) {\n        $sign = $val > 0 ? 1 : ($val < 0 ? -1 :\
    \ 0);\n        $sum += abs($val);\n        $prod *= $sign;\n    }\n    return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    $prod = 1;\n    $empty = 0;\n    foreach ($arr as $value) {\n    \
    \    if ($value > 0) {\n            $prod *= 1;\n            $sum += $value;\n\
    \        } elseif ($value < 0) {\n            $prod *= -1;\n            $sum +=\
    \ $value * -1;\n        } else {\n            $prod *= 0;\n            $empty++;\n\
    \        }\n    }\n    if ($empty === count($arr)) {\n        return NULL;\n \
    \   }\n    return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $magnitudes\
    \ = array_map(function($val) {\n    return abs($val);\n  }, $arr);\n  if (sizeof($magnitudes)\
    \ == 0) {\n    return null;\n  }\n  $signs = array_map(function($val) {\n    if\
    \ ($val == 0) {\n      return 1;\n    }\n    if ($val > 0) {\n      return 1;\n\
    \    }\n    return -1;\n  }, $arr);\n  $result = array_product($signs);\n  $magnitudes\
    \ = array_sum($magnitudes);\n  return $result * $magnitudes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnj4up2vg.php:37\n\
    Stack trace:\n#0 /tmp/tmpnj4up2vg.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpnj4up2vg.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\tif (empty($arr))\
    \ return null;\n\t$signs = 1;\n\t$numbers = 0;\n\tforeach ($arr as $number) {\n\
    \t\t$signs *= (int) ($number > 0) - (int) ($number < 0);\n\t\t$numbers += abs($number);\n\
    \t}\n\treturn $signs * $numbers;\n}\n$arr = [1, 2, 2, -4];\nprint_r($arr);\necho\
    \ prod_signs($arr) . \"\\n\";\n\n$arr = [0, 1];\nprint_r($arr);\necho prod_signs($arr)\
    \ . \"\\n\";\n\n$arr = [];\nprint_r($arr);\necho prod_signs($arr) . \"\\n\";\n\
    \n$arr = [1, -1, 2, -2, 3, -3];\nprint_r($arr);\necho prod_signs($arr) . \"\\\
    n\";\n\n$arr = [1, -2, 3, -4, 5, -6];\nprint_r($arr);\necho prod_signs($arr) .\
    \ \"\\n\";\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => -4\n)\n\
    -9\nArray\n(\n    [0] => 0\n    [1] => 1\n)\n0\nArray\n(\n)\n\nArray\n(\n    [0]\
    \ => 1\n    [1] => -1\n    [2] => 2\n    [3] => -2\n    [4] => 3\n    [5] => -3\n\
    )\n-12\nArray\n(\n    [0] => 1\n    [1] => -2\n    [2] => 3\n    [3] => -4\n \
    \   [4] => 5\n    [5] => -6\n)\n-21\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (count($arr) == 0) {\n        return;\n    }\n    $sum = 0;\n    $mult = 1;\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        $sign = sign($arr[$i]);\n\
    \        $mult *= $sign;\n        $sum += abs($arr[$i]);\n    }\n    return $sum\
    \ * $mult;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpr3nj184s.php:17\n\
    Stack trace:\n#0 /tmp/tmpr3nj184s.php(25): prod_signs(Array)\n#1 /tmp/tmpr3nj184s.php(29):\
    \ candidate(Array)\n#2 /tmp/tmpr3nj184s.php(39): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpr3nj184s.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(empty($arr))\
    \ {\n        return null;\n    }\n    $sum = 0;\n    $product = 1;\n    foreach($arr\
    \ as $val) {\n        $sum += abs($val);\n        $product *= $val != 0 ? sign($val)\
    \ : 1;\n    }\n    return $sum * $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmp09xk01ov.php:18\n\
    Stack trace:\n#0 /tmp/tmp09xk01ov.php(24): prod_signs(Array)\n#1 /tmp/tmp09xk01ov.php(28):\
    \ candidate(Array)\n#2 /tmp/tmp09xk01ov.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp09xk01ov.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return;\n    }\n    $prod_signs = 1;\n    $sum_magn\
    \ = 0;\n    foreach ($arr as $value) {\n        $sign = ($value > 0) - ($value\
    \ < 0);\n        $prod_signs *= $sign;\n        $sum_magn += abs($value);\n  \
    \  }\n    return $sum_magn * $prod_signs;\n}\necho prod_signs([1, 2, 2, -4]);\
    \ //== -9\necho \"<br>\";\necho prod_signs([0, 1]); //== 0\necho \"<br>\";\necho\
    \ prod_signs([]); //== None\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: -9<br>0<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = $magnitudes = 1;\n\
    \    foreach ($arr as $num) {\n        $signs *= sign($num);\n        $magnitudes\
    \ += abs($num);\n    }\n    return $signs * $magnitudes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpx3w5xefk.php:16\n\
    Stack trace:\n#0 /tmp/tmpx3w5xefk.php(23): prod_signs(Array)\n#1 /tmp/tmpx3w5xefk.php(27):\
    \ candidate(Array)\n#2 /tmp/tmpx3w5xefk.php(37): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpx3w5xefk.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(count($arr)\
    \ < 1) return null;\n    $product = 1;\n    $sum = 0;\n    foreach($arr as $number)\
    \ {\n        $product *= $number == 0 ? 1 : ($number < 0 ? -1 : 1);\n        $sum\
    \ += abs($number);\n    }\n    return $product * $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f4wga2i.php:27\n\
    Stack trace:\n#0 /tmp/tmp9f4wga2i.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9f4wga2i.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (count($arr)\
    \ === 0) {\n    return NULL;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr\
    \ as $v) {\n    $sum += abs($v);\n    if ($v !== 0) {\n      $prod *= $v > 0 ?\
    \ 1 : -1;\n    }\n  }\n  return $sum * $prod;\n}\necho prod_signs([1, 2, 2, -4])\
    \ . '<br>';\necho prod_signs([0, 1]) . '<br>';\necho prod_signs([]) . '<br>';\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9<br>1<br><br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ldw37wi.php:33\n\
    Stack trace:\n#0 /tmp/tmp8ldw37wi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8ldw37wi.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    $product = 1;\n    foreach ($arr as $value) {\n        if ($value\
    \ == 0) {\n            continue;\n        }\n        $product *= sign($value);\n\
    \        $sum += abs($value);\n    }\n    return $sum * $product;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmp1n2alzi5.php:17\n\
    Stack trace:\n#0 /tmp/tmp1n2alzi5.php(24): prod_signs(Array)\n#1 /tmp/tmp1n2alzi5.php(28):\
    \ candidate(Array)\n#2 /tmp/tmp1n2alzi5.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp1n2alzi5.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (count($arr)\
    \ === 0) {\n    return null;\n  }\n  $s = 1;\n  $m = 0;\n  foreach ($arr as $n)\
    \ {\n    $m += abs($n);\n    if ($n < 0) {\n      $s *= -1;\n    } elseif ($n\
    \ > 0) {\n      $s *= 1;\n    }\n  }\n  return $m * $s;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgzifhf8.php:32\n\
    Stack trace:\n#0 /tmp/tmpzgzifhf8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzgzifhf8.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\t$sum_of_magnitudes\
    \ = 0;\n\t$product_of_signs = 1;\n\tif(count($arr) == 0) {\n\t\treturn NULL;\n\
    \t} else {\n\t\tforeach($arr as $value) {\n\t\t\t$sign = $value / abs($value);\n\
    \t\t\t$sum_of_magnitudes += abs($value);\n\t\t\t$product_of_signs *= $sign;\n\t\
    \t}\n\t\treturn $sum_of_magnitudes * $product_of_signs;\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpmucideut.php on line 17\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpmucideut.php:30\nStack trace:\n\
    #0 /tmp/tmpmucideut.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmucideut.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (count($arr) == 0) return null;\n    return array_reduce($arr, function($sum,\
    \ $number) {\n        return $sum + $number * (int) sign($number);\n    }, 0);\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpxuxlfe9o.php:13\n\
    Stack trace:\n#0 [internal function]: {closure}(0, 1)\n#1 /tmp/tmpxuxlfe9o.php(14):\
    \ array_reduce(Array, Object(Closure), 0)\n#2 /tmp/tmpxuxlfe9o.php(17): prod_signs(Array)\n\
    #3 /tmp/tmpxuxlfe9o.php(21): candidate(Array)\n#4 /tmp/tmpxuxlfe9o.php(31): test()\n\
    #5 {main}\n  thrown in /tmp/tmpxuxlfe9o.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (count($arr)\
    \ === 0) {\n    return null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr\
    \ as $key => $value) {\n    $sum += abs($value);\n    if ($value === 0) {\n  \
    \    $prod = 0;\n    } else {\n      $prod *= $value < 0 ? -1 : 1;\n    }\n  }\n\
    \  return $sum * $prod;\n}\n\n$arr = [1, 2, 2, -4];\n$arr2 = [0, 1];\n$arr3 =\
    \ [];\n\necho prod_signs($arr) . PHP_EOL;\necho prod_signs($arr2) . PHP_EOL;\n\
    echo prod_signs($arr3) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n0\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (!sizeof($arr))\
    \ {\n    return null;\n  }\n  $sign_prod = array_product(array_map(function($n)\
    \ {\n    return ($n > 0) - ($n < 0);\n  }, $arr));\n  $abs_sum = array_sum(array_map('abs',\
    \ $arr));\n  return $sign_prod * $abs_sum;\n}\necho prod_signs([1, 2, 2, -4]).\"\
    \\n\";\necho prod_signs([0, 1]).\"\\n\";\necho prod_signs([]);\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $magnitude_sum\
    \ = 0;\n  $sign_product = 1;\n  foreach ($arr as $num) {\n    if ($num < 0) {\n\
    \      $sign_product *= -1;\n    } elseif ($num > 0) {\n      $sign_product *=\
    \ 1;\n    } else {\n      $sign_product *= 0;\n    }\n    $magnitude_sum += abs($num);\n\
    \  }\n  return $magnitude_sum * $sign_product;\n}\n\necho prod_signs([1, 2, 2,\
    \ -4]) . \"\\n\";\necho prod_signs([0, 1]) . \"\\n\";\necho prod_signs([]) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2,\
    \ 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9kf8etb.php:37\n\
    Stack trace:\n#0 /tmp/tmps9kf8etb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmps9kf8etb.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $result\
    \ = array_map(function($x) {\n        return $x < 0 ? -1 : ($x > 0 ? 1 : 0);\n\
    \    }, $arr);\n    $prod = array_product($result);\n    $mag = array_map(function($x)\
    \ {\n        return abs($x);\n    }, $arr);\n    $sum = array_sum($mag);\n   \
    \ return $prod * $sum;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplaqu53ae.php:30\n\
    Stack trace:\n#0 /tmp/tmplaqu53ae.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplaqu53ae.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\tif (empty($arr))\
    \ {\n\t\treturn;\n\t}\n\t$prod = array_product(array_map(function($v) {\n\t\t\
    if ($v < 0) {\n\t\t\treturn -1;\n\t\t} elseif ($v > 0) {\n\t\t\treturn 1;\n\t\t\
    } else {\n\t\t\treturn 0;\n\t\t}\n\t}, $arr));\n\t$sum = array_sum(array_map(function($v)\
    \ {\n\t\treturn abs($v);\n\t}, $arr));\n\treturn $prod * $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  // your\
    \ code goes here\n  $sum = 0;\n  $total = 0;\n  if (count($arr) == 0) {\n    return\
    \ null;\n  }\n  foreach ($arr as $value) {\n    if ($value != 0) {\n      $sum\
    \ += abs($value);\n      $total *= ($value / abs($value));\n    }\n  }\n  return\
    \ $sum * $total;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ymldspq.php:31\n\
    Stack trace:\n#0 /tmp/tmp8ymldspq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8ymldspq.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ return null;\n  $sums = 0;\n  foreach ($arr as $num) {\n    $sign = ($num >\
    \ 0) ? 1 : (($num < 0) ? -1 : 0);\n    $sums += $sign * abs($num);\n  }\n  return\
    \ $sums;\n}\necho prod_signs([1, 2, 2, -4]) . PHP_EOL;\necho prod_signs([0, 1])\
    \ . PHP_EOL;\necho prod_signs([]) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbzq5utif.php:27\n\
    Stack trace:\n#0 /tmp/tmpbzq5utif.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbzq5utif.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ return NULL;\n  $signs = [1, -1, 0];\n  $signs_sum = $signs_prod = 0;\n  foreach\
    \ ($arr as $key => $value) {\n    $signs_sum += $value;\n    if ($value) $signs_prod\
    \ *= $value / abs($value);\n  }\n  return $signs_sum * $signs_prod;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxpqaxzf.php:25\n\
    Stack trace:\n#0 /tmp/tmpzxpqaxzf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzxpqaxzf.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if(empty($arr)){\n\
    \    return NULL;\n  }\n  $num_signs = array_map(function($n){\n    if($n>0){\n\
    \      return 1;\n    }\n    elseif($n<0){\n      return -1;\n    }\n    else{\n\
    \      return 0;\n    }\n  }, $arr);\n  $magnitudes = array_map(function($n){\n\
    \    return abs($n);\n  }, $arr);\n  $sign_total = array_product($num_signs);\n\
    \  $magnitude_total = array_sum($magnitudes);\n  return $sign_total * $magnitude_total;\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    //your\
    \ code here\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjm05u6f.php:18\n\
    Stack trace:\n#0 /tmp/tmphjm05u6f.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphjm05u6f.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (count($arr)\
    \ == 0) {\n    return NULL;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as\
    \ $value) {\n    $prod *= $value == 0 ? 1 : (int)sign($value);\n    $sum += abs($value);\n\
    \  }\n  return $prod * $sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmp90er_ykz.php:17\n\
    Stack trace:\n#0 /tmp/tmp90er_ykz.php(24): prod_signs(Array)\n#1 /tmp/tmp90er_ykz.php(28):\
    \ candidate(Array)\n#2 /tmp/tmp90er_ykz.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp90er_ykz.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (count($arr)\
    \ == 0) return null;\n  $sum = $prod = 0;\n  foreach ($arr as $x) {\n    $sum\
    \ += abs($x);\n    $prod *= $x != 0 ? ($x > 0 ? 1 : -1) : 0;\n  }\n  return $sum\
    \ * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91021nib.php:24\n\
    Stack trace:\n#0 /tmp/tmp91021nib.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp91021nib.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (sizeof($arr) == 0) {\n        return null;\n    }\n    $sum = 0;\n    $prod\
    \ = 1;\n    foreach ($arr as $val) {\n        $sum += abs($val);\n        if ($val\
    \ == 0) {\n            $prod = 0;\n        } else {\n            $prod *= ($val\
    \ > 0) ? 1 : -1;\n        }\n    }\n    return $sum * $prod;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (sizeof($arr)\
    \ == 0) {\n    return NULL;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr\
    \ as $key => $value) {\n    if ($value > 0) {\n      $product *= 1;\n    } elseif\
    \ ($value < 0) {\n      $product *= -1;\n    } else {\n      $product *= 0;\n\
    \    }\n    $sum += abs($value);\n  }\n  return $sum * $product;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (count($arr)\
    \ == 0) return;\n  $sum_magnitude = 0;\n  $prod_signs = 1;\n  foreach ($arr as\
    \ $number) {\n    $sum_magnitude += abs($number);\n    $prod_signs *= $number\
    \ <=> 0;\n  }\n  return $sum_magnitude * $prod_signs;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ return NULL;\n  $sum_of_magnitudes = 0;\n  $prod_of_signs = 1;\n  foreach ($arr\
    \ as $num) {\n    $sum_of_magnitudes += abs($num);\n    $prod_of_signs *= $num\
    \ <=> 0;\n  }\n  return $sum_of_magnitudes * $prod_of_signs;\n}\necho prod_signs([1,\
    \ 2, 2, -4]);\necho \"\\n\";\necho prod_signs([0, 1]);\necho \"\\n\";\necho prod_signs([]);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n0\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $res\
    \ = 0;\n    foreach ($arr as $elem) {\n        if ($elem < 0) {\n            $res\
    \ -= $elem;\n        } elseif ($elem > 0) {\n            $res += $elem;\n    \
    \    }\n    }\n    if ($res) {\n        $prod = 1;\n        foreach ($arr as $elem)\
    \ {\n            if ($elem < 0) {\n                $prod *= -1;\n            }\
    \ elseif ($elem > 0) {\n                $prod *= 1;\n            }\n        }\n\
    \        return $res * $prod;\n    }\n    return null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xzpalss.php:39\n\
    Stack trace:\n#0 /tmp/tmp9xzpalss.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9xzpalss.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (count($arr) === 0) {\n        return NULL;\n    }\n\n    $product = 1;\n  \
    \  $sum = 0;\n    foreach ($arr as $n) {\n        $sign = ($n >= 0) ? 1 : -1;\n\
    \        $product *= $sign;\n        $sum += abs($n);\n    }\n\n    return $product\
    \ * $sum;\n}\n\necho prod_signs([0, 1]) . \"\\n\";\necho prod_signs([1, 2, 2,\
    \ -4]) . \"\\n\";\necho prod_signs([]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n-9\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2q2ucfm2.php:35\n\
    Stack trace:\n#0 /tmp/tmp2q2ucfm2.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2q2ucfm2.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\tif (count($arr)\
    \ == 0) {\n\t\treturn null;\n\t}\n\t$answer = 1;\n\tforeach ($arr as $number)\
    \ {\n\t\tif ($number != 0) {\n\t\t\t$answer *= abs($number);\n\t\t}\n\t}\n\treturn\
    \ $answer;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5rm529i0.php:27\n\
    Stack trace:\n#0 /tmp/tmp5rm529i0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5rm529i0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (sizeof($arr)\
    \ == 0) return null;\n  $prod_signs = 1;\n  $sum_magnitudes = 0;\n  foreach ($arr\
    \ as $n) {\n    if ($n > 0) {\n      $prod_signs *= 1;\n      $sum_magnitudes\
    \ += $n;\n    } elseif ($n < 0) {\n      $prod_signs *= -1;\n      $sum_magnitudes\
    \ += abs($n);\n    } else {\n      $prod_signs *= 0;\n    }\n  }\n  return $prod_signs\
    \ * $sum_magnitudes;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $prod\
    \ = 1;\n    $sum = 0;\n    if (empty($arr)) return null;\n    foreach ($arr as\
    \ $value) {\n        if ($value == 0) {\n            $prod = 0;\n            break;\n\
    \        }\n        $sign = $value < 0 ? -1 : 1;\n        $prod *= $sign;\n  \
    \      $sum += abs($value);\n    }\n    return $prod * $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $signs\
    \ = array_map(function($n) {\n    return $n < 0 ? -1 : ($n > 0 ? 1 : 0);\n  },\
    \ $arr);\n  $magnitudes = array_map(function($n) {\n    return abs($n);\n  },\
    \ $arr);\n  $product = array_product($signs);\n  $sum = array_sum($magnitudes);\n\
    \  return $product * $sum;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5bmcks28.php:30\n\
    Stack trace:\n#0 /tmp/tmp5bmcks28.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5bmcks28.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $prod = 1;\n    $magnitudes\
    \ = array_map(function($x) { return abs($x); }, $arr);\n    $sum = array_sum($magnitudes);\n\
    \    foreach ($arr as $x) {\n        if ($x > 0) {\n            $prod *= 1;\n\
    \        } elseif ($x < 0) {\n            $prod *= -1;\n        } else {\n   \
    \         $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $p\
    \ = array_product($arr);\n    $a = array_filter($arr, function($e) {\n       \
    \ return $e !== 0;\n    });\n    $s = array_sum($a);\n    return $p*$s;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpicai1s7x.php:24\n\
    Stack trace:\n#0 /tmp/tmpicai1s7x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpicai1s7x.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ return null;\n  $num_plus = 0;\n  $num_minus = 0;\n  $prod = 1;\n  foreach ($arr\
    \ as $n) {\n    if ($n == 0) continue;\n    $prod *= $n > 0 ? 1 : -1;\n    if\
    \ ($n > 0) $num_plus++;\n    else $num_minus++;\n  }\n  return $num_plus * $num_minus\
    \ * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnf7g10_.php:28\n\
    Stack trace:\n#0 /tmp/tmprnf7g10_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprnf7g10_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signArr\
    \ = array_map(function($n) {\n        if ($n > 0) {\n            return 1;\n \
    \       } else if ($n < 0) {\n            return -1;\n        } else {\n     \
    \       return 0;\n        }\n    }, $arr);\n    $magnitudeArr = array_map(function($n)\
    \ {\n        return abs($n);\n    }, $arr);\n    $sign = array_product($signArr);\n\
    \    $mag = array_sum($magnitudeArr);\n    return $sign * $mag;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qfyvd82.php:35\n\
    Stack trace:\n#0 /tmp/tmp6qfyvd82.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6qfyvd82.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  // your\
    \ code here\n}\n\nprint_r(prod_signs([1, 2, 2, -4]));\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxwi2tt9.php:20\n\
    Stack trace:\n#0 /tmp/tmpjxwi2tt9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjxwi2tt9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $sum\
    \ = 0;\n  $product = 1;\n  foreach ($arr as $i) {\n    $sum += abs($i);\n    $product\
    \ *= ($i < 0 ? -1 : ($i > 0 ? 1 : 0));\n  }\n  return $sum * $product;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tb8oipc.php:28\n\
    Stack trace:\n#0 /tmp/tmp1tb8oipc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1tb8oipc.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $zero\
    \ = $signs = [];\n  foreach ($arr as $key => $value) {\n    $signs[$key] = $value\
    \ < 0 ? -1 : ($value == 0 ? 0 : 1);\n    if ($value == 0) {\n      $zero[] = $key;\n\
    \    }\n  }\n  if (empty($signs)) {\n    return null;\n  }\n  foreach ($zero as\
    \ $value) {\n    unset($signs[$value]);\n  }\n  $sum = array_sum(array_map('abs',\
    \ $arr));\n  $prod = array_product($signs);\n  return $sum * $prod;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoprosjio.php:34\n\
    Stack trace:\n#0 /tmp/tmpoprosjio.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpoprosjio.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $arr_non_zero\
    \ = array_filter($arr, function($element) {\n    return $element != 0;\n  });\n\
    \  if (empty($arr_non_zero)) {\n    return null;\n  }\n  $arr_non_zero_signs =\
    \ array_map(function($element) {\n    return $element > 0 ? 1 : -1;\n  }, $arr_non_zero);\n\
    \  $product_of_signs = array_product($arr_non_zero_signs);\n  $sum_of_magnitudes\
    \ = array_sum(array_map('abs', $arr));\n  return $sum_of_magnitudes * $product_of_signs;\n\
    }\n\nprint_r(prod_signs([1, 2, 2, -4])); // -9\nprint_r(prod_signs([0, 1])); //\
    \ 0\nprint_r(prod_signs([])); // null\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-91\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4xrcqubj.php:35\n\
    Stack trace:\n#0 /tmp/tmp4xrcqubj.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4xrcqubj.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(empty($arr))\
    \ {\n        return null;\n    }\n    $narr = array_map(function($num) {\n   \
    \     if($num < 0) {\n            return -1;\n        } elseif($num > 0) {\n \
    \           return 1;\n        } else {\n            return 0;\n        }\n  \
    \  }, $arr);\n    $sum = array_sum(array_map('abs', $arr));\n    $mult = array_product($narr);\n\
    \    return $sum * $mult;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ return NULL;\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $number) {\n\
    \    $number = abs($number);\n    $sign = 1;\n    if ($number != 0) {\n      $sign\
    \ = $number / $number;\n    }\n    $sum += $number;\n    $product *= $sign;\n\
    \  }\n  return $sum * $product;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0zgorew.php:30\n\
    Stack trace:\n#0 /tmp/tmpj0zgorew.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj0zgorew.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (count($arr)\
    \ === 0) return;\n  $prd = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if\
    \ ($num > 0) {\n      $prd *= 1;\n      $sum += $num;\n    } elseif ($num < 0)\
    \ {\n      $prd *= -1;\n      $sum += abs($num);\n    } else {\n      $prd *=\
    \ 0;\n    }\n  }\n  return $prd * $sum;\n}\nfunction candidate(...$args) {\n \
    \   return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $result\
    \ = 1;\n    $sum = 0;\n    $negatives = 0;\n    foreach ($arr as $n) {\n     \
    \   $abs = abs($n);\n        $sum += $abs;\n        if ($n < 0) {\n          \
    \  $negatives++;\n        }\n    }\n    if ($negatives % 2 == 1) {\n        $result\
    \ = -1;\n    }\n    return $result * $sum;\n}\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpauh3_870.php:32\n\
    Stack trace:\n#0 /tmp/tmpauh3_870.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpauh3_870.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function($item)\
    \ {\n        if ($item < 0) {\n            return -1;\n        } elseif ($item\
    \ > 0) {\n            return 1;\n        } else {\n            return 0;\n   \
    \     }\n    }, $arr);\n    $prod = array_product($signs);\n    $sum = array_sum(array_map(function($item)\
    \ {\n        return abs($item);\n    }, $arr));\n    return $sum * $prod;\n}\n\
    \nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(empty($arr))\
    \ {\n        return;\n    }\n    $sign = 1;\n    $prod = 1;\n    foreach($arr\
    \ as $num) {\n        if($num == 0) {\n            $sign = 0;\n            $prod\
    \ = 0;\n            break;\n        }\n        if($num < 0) {\n            $sign\
    \ *= -1;\n        }\n        $prod *= abs($num);\n    }\n    return $sign * $prod;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_5onompu.php:35\n\
    Stack trace:\n#0 /tmp/tmp_5onompu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_5onompu.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $result\
    \ = array_reduce($arr, function($carry, $item) {\n    if ($item > 0) {\n     \
    \ $carry[0] += $item;\n      $carry[1] *= 1;\n    } elseif ($item < 0) {\n   \
    \   $carry[0] += $item * -1;\n      $carry[1] *= -1;\n    } else {\n      $carry[1]\
    \ *= 0;\n    }\n    return $carry;\n  }, [0, 1]);\n  return ($result[1] == 0)\
    \ ? null : $result[0] * $result[1];\n}\n\necho prod_signs([1, 2, 2, -4]) . \"\\\
    n\";\necho prod_signs([0, 1]) . \"\\n\";\necho prod_signs([]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4c1_ofgp.php:35\n\
    Stack trace:\n#0 /tmp/tmp4c1_ofgp.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4c1_ofgp.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $prod_signs\
    \ = 1;\n    $sum_magnitudes = 0;\n    if (empty($arr)) {\n        return null;\n\
    \    }\n    foreach ($arr as $v) {\n        if ($v != 0) {\n            $prod_signs\
    \ *= ($v / abs($v));\n        }\n        $sum_magnitudes += abs($v);\n    }\n\
    \    return $prod_signs * $sum_magnitudes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhu1h1wu.php:31\n\
    Stack trace:\n#0 /tmp/tmphhu1h1wu.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphhu1h1wu.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function($x) {\n        return $x > 0 ? 1 : ($x < 0 ? -1 : 0);\n\
    \    }, $arr);\n    if (array_sum($signs) == 0) {\n        return null;\n    }\n\
    \    return array_sum(array_map(function($x) {\n        return abs($x);\n    },\
    \ $arr)) * array_product($signs);\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2qsjwilp.php:31\n\
    Stack trace:\n#0 /tmp/tmp2qsjwilp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2qsjwilp.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\tif (empty($arr))\n\
    \t\treturn;\n\t$magnitudes = array_map('abs', $arr);\n\t$signs = array_map(function($n)\
    \ {\n\t\tif ($n < 0)\n\t\t\treturn -1;\n\t\telse if ($n > 0)\n\t\t\treturn 1;\n\
    \t\telse\n\t\t\treturn 0;\n\t}, $arr);\n\t$sum_magnitudes = array_sum($magnitudes);\n\
    \t$prod_signs = array_product($signs);\n\treturn $sum_magnitudes * $prod_signs;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $magnitude\
    \ = 0;\n  $sign = 1;\n  $count = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ != 0) {\n      $magnitude += abs($num);\n      $sign *= $num;\n      $count++;\n\
    \    }\n  }\n  return ($count == 0) ? NULL : $magnitude * $sign;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptt8ssekn.php:28\n\
    Stack trace:\n#0 /tmp/tmptt8ssekn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmptt8ssekn.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if(!$arr)\
    \ return NULL;\n  $magnitudes = array_map(function($val) {\n    return abs($val);\n\
    \  }, $arr);\n  $signs = array_map(function($val) {\n    return $val == 0 ? 0\
    \ : ($val < 0 ? -1 : 1);\n  }, $arr);\n  $magnitude_sum = array_sum($magnitudes);\n\
    \  $sign_product = array_product($signs);\n  return $magnitude_sum * $sign_product;\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $count\
    \ = 0;\n  foreach ($arr as $value) {\n    if (abs($value) % 2 == 0) {\n      $count\
    \ += 1;\n    }\n  }\n  return $count;\n}\nprint_r(prod_signs([1, 2, 2, -4]));\n\
    echo PHP_EOL;\nprint_r(prod_signs([0, 1]));\necho PHP_EOL;\nprint_r(prod_signs([]));\n\
    echo PHP_EOL;\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n1\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbdkylakn.php:30\n\
    Stack trace:\n#0 /tmp/tmpbdkylakn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbdkylakn.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (count($arr) == 0) return null;\n    $prod = 1;\n    $sum = 0;\n    foreach\
    \ ($arr as $value) {\n        if ($value != 0) {\n            $prod *= ($value/abs($value));\n\
    \            $sum += abs($value);\n        }\n    }\n    return $prod * $sum;\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpokb_s7m4.php:28\n\
    Stack trace:\n#0 /tmp/tmpokb_s7m4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpokb_s7m4.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $magnitudes\
    \ = array_map(\n        function($n) {\n            return abs($n);\n        },\n\
    \        $arr\n    );\n    $signs = array_map(\n        function($n) {\n     \
    \       return ($n > 0) - ($n < 0);\n        },\n        $arr\n    );\n    return\
    \ array_sum($magnitudes) * array_product($signs);\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kr16i_k.php:33\n\
    Stack trace:\n#0 /tmp/tmp8kr16i_k.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8kr16i_k.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ return null;\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $int) {\n   \
    \ $sum += abs($int);\n    $product *= $int == 0 ? 1 : $int / abs($int);\n  }\n\
    \  return $sum * $product;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqjo5q3iu.php:26\n\
    Stack trace:\n#0 /tmp/tmpqjo5q3iu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqjo5q3iu.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    //\
    \ TODO: Your code here\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvthhx24k.php:18\n\
    Stack trace:\n#0 /tmp/tmpvthhx24k.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpvthhx24k.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) return NULL;\n    return (abs(array_product($arr)) * array_product(array_map(function($a)\
    \ {\n        return $a == 0 ? 0 : ($a > 0 ? 1 : -1);\n    }, $arr)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8vkmtcz.php:22\n\
    Stack trace:\n#0 /tmp/tmp_8vkmtcz.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_8vkmtcz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $sum\
    \ = 0;\n  $sign = 1;\n  foreach ($arr as $item) {\n    if ($item === 0) {\n  \
    \    $sign = 0;\n      break;\n    }\n    $sum += abs($item);\n    $sign *= ($item\
    \ < 0) ? -1 : 1;\n  }\n  return $sign === 0 ? null : $sum * $sign;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pwtva66.php:30\n\
    Stack trace:\n#0 /tmp/tmp2pwtva66.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2pwtva66.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(count($arr)\
    \ == 0) {\n        return null;\n    }\n    $result = 0;\n    $sum = 0;\n    $product\
    \ = 1;\n    foreach($arr as $value) {\n        $sum += abs($value);\n        $product\
    \ *= $value == 0 ? 1 : $value / abs($value);\n    }\n    $result = $sum * $product;\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7act1f69.php:31\n\
    Stack trace:\n#0 /tmp/tmp7act1f69.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7act1f69.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (count($arr)\
    \ === 0) {\n    return null;\n  }\n  // Your code here.\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31p0ae9o.php:21\n\
    Stack trace:\n#0 /tmp/tmp31p0ae9o.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp31p0ae9o.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if(empty($arr))\
    \ {\n    return 'None';\n  }\n\n  $sums = array_sum(array_map(function($i) {\n\
    \    return abs($i);\n  }, $arr));\n\n  $prod = array_product(array_map(function($i)\
    \ {\n    return $i < 0 ? -1 : ($i > 0 ? 1 : 0);\n  }, $arr));\n\n  return $sums\
    \ * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ug4o_7r.php:34\n\
    Stack trace:\n#0 /tmp/tmp7ug4o_7r.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7ug4o_7r.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ return null;\n  $negative = 0;\n  $positive = 0;\n  $zeros = 0;\n  foreach ($arr\
    \ as $a) {\n    if ($a > 0) $positive++;\n    elseif ($a < 0) $negative++;\n \
    \   else $zeros++;\n  }\n  $sum = array_sum(array_map('abs', $arr));\n  if ($zeros\
    \ > 0) return 0;\n  elseif ($positive > 0 && $negative > 0) return $sum;\n  elseif\
    \ ($positive > 0) return $sum;\n  else return -$sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91zgmm60.php:32\n\
    Stack trace:\n#0 /tmp/tmp91zgmm60.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp91zgmm60.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(!empty($arr)){\n\
    \        $product = 1;\n        $sum = 0;\n        foreach($arr as $num){\n  \
    \          if($num > 0){\n                $product *= 1;\n                $sum\
    \ += $num;\n            }\n            elseif($num < 0){\n                $product\
    \ *= -1;\n                $sum += abs($num);\n            }\n            elseif($num\
    \ == 0){\n                $product *= 0;\n            }\n        }\n        if($product\
    \ == 0){\n            return 0;\n        }\n        else{\n            return\
    \ $sum * $product;\n        }\n    }\n    else{\n        return null;\n    }\n\
    }\nprint_r(prod_signs([1, 2, 2, -4]));\nprint_r(prod_signs([0, 1]));\nprint_r(prod_signs([]));\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '-90'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $arr_count\
    \ = count($arr);\n  if ($arr_count == 0) {\n    return NULL;\n  }\n  $prod = 1;\n\
    \  $sum = 0;\n  for ($i = 0; $i < $arr_count; $i++) {\n    $prod *= sign($arr[$i]);\n\
    \    $sum += abs($arr[$i]);\n  }\n  return $prod * $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpvg6g76yu.php:18\n\
    Stack trace:\n#0 /tmp/tmpvg6g76yu.php(24): prod_signs(Array)\n#1 /tmp/tmpvg6g76yu.php(28):\
    \ candidate(Array)\n#2 /tmp/tmpvg6g76yu.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpvg6g76yu.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (!count($arr)) return null;\n    $prod = 1;\n    $sum = 0;\n    foreach ($arr\
    \ as $int) {\n        $sum += abs($int);\n        $prod *= $int < 0 ? -1 : $int\
    \ > 0 ? 1 : 0;\n    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbz0epnmc.php:26\n\
    Stack trace:\n#0 /tmp/tmpbz0epnmc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbz0epnmc.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (count($arr) < 1) {\n        return null;\n    }\n    $sum = 0;\n    $count_neg\
    \ = 0;\n    $prod = 1;\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ > 0) {\n            $sum += $value;\n        } elseif ($value < 0) {\n     \
    \       $count_neg++;\n            $sum += abs($value);\n        }\n    }\n  \
    \  $count_z = array_count_values($arr)[0];\n    $count_pos = count($arr) - $count_neg\
    \ - $count_z;\n    if ($count_neg % 2 == 0) {\n        $prod = 1;\n    } else\
    \ {\n        $prod = -1;\n    }\n    if ($count_pos == 0 && $count_neg == 0) {\n\
    \        $prod = 0;\n    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbylngt_4.php:44\n\
    Stack trace:\n#0 /tmp/tmpbylngt_4.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbylngt_4.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $s\
    \ = 0;\n    foreach ($arr as $n) {\n        if ($n < 0) {\n            $s -= $n;\n\
    \        } else if ($n > 0) {\n            $s += $n;\n        }\n    }\n    return\
    \ ($s == 0 ? null : $s);\n}\n$tests = [\n    [[1, 2, 2, -4], -9],\n    [[0, 1],\
    \ 0],\n    [[], null],\n];\nforeach ($tests as [$arr, $expected]) {\n    $result\
    \ = prod_signs($arr);\n    assert($result == $expected);\n}\necho \"test passed!\\\
    n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2,\
    \ 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: assert(): assert($result == $expected) failed in /tmp/tmpdixdphnw.php\
    \ on line 28\n\nWarning: assert(): assert($result == $expected) failed in /tmp/tmpdixdphnw.php\
    \ on line 28\ntest passed!\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpdixdphnw.php:36\nStack trace:\n#0 /tmp/tmpdixdphnw.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdixdphnw.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\t$result\
    \ = 1;\n\tforeach ($arr as $val) {\n\t\tif ($val == 0) {\n\t\t\t$result = 0;\n\
    \t\t\tbreak;\n\t\t}\n\t\t$result *= $val/abs($val);\n\t}\n\treturn array_sum(array_map('abs',\
    \ $arr)) * $result;\n}\necho prod_signs([1, 2, 2, -4]);\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswl3i6kv.php:30\n\
    Stack trace:\n#0 /tmp/tmpswl3i6kv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpswl3i6kv.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $sum\
    \ = 0;\n  $prod = 1;\n  foreach ($arr as $value) {\n    if (is_int($value)) {\n\
    \      $sum += abs($value);\n      $prod *= (int) sign($value);\n    }\n  }\n\
    \  return $sum * $prod;\n}\necho prod_signs([1, 2, 2, -4]) . \"\\n\"; // -9\n\
    echo prod_signs([0, 1]) . \"\\n\"; // 0\necho prod_signs([]) . \"\\n\"; // \"\
    None\"\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2,\
    \ 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmphs4d80lk.php:16\n\
    Stack trace:\n#0 /tmp/tmphs4d80lk.php(21): prod_signs(Array)\n#1 {main}\n  thrown\
    \ in /tmp/tmphs4d80lk.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $prod\
    \ = $magn = 1;\n    foreach ($arr as $value) {\n        $magn += abs($value);\n\
    \        if ($value) $prod *= ($value/abs($value));\n    }\n    return !empty($arr)\
    \ ? $magn * $prod : NULL;\n}\n\necho prod_signs([1, 2, 2, -4]);\necho prod_signs([0,\
    \ 1]);\necho prod_signs([]);\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-102\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp341zab6a.php:28\n\
    Stack trace:\n#0 /tmp/tmp341zab6a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp341zab6a.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (!count($arr)) return null;\n    $magnitudes = array_map('abs', $arr);\n   \
    \ $signs = array_map(function($n) {\n        if ($n > 0) return 1;\n        if\
    \ ($n < 0) return -1;\n        return 0;\n    }, $arr);\n    $magnitudesSum =\
    \ array_sum($magnitudes);\n    $signsProd = array_product($signs);\n    return\
    \ $magnitudesSum * $signsProd;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $arr\
    \ = array_filter($arr, function($i) {\n    return $i !== 0;\n  });\n  $total =\
    \ 1;\n  foreach ($arr as $item) {\n    $total *= abs($item);\n  }\n  return ($total\
    \ === 1) ? null : $total;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58ydwwa3.php:26\n\
    Stack trace:\n#0 /tmp/tmp58ydwwa3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp58ydwwa3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $magnitude\
    \ = function($x) {\n        return abs($x);\n    };\n    $sign = function($x)\
    \ {\n        return $x == 0 ? 0 : ($x < 0 ? -1 : 1);\n    };\n    $product = function($a,\
    \ $b) {\n        return $a * $b;\n    };\n    $arr = array_map($magnitude, $arr);\n\
    \    $signs = array_map($sign, $arr);\n    $signs = array_values(array_filter($signs,\
    \ function($v) {\n        return $v != 0;\n    }));\n    if (!$signs) {\n    \
    \    return null;\n    }\n    $product = array_reduce($signs, $product);\n   \
    \ $sum = array_sum($arr);\n    return $sum * $product;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i763dje.php:37\n\
    Stack trace:\n#0 /tmp/tmp2i763dje.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2i763dje.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $nums\
    \ = [];\n    $signs = [];\n    foreach ($arr as $value) {\n        $signs[] =\
    \ intval($value >= 0) * 2 - 1;\n        $nums[] = abs($value);\n    }\n    return\
    \ array_product($signs) * array_sum($nums);\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprzq5en3e.php:26\n\
    Stack trace:\n#0 /tmp/tmprzq5en3e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprzq5en3e.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) return NULL;\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr\
    \ as $v) {\n        $sum += abs($v);\n        if ($v == 0) {\n            $prod\
    \ = 0;\n            break;\n        }\n        if ($v > 0) $prod *= 1;\n     \
    \   else $prod *= -1;\n    }\n    return $sum * $prod;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $sum\
    \ = array_sum(array_map(function($elem) { return abs($elem); }, $arr));\n  $all_prod\
    \ = array_product(array_map(function($elem) {\n    return ($elem >= 0) ? 1 : -1;\n\
    \  }, $arr));\n  return $sum * $all_prod;\n}\n\necho \"Running tests...\\n\";\n\
    assert(prod_signs([1, 2, 2, -4]) == -9);\nassert(prod_signs([0, 1]) == 0);\nassert(prod_signs([])\
    \ == null);\necho \"Done\\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Running tests...\n\nWarning: assert(): assert(prod_signs([0, 1]) == 0)\
    \ failed in /tmp/tmp8i46tt3l.php on line 20\nDone\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8i46tt3l.php:29\nStack trace:\n#0 /tmp/tmp8i46tt3l.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8i46tt3l.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ {\n    return NULL;\n  }\n  $magnitude = 1;\n  $signs = 0;\n  foreach ($arr\
    \ as $key => $value) {\n    if ($value == 0) {\n      continue;\n    }\n    $magnitude\
    \ *= abs($value);\n    if ($value > 0) {\n      $signs += 1;\n    } else {\n \
    \     $signs -= 1;\n    }\n  }\n  return $magnitude * $signs;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppbagx7a1.php:35\n\
    Stack trace:\n#0 /tmp/tmppbagx7a1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppbagx7a1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) return;\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as $v)\
    \ {\n        if ($v > 0) {\n            $prod *= 1;\n            $sum += $v;\n\
    \        } elseif ($v < 0) {\n            $prod *= -1;\n            $sum += abs($v);\n\
    \        } elseif ($v == 0) {\n            $prod *= 0;\n        }\n    }\n   \
    \ return $sum * $prod;\n}\n\necho prod_signs([1, 2, 2, -4]) . \"<br>\";\necho\
    \ prod_signs([0, 1]) . \"<br>\";\necho prod_signs([]) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: -9<br>0<br><br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\tif (empty($arr))\
    \ {\n\t\treturn null;\n\t}\n\n\t$magnitude = array_map(\n\t\tfunction($x) {\n\t\
    \t\treturn abs($x);\n\t\t},\n\t\t$arr\n\t);\n\n\t$multSigns = array_reduce(\n\t\
    \t$arr,\n\t\tfunction($acc, $x) {\n\t\t\t$sign = 0;\n\t\t\tif ($x > 0) {\n\t\t\
    \t\t$sign = 1;\n\t\t\t} elseif ($x < 0) {\n\t\t\t\t$sign = -1;\n\t\t\t}\n\t\t\t\
    return $acc * $sign;\n\t\t},\n\t\t1\n\t);\n\n\treturn array_sum($magnitude) *\
    \ $multSigns;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if(empty($arr))\
    \ return NULL;\n  $signs = 1;\n  $result = 0;\n  foreach($arr as $value) {\n \
    \   if($value > 0) {\n      $signs *= 1;\n      $result += $value;\n    } elseif($value\
    \ < 0) {\n      $signs *= -1;\n      $result += $value;\n    } else {\n      $signs\
    \ *= 0;\n    }\n  }\n  return $result * $signs;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpra9qando.php:33\n\
    Stack trace:\n#0 /tmp/tmpra9qando.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpra9qando.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $sums\
    \ = 0;\n  $prod = 1;\n  foreach ($arr as $item) {\n    if ($item === 0) {\n  \
    \    $sums += 0;\n      $prod *= 1;\n    } elseif ($item > 0) {\n      $sums +=\
    \ $item;\n      $prod *= 1;\n    } else {\n      $sums += abs($item);\n      $prod\
    \ *= -1;\n    }\n  }\n  if (empty($arr)) {\n    return NULL;\n  } else {\n   \
    \ return $sums * $prod;\n  }\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdlbeesf.php:37\n\
    Stack trace:\n#0 /tmp/tmpqdlbeesf.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpqdlbeesf.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (!$arr) return NULL;\n    $sum = 0;\n    $signs = [];\n    foreach ($arr as\
    \ $v) {\n        if ($v == 0) return 0;\n        $sum += abs($v);\n        $signs[]\
    \ = $v > 0 ? 1 : -1;\n    }\n    return $sum * array_product($signs);\n}\necho\
    \ prod_signs([1, 2, 2, -4]) . \"\\n\";\necho prod_signs([0, 1]) . \"\\n\";\necho\
    \ prod_signs([]) . \"\\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n0\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (count($arr)\
    \ == 0) return null;\n  $sign = 1;\n  $prod = 1;\n  foreach ($arr as $num) {\n\
    \    $mag = abs($num);\n    $prod *= $mag;\n    if ($num < 0) $sign *= -1;\n \
    \ }\n  return $prod * $sign;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60s51vvi.php:26\n\
    Stack trace:\n#0 /tmp/tmp60s51vvi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp60s51vvi.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    $prod = 1;\n    $empty = true;\n    foreach ($arr as $num) {\n   \
    \     if ($num) {\n            $sum += abs($num);\n            $prod *= (int)\
    \ ($num > 0);\n            $empty = false;\n        }\n    }\n    return ($empty\
    \ ? null : $sum * $prod);\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsl3nu_r.php:28\n\
    Stack trace:\n#0 /tmp/tmpjsl3nu_r.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjsl3nu_r.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $result\
    \ = null;\n  if (!empty($arr)) {\n    $result = 0;\n    $sign_product = 1;\n \
    \   foreach ($arr as $n) {\n      if ($n < 0) {\n        $sign_product *= -1;\n\
    \      } elseif ($n > 0) {\n        $sign_product *= 1;\n      } else {\n    \
    \    $sign_product *= 0;\n      }\n      $result += abs($n);\n    }\n    $result\
    \ *= $sign_product;\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $magnitude_sum\
    \ = array_sum($magnitudes);\n  $signs = array_map(function($n) {\n    if ($n ==\
    \ 0) {\n      return 0;\n    } else if ($n > 0) {\n      return 1;\n    } else\
    \ {\n      return -1;\n    }\n  }, $arr);\n  $sign_prod = array_product($signs);\n\
    \  if ($sign_prod == 0) {\n    return NULL;\n  } else {\n    return $magnitude_sum\
    \ * $sign_prod;\n  }\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvso5nnue.php:37\n\
    Stack trace:\n#0 /tmp/tmpvso5nnue.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpvso5nnue.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ {\n    return null;\n  }\n  $result = 0;\n  $signs = [1, -1, 0];\n  foreach\
    \ ($arr as $i) {\n    foreach ($signs as $sign) {\n      if ($i === $sign) {\n\
    \        $result += $sign * abs($i);\n      }\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppz6mh9_i.php:31\n\
    Stack trace:\n#0 /tmp/tmppz6mh9_i.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppz6mh9_i.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(empty($arr))\
    \ {\n        return null;\n    }\n    $signs = array_filter($arr, function($x)\
    \ {\n        return $x != 0;\n    });\n    $magnitudes = array_map(function($x)\
    \ {\n        return abs($x);\n    }, $arr);\n    $sign_product = array_product($signs);\n\
    \    $magnitude_sum = array_sum($magnitudes);\n    return $sign_product * $magnitude_sum;\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd5gd2rp.php:29\n\
    Stack trace:\n#0 /tmp/tmpfd5gd2rp.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpfd5gd2rp.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $count\
    \ = 0;\n  $s = 0;\n  $count = count($arr);\n  if ($count == 0) {\n    return NULL;\n\
    \  }\n  $prod = 1;\n  for ($i = 0; $i < $count; $i++) {\n    $s += abs($arr[$i]);\n\
    \    if ($arr[$i] != 0) {\n      $prod *= $arr[$i] > 0 ? 1 : -1;\n    }\n  }\n\
    \  return $s * $prod;\n}\nprint prod_signs([1, 2, 2, -4]);\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9uk0wslo.php:33\n\
    Stack trace:\n#0 /tmp/tmp9uk0wslo.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9uk0wslo.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (count($arr) == 0) {\n        return null;\n    }\n    $signs = 1;\n    $magnitudes\
    \ = 0;\n    foreach ($arr as $key => $value) {\n        $magnitudes += abs($value);\n\
    \        $signs *= ($value != 0) ? ($value / abs($value)) : 0;\n    }\n    return\
    \ $magnitudes * $signs;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\t$sum\
    \ = 0;\n\t$product = 1;\n\tforeach ($arr as $i) {\n\t\t$sum += abs($i);\n\t\t\
    $product *= ($i == 0) ? 1 : $i / abs($i);\n\t}\n\treturn $sum * $product;\n}\n\
    \nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdi82cbm1.php:26\n\
    Stack trace:\n#0 /tmp/tmpdi82cbm1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdi82cbm1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $count\
    \ = 0;\n    foreach ($arr as $k => $v) {\n        if ($v == 0) {\n           \
    \ $count++;\n        }\n    }\n    if ($count == count($arr)) {\n        return\
    \ 0;\n    }\n    $sum = 0;\n    $product = 1;\n    foreach ($arr as $k => $v)\
    \ {\n        $sign = $v <=> 0;\n        $sum += abs($v);\n        $product *=\
    \ $sign;\n    }\n    return $sum * $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyd32nyl8.php:38\n\
    Stack trace:\n#0 /tmp/tmpyd32nyl8.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpyd32nyl8.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ return null;\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $number) {\n\
    \    $number = abs($number);\n    $sum += $number;\n    $product *= ($number ?\
    \ ($number < 0 ? -1 : 1) : 0);\n  }\n  return $sum * $product;\n}\nprint prod_signs([1,\
    \ 2, 2, -4]) . \"\\n\";\nprint prod_signs([0, 1]) . \"\\n\";\nprint prod_signs([])\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "9\n0\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl615qfqb.php:29\n\
    Stack trace:\n#0 /tmp/tmpl615qfqb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpl615qfqb.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(count($arr)\
    \ == 0) {\n        return;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach($arr\
    \ as $num) {\n        $prod *= sign($num);\n        $sum += abs($num);\n    }\n\
    \    return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpq6th8gsy.php:17\n\
    Stack trace:\n#0 /tmp/tmpq6th8gsy.php(24): prod_signs(Array)\n#1 /tmp/tmpq6th8gsy.php(28):\
    \ candidate(Array)\n#2 /tmp/tmpq6th8gsy.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpq6th8gsy.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $product\
    \ = 1;\n    $sum = 0;\n    foreach ($arr as $value) {\n        if ($value < 0)\
    \ {\n            $product *= -1;\n        } elseif ($value > 0) {\n          \
    \  $product *= 1;\n        } else {\n            $product *= 0;\n        }\n \
    \       $sum += abs($value);\n    }\n    return $product * $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ugjye2a.php:34\n\
    Stack trace:\n#0 /tmp/tmp_ugjye2a.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_ugjye2a.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) return null;\n    $prod = 1;\n    $sum = 0;\n    foreach ($arr\
    \ as $item) {\n        if ($item > 0) {\n            $prod *= 1;\n        } elseif\
    \ ($item < 0) {\n            $prod *= -1;\n        } else {\n            $prod\
    \ *= 0;\n        }\n        $sum += abs($item);\n    }\n    return $sum * $prod;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ {\n    return;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $item) {\n\
    \    if ($item > 0) {\n      $sum += $item;\n    } elseif ($item < 0) {\n    \
    \  $sum += -$item;\n      $prod *= -1;\n    }\n  }\n  return $sum * $prod;\n}\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz9jf7pcx.php:32\n\
    Stack trace:\n#0 /tmp/tmpz9jf7pcx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpz9jf7pcx.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $prod = 1;\n    $sum = 0;\n\
    \    foreach ($arr as $num) {\n        $sign = $num > 0 ? 1 : ($num < 0 ? -1 :\
    \ 0);\n        $prod *= $sign;\n        $sum += abs($num);\n    }\n    return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(empty($arr)){\n\
    \        return null;\n    }\n\n    $s = 1;\n    $r = 0;\n    foreach($arr as\
    \ $k => $v){\n        if($v != 0){\n            $r += abs($v);\n            $s\
    \ *= $v / abs($v);\n        }\n    }\n    return $r * $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0hd_r9wb.php:32\n\
    Stack trace:\n#0 /tmp/tmp0hd_r9wb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0hd_r9wb.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    //\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7tjl870w.php:18\n\
    Stack trace:\n#0 /tmp/tmp7tjl870w.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp7tjl870w.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    $product = 1;\n    if (!empty($arr)) {\n        foreach ($arr as $value)\
    \ {\n            if ($value > 0) {\n                $product *= 1;\n         \
    \   } elseif ($value < 0) {\n                $product *= -1;\n            } else\
    \ {\n                $product *= 0;\n            }\n            $sum += abs($value);\n\
    \        }\n        return $sum * $product;\n    } else {\n        return null;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (count($arr)\
    \ === 0) return null;\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $n) {\n \
    \   $prod *= $n < 0 ? -1 : $n === 0 ? 0 : 1;\n    $sum += abs($n);\n  }\n  return\
    \ $prod * $sum;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0ye9h4s.php:25\n\
    Stack trace:\n#0 /tmp/tmps0ye9h4s.php(35): test()\n#1 {main}\n  thrown in /tmp/tmps0ye9h4s.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $sum = 0;\n    $product =\
    \ 1;\n    foreach ($arr as $el) {\n        if ($el > 0) {\n            $sum +=\
    \ $el;\n            $product *= 1;\n        } elseif ($el < 0) {\n           \
    \ $sum += abs($el);\n            $product *= -1;\n        } else {\n         \
    \   $product *= 0;\n        }\n    }\n    return $sum * $product;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (count($arr)\
    \ === 0) {\n    return null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr\
    \ as $value) {\n    $sign = $value === 0 ? 0 : $value / abs($value);\n    $prod\
    \ *= $sign;\n    $sum += abs($value);\n  }\n  return $prod * $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(empty($arr))\
    \ {\n        return null;\n    }\n    $arr = array_map(function($number) {\n \
    \       if($number > 0) {\n            return 1;\n        } elseif($number < 0)\
    \ {\n            return -1;\n        } else {\n            return 0;\n       \
    \ }\n    }, $arr);\n    $arr = array_filter($arr, function($number) {\n      \
    \  return $number != 0;\n    });\n    $sum_magnitudes = array_sum(array_map(function($number)\
    \ {\n        return abs($number);\n    }, $arr));\n    $product_signs = array_product($arr);\n\
    \    return $sum_magnitudes * $product_signs;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdzkmmob9.php:37\n\
    Stack trace:\n#0 /tmp/tmpdzkmmob9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpdzkmmob9.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    //\
    \ start coding here\n    $sum = 0;\n    $product = 1;\n    if (count($arr) ==\
    \ 0) {\n        return null;\n    }\n    foreach ($arr as $key => $value) {\n\
    \        $sum += abs($value);\n        if ($value != 0) {\n            $product\
    \ *= $value/abs($value);\n        }\n    }\n    return $sum * $product;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3b02ixg.php:31\n\
    Stack trace:\n#0 /tmp/tmpb3b02ixg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpb3b02ixg.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\t$n =\
    \ count($arr);\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\t$signs = 1;\n\t$magnitudes\
    \ = 0;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$number = $arr[$i];\n\t\tif ($number\
    \ < 0) {\n\t\t\t$signs *= -1;\n\t\t} else if ($number > 0) {\n\t\t\t$signs *=\
    \ 1;\n\t\t} else {\n\t\t\t$signs *= 0;\n\t\t}\n\t\t$magnitudes += abs($number);\n\
    \t}\n\treturn $signs * $magnitudes;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppayaxqcr.php:38\n\
    Stack trace:\n#0 /tmp/tmppayaxqcr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppayaxqcr.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if(empty($arr))\
    \ {\n    return NULL;\n  }\n\n  $signs = array_map(function($num) {\n    if($num\
    \ == 0) {\n      return 0;\n    }\n    return $num / abs($num);\n  }, $arr);\n\
    \n  $magnitudes = array_map(function($num) {\n    return abs($num);\n  }, $arr);\n\
    \n  $product_of_signs = array_product($signs);\n  $sum_of_magnitudes = array_sum($magnitudes);\n\
    \n  return $product_of_signs * $sum_of_magnitudes;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $magnitude_sum\
    \ = 0;\n    $product_signs = 1;\n    $numbers_count = count($arr);\n    if ($numbers_count\
    \ == 0) {\n        return NULL;\n    }\n    foreach ($arr as $number) {\n    \
    \    $product_signs *= $number > 0 ? 1 : ($number < 0 ? -1 : 0);\n        $magnitude_sum\
    \ += abs($number);\n    }\n    return $magnitude_sum * $product_signs;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $result\
    \ = null;\n    if (!empty($arr)) {\n        $product = 1;\n        $sum = 0;\n\
    \        foreach ($arr as $value) {\n            $sum += abs($value);\n      \
    \      $product *= ($value < 0) ? -1 : $value;\n        }\n        $result = $sum\
    \ * $product;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ckwbli5.php:28\n\
    Stack trace:\n#0 /tmp/tmp2ckwbli5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2ckwbli5.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $sign = 1;\n    $sum = 0;\n\
    \    foreach ($arr as $n) {\n        $sign *= $n == 0 ? 1 : $n / abs($n);\n  \
    \      $sum += abs($n);\n    }\n    return $sign * $sum;\n}\n\nprint_r(prod_signs([1,\
    \ 2, 2, -4]));\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_yym4no.php:30\n\
    Stack trace:\n#0 /tmp/tmp0_yym4no.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0_yym4no.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ return null;\n  $sum = 0;\n  $mult = 1;\n  foreach ($arr as $number) {\n   \
    \ $sum += abs($number);\n    $mult *= (int)$number > 0 ? 1 : ($number < 0 ? -1\
    \ : 0);\n  }\n  return $sum * $mult;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ {\n    return NULL;\n  }\n\n  $res = 1;\n  $sum = 0;\n  foreach ($arr as $num)\
    \ {\n    if ($num != 0) {\n      $res *= $num / abs($num);\n    }\n    $sum +=\
    \ abs($num);\n  }\n  return $res * $sum;\n}\n\nprint_r(prod_signs([1, 2, 2, -4])\
    \ . \"\\n\");\nprint_r(prod_signs([0, 1]) . \"\\n\");\nprint_r(prod_signs([])\
    \ . \"\\n\");\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrj14h_w.php:35\n\
    Stack trace:\n#0 /tmp/tmpsrj14h_w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpsrj14h_w.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $arr\
    \ = array_filter($arr, function($v) { return $v <> 0; });\n  $s = 1;\n  $m = 0;\n\
    \  foreach ($arr as $x) {\n    $s *= ($x > 0 ? 1 : -1);\n    $m += abs($x);\n\
    \  }\n  return $m * $s;\n}\n\nprint_r(prod_signs([1, 2, 2, -4]));\nprint_r(prod_signs([0,\
    \ 1]));\nprint_r(prod_signs([]));\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-910\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq3ucv96.php:30\n\
    Stack trace:\n#0 /tmp/tmpkq3ucv96.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkq3ucv96.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $product\
    \ = 1;\n  $sum = 0;\n  foreach ($arr as $number) {\n    if ($number > 0) {\n \
    \     $product *= 1;\n      $sum += $number;\n    } elseif ($number < 0) {\n \
    \     $product *= -1;\n      $sum += abs($number);\n    } else {\n      $product\
    \ *= 0;\n    }\n  }\n  if ($product !== 0) {\n    return $sum * $product;\n  }\
    \ else {\n    return $product;\n  }\n}\n\nprint_r(prod_signs([1, 2, 2, -4]));\n\
    print_r(prod_signs([0, 1]));\nprint_r(prod_signs([]));\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-900\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xf75qwh.php:43\n\
    Stack trace:\n#0 /tmp/tmp2xf75qwh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp2xf75qwh.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n\n    $sum_signs = 0;\n    $mult_magnitude\
    \ = 1;\n    foreach ($arr as $num) {\n        $sum_signs += $num > 0 ? 1 : ($num\
    \ < 0 ? -1 : 0);\n        $mult_magnitude *= abs($num);\n    }\n\n    return $sum_signs\
    \ * $mult_magnitude;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvoo_345g.php:29\n\
    Stack trace:\n#0 /tmp/tmpvoo_345g.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvoo_345g.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $prod = 1;\n    $sum = 0;\n\
    \    foreach ($arr as $num) {\n        $prod *= $num > 0 ? 1 : ($num < 0 ? -1\
    \ : 0);\n        $sum += abs($num);\n    }\n    return $prod * $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\t$signs\
    \ = array_map(function($x) {\n\t\tif ($x < 0) return -1;\n\t\tif ($x > 0) return\
    \ 1;\n\t\treturn 0;\n\t}, $arr);\n\t$count_zeros = count(array_filter($signs,\
    \ function($x) {\n\t\treturn $x == 0;\n\t}));\n\tif ($count_zeros > 0) return\
    \ NULL;\n\t$product = array_product($signs);\n\t$magnitudes = array_map(function($x)\
    \ {\n\t\treturn abs($x);\n\t}, $arr);\n\t$sum = array_sum($magnitudes);\n\treturn\
    \ $sum * $product;\n}\necho prod_signs([1, 2, 2, -4]) . \"\\n\";\necho prod_signs([0,\
    \ 1]) . \"\\n\";\necho prod_signs([]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmper97v22c.php:36\n\
    Stack trace:\n#0 /tmp/tmper97v22c.php(45): test()\n#1 {main}\n  thrown in /tmp/tmper97v22c.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    //\
    \ Write your code here\n    $prod = 1;\n    $sum = 0;\n    $counter = 0;\n   \
    \ foreach ($arr as $value) {\n        if ($value > 0) {\n            $prod *=\
    \ 1;\n            $sum += $value;\n            $counter += 1;\n        } elseif\
    \ ($value < 0) {\n            $prod *= -1;\n            $sum += $value;\n    \
    \        $counter += 1;\n        } else {\n            $prod *= 1;\n         \
    \   $counter += 1;\n        }\n    }\n    return $counter == 0 ? null : $sum *\
    \ $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1blmh34d.php:37\n\
    Stack trace:\n#0 /tmp/tmp1blmh34d.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1blmh34d.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) return null;\n    $prod = array_product(array_map(function($x)\
    \ {\n        return $x >= 0 ? 1 : -1;\n    }, $arr));\n    $sum = array_sum(array_map(function($x)\
    \ {\n        return abs($x);\n    }, $arr));\n    return $prod * $sum;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vtf87o7.php:26\n\
    Stack trace:\n#0 /tmp/tmp2vtf87o7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2vtf87o7.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\tif (empty($arr))\
    \ {\n\t\treturn \"None\";\n\t}\n\t$sign = 1;\n\t$sum = 0;\n\tforeach ($arr as\
    \ $val) {\n\t\tif ($val > 0) {\n\t\t\t$sign *= 1;\n\t\t} elseif ($val < 0) {\n\
    \t\t\t$sign *= -1;\n\t\t} else {\n\t\t\t$sign *= 0;\n\t\t}\n\t\t$sum += abs($val);\n\
    \t}\n\treturn $sum * $sign;\n}\n\n$array = [1, 2, 2, -4];\necho \"<pre>\";\nprint_r($array);\n\
    echo \"</pre>\";\necho prod_signs($array) . \"<br>\";\n\n$array = [0, 1];\necho\
    \ \"<pre>\";\nprint_r($array);\necho \"</pre>\";\necho prod_signs($array) . \"\
    <br>\";\n\n$array = [];\necho \"<pre>\";\nprint_r($array);\necho \"</pre>\";\n\
    echo prod_signs($array) . \"<br>\";\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => -4\n\
    )\n</pre>-9<br><pre>Array\n(\n    [0] => 0\n    [1] => 1\n)\n</pre>0<br><pre>Array\n\
    (\n)\n</pre>None<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_9ixw33.php:54\n\
    Stack trace:\n#0 /tmp/tmpm_9ixw33.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpm_9ixw33.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    $product = 1;\n    if (sizeof($arr) == 0) {\n        return null;\n\
    \    }\n    foreach ($arr as $element) {\n        if ($element > 0) {\n      \
    \      $product *= 1;\n        } elseif ($element < 0) {\n            $product\
    \ *= -1;\n        } else {\n            $product *= 0;\n        }\n        $sum\
    \ += abs($element);\n    }\n    return $sum * $product;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (!$arr)\
    \ {\n    return;\n  }\n  $signs = array_filter($arr, function($x) {\n    return\
    \ $x == 0 ? false : true;\n  });\n  $magnitudes = array_map(function($x) {\n \
    \   return abs($x);\n  }, $arr);\n  $sign = array_product($signs);\n  $magnitude\
    \ = array_sum($magnitudes);\n  return $sign * $magnitude;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5qkve06.php:29\n\
    Stack trace:\n#0 /tmp/tmpu5qkve06.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpu5qkve06.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ {\n    return NULL;\n  }\n  else {\n    $sum = 0;\n    $product = 1;\n    foreach\
    \ ($arr as $num) {\n      $abs_num = abs($num);\n      $sign = $num > 0 ? 1 :\
    \ ($num < 0 ? -1 : 0);\n      $sum += $abs_num;\n      $product *= $sign;\n  \
    \  }\n    return $sum * $product;\n  }\n}\nfunction candidate(...$args) {\n  \
    \  return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  // your\
    \ code here\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7wbbfi7.php:18\n\
    Stack trace:\n#0 /tmp/tmpw7wbbfi7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpw7wbbfi7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $res\
    \ = 1;\n    foreach ($arr as $a) {\n        $r = $a / abs($a);\n        if ($r\
    \ != 0) $res *= $r;\n    }\n    $arr = array_map(function($n) {\n        return\
    \ abs($n);\n    }, $arr);\n    return array_sum($arr) * $res;\n}\necho prod_signs([1,\
    \ 2, 2, -4]) . PHP_EOL;\necho prod_signs([0, 1]) . PHP_EOL;\necho prod_signs([])\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n\nWarning: Division by zero in /tmp/tmp8xd75hgw.php on line 13\nNAN\n\
    0\n\nWarning: Division by zero in /tmp/tmp8xd75hgw.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp8xd75hgw.php:30\nStack trace:\n\
    #0 /tmp/tmp8xd75hgw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8xd75hgw.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum_of_magnitudes\
    \ = 0;\n    $prod_of_signs = 1;\n    if (count($arr) == 0) return;\n    foreach\
    \ ($arr as $num) {\n        $sum_of_magnitudes += abs($num);\n        $prod_of_signs\
    \ *= $num <=> 0;\n    }\n    return $sum_of_magnitudes * $prod_of_signs;\n}\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $result\
    \ = 1;\n  if (empty($arr)) {\n    return NULL;\n  }\n  foreach ($arr as $item)\
    \ {\n    $result *= sign($item);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpq400gha8.php:16\n\
    Stack trace:\n#0 /tmp/tmpq400gha8.php(22): prod_signs(Array)\n#1 /tmp/tmpq400gha8.php(26):\
    \ candidate(Array)\n#2 /tmp/tmpq400gha8.php(36): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpq400gha8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $magnitudeSum\
    \ = 0;\n  $signProduct = 1;\n  if (empty($arr)) {\n    return null;\n  }\n  foreach\
    \ ($arr as $value) {\n    $signProduct *= $value == 0 ? 0 : ($value > 0 ? 1 :\
    \ -1);\n    $magnitudeSum += abs($value);\n  }\n  return $magnitudeSum * $signProduct;\n\
    }\necho prod_signs([1, 2, 2, -4]);\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '-9'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (count($arr) == 0) {\n        return null;\n    }\n    $sum = 0;\n    $prod\
    \ = 1;\n    foreach ($arr as $a) {\n        $sum += abs($a);\n        $prod *=\
    \ $a == 0 ? 1 : $a / abs($a);\n    }\n    return $sum * $prod;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydqll18h.php:28\n\
    Stack trace:\n#0 /tmp/tmpydqll18h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpydqll18h.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ {\n    return NULL;\n  }\n  $signs = array_map(function($e) {\n    if ($e >\
    \ 0) {\n      return 1;\n    } elseif ($e < 0) {\n      return -1;\n    } else\
    \ {\n      return 0;\n    }\n  }, $arr);\n  $sum = array_sum(array_map('abs',\
    \ $arr));\n  $signs_product = array_product($signs);\n  return $sum * $signs_product;\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    //\
    \ here goes your code...\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpavyhc4va.php:19\n\
    Stack trace:\n#0 /tmp/tmpavyhc4va.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpavyhc4va.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $x =\
    \ array_product($arr);\n  if ($x === 0) {\n    return 0;\n  } else {\n    return\
    \ array_sum(array_map(function($y) { return abs($y); }, $arr)) * $x / abs($x);\n\
    \  }\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2,\
    \ 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplwjhkqf8.php:26\n\
    Stack trace:\n#0 /tmp/tmplwjhkqf8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplwjhkqf8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (!$arr)\
    \ {\n    return null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $num)\
    \ {\n    if ($num > 0) {\n      $product *= 1;\n    } elseif ($num < 0) {\n  \
    \    $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($num);\n\
    \  }\n  return $sum * $product;\n}\necho prod_signs([1, 2, 2, -4]), \"\\n\";\n\
    echo prod_signs([0, 1]), \"\\n\";\necho prod_signs([]), \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n0\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $count_positive\
    \ = array_count_values($arr)[1];\n  $count_negative = array_count_values($arr)[-1];\n\
    \  $count_zero = array_count_values($arr)[0];\n  if(empty($arr)) {\n    return\
    \ null;\n  }\n  if($count_positive + $count_negative === 0) {\n    return 0;\n\
    \  }\n  return $count_positive * $count_negative - $count_zero;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjk91urpp.php:28\n\
    Stack trace:\n#0 /tmp/tmpjk91urpp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjk91urpp.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return NULL;\n    }\n    $prod = 1;\n    $sum = 0;\n\
    \    foreach ($arr as $x) {\n        if ($x > 0) {\n            $sum += $x;\n\
    \        } elseif ($x < 0) {\n            $sum -= $x;\n            $prod *= -1;\n\
    \        }\n    }\n    return $sum * $prod;\n}\n\nprint_r(prod_signs([1, 2, 2,\
    \ -4]) . \"\\n\");\nprint_r(prod_signs([0, 1]) . \"\\n\");\nprint_r(prod_signs([])\
    \ . \"\\n\");\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpym5nr19t.php:36\n\
    Stack trace:\n#0 /tmp/tmpym5nr19t.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpym5nr19t.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (!$arr)\
    \ return;\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $element) {\n    if\
    \ ($element < 0) {\n      $product *= -1;\n    } elseif ($element > 0) {\n   \
    \   $product *= 1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($element);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  // Write\
    \ your code here\n  // To print results to the standard output you can use print\n\
    \  // Example:\n  // print \"Hello world!\";\n  $sum = 0;\n  $prod = 1;\n  if(count($arr)\
    \ == 0) {\n    return;\n  }\n  foreach($arr as $val) {\n    $sum += abs($val);\n\
    \    if($val != 0) {\n      $prod *= ($val > 0) ? 1 : -1;\n    }\n  }\n  return\
    \ $sum * $prod;\n}\n\necho prod_signs([1, 2, 2, -4]) . \"\\n\";\necho prod_signs([0,\
    \ 1]) . \"\\n\";\necho prod_signs([]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3ospfo6.php:38\n\
    Stack trace:\n#0 /tmp/tmpb3ospfo6.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpb3ospfo6.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return NULL;\n    }\n    $product = 1;\n    $sum =\
    \ 0;\n    foreach ($arr as $value) {\n        if ($value > 0) {\n            $product\
    \ *= 1;\n        } elseif ($value < 0) {\n            $product *= -1;\n      \
    \  } else {\n            $product *= 0;\n        }\n        $sum += abs($value);\n\
    \    }\n    return $sum * $product;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    //\
    \ write your code here\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwoh3rk2.php:18\n\
    Stack trace:\n#0 /tmp/tmpuwoh3rk2.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuwoh3rk2.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $total\
    \ = 0;\n    if (count($arr) > 0) {\n        $signs = array_map(function($num)\
    \ {\n            return $num < 0 ? -1 : ($num > 0 ? 1 : 0);\n        }, $arr);\n\
    \        $sign_product = array_product($signs);\n        $magnitudes = array_map(function($num)\
    \ {\n            return abs($num);\n        }, $arr);\n        $total = array_sum($magnitudes)\
    \ * $sign_product;\n    }\n    return $total;\n}\n\necho prod_signs([1, 2, 2,\
    \ -4]) . PHP_EOL;\necho prod_signs([0, 1]) . PHP_EOL;\necho prod_signs([]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0z_l8kz.php:36\n\
    Stack trace:\n#0 /tmp/tmpo0z_l8kz.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpo0z_l8kz.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if(empty($arr))\
    \ {\n    return NULL;\n  }\n  $sign = 1;\n  $magn = 0;\n  foreach($arr as $value)\
    \ {\n    if($value < 0) {\n      $sign *= -1;\n    }\n    if($value < 0) {\n \
    \     $value *= -1;\n    }\n    $magn += $value;\n  }\n  return $magn * $sign;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56egvtgl.php:34\n\
    Stack trace:\n#0 /tmp/tmp56egvtgl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp56egvtgl.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $arrOfPositives\
    \ = array_filter($arr, function($a) {\n    return $a > 0;\n  });\n  $arrOfNegatives\
    \ = array_filter($arr, function($a) {\n    return $a < 0;\n  });\n  $arrOfMagnitudes\
    \ = array_map(function($a) {\n    return abs($a);\n  }, $arr);\n  $arrLength =\
    \ count($arr);\n  if ($arrLength === 0) {\n    return NULL;\n  }\n  $signsProduct\
    \ = count($arrOfPositives) % 2 === 0 ? 1 : -1;\n  return array_sum($arrOfMagnitudes)\
    \ * $signsProduct;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7hk965c.php:34\n\
    Stack trace:\n#0 /tmp/tmpo7hk965c.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpo7hk965c.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ {\n    return NULL;\n  }\n  return array_reduce($arr, function($acc, $x) {\n\
    \    return $acc + $x * abs($x);\n  }, 0);\n}\n\n$arr1 = [1, 2, 2, -4];\n$arr2\
    \ = [0, 1];\n$arr3 = [];\n\nprint_r(prod_signs($arr1)) . \"\\n\";\nprint_r(prod_signs($arr2))\
    \ . \"\\n\";\nprint_r(prod_signs($arr3)) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-71\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7p1zt6qx.php:31\n\
    Stack trace:\n#0 /tmp/tmp7p1zt6qx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7p1zt6qx.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (!$arr) {\n        return null;\n    }\n    $sum = 0;\n    $sign = 1;\n    foreach\
    \ ($arr as $value) {\n        $sum += abs($value);\n        $sign *= $value >\
    \ 0 ? 1 : ($value < 0 ? -1 : 0);\n    }\n    return $sum * $sign;\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (!$arr)\
    \ {\n    return null;\n  }\n  $signs = array_map(function($number) {\n    if ($number\
    \ > 0) {\n      return 1;\n    } elseif ($number < 0) {\n      return -1;\n  \
    \  } else {\n      return 0;\n    }\n  }, $arr);\n  $sign_prod = array_product($signs);\n\
    \  $magnitudes = array_map(function($number) {\n    return abs($number);\n  },\
    \ $arr);\n  $magnitude_sum = array_sum($magnitudes);\n  return $sign_prod * $magnitude_sum;\n\
    }\n\necho prod_signs([1, 2, 2, -4]).\"\\n\";\necho prod_signs([0, 1]).\"\\n\"\
    ;\necho prod_signs([]).\"\\n\";\necho prod_signs([-1, -2, 2, -4]).\"\\n\";\necho\
    \ prod_signs([-1, -2, 2, -4, 0]).\"\\n\";\necho prod_signs([-1, -2, 2, -4, 1]).\"\
    \\n\";\necho prod_signs([-1, -2, 2, -4, 0, 0]).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "-9\n0\n\n-9\n0\n-10\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\n}\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3jfi4v0r.php:18\n\
    Stack trace:\n#0 /tmp/tmp3jfi4v0r.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3jfi4v0r.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (count($arr) == 0) return null;\n    $sign = 1;\n    $sum = 0;\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value != 0) {\n            $sign *=\
    \ ($value / abs($value));\n            $sum += abs($value);\n        }\n    }\n\
    \    return $sign * $sum;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ur0ao27.php:29\n\
    Stack trace:\n#0 /tmp/tmp1ur0ao27.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1ur0ao27.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\t$product\
    \ = 1;\n\t$sum = 0;\n\tif(empty($arr)) {\n\t\treturn null;\n\t}\n\tforeach($arr\
    \ as $number) {\n\t\tif($number > 0) {\n\t\t\t$product *= 1;\n\t\t\t$sum += $number;\n\
    \t\t}\n\t\telseif($number < 0) {\n\t\t\t$product *= -1;\n\t\t\t$sum += abs($number);\n\
    \t\t}\n\t\telse {\n\t\t\t$product *= 0;\n\t\t}\n\t}\n\treturn $sum * $product;\n\
    }\necho prod_signs([1, 2, 2, -4]) . \"<br>\";\necho prod_signs([0, 1]) . \"<br>\"\
    ;\necho prod_signs([]);\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: -9<br>0<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $count\
    \ = count($arr);\n    if ($count == 0) return null;\n    $res = 0;\n    for ($i\
    \ = 0; $i < $count; $i++) {\n        $res += $arr[$i] * ($arr[$i] > 0 ? 1 : -1);\n\
    \    }\n    return $res;\n}\n\necho prod_signs([1, 2, 2, -4]) == -9;\necho prod_signs([0,\
    \ 1]) == 0;\necho prod_signs([]) == null;\nfunction candidate(...$args) {\n  \
    \  return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmovawhqg.php:28\n\
    Stack trace:\n#0 /tmp/tmpmovawhqg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmovawhqg.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    //\
    \ Write your code here\n    // To print results to the standard output you can\
    \ use print\n    // Example:\n    // print \"Hello world!\";\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp864xdxiy.php:21\n\
    Stack trace:\n#0 /tmp/tmp864xdxiy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp864xdxiy.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\t$result\
    \ = [];\n\t$signs = [];\n\t$magnitudes = [];\n\t$empty = [];\n\tforeach ($arr\
    \ as $number) {\n\t\tif ($number == 0) {\n\t\t\t$signs[] = 0;\n\t\t\t$magnitudes[]\
    \ = 0;\n\t\t} elseif ($number > 0) {\n\t\t\t$signs[] = 1;\n\t\t\t$magnitudes[]\
    \ = $number;\n\t\t} else {\n\t\t\t$signs[] = -1;\n\t\t\t$magnitudes[] = abs($number);\n\
    \t\t}\n\t}\n\tif ($arr == $empty) {\n\t\treturn null;\n\t} else {\n\t\treturn\
    \ array_product($signs) * array_sum($magnitudes);\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(!$arr)\
    \ {\n        return null;\n    }\n    // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpufrxofp3.php:22\n\
    Stack trace:\n#0 /tmp/tmpufrxofp3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpufrxofp3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $prod\
    \ = 1;\n    $sum = 0;\n    foreach ($arr as $a) {\n        if ($a == 0) {\n  \
    \          $prod = 0;\n            break;\n        }\n        if ($a > 0) {\n\
    \            $prod *= 1;\n        } else {\n            $prod *= -1;\n       \
    \ }\n        $sum += abs($a);\n    }\n    if ($prod == 0) {\n        return $prod;\n\
    \    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaugcqksr.php:39\n\
    Stack trace:\n#0 /tmp/tmpaugcqksr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpaugcqksr.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ return null;\n  $plus  = array_filter($arr, function($x) { return $x > 0;});\n\
    \  $minus = array_filter($arr, function($x) { return $x < 0;});\n  $zero  = array_filter($arr,\
    \ function($x) { return $x == 0;});\n  return array_sum($plus) - array_sum($minus)\
    \ + count($zero);\n}\necho prod_signs([1, 2, 2, -4]) === -9 ? 'true' : 'false';\n\
    echo prod_signs([0, 1]) === 0 ? 'true' : 'false';\necho prod_signs([]) === null\
    \ ? 'true' : 'false';\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "falsefalsetrue\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp649x598.php:25\n\
    Stack trace:\n#0 /tmp/tmpp649x598.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpp649x598.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n\n    $product = 1;\n    $sum\
    \ = 0;\n    foreach ($arr as $value) {\n        if ($value > 0) {\n          \
    \  $product *= 1;\n        } elseif ($value < 0) {\n            $product *= -1;\n\
    \        } else {\n            $product *= 0;\n        }\n        $sum += abs($value);\n\
    \    }\n    return $sum * $product;\n}\n\nfunction candidate(...$args) {\n   \
    \ return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\tif (empty($arr))\
    \ {\n\t\treturn NULL;\n\t}\n\t$prod = 1;\n\t$mag = 0;\n\tforeach ($arr as $val)\
    \ {\n\t\tif ($val < 0) {\n\t\t\t$prod *= -1;\n\t\t} elseif ($val == 0) {\n\t\t\
    \t$prod = 0;\n\t\t\tbreak;\n\t\t}\n\t\t$mag += abs($val);\n\t}\n\treturn $prod\
    \ * $mag;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $res\
    \ = 1;\n  $sum = 0;\n  foreach ($arr as $el) {\n    if ($el > 0) {\n      $sum\
    \ += $el;\n      $res *= 1;\n    } elseif ($el < 0) {\n      $sum += abs($el);\n\
    \      $res *= -1;\n    } else {\n      $res = 0;\n    }\n  }\n  return $res ?\
    \ $sum * $res : null;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6cudo81w.php:33\n\
    Stack trace:\n#0 /tmp/tmp6cudo81w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6cudo81w.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $mag\
    \ = array_map(function($x) { return abs($x); }, $arr);\n    $sign = array_map(function($x)\
    \ { return $x > 0 ? 1 : $x < 0 ? -1 : 0; }, $arr);\n    return array_product($sign)\
    \ * array_sum($mag);\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25c7a459.php:20\n\
    Stack trace:\n#0 /tmp/tmp25c7a459.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp25c7a459.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $product = 1;\n    $sum =\
    \ 0;\n    foreach ($arr as $el) {\n        $sum += abs($el);\n        $product\
    \ *= ($el >= 0) ? 1 : -1;\n    }\n    return $sum * $product;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp62lt3cl2.php:28\n\
    Stack trace:\n#0 /tmp/tmp62lt3cl2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp62lt3cl2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if(empty($arr))\
    \ {\n        return null;\n    }\n    $sum = 0;\n    $sign = 1;\n    foreach($arr\
    \ as $a) {\n        $sum += abs($a);\n        $sign *= ($a == 0 ? 1 : ($a > 0\
    \ ? 1 : -1));\n    }\n    return $sum * $sign;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61jd6xp3.php:28\n\
    Stack trace:\n#0 /tmp/tmp61jd6xp3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp61jd6xp3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $empty\
    \ = \"None\";\n  $result = 0;\n  foreach ($arr as $int) {\n    if ($int === 0)\
    \ {\n      $result = 0;\n    } elseif ($int < 0) {\n      $result -= $int;\n \
    \   } else {\n      $result += $int;\n    }\n  }\n  return $result;\n}\necho prod_signs([1,\
    \ 2, 2, -4]).\"\\n\";\necho prod_signs([0, 1]).\"\\n\";\necho prod_signs([]).\"\
    \\n\";\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2,\
    \ 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "9\n1\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1nrjovs.php:32\n\
    Stack trace:\n#0 /tmp/tmpr1nrjovs.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpr1nrjovs.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (!count($arr)) {\n        return NULL;\n    }\n    $signs = array_map(function($n)\
    \ {\n        if ($n < 0) {\n            return -1;\n        } elseif ($n > 0)\
    \ {\n            return 1;\n        } else {\n            return 0;\n        }\n\
    \    }, $arr);\n    $product = array_product($signs);\n    $magnitudes = array_map(function($n)\
    \ {\n        return abs($n);\n    }, $arr);\n    $sum = array_sum($magnitudes);\n\
    \    return $product * $sum;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  //your\
    \ code here\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03w1g2_x.php:19\n\
    Stack trace:\n#0 /tmp/tmp03w1g2_x.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp03w1g2_x.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  // BEGIN\
    \ (write your solution here)\n  if (empty($arr)) {\n      return \"None\";\n \
    \ }\n  $count = 0;\n  $sum = 0;\n  foreach ($arr as $item) {\n      if ($item\
    \ > 0) {\n          $count++;\n      } elseif ($item < 0) {\n          $count--;\n\
    \      }\n      $sum += abs($item);\n  }\n  if ($count === 0) {\n      return\
    \ $sum;\n  }\n  return $sum * $count;\n  // END\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhsvgrng.php:37\n\
    Stack trace:\n#0 /tmp/tmphhsvgrng.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphhsvgrng.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $arr_sum\
    \ = 0;\n    $sign_sum = 1;\n    foreach ($arr as $v) {\n        $arr_sum += abs($v);\n\
    \        $sign_sum *= sign($v);\n    }\n    if ($arr_sum == 0) {\n        return\
    \ null;\n    }\n    return $arr_sum * $sign_sum;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpyeezopmo.php:15\n\
    Stack trace:\n#0 /tmp/tmpyeezopmo.php(23): prod_signs(Array)\n#1 /tmp/tmpyeezopmo.php(27):\
    \ candidate(Array)\n#2 /tmp/tmpyeezopmo.php(37): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpyeezopmo.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $res\
    \ = 1;\n    $mag = 0;\n    foreach ($arr as $n) {\n        if ($n > 0) {\n   \
    \         $res *= 1;\n            $mag += $n;\n        } elseif ($n < 0) {\n \
    \           $res *= -1;\n            $mag += abs($n);\n        } else {\n    \
    \        $res *= 0;\n        }\n    }\n    if ($res == 1 || $res == -1) {\n  \
    \      return $res * $mag;\n    } else {\n        return 0;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpht1r_lbd.php:39\n\
    Stack trace:\n#0 /tmp/tmpht1r_lbd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpht1r_lbd.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if(count($arr)\
    \ == 0) return;\n  $magnitudes = [];\n  $signs = [];\n  foreach($arr as $n) {\n\
    \    $magnitudes[] = abs($n);\n    $signs[] = ($n > 0) ? 1 : (($n < 0) ? -1 :\
    \ 0);\n  }\n  return array_product($magnitudes) * array_product($signs);\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4yc37898.php:26\n\
    Stack trace:\n#0 /tmp/tmp4yc37898.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4yc37898.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (empty($arr))\
    \ {\n    return null;\n  }\n  $count_zeros = 0;\n  $count_positives = 0;\n  $count_negatives\
    \ = 0;\n  foreach ($arr as $i) {\n    if ($i == 0) {\n      $count_zeros++;\n\
    \    } elseif ($i > 0) {\n      $count_positives++;\n    } else {\n      $count_negatives++;\n\
    \    }\n  }\n  if ($count_zeros > 0) {\n    return 0;\n  }\n  $sign = $count_positives\
    \ % 2 == 0 ? 1 : -1;\n  $magnitudes = array_map(function($x) { return abs($x);\
    \ }, $arr);\n  return array_sum($magnitudes) * $sign;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphb4akhnz.php:41\n\
    Stack trace:\n#0 /tmp/tmphb4akhnz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmphb4akhnz.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n\n    $result = 0;\n    $prod\
    \ = 1;\n    foreach ($arr as $item) {\n        $result += abs($item);\n      \
    \  $prod *= $item / abs($item);\n    }\n\n    return $result * $prod;\n}\n\nassert(prod_signs([1,\
    \ 2, 2, -4]) == -9);\nassert(prod_signs([0, 1]) == 0);\nassert(prod_signs([])\
    \ == null);\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpxf58rdcl.php on line 19\n\nWarning:\
    \ assert(): assert(prod_signs([0, 1]) == 0) failed in /tmp/tmpxf58rdcl.php on\
    \ line 26\n\nWarning: Division by zero in /tmp/tmpxf58rdcl.php on line 19\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpxf58rdcl.php:34\nStack\
    \ trace:\n#0 /tmp/tmpxf58rdcl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxf58rdcl.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (count($arr)\
    \ === 0) {\n    return null;\n  }\n  $r = [1, 0];\n  foreach ($arr as $v) {\n\
    \    if ($v > 0) {\n      $r[0] += $v;\n    } elseif ($v < 0) {\n      $r[0] -=\
    \ $v;\n      $r[1]++;\n    }\n  }\n  return $r[0] * pow(-1, $r[1]);\n}\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporgadvo5.php:30\n\
    Stack trace:\n#0 /tmp/tmporgadvo5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmporgadvo5.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $prod = 1;\n    $sum = 0;\n\
    \    foreach ($arr as $num) {\n        if ($num == 0) {\n            $prod = 0;\n\
    \            continue;\n        }\n        $prod *= $num > 0 ? 1 : -1;\n     \
    \   $sum += abs($num);\n    }\n    return $prod * $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n\tif(!$arr)\
    \ return NULL;\n\t$magnitudes = array_map('abs', $arr);\n\t$signs = array_map(function($n)\
    \ { return $n ? $n / abs($n) : 0; }, $arr);\n\treturn array_product($signs) *\
    \ array_sum($magnitudes);\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) return null;\n    $mul = 1;\n    $sum = 0;\n    foreach ($arr\
    \ as $n) {\n        if ($n === 0) continue;\n        $sum += abs($n);\n      \
    \  $mul *= ($n >= 0) ? 1 : -1;\n    }\n    return $sum * $mul;\n}\n\nif (prod_signs([1,\
    \ 2, 2, -4]) == -9) echo 'pass';\nif (prod_signs([0, 1]) == 0) echo 'pass';\n\
    if (prod_signs([]) == null) echo 'pass';\nfunction candidate(...$args) {\n   \
    \ return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "passpass\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8mo83fk.php:31\n\
    Stack trace:\n#0 /tmp/tmpl8mo83fk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpl8mo83fk.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  //magnitude\
    \ of integers\n  $magnitude = 0;\n  //product of signs\n  $product = 1;\n  //iterate\
    \ through the array\n  foreach ($arr as $value) {\n    //if the number is not\
    \ equal to zero, multiply the magnitude by the value\n    if ($value != 0) {\n\
    \      $magnitude += abs($value);\n    }\n    //if the number is equal to zero,\
    \ return null\n    if ($value == 0) {\n      return null;\n    }\n    //if the\
    \ number is positive, multiply product by 1\n    if ($value > 0) {\n      $product\
    \ *= 1;\n    }\n    //if the number is negative, multiply product by -1\n    if\
    \ ($value < 0) {\n      $product *= -1;\n    }\n  }\n  //multiply the magnitude\
    \ and product\n  return $magnitude * $product;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_ifj47n.php:43\n\
    Stack trace:\n#0 /tmp/tmp3_ifj47n.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp3_ifj47n.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $result = 1;\n    $magnitude\
    \ = 0;\n    foreach ($arr as $item) {\n        if ($item === 0) {\n          \
    \  $result = 0;\n            break;\n        }\n        if ($item < 0) {\n   \
    \         $result *= -1;\n        }\n        $magnitude += abs($item);\n    }\n\
    \    return $result * $magnitude;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  if (!count($arr))\
    \ return NULL;\n  $prd = 1;\n  $sum = 0;\n  foreach ($arr as $val) {\n    $prd\
    \ *= ($val == 0) ? 1 : ($val / abs($val));\n    $sum += abs($val);\n  }\n  return\
    \ $prd * $sum;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq18fyelc.php:27\n\
    Stack trace:\n#0 /tmp/tmpq18fyelc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpq18fyelc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    //\
    \ Your code here\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwx8m4vsx.php:18\n\
    Stack trace:\n#0 /tmp/tmpwx8m4vsx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpwx8m4vsx.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $product\
    \ = 1;\n    $sum = 0;\n    if(empty($arr)) {\n        return null;\n    }\n  \
    \  foreach($arr as $value) {\n        $product *= $value < 0 ? -1 : ($value >\
    \ 0 ? 1 : 0);\n        $sum += abs($value);\n    }\n    return $product * $sum;\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
