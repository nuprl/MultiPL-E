name: HumanEval_44_change_base
language: php
prompt: "<?php\n// Change numerical base of input number x to base.\n// return string\
  \ representation after the conversion.\n// base numbers are less than 10.\n// >>>\
  \ change_base(8, 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7,\
  \ 2)\n// '111'\nfunction change_base($x, $base) {\n"
tests: "function candidate(...$args) {\n    return change_base(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(8, 3) !== \"22\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(9, 3) !== \"100\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(234, 2) !== \"11101010\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(16, 2) !== \"10000\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(8, 2) !== \"1000\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 2) !== \"111\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 3) !== \"2\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3, 4) !== \"3\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 5) !== \"4\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5, 6) !== \"5\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(6, 7) !== \"6\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 8) !== \"7\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    if ($x == 0) return '0';\n    $result = [];\n    while ($x > 0)\
    \ {\n        $remainder = $x % $base;\n        $x = ($x - $remainder) / $base;\n\
    \        array_push($result, $remainder);\n    }\n    return implode(array_reverse($result));\n\
    }\n", "  $base_num = array();\n  $x_base = '';\n  $i = 0;\n  $num = 0;\n  $y =\
    \ $x;\n  $x_base = '';\n  while($y > 0) {\n    $num = $y % $base;\n    $base_num[$i]\
    \ = $num;\n    $i++;\n    $y = (int)($y / $base);\n  }\n  $len = count($base_num);\n\
    \  for($i = $len - 1; $i >= 0; $i--) {\n    $x_base .= $base_num[$i];\n  }\n \
    \ return $x_base;\n}", "  $x = (int)$x;\n  $base = (int)$base;\n  if ($x < $base)\
    \ {\n    return $x;\n  } else {\n    return change_base($x / $base, $base) . strval($x\
    \ % $base);\n  }\n}\n", "\t$p = 1;\n\t$d = 0;\n\t$result = '';\n\twhile ($x >=\
    \ $p) {\n\t\t$d = floor($x / $p) % $base;\n\t\t$result = $d . $result;\n\t\t$p\
    \ *= $base;\n\t}\n\treturn $result;\n}\n\necho change_base(8, 3) . PHP_EOL;\n\
    echo change_base(8, 2) . PHP_EOL;\necho change_base(7, 2) . PHP_EOL;", "    $bin_input\
    \ = decbin($x);\n    $result = array();\n    $len = strlen($bin_input);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if ($bin_input[$i] == 1) {\n          \
    \  $result[] = pow($base, $len - $i - 1);\n        }\n    }\n    $output = implode('+',\
    \ $result);\n    return $output;\n}", "    $result = [];\n    $remainder = $x;\n\
    \    while ($remainder > 0) {\n        $result[] = $remainder % $base;\n     \
    \   $remainder = floor($remainder / $base);\n    }\n    return implode('', array_reverse($result));\n\
    }\necho change_base(8, 3) . \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho\
    \ change_base(7, 2) . \"\\n\";", "  $x_bin = decbin($x);\n  $x_base = base_convert($x_bin,\
    \ 2, $base);\n  return $x_base;\n}\n", "\tif ($x < $base) {\n\t\treturn (string)$x;\n\
    \t} else {\n\t\treturn change_base($x / $base, $base) . ($x % $base);\n\t}\n}\n",
  "  $result = \"\";\n  $mod = $x % $base;\n  $x = ($x - $mod) / $base;\n  $result\
    \ = strval($mod) . $result;\n  while ($x != 0) {\n    $mod = $x % $base;\n   \
    \ $x = ($x - $mod) / $base;\n    $result = strval($mod) . $result;\n  }\n  return\
    \ $result;\n}\n", "    $res = \"\";\n    while ($x != 0) {\n        $res = $x\
    \ % $base . $res;\n        $x = (int)($x / $base);\n    }\n    return $res;\n}",
  "  $result = '';\n  while ($x) {\n    $result = ($x % $base) . $result;\n    $x\
    \ = (int)($x / $base);\n  }\n  return $result;\n}\n", "\t// empty string to hold\
    \ the result.\n\t$result = '';\n\twhile ($x > 0) {\n\t\t// get the remainder of\
    \ $x divided by $base.\n\t\t$remainder = $x % $base;\n\t\t// $x is now the quotient.\n\
    \t\t$x = (int)($x / $base);\n\t\t// Append remainder to the result.\n\t\t$result\
    \ = (string)$remainder . $result;\n\t}\n\treturn $result;\n}\n", "    if ($x <\
    \ 0) {\n        return;\n    }\n\n    if ($x >= $base) {\n        $tmp = $x %\
    \ $base;\n        return change_base(($x - $tmp) / $base, $base) . strval($tmp);\n\
    \    } else {\n        return strval($x);\n    }\n}\n", "  $result = '';\n  $decimal\
    \ = '0123456789';\n  if ($x == 0) {\n    return '0';\n  }\n  while ($x > 0) {\n\
    \    $remainder = $x % $base;\n    $x = intval($x / $base);\n    $result = $decimal[$remainder]\
    \ . $result;\n  }\n  return $result;\n}\necho change_base(8, 3) . \"\\n\";\necho\
    \ change_base(8, 2) . \"\\n\";\necho change_base(7, 2) . \"\\n\";\n", "\treturn\
    \ base_convert($x, 10, $base);\n}\n", "  if ($x < $base) {\n    return (string)$x;\n\
    \  }\n  else {\n    return change_base(floor($x / $base), $base) . ($x % $base);\n\
    \  }\n}\necho change_base(8, 3);\necho PHP_EOL;\necho change_base(8, 2);\necho\
    \ PHP_EOL;\necho change_base(7, 2);\necho PHP_EOL;", "    if ($x < $base) {\n\
    \        return (string)$x;\n    }\n    else {\n        return change_base(floor($x\
    \ / $base), $base) . $x % $base;\n    }\n}\n\necho change_base(8, 3), \"\\n\"\
    ;\necho change_base(8, 2), \"\\n\";\necho change_base(7, 2), \"\\n\";", "    //\
    \ Write your code here\n    // To print results to the standard output you can\
    \ use print\n    // Example: print \"Hello world!\";\n}", "\t$str = \"\";\n\t\
    $rest = $x;\n\twhile ($rest > 0) {\n\t\t$str = ($rest % $base) . $str;\n\t\t$rest\
    \ = (int)($rest / $base);\n\t}\n\treturn $str;\n}\n", "    $output = [];\n   \
    \ while ($x > 0) {\n        $output[] = $x % $base;\n        $x = floor($x / $base);\n\
    \    }\n    return implode(\"\", array_reverse($output));\n}\n\necho change_base(8,\
    \ 3);\necho change_base(8, 2);\necho change_base(7, 2);", "  $n = 0;\n  $res =\
    \ \"\";\n  while ($x > 0) {\n    $n = $x % $base;\n    $res = (string)$n . $res;\n\
    \    $x = floor($x / $base);\n  }\n  return $res;\n}\n", "\t$out = '';\n\t$temp\
    \ = 0;\n\twhile($x > 0) {\n\t\t$temp = $x % $base;\n\t\t$out = strval($temp) .\
    \ $out;\n\t\t$x = intval($x / $base);\n\t}\n\treturn $out;\n}\n\n$input_x = 8;\n\
    $input_base = 2;\n\necho change_base($input_x, $input_base);", "  $arr = array();\n\
    \  while ($x > 0) {\n    $arr[] = $x % $base;\n    $x = (int)($x / $base);\n \
    \ }\n  return implode('', array_reverse($arr));\n}\n", "    if ($x == 0) {\n \
    \       return \"0\";\n    }\n    $res = \"\";\n    while ($x > 0) {\n       \
    \ $rem = $x % $base;\n        $res = (string)$rem . $res;\n        $x = floor($x\
    \ / $base);\n    }\n    return $res;\n}", "    $ans = \"\";\n    while ($x > 0)\
    \ {\n        $rem = $x % $base;\n        $ans = (string)$rem . $ans;\n       \
    \ $x = (int)($x / $base);\n    }\n    return $ans;\n}", "  $num = array();\n \
    \ $result = '';\n  while ($x != 0) {\n    $num[] = $x % $base;\n    $x = intval($x\
    \ / $base);\n  }\n  while (!empty($num)) {\n    $result .= array_pop($num);\n\
    \  }\n  return $result;\n}\n\necho change_base(8, 3) . \"\\n\";\necho change_base(8,\
    \ 2) . \"\\n\";\necho change_base(7, 2) . \"\\n\";", "    $result = '';\n    $index\
    \ = 0;\n    while ($x > 0) {\n        $result = $x % $base . $result;\n      \
    \  $x = (int)($x / $base);\n    }\n    return $result;\n}\n", '}', "\t// Write\
    \ your code here\n    $ret = [];\n    while ($x > 0) {\n        $ret[] = $x %\
    \ $base;\n        $x = floor($x / $base);\n    }\n    $ret = array_reverse($ret);\n\
    \    $ret = implode('', $ret);\n    return $ret;\n}\n", "\t$result = \"\";\n\t\
    while ($x > 0) {\n\t\t$result = ($x % $base) . $result;\n\t\t$x = intval($x /\
    \ $base);\n\t}\n\treturn $result;\n}\n", "    if ($x < $base) {\n        return\
    \ strval($x);\n    }\n    return change_base(floor($x / $base), $base) . strval($x\
    \ % $base);\n}\n", "\t$result = '';\n\twhile ($x > 0) {\n\t\t$result = ($x % $base)\
    \ . $result;\n\t\t$x = (int)($x / $base);\n\t}\n\treturn $result;\n}\n", "   \
    \ // fill here!\n}\n", "    $base_numbers = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n\
    \    $result = '';\n    while($x > 0) {\n        $result = $base_numbers[$x %\
    \ $base] . $result;\n        $x = (int)($x / $base);\n    }\n    return $result;\n\
    }\n", "    // fill in the code\n    $stack = array();\n    $remainder = null;\n\
    \    $result = \"\";\n    while ($x > 0) {\n      $remainder = $x % $base;\n \
    \     array_push($stack, $remainder);\n      $x = ($x - $remainder) / $base;\n\
    \    }\n    $cnt = count($stack);\n    for ($i = 0; $i < $cnt; $i++) {\n     \
    \ $result .= $stack[$i];\n    }\n    return $result;\n}", "    $result = [];\n\
    \    while ($x > 0) {\n        $result[] = $x % $base;\n        $x = (int)($x\
    \ / $base);\n    }\n    $result = array_reverse($result);\n    return implode('',\
    \ $result);\n}\n", "    $numbers = [\n        0 => '0',\n        1 => '1',\n \
    \       2 => '2',\n        3 => '3',\n        4 => '4',\n        5 => '5',\n \
    \       6 => '6',\n        7 => '7',\n        8 => '8',\n        9 => '9',\n \
    \       10 => 'A',\n        11 => 'B',\n        12 => 'C',\n        13 => 'D',\n\
    \        14 => 'E',\n        15 => 'F',\n        16 => 'G',\n        17 => 'H',\n\
    \        18 => 'I',\n        19 => 'J',\n        20 => 'K',\n        21 => 'L',\n\
    \        22 => 'M',\n        23 => 'N',\n        24 => 'O',\n        25 => 'P',\n\
    \        26 => 'Q',\n        27 => 'R',\n        28 => 'S',\n        29 => 'T',\n\
    \        30 => 'U',\n        31 => 'V',\n        32 => 'W',\n        33 => 'X',\n\
    \        34 => 'Y',\n        35 => 'Z',\n    ];\n    $result = '';\n    while\
    \ ($x > 0) {\n        $result = $numbers[$x % $base] . $result;\n        $x =\
    \ floor($x / $base);\n    }\n    return $result;\n}\n", "    $n = $x;\n    $result\
    \ = '';\n    while($n > 0) {\n        $result = ($n % $base) . $result;\n    \
    \    $n = (int)($n / $base);\n    }\n    return $result;\n}\n", "    $result =\
    \ '';\n    $i = 0;\n    while (1) {\n        $v = $x % $base;\n        $x = floor($x\
    \ / $base);\n        $result = strval($v) . $result;\n        if ($x == 0) {\n\
    \            break;\n        }\n    }\n    return $result;\n}\n", "    // TODO:\
    \ Write your code here\n}\n", "}\n", "  if($x < $base) {\n    return $x;\n  }\n\
    \  else {\n    return change_base(floor($x / $base), $base) . ($x % $base);\n\
    \  }\n}\n\necho change_base(8, 2);", "  $str = \"\";\n  while ($x > 0) {\n   \
    \ $str = $x % $base . $str;\n    $x = (int)($x / $base);\n  }\n  return $str;\n\
    }\n\nvar_dump(change_base(8, 3));\nvar_dump(change_base(8, 2));\nvar_dump(change_base(7,\
    \ 2));", "  $result = \"\";\n  while($x > 0) {\n    $result = ($x % $base) . $result;\n\
    \    $x = floor($x / $base);\n  }\n  return $result;\n}\n", "    $result = '';\n\
    \    while($x > 0) {\n        $remainder = $x % $base;\n        $x = floor($x\
    \ / $base);\n        $result = strval($remainder) . $result;\n    }\n    return\
    \ $result;\n}\n", "    $quotient = intval($x / $base);\n    $remainder = $x %\
    \ $base;\n    if ($quotient == 0) {\n        return (string)$remainder;\n    }\
    \ else {\n        return change_base($quotient, $base) . (string)$remainder;\n\
    \    }\n}\necho change_base(8, 2) . PHP_EOL;\necho change_base(8, 3) . PHP_EOL;\n\
    echo change_base(7, 2) . PHP_EOL;", "    $result = '';\n    while ($x > 0) {\n\
    \        $result = strval($x % $base) . $result;\n        $x = (int)($x / $base);\n\
    \    }\n    return $result;\n}\n", "    $s = '';\n    while ($x > 0) {\n     \
    \   $s = strval($x % $base) . $s;\n        $x = intval($x / $base);\n    }\n \
    \   return $s;\n}\n", "    $y = $x;\n    $result = '';\n    while ($y > 0) {\n\
    \        $result = strval($y % $base) . $result;\n        $y = intval($y / $base);\n\
    \    }\n    return $result;\n}", "    if ($x == 0) {\n        return '0';\n  \
    \  }\n    $numbers = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n    $result = \"\"\
    ;\n    while ($x > 0) {\n        $digit = $x % $base;\n        $result = $numbers[$digit]\
    \ . $result;\n        $x = (int)($x / $base);\n    }\n    return $result;\n}",
  "  $y = 0;\n  $i = 0;\n  while ($x != 0) {\n    $y += (($x % $base) * pow(10, $i));\n\
    \    $x = floor($x / $base);\n    $i++;\n  }\n  return $y;\n}\n\n$ans = change_base(8,\
    \ 3);\nassert($ans == '22');\n$ans = change_base(8, 2);\nassert($ans == '1000');\n\
    $ans = change_base(7, 2);\nassert($ans == '111');\necho 'Success', PHP_EOL;",
  "    $result = '';\n    while($x) {\n        $result = strval($x % $base) . $result;\n\
    \        $x = floor($x / $base);\n    }\n    return $result;\n}\n", "    if ($x\
    \ < $base) {\n        return $x;\n    }\n    else {\n        return change_base(floor($x\
    \ / $base), $base) . strval($x % $base);\n    }\n}\n", "    // Fill in the blank\n\
    }\n", "\n}\n", "\n}", "  if ($x < $base) {\n    return (string)$x;\n  }\n  return\
    \ change_base($x / $base, $base) . change_base($x % $base, $base);\n}\n", "  \
    \  $result = '';\n    while ($x > 0) {\n        $div = floor($x / $base);\n  \
    \      $rem = $x % $base;\n        $result = $rem . $result;\n        $x = $div;\n\
    \    }\n    return $result;\n}", "    $result = '';\n    while($x >= $base) {\n\
    \        $i = $x % $base;\n        $result = (string)$i . $result;\n        $x\
    \ = ($x - $i) / $base;\n    }\n    $result = (string)$x . $result;\n    return\
    \ $result;\n}\n", "    if ($x == 0) {\n        return \"0\";\n    }\n\n    $y\
    \ = \"\";\n    while ($x > 0) {\n        $y = strval($x % $base) . $y;\n     \
    \   $x = intval($x / $base);\n    }\n    return $y;\n}\n", "\t$str = \"\";\n\t\
    while ($x > 0) {\n\t\t$str = ($x % $base).$str;\n\t\t$x = (int)($x / $base);\n\
    \t}\n\treturn $str;\n}", "    $output = '';\n    $num_digits = floor(log($x, $base))\
    \ + 1;\n\n    for ($i = 0; $i < $num_digits; $i++) {\n        $power = pow($base,\
    \ $i);\n        $digits = floor($x / $power);\n        $output = $digits . $output;\n\
    \        $x -= $digits * $power;\n    }\n\n    return $output;\n}\n", "  $rem\
    \ = $x % $base;\n  $x = (int)($x / $base);\n  if ($x === 0) {\n    return $rem;\n\
    \  }\n  return change_base($x, $base) . $rem;\n}\n", "\tif ($x >= 0 && $x < $base)\
    \ {\n\t\treturn strval($x);\n\t} else {\n\t\treturn change_base(floor($x / $base),\
    \ $base) . strval($x % $base);\n\t}\n}\n", "    $base_num = (string) $base;\n\
    \    $x_num = (string) $x;\n    $base_str = \"\";\n    while ($x_num >= $base_num)\
    \ {\n        $base_str = (string) ($x_num % $base_num) . $base_str;\n        $x_num\
    \ = floor($x_num / $base_num);\n    }\n    return (string) $x_num . $base_str;\n\
    }\n", "\tif($x == 0) {\n\t\treturn \"0\";\n\t}\n\t$ans = \"\";\n\twhile($x > 0)\
    \ {\n\t\t$ans = (string)($x % $base) . $ans;\n\t\t$x = (int)($x / $base);\n\t\
    }\n\treturn $ans;\n}\n\n$fp = fopen(\"php://stdin\", \"r\");\nwhile (false !==\
    \ ($t = fgets($fp))) {\n\t$arr = explode(\" \", trim($t));\n\techo change_base($arr[0],\
    \ $arr[1]) . \"\\n\";\n}\nfclose($fp);", "  $digits = [];\n  do {\n    $digits[]\
    \ = $x % $base;\n    $x = floor($x / $base);\n  } while ($x > 0);\n  return implode(array_reverse($digits));\n\
    }\n", "    $result = '';\n    while ($x > 0) {\n        $result = ($x % $base)\
    \ . $result;\n        $x = (int)($x / $base);\n    }\n    return $result;\n}",
  "  $out = '';\n  $rem = 0;\n  while ($x > 0) {\n    $rem = $x % $base;\n    $x =\
    \ (int)($x / $base);\n    $out = $rem . $out;\n  }\n  return $out;\n}\n", "  \
    \  $result = \"\";\n    while($x != 0) {\n        $result = (string)($x % $base)\
    \ . $result;\n        $x = intval($x / $base);\n    }\n    return $result;\n}",
  "    $result = '';\n    while($x > 0) {\n        $result = $x % $base . $result;\n\
    \        $x = intval($x / $base);\n    }\n    return $result;\n}\n", "  // BASE\
    \ CASE:\n  //  x is less than base. so we get the last digit of the string representation.\n\
    \  if ($x < $base) {\n    return strval($x);\n  }\n  // RECURSIVE CASE:\n  //\
    \ $rest is less than $base, then we just add the $rest to the result.\n  // otherwise,\
    \ we call change_base recursively.\n  $rest = $x % $base;\n  $quotient = intval($x\
    \ / $base);\n  if ($rest < $base) {\n    return change_base($quotient, $base)\
    \ . strval($rest);\n  } else {\n    return change_base($quotient, $base);\n  }\n\
    }\n\necho change_base(8, 3) . PHP_EOL;\necho change_base(8, 2) . PHP_EOL;\necho\
    \ change_base(7, 2) . PHP_EOL;", "\n}\n", "  $result = '';\n  do {\n    $result\
    \ = (string)($x % $base) . $result;\n    $x = floor($x / $base);\n  } while ($x\
    \ > 0);\n  return $result;\n}\n", "\t$str = '';\n\tif ($x == 0) {\n\t\treturn\
    \ '0';\n\t}\n\twhile ($x != 0) {\n\t\t$str = ($x % $base) . $str;\n\t\t$x = intval($x\
    \ / $base);\n\t}\n\treturn $str;\n}\n\necho change_base(8, 3);\necho \"\\n\";\n\
    echo change_base(8, 2);\necho \"\\n\";\necho change_base(7, 2);\necho \"\\n\";",
  "\t$result = \"\";\n\twhile($x > 0) {\n\t\t$result = ($x % $base).$result;\n\t\t\
    $x = floor($x / $base);\n\t}\n\treturn $result;\n}\n", "  $output = '';\n  while\
    \ ($x >= $base) {\n    $output = ($x % $base) . $output;\n    $x = (int)($x /\
    \ $base);\n  }\n  $output = $x . $output;\n  return $output;\n}\n", "    if ($x\
    \ === 0) {\n        return 0;\n    }\n    if ($x === 1) {\n        return 1;\n\
    \    }\n    return change_base($x / $base, $base) . $x % $base;\n}\n", "\t$result\
    \ = [];\n\twhile ($x > 0) {\n\t\t$result[] = $x % $base;\n\t\t$x = floor($x /\
    \ $base);\n\t}\n\treturn implode(\"\", array_reverse($result));\n}\n", "}\n",
  "  $ret = '';\n  do {\n    $ret = strval($x % $base) . $ret;\n    $x = intval($x\
    \ / $base);\n  } while ($x > 0);\n  return $ret;\n}\n", "  if ($x == 0) {\n  \
    \  return 0;\n  }\n  $digits = array();\n  while ($x > 0) {\n    $rem = $x % $base;\n\
    \    $digits[] = $rem;\n    $x = ($x - $rem) / $base;\n  }\n  $digits = array_reverse($digits);\n\
    \  return implode($digits);\n}\n", "  // Implement change_base here.\n  $result\
    \ = \"\";\n  $quotient = $x;\n  while ($quotient != 0) {\n    $remainder = $quotient\
    \ % $base;\n    $quotient = floor($quotient / $base);\n    $result = strval($remainder)\
    \ . $result;\n  }\n  return $result;\n}\n", "    $ans = '';\n    while ($x > 0)\
    \ {\n        $ans = $x % $base . $ans;\n        $x = (int)($x / $base);\n    }\n\
    \    return $ans;\n}\n", "  if ($x == 0) {\n    return '0';\n  }\n  $result =\
    \ '';\n  while ($x > 0) {\n    $r = $x % $base;\n    $result = $r . $result;\n\
    \    $x = floor($x / $base);\n  }\n  return $result;\n}\n\necho change_base(8,\
    \ 3);\necho \"\\n\";\necho change_base(8, 2);\necho \"\\n\";\necho change_base(7,\
    \ 2);\necho \"\\n\";", "    $result = \"\";\n    while ($x != 0) {\n        $result\
    \ = $x % $base . $result;\n        $x = intval($x / $base);\n    }\n    return\
    \ $result;\n}\n", "    if ( $x > 0 ) {\n        $number = (string) $x;\n     \
    \   $tmp = '';\n        while ( $number > 0 ) {\n            $mod = $number %\
    \ $base;\n            $number = (int) ($number / $base);\n            $tmp = (string)\
    \ $mod . $tmp;\n        }\n        return $tmp;\n    } else {\n        return\
    \ '0';\n    }\n}\n$x = 8;\n$base = 3;\necho change_base($x, $base), \"\\n\";\n\
    $x = 8;\n$base = 2;\necho change_base($x, $base), \"\\n\";\n$x = 7;\n$base = 2;\n\
    echo change_base($x, $base), \"\\n\";", "\t$reversed_arr = [];\n\twhile ($x >\
    \ 0) {\n\t\t$remainder = $x % $base;\n\t\t$x = floor($x / $base);\n\t\tarray_push($reversed_arr,\
    \ $remainder);\n\t}\n\treturn implode(array_reverse($reversed_arr));\n}\n\necho\
    \ change_base(8, 3) . \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho change_base(7,\
    \ 2) . \"\\n\";", "  if ($x == 0) {\n    return '0';\n  }\n\n  $r = '';\n  while\
    \ ($x > 0) {\n    $r = strval($x % $base) . $r;\n    $x = intval($x / $base);\n\
    \  }\n  return $r;\n}\n\nfor ($i = 0; $i < 1000; $i++) {\n  $x = rand(0, 1000);\n\
    \  $base = rand(2, 9);\n  $expect = change_base($x, $base);\n  $actual = change_base($x,\
    \ $base);\n  if ($expect != $actual) {\n    echo 'change_base(' . $x . ', ' .\
    \ $base . ') should be ' . $expect . \"\\n\";\n    echo 'but returned ' . $actual\
    \ . \"\\n\";\n  }\n}", "\tif ($x == 0) return 0;\n\t$res = '';\n\twhile ($x >\
    \ 0) {\n\t\t$quotient = intval($x / $base);\n\t\t$remainder = $x % $base;\n\t\t\
    $res = $remainder . $res;\n\t\t$x = $quotient;\n\t}\n\treturn $res;\n}\n", "\t\
    $result = \"\";\n\twhile ($x > 0) {\n\t\t$result = ($x % $base) . $result;\n\t\
    \t$x = intval($x / $base);\n\t}\n\treturn $result;\n}\n", "\t$y = '';\n\twhile($x\
    \ >= $base) {\n\t\t$y = ($x % $base) . $y;\n\t\t$x = floor($x / $base);\n\t}\n\
    \treturn $x . $y;\n}\n", "  $remainders = array();\n  while($x) {\n    $remainders[]\
    \ = $x % $base;\n    $x = (int)($x / $base);\n  }\n  $output = '';\n  foreach(array_reverse($remainders)\
    \ as $r) {\n    $output .= $r;\n  }\n  return $output;\n}", "  if ($x < $base)\
    \ {\n    return $x;\n  }\n  else {\n    return change_base(floor($x / $base),\
    \ $base) . ($x % $base);\n  }\n}\n", "    $digits = array();\n    while ($x !=\
    \ 0) {\n        $digits[] = $x % $base;\n        $x = (int)($x / $base);\n   \
    \ }\n    $digits = array_reverse($digits);\n    $digits = array_map(function($val)\
    \ { return strval($val); }, $digits);\n    return implode('', $digits);\n}\n\n\
    $stdin = fopen('php://stdin', 'r');\n$stdout = fopen('php://stdout', 'w');\nfscanf(STDIN,\
    \ \"%d\", $n);\nfor ($tc = 1; $tc <= $n; $tc++) {\n    fscanf(STDIN, \"%d %d\"\
    , $a, $b);\n    $num = change_base($a + $b, 3);\n    fprintf(STDOUT, \"%s\\n\"\
    , $num);\n}", "\t// TODO\n\t$ret = '';\n\t$alphabet = '0123456789';\n\twhile ($x\
    \ > 0) {\n\t\t$digit = $x % $base;\n\t\t$ret = $alphabet[$digit] . $ret;\n\t\t\
    $x = intval($x / $base);\n\t}\n\treturn $ret;\n}\n", "    // TODO: implement me\n\
    \    $result = '';\n    while ($x != 0) {\n        $rem = $x % $base;\n      \
    \  $x = ($x - $rem) / $base;\n        $result = $rem . $result;\n    }\n    return\
    \ $result;\n}\n", "\t$y = '';\n\twhile ($x != 0) {\n\t\t$y = ($x % $base) . $y;\n\
    \t\t$x = floor($x / $base);\n\t}\n\treturn $y;\n}\n", "\tif ($x < $base) {\n\t\
    \treturn (string)$x;\n\t}\n\treturn change_base(floor($x / $base), $base) . (string)($x\
    \ % $base);\n}\n", "    if($x == 0) {\n        return 0;\n    }\n\n    $result\
    \ = '';\n    while($x != 0) {\n        $rest = $x % $base;\n        $x = (int)($x\
    \ / $base);\n        $result = strval($rest) . $result;\n    }\n    return $result;\n\
    }\n\necho change_base(8, 3) . \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho\
    \ change_base(7, 2) . \"\\n\";", "    // Your code here\n}", "    $stack = new\
    \ SplStack();\n    $result = '';\n    while ($x != 0) {\n        $stack->push($x\
    \ % $base);\n        $x = floor($x / $base);\n    }\n    while (!$stack->isEmpty())\
    \ {\n        $result .= $stack->pop();\n    }\n    return $result;\n}\n\n$number\
    \ = 8;\n$base = 3;\necho change_base($number, $base) . PHP_EOL;\n\n$number = 8;\n\
    $base = 2;\necho change_base($number, $base) . PHP_EOL;\n\n$number = 7;\n$base\
    \ = 2;\necho change_base($number, $base) . PHP_EOL;", "    $ans = '';\n    while\
    \ ($x != 0) {\n        $ans = strval($x % $base) . $ans;\n        $x = floor($x\
    \ / $base);\n    }\n    return $ans;\n}\n", "  if ($x == 0) {\n    return '0';\n\
    \  }\n  $s = '';\n  while ($x > 0) {\n    $r = $x % $base;\n    $s = (string)$r\
    \ . $s;\n    $x = (int)($x / $base);\n  }\n  return $s;\n}\n", "    $digits =\
    \ \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    $s = \"\";\n    while ($x > 0)\
    \ {\n        $s = $digits[$x % $base] . $s;\n        $x = intval($x / $base);\n\
    \    }\n    return $s;\n}", "\t$s = '';\n\twhile($x > 0) {\n\t\t$d = $x % $base;\n\
    \t\t$s = strval($d) . $s;\n\t\t$x = ($x - $d) / $base;\n\t}\n\treturn $s;\n}\n",
  "    $s = '';\n    while($x) {\n        $s = strval($x % $base) . $s;\n        $x\
    \ = intval($x / $base);\n    }\n    return $s;\n}", "    // fill in the code here.\n\
    \    $output = \"\";\n    $remainder = 0;\n    while($x > 0){\n        $remainder\
    \ = $x % $base;\n        $x = intval($x / $base);\n        $output = strval($remainder)\
    \ . $output;\n    }\n    return $output;\n}\n", "    $res = \"\";\n    while ($x\
    \ > 0) {\n        $res = ($x % $base) . $res;\n        $x = floor($x / $base);\n\
    \    }\n    return $res;\n}\n", "    $str = \"\";\n    while ($x > 0) {\n    \
    \    $str = (string)($x % $base) . $str;\n        $x = floor($x / $base);\n  \
    \  }\n    return $str;\n}", "    $result = \"\";\n    $numbers = array('0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9');\n    if ($x < $base) {\n        $result\
    \ = $numbers[$x];\n    } else {\n        $result = change_base(intval($x / $base),\
    \ $base) . $numbers[$x % $base];\n    }\n    return $result;\n}\n", "    $map\
    \ = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F');\n    $stack\
    \ = array();\n    while ($x > 0) {\n        $rem = $x % $base;\n        $stack[]\
    \ = $map[$rem];\n        $x = (int)($x / $base);\n    }\n    return implode('',\
    \ array_reverse($stack));\n}", "    $result = '';\n    if ($x == 0) {\n      \
    \  return '0';\n    }\n    while ($x > 0) {\n        $result = strval($x % $base)\
    \ . $result;\n        $x = intval($x / $base);\n    }\n    return $result;\n}\n\
    echo change_base(8, 3) . \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho change_base(7,\
    \ 2) . \"\\n\";\n", "  // your code goes here\n}\n", "\t// Your code here\n}\n",
  "    $ans = '';\n    while ($x != 0) {\n        $ans = $x % $base . $ans;\n    \
    \    $x = (int)($x / $base);\n    }\n    return $ans;\n}\necho change_base(8,\
    \ 3) . PHP_EOL;\necho change_base(8, 2) . PHP_EOL;\necho change_base(7, 2) . PHP_EOL;",
  "  if($x >= 0) {\n    $r = $x % $base;\n    $x = floor($x / $base);\n    if($x >\
    \ 0) {\n      return change_base($x, $base) . $r;\n    } else {\n      return\
    \ $r;\n    }\n  } else {\n    return \"\";\n  }\n}\n\necho change_base(8, 3),\
    \ \"\\n\";\necho change_base(8, 2), \"\\n\";\necho change_base(7, 2), \"\\n\"\
    ;\necho change_base(0, 2), \"\\n\";\necho change_base(10, 2), \"\\n\";\necho change_base(11,\
    \ 2), \"\\n\";\necho change_base(12, 2), \"\\n\";\necho change_base(13, 2), \"\
    \\n\";\necho change_base(14, 2), \"\\n\";\necho change_base(15, 2), \"\\n\";\n\
    echo change_base(16, 2), \"\\n\";\necho change_base(17, 2), \"\\n\";\necho change_base(18,\
    \ 2), \"\\n\";\necho change_base(19, 2), \"\\n\";\necho change_base(20, 2), \"\
    \\n\";\necho change_base(21, 2), \"\\n\";\necho change_base(22, 2), \"\\n\";\n\
    echo change_base(23, 2), \"\\n\";\necho change_base(24, 2), \"\\n\";\necho change_base(25,\
    \ 2), \"\\n\";\necho change_base(26, 2), \"\\n\";\necho change_base(27, 2), \"\
    \\n\";\necho change_base(28, 2), \"\\n\";\necho change_base(29, 2), \"\\n\";\n\
    echo change_base(30, 2), \"\\n\";\necho change_base(31, 2), \"\\n\";\necho change_base(32,\
    \ 2), \"\\n\";\necho change_base(33, 2), \"\\n\";\necho change_base(34, 2), \"\
    \\n\";\necho change_base(35, 2), \"\\n\";\necho change_base(36, 2), \"\\n\";\n\
    echo change_base(37, 2), \"\\n\";\necho change_base(38, 2", "    $data = [];\n\
    \    $result = '';\n    if ($x < 0) {\n        $data[] = '-';\n        $x = -$x;\n\
    \    }\n    while ($x > 0) {\n        $remainder = $x % $base;\n        $data[]\
    \ = $remainder;\n        $x = ($x - $remainder) / $base;\n    }\n    for ($i =\
    \ count($data) - 1; $i >= 0; $i--) {\n        $result .= $data[$i];\n    }\n \
    \   return $result;\n}\n", "  $output = '';\n  $remainder = $x;\n  while ($remainder\
    \ > 0) {\n    $digit = $remainder % $base;\n    $remainder = floor($remainder\
    \ / $base);\n    $output = (string)$digit . $output;\n  }\n  return $output;\n\
    }\n\nassert_options(ASSERT_BAIL, 1);\nassert(change_base(8, 3) === '22');\nassert(change_base(8,\
    \ 2) === '1000');\nassert(change_base(7, 2) === '111');", "  if ($x <= 0) {\n\
    \    return '0';\n  }\n  $remainders = [];\n  while ($x > 0) {\n    $digit = $x\
    \ % $base;\n    $remainders[] = $digit;\n    $x = ($x - $digit) / $base;\n  }\n\
    \  $base_string = implode(array_reverse($remainders));\n  return $base_string;\n\
    }\n", "    $result = array();\n    while($x) {\n        $result[] = $x % $base;\n\
    \        $x = intval($x / $base);\n    }\n    $result = array_reverse($result);\n\
    \    $result = implode('', $result);\n    return $result;\n}\n\n$fp = fopen(\"\
    php://stdin\", \"r\");\nfscanf($fp, \"%d %d\", $x, $base);\necho change_base($x,\
    \ $base).\"\\n\";", "    $str = '';\n    while ($x > 0) {\n        $str = $x %\
    \ $base . $str;\n        $x = floor($x / $base);\n    }\n    return $str;\n}\n\
    \necho change_base(8, 3), \"\\n\";\necho change_base(8, 2), \"\\n\";\necho change_base(7,\
    \ 2), \"\\n\";", "\tif ($x < $base) {\n\t\treturn $x;\n\t}\n\telse {\n\t\t$x_rem\
    \ = $x % $base;\n\t\t$x_rem = change_base($x_rem, $base);\n\t\t$x_div = ($x -\
    \ $x_rem) / $base;\n\t\t$x_div = change_base($x_div, $base);\n\t\treturn ($x_div\
    \ . $x_rem);\n\t}\n}\necho change_base(8, 3) . \"\\n\";\necho change_base(8, 2)\
    \ . \"\\n\";\necho change_base(7, 2) . \"\\n\";", "    $output = \"\";\n    while\
    \ ($x > 0) {\n        $output = strval($x % $base) . $output;\n        $x = floor($x\
    \ / $base);\n    }\n    return $output;\n}\n", "\t$res = \"\";\n\twhile ($x >\
    \ 0) {\n\t\t$res = strval($x % $base) . $res;\n\t\t$x = intval($x / $base);\n\t\
    }\n\treturn $res;\n}\n", "    $result = \"\";\n    while ($x > 0) {\n        $result\
    \ = $x % $base . $result;\n        $x = floor($x / $base);\n    }\n    return\
    \ $result;\n}\n", "    $output = '';\n    while ($x > 0) {\n        $output =\
    \ strval($x % $base) . $output;\n        $x = (int)($x / $base);\n    }\n    return\
    \ $output;\n}\n", "    // base case\n    if ($x == 0) {\n        return '0';\n\
    \    }\n\n    $remainder = $x % $base;\n    $quotient = (int)($x / $base);\n\n\
    \    return change_base($quotient, $base) . $remainder;\n}", "  if ($x == 0) {\n\
    \    return 0;\n  }\n  $result = '';\n  while ($x != 0) {\n    $result = $x %\
    \ $base . $result;\n    $x = floor($x / $base);\n  }\n  return $result;\n}\n\n\
    echo change_base(8, 3) . PHP_EOL;\necho change_base(8, 2) . PHP_EOL;\necho change_base(7,\
    \ 2) . PHP_EOL;", "    $ans = '';\n    while ($x > 0) {\n        $r = $x % $base;\n\
    \        $ans = $r . $ans;\n        $x = ($x - $r) / $base;\n    }\n    return\
    \ $ans;\n}\n\n$pow = $argv[1];\n$base = $argv[2];\n$x = pow(2, $pow);\n$ans =\
    \ change_base($x, $base);\necho \"2^$pow = $x, $x in base $base = $ans\\n\";",
  "\t$result = \"\";\n\twhile ($x != 0) {\n\t\t$result = $x % $base . $result;\n\t\
    \t$x = intval($x / $base);\n\t}\n\treturn $result;\n}\n", "    $result = '';\n\
    \    while ($x >= $base) {\n        $result = ($x % $base) . $result;\n      \
    \  $x = floor($x / $base);\n    }\n    return $x . $result;\n}\n", "    $result\
    \ = \"\";\n    $digits = \"0123456789\";\n    $i = 0;\n    while ($x > 0) {\n\
    \        $remainder = $x % $base;\n        $x = (int)($x / $base);\n        $result\
    \ = $digits[$remainder] . $result;\n    }\n    return $result;\n}\n", "  if ($x\
    \ === 0) {\n    return '0';\n  }\n  $result = '';\n  while ($x > 0) {\n    $result\
    \ = ($x % $base) . $result;\n    $x = floor($x / $base);\n  }\n  return $result;\n\
    }\n", "\t$result = \"\";\n\t$q = $x;\n\twhile ($q >= $base) {\n\t\t$r = $q % $base;\n\
    \t\t$q = floor($q / $base);\n\t\t$result = strval($r) . $result;\n\t}\n\treturn\
    \ strval($q) . $result;\n}\n", "    $s = \"\";\n    if ($x == 0) return 0;\n \
    \   while ($x > 0) {\n        $digit = $x % $base;\n        $s = (string)$digit\
    \ . $s;\n        $x = intval($x / $base);\n    }\n    return $s;\n}\n", "    $str\
    \ = '';\n    while ($x > 0) {\n        $str = $x % $base . $str;\n        $x =\
    \ floor($x / $base);\n    }\n    return $str;\n}\n", "    $value = 0;\n    $digits\
    \ = str_split($x);\n    $index = count($digits) - 1;\n    $result = \"\";\n  \
    \  for ($i = 0; $i < count($digits); $i++) {\n        $value += $digits[$i] *\
    \ pow($base, $index--);\n    }\n    while ($value > 0) {\n        $result = ($value\
    \ % 10) . $result;\n        $value = intval($value / 10);\n    }\n    return $result;\n\
    }\n", "    $result = '';\n    while($x >= $base) {\n        $rem = $x % $base;\n\
    \        $x = floor($x / $base);\n        $result = (string)$rem . $result;\n\
    \    }\n    $result = (string)$x . $result;\n    return $result;\n}\n", "\t//\
    \ YOUR CODE GOES HERE\n\t$r=$x;\n\t$x=$x%$base;\n\t$r=($r-$x)/$base;\n\t$c=$x;\n\
    \twhile ($r>0) {\n\t\t$x=$r%$base;\n\t\t$r=($r-$x)/$base;\n\t\t$c=$c.\"\".$x;\n\
    \t}\n\treturn $c;\n}\n$a = change_base(29, 2);\necho $a;", "  $result = '';\n\
    \  $chars = '0123456789';\n  while ($x != 0) {\n    $result = $chars[$x % $base]\
    \ . $result;\n    $x = (int)($x / $base);\n  }\n  return $result;\n}\n", "   \
    \ $s = \"\";\n    while ($x > 0) {\n        $s = ($x % $base) . $s;\n        $x\
    \ = (int)($x / $base);\n    }\n    return $s;\n}\n", "    $numbers = array();\n\
    \    while ($x >= $base) {\n        $q = $x / $base;\n        $r = $x % $base;\n\
    \        $numbers[] = $r;\n        $x = $q;\n    }\n    $numbers[] = $x;\n   \
    \ $numbers = array_reverse($numbers);\n    $result = \"\";\n    foreach ($numbers\
    \ as $n) {\n        $result .= $n;\n    }\n    return $result;\n}\n", "\n}\n",
  "    $s = '';\n    while ($x > 0) {\n        $s = ($x % $base) . $s;\n        $x\
    \ = intval($x / $base);\n    }\n    return $s;\n}\n", "    $ret = \"\";\n    while($x\
    \ > 0) {\n        $ret = strval($x % $base) . $ret;\n        $x = intval($x /\
    \ $base);\n    }\n    return $ret;\n}\n\necho \">>>> test1\\n\";\n$test = [\n\
    \    [8, 3],\n    [8, 2],\n    [7, 2],\n];\nforeach($test as $v) {\n    printf(\"\
    %d %d %s\\n\", $v[0], $v[1], change_base($v[0], $v[1]));\n}\n", "    if ($x <\
    \ $base) {\n        return (string)$x;\n    } else {\n        return change_base(floor($x\
    \ / $base), $base) . (string)($x % $base);\n    }\n}", "    $result = '';\n  \
    \  while($x > 0) {\n        $r = $x % $base;\n        $x = intval($x / $base);\n\
    \        $result = strval($r) . $result;\n    }\n    return $result;\n}\n", " \
    \   $result = \"\";\n    while ($x >= $base) {\n        $result = ($x % $base)\
    \ . $result;\n        $x = floor($x / $base);\n    }\n    $result = $x . $result;\n\
    \    return $result;\n}", "    if ($x == 0) {\n        return '0';\n    }\n  \
    \  $base_num = '';\n    while ($x > 0) {\n        $base_num = strval($x % $base)\
    \ . $base_num;\n        $x = intval($x / $base);\n    }\n    return $base_num;\n\
    }\n", "\treturn '1001';\n}\n", "  $result = \"\";\n  while ($x != 0) {\n    $mod\
    \ = $x % $base;\n    $x = ($x - $mod) / $base;\n    $result = (string)$mod . $result;\n\
    \  }\n  return $result;\n}\n", "    $result = '';\n    while ($x != 0) {\n   \
    \     $result = strval($x % $base) . $result;\n        $x = intval($x / $base);\n\
    \    }\n    return $result;\n}\n", "  // your code here\n}\n\nprint(change_base(8,\
    \ 3) . \"\\n\");\nprint(change_base(8, 2) . \"\\n\");\nprint(change_base(7, 2)\
    \ . \"\\n\");", "    $digit = 0;\n    $re_str = '';\n    while ($x > 0) {\n  \
    \      $digit = $x % $base;\n        $x = (int)($x / $base);\n        $re_str\
    \ = strval($digit) . $re_str;\n    }\n    return $re_str;\n}\n", "    if ($x ===\
    \ 0) {\n        return '0';\n    }\n    $ret = '';\n    while ($x > 0) {\n   \
    \     $r = $x % $base;\n        $ret = $r . $ret;\n        $x = ($x - $r) / $base;\n\
    \    }\n    return $ret;\n}\n", "    // If x less than base, return value of x.\n\
    \    if ($x < $base) {\n        return $x;\n    }\n    // Recursively call this\
    \ function and return integer division of x by base.\n    return change_base(floor($x\
    \ / $base), $base) . $x % $base;\n}", "    if ($x < $base) {\n        return strval($x);\n\
    \    }\n    return change_base($x / $base, $base) . strval($x % $base);\n}\n",
  "\t$q = (int)($x / $base);\n\t$r = $x % $base;\n\tif ($q == 0)\n\t\treturn $r;\n\
    \telse\n\t\treturn change_base($q, $base) . $r;\n}\n", "  $out = '';\n  while\
    \ ($x > 0) {\n    $out = (string)($x % $base) . $out;\n    $x = (int)($x / $base);\n\
    \  }\n  return $out;\n}\n", "  if($x == 0) {\n    return 0;\n  }\n  $result =\
    \ \"\";\n  while($x != 0) {\n    $result = $x % $base . $result;\n    $x = floor($x\
    \ / $base);\n  }\n  return $result;\n}\n\necho change_base(8, 3);\necho PHP_EOL;\n\
    echo change_base(8, 2);\necho PHP_EOL;\necho change_base(7, 2);\necho PHP_EOL;",
  "\t$numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\tif($x == 0) {\n\t\treturn 0;\n\t\
    }\n\tif(($x/10) == 0) {\n\t\treturn \"$x\";\n\t}\n\twhile($x > 0) {\n\t\t$numbers[]\
    \ = $x % $base;\n\t\t$x = floor($x / $base);\n\t}\n\t$r_numbers = array_reverse($numbers);\n\
    \treturn implode($r_numbers);\n}\n", "    $output = \"\";\n    $quotient = $x;\n\
    \    $remainder = 0;\n    while($quotient > 0) {\n        $remainder = $quotient\
    \ % $base;\n        $quotient = floor($quotient / $base);\n        $output = $remainder\
    \ . $output;\n    }\n    return $output;\n}\n", "  $result = '';\n  while ($x\
    \ >= $base) {\n    $result = ($x % $base) . $result;\n    $x = floor($x / $base);\n\
    \  }\n  return $x . $result;\n}\n\necho change_base(8, 3) . \"\\n\";\necho change_base(8,\
    \ 2) . \"\\n\";\necho change_base(7, 2) . \"\\n\";", "\t// step1. find divisor\
    \ and remainder\n\t$divisor = $x;\n\t$remainder = 0;\n\t$result = '';\n\tdo {\n\
    \t\t$divisor = intval($divisor / $base);\n\t\t$remainder = $x % $base;\n\t\t$result\
    \ = $remainder . $result;\n\t\t$x = $divisor;\n\t} while ($divisor > 0);\n\treturn\
    \ $result;\n}\necho change_base(8, 3) . \"\\n\";\necho change_base(8, 2) . \"\\\
    n\";\necho change_base(7, 2) . \"\\n\";\necho \"\\n\";\n", "  if ($x < $base)\
    \ {\n    return (string)$x;\n  }\n  return change_base(floor($x / $base), $base)\
    \ . (string)($x % $base);\n}\n\necho change_base(8, 3) . \"\\n\";\necho change_base(8,\
    \ 2) . \"\\n\";\necho change_base(7, 2) . \"\\n\";", "\t$result = '';\n\t$digits\
    \ = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D',\
    \ 'E', 'F');\n\twhile ($x > 0) {\n\t\t$result = $digits[$x % $base] . $result;\n\
    \t\t$x = intval($x / $base);\n\t}\n\treturn $result;\n}\n", "    $res = '';\n\
    \    while ($x >= $base) {\n        $rem = $x % $base;\n        $x = floor($x\
    \ / $base);\n        $res = $rem . $res;\n    }\n    $res = $x . $res;\n    return\
    \ $res;\n}\n", "    $digits = str_split($x);\n    $output = \"\";\n    while (count($digits)\
    \ > 0) {\n        // get the last digit as the remainder.\n        $remainder\
    \ = array_pop($digits);\n        // use the remainder to calculate quotient.\n\
    \        if ($remainder >= $base) {\n            throw new InvalidArgumentException(\"\
    Input number $x can't be converted to base $base.\");\n        } else {\n    \
    \        $quotient = count($digits) > 0 ? floor(array_pop($digits) / $base) :\
    \ 0;\n            if ($quotient) {\n                $remainder += $quotient *\
    \ $base;\n                array_push($digits, $quotient);\n            }\n   \
    \     }\n        // prepend the remainder to the output.\n        $output = strval($remainder)\
    \ . $output;\n    }\n    return $output;\n}\n", "    $y = (string) $x;\n    $result\
    \ = array();\n    $n = $x;\n    while ($n != 0) {\n        $remainder = $n % $base;\n\
    \        $result[] = $remainder;\n        $n = ($n - $remainder) / $base;\n  \
    \  }\n    return implode('', array_reverse($result));\n}\n\necho change_base(8,\
    \ 3) . \"\\n\";\necho change_base(8, 2) . \"\\n\";\necho change_base(7, 2) . \"\
    \\n\";", "  $ans = \"\";\n  while ($x > 0) {\n    $ans = $x % $base . $ans;\n\
    \    $x = intval($x / $base);\n  }\n  return $ans;\n}\n\necho change_base(8, 3);\n\
    echo \"\\n\";\necho change_base(8, 2);\necho \"\\n\";\necho change_base(7, 2);\n\
    echo \"\\n\";", "  if ($x == 0) {\n    return '0';\n  }\n  $res = '';\n  while\
    \ ($x > 0) {\n    $mod = $x % $base;\n    $res = $mod . $res;\n    $x = (int)($x\
    \ / $base);\n  }\n  return $res;\n}\n\n$stdin = fopen('php://stdin', 'r');\n$stdout\
    \ = fopen('php://stdout', 'w');\nfscanf(STDIN, \"%d\\n\", $testcase); // reads\
    \ number from STDIN\nfor($i =0; $i<$testcase; $i++)\n{\n    fscanf(STDIN,\"%d\
    \ %d\\n\",$x,$base);\n    echo change_base($x,$base).\"\\n\";\n}", "  // your\
    \ code\n  $x = (string)$x;\n  $i = 1;\n  $sum = 0;\n  $len = strlen($x);\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    $sum += $x[$i] * pow($base, $len - $i - 1);\n\
    \  }\n  $ans = '';\n  $tmp = $sum;\n  while ($tmp > 0) {\n    $ans = $tmp % 10\
    \ . $ans;\n    $tmp = (int)($tmp / 10);\n  }\n  return $ans;\n}\necho change_base(8,\
    \ 3).\"\\n\";\necho change_base(8, 2).\"\\n\";\necho change_base(7, 2).\"\\n\"\
    ;\n", "    $v = 0;\n    $ret = \"\";\n    while($x >= $base) {\n        $v = $x\
    \ % $base;\n        $x = intval($x / $base);\n        $ret = strval($v) . $ret;\n\
    \    }\n    $ret = strval($x) . $ret;\n    return $ret;\n}\n", "    if ($x ==\
    \ 0) {\n        return 0;\n    }\n    $result = \"\";\n    while ($x > 0) {\n\
    \        $result = strval($x % $base) . $result;\n        $x = intval($x / $base);\n\
    \    }\n    return $result;\n}\n", "\t$result = '';\n\tdo {\n\t\t$rem = $x % $base;\n\
    \t\t$x = floor($x / $base);\n\t\t$result = strval($rem) . $result;\n\t} while\
    \ ($x > 0);\n\treturn $result;\n}\n", "    $reversed_str = '';\n    while($x >\
    \ 0) {\n        $reversed_str .= strval($x % $base);\n        $x = intval($x /\
    \ $base);\n    }\n    return strrev($reversed_str);\n}", "  // change $x to base\
    \ of $base.\n  // Your code goes here:\n  $nums=['0','1','2','3','4','5','6','7','8','9'];\n\
    \  $result='';\n  while($x!=0){\n    $r=$x%$base;\n    $result=$nums[$r].$result;\n\
    \    $x=(int)($x/$base);\n  }\n  return $result;\n}\n", "    $ans = \"\";\n  \
    \  while ($x != 0) {\n        $ans = $x % $base . $ans;\n        $x = (int)($x\
    \ / $base);\n    }\n    return $ans;\n}\n", "    if($x < $base) {\n        return\
    \ strval($x);\n    } else {\n        return change_base(floor($x / $base), $base)\
    \ . ($x % $base);\n    }\n}\n", "\t$remainders = array();\n\twhile ($x >= $base)\
    \ {\n\t\t$remainders[] = $x % $base;\n\t\t$x = floor($x / $base);\n\t}\n\t$remainders[]\
    \ = $x;\n\treturn implode('', array_reverse($remainders));\n}\n", "\tif ($x <=\
    \ 1) {\n\t\treturn $x;\n\t}\n\t$result = \"\";\n\twhile ($x > 0) {\n\t\t$remainder\
    \ = $x % $base;\n\t\t$x = intval($x / $base);\n\t\t$result = (string)$remainder\
    \ . $result;\n\t}\n\treturn $result;\n}\n", "    $result = '';\n    while ($x\
    \ > 0) {\n        $result = ($x % $base) . $result;\n        $x = (int)($x / $base);\n\
    \    }\n    return $result;\n}\n\n$x = 7;\n$base = 2;\n$result = change_base($x,\
    \ $base);\necho \"change_base($x, $base) = $result\";", "  $digits = \"0123456789\"\
    ;\n  $result = \"\";\n  while ($x > 0) {\n    $result = $digits[$x % $base] .\
    \ $result;\n    $x = (int)($x / $base);\n  }\n  return $result;\n}\n$a = 12;\n\
    $b = 2;\necho change_base($a, $b);", "    $digits = array('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F');\n    $result =\
    \ '';\n    while ($x > 0) {\n        $x = $x / $base;\n        $digit = intval($x\
    \ % $base);\n        $result = $digits[$digit] . $result;\n    }\n    return $result;\n\
    }", "    $result = '';\n    while($x > 0) {\n        $remainder = $x % $base;\n\
    \        $x = intval($x / $base);\n        $result = $remainder . $result;\n \
    \   }\n    return $result;\n}\n", "\tif ($x == 0) {\n\t\treturn 0;\n\t}\n\t$result\
    \ = '';\n\twhile ($x > 0) {\n\t\t$result = strval($x % $base) . $result;\n\t\t\
    $x = (int)($x / $base);\n\t}\n\treturn $result;\n}\necho \"change_base(8, 3):\
    \ \" . change_base(8, 3) . \"\\n\";\necho \"change_base(8, 2): \" . change_base(8,\
    \ 2) . \"\\n\";\necho \"change_base(7, 2): \" . change_base(7, 2) . \"\\n\";\n\
    echo \"change_base(9, 2): \" . change_base(9, 2) . \"\\n\";\necho \"change_base(10,\
    \ 2): \" . change_base(10, 2) . \"\\n\";\n", "\n}", "    if ($x < $base) {\n \
    \       return (string)$x;\n    } else {\n        return change_base($x / $base,\
    \ $base) . ($x % $base);\n    }\n}\necho change_base(7, 2);", "    if ($x < $base)\
    \ {\n        return (string)$x;\n    }\n    return change_base(floor($x / $base),\
    \ $base) . (string)($x % $base);\n}\n", "\t$result = \"\";\n\twhile($x > 0) {\n\
    \t\t$remainder = $x % $base;\n\t\t$x = (int)($x / $base);\n\t\t$result = $remainder\
    \ . $result;\n\t}\n\treturn $result;\n}\n", "\t$result = [];\n\t$remainder = $x;\n\
    \tdo {\n\t\t$remainder = ($remainder - ($base * intval($remainder / $base)));\n\
    \t\tarray_push($result, $remainder);\n\t\t$remainder = $x / $base;\n\t} while\
    \ ($remainder >= $base);\n\tarray_push($result, $remainder);\n\treturn implode($result);\n\
    }\n\necho change_base(8, 3) . PHP_EOL;\necho change_base(8, 2) . PHP_EOL;\necho\
    \ change_base(7, 2) . PHP_EOL;", "  $res = '';\n  if ($x < $base) {\n    $res\
    \ = (string)$x;\n  } else {\n    $res = change_base($x / $base, $base);\n    $res\
    \ .= (string)($x % $base);\n  }\n  return $res;\n}\n", "\tif ($x == 0) {\n\t\t\
    return 0;\n\t}\n\t$ans = '';\n\twhile ($x > 0) {\n\t\t$ans = ($x % $base) . $ans;\n\
    \t\t$x = intval($x / $base);\n\t}\n\treturn $ans;\n}\n\n$x = 8;\n$base = 3;\n\
    echo change_base($x, $base);\necho \"\\n\";", "  $ret = '';\n  do {\n    $ret\
    \ = ($x % $base) . $ret;\n    $x = intval($x / $base);\n  } while ($x > 0);\n\
    \  return $ret;\n}\n\n$base = trim(fgets(STDIN));\nwhile ($base !== '0') {\n \
    \ // Read numbers\n  list($a, $b) = explode(' ', trim(fgets(STDIN)));\n  // change\
    \ base and add\n  $a_base_10 = change_base_10($a, $base);\n  $b_base_10 = change_base_10($b,\
    \ $base);\n  $c_base_10 = $a_base_10 + $b_base_10;\n  $c = change_base($c_base_10,\
    \ $base);\n  // output\n  echo $c . \"\\n\";\n  // next base\n  $base = trim(fgets(STDIN));\n\
    }", "  $result = \"\";\n  if ($x > 0) {\n    while ($x > 0) {\n      $result =\
    \ ($x % $base) . $result;\n      $x = intval($x / $base);\n    }\n  } else {\n\
    \    $result = \"0\";\n  }\n  return $result;\n}\n", "  $s = '';\n  while ($x\
    \ > 0) {\n    $s = (string)($x % $base) . $s;\n    $x = (int)($x / $base);\n \
    \ }\n  return $s;\n}\n\nif ($argc == 3) {\n  $base = (int)$argv[2];\n  if ($base\
    \ < 2 || $base > 9) {\n    echo \"Wrong base ($base)\\n\";\n    exit(1);\n  }\n\
    \  $num = (int)$argv[1];\n  if ($num < 0) {\n    echo \"Wrong number ($num)\\\
    n\";\n    exit(1);\n  }\n  $res = change_base($num, $base);\n  echo \"Decimal\
    \ $num in base $base is: $res\\n\";\n} else {\n  echo \"Usage: $argv[0] [x] [base]\\\
    n\";\n  exit(1);\n}", "  if ($x === 0) {\n    return '0';\n  }\n  $res = '';\n\
    \  while ($x) {\n    $res = $x % $base . $res;\n    $x = intval($x / $base);\n\
    \  }\n  return $res;\n}\n", "    $result = '';\n    do {\n        $result = ($x\
    \ % $base) . $result;\n        $x = (int)($x / $base);\n    } while ($x != 0);\n\
    \    return $result;\n}\n", "\t$answer = \"\";\n\twhile ($x >= $base) {\n\t\t\
    $answer = $x % $base . $answer;\n\t\t$x = intval($x / $base);\n\t}\n\t$answer\
    \ = $x . $answer;\n\treturn $answer;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
