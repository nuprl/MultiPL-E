name: HumanEval_86_anti_shuffle
language: php
results:
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  foreach ($words as $i => $word) {\n    $words[$i] = implode(array_unique(str_split($word)));\n\
    \  }\n  return implode(' ', $words);\n}\n\necho anti_shuffle('Hi') . \"\\n\";\n\
    echo anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\
    \\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhelo\nHelo World!\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpp359rel9.php:28\nStack trace:\n#0 /tmp/tmpp359rel9.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmpp359rel9.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\n}\n\necho\
    \ anti_shuffle('Hi'); // returns 'Hi'\necho anti_shuffle('hello'); // returns\
    \ 'ehllo'\necho anti_shuffle('Hello World!!!'); // returns 'Hello !!!Wdlor'\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9o8mzd7x.php:23\n\
    Stack trace:\n#0 /tmp/tmp9o8mzd7x.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9o8mzd7x.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    foreach ($arr as $index => $a) {\n        $arr[$index]\
    \ = str_split($a);\n        sort($arr[$index]);\n        $arr[$index] = implode('',\
    \ $arr[$index]);\n    }\n    return implode(' ', $arr);\n}\n\necho anti_shuffle('Hi')\
    \ . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello\
    \ World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $newarr = [];\n    foreach ($arr as $word) {\n      \
    \  $word = str_split($word);\n        sort($word);\n        $newarr[] = join($word);\n\
    \    }\n    return join(' ', $newarr);\n}\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return preg_replace_callback('/\\\
    w+/', function($word) {\n    $word = $word[0];\n    $word = preg_split('//', $word,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    sort($word);\n    return implode('', $word);\n\
    \  }, $s);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvbhdf4nl.php:29\n\
    Stack trace:\n#0 /tmp/tmpvbhdf4nl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvbhdf4nl.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newArr = [];\n  foreach ($arr as $i) {\n    $newArr[] = str_split($i);\n\
    \    sort($newArr[sizeof($newArr) - 1]);\n    $newArr[sizeof($newArr) - 1] = implode('',\
    \ $newArr[sizeof($newArr) - 1]);\n  }\n  return implode(' ', $newArr);\n}\n\n\
    echo anti_shuffle('Hi');\necho \"<br>\";\necho anti_shuffle('hello');\necho \"\
    <br>\";\necho anti_shuffle('Hello World!!!');\necho \"<br>\";\necho anti_shuffle('Anti\
    \ shuffle');\necho \"<br>\";\necho anti_shuffle('antis hufl');\necho \"<br>\"\
    ;\necho anti_shuffle('an tis hufl');\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hi<br>ehllo<br>Hello !!!Wdlor<br>Aint effhlsu<br>ainst fhlu<br>an ist fhlu<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $key => $value) {\n        $words[$key]\
    \ = implode('', str_split($value));\n        sort($words[$key]);\n        $words[$key]\
    \ = implode('', $words[$key]);\n    }\n    return implode(' ', $words);\n}\necho\
    \ anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpdwmkh_u0.php\
    \ on line 15\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpdwmkh_u0.php\
    \ on line 16\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpdwmkh_u0.php on line 15\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpdwmkh_u0.php on line 16\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpdwmkh_u0.php on line 15\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpdwmkh_u0.php on line 16\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpdwmkh_u0.php:26\nStack trace:\n\
    #0 /tmp/tmpdwmkh_u0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdwmkh_u0.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t//YOUR CODE\
    \ GOES HERE\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptvrju_2z.php:20\n\
    Stack trace:\n#0 /tmp/tmptvrju_2z.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptvrju_2z.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $ret = '';\n    foreach ($arr as $v) {\n        if ($v)\
    \ {\n            $ret .= implode('', str_split($v)) . ' ';\n        }\n    }\n\
    \    return $ret;\n}\n\n$str = \"Hello World!!!\";\necho anti_shuffle($str);\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe56v7jp6.php:29\n\
    Stack trace:\n#0 /tmp/tmpe56v7jp6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe56v7jp6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $res = \"\
    \";\n  $words = explode(\" \", $s);\n  foreach ($words as $word) {\n    $letters\
    \ = str_split($word);\n    sort($letters);\n    $res .= implode(\"\", $letters)\
    \ . \" \";\n  }\n  return $res;\n}\n\necho anti_shuffle('Hello World!!!') . \"\
    \\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprf3rt3i2.php:28\n\
    Stack trace:\n#0 /tmp/tmprf3rt3i2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprf3rt3i2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    return\
    \ implode(' ', array_map(function($w) {\n        $c = str_split($w);\n       \
    \ sort($c);\n        return implode('', $c);\n    }, explode(' ', $s)));\n}\n\
    echo anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $str_arr\
    \ = explode(' ', $s);\n    $new_str = '';\n    foreach ($str_arr as $str) {\n\
    \        if (strlen($str) < 2) {\n            $new_str .= $str;\n        } else\
    \ {\n            $new_str .= implode('', str_split($str, 1)).' ';\n        }\n\
    \    }\n    return trim($new_str);\n}\necho anti_shuffle('Hi').'<br>';\necho anti_shuffle('hello').'<br>';\n\
    echo anti_shuffle('Hello World!!!').'<br>';\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi<br>hello<br>Hello World!!!<br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp1mzjalfy.php:32\nStack trace:\n#0 /tmp/tmp1mzjalfy.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1mzjalfy.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return implode(\"\
    \ \", array_map(function($w) {\n    $a = str_split($w);\n    sort($a);\n    return\
    \ implode(\"\", $a);\n  }, explode(\" \", $s)));\n}\necho anti_shuffle('Hello\
    \ World!!!') . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $tmp =\
    \ explode(' ', $s);\n    $r = '';\n    foreach ($tmp as $t) {\n        $r .= str_split($t);\n\
    \        sort($r);\n        $r .= ' ';\n    }\n    return rtrim($r);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpt06oma0c.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt06oma0c.php:27\n\
    Stack trace:\n#0 /tmp/tmpt06oma0c.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpt06oma0c.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $a = explode('\
    \ ', $s);\n    $res = [];\n    foreach ($a as $word) {\n        if ($word == '')\
    \ {\n            $res[] = '';\n        } else {\n            $res[] = implode('',\
    \ str_split($word));\n        }\n    }\n    sort($res);\n    $s = implode(' ',\
    \ $res);\n    return $s;\n}\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\n\
    echo anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "HihelloHello World!!!\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpdmzl4g8e.php:34\nStack trace:\n#0 /tmp/tmpdmzl4g8e.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdmzl4g8e.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$newstr\
    \ = '';\n\t$strarr = explode(' ', $s);\n\t$newstrarr = [];\n\tforeach ($strarr\
    \ as $value) {\n\t\tarray_push($newstrarr, str_split($value));\n\t}\n\t$newnewstrarr\
    \ = [];\n\tforeach ($newstrarr as $value) {\n\t\tarray_push($newnewstrarr, str_split(implode(sortChar($value))));\n\
    \t}\n\t$ret = '';\n\tforeach ($newnewstrarr as $value) {\n\t\t$ret .= implode($value)\
    \ . ' ';\n\t}\n\treturn trim($ret);\n}\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sortChar() in\
    \ /tmp/tmpt34ig0fr.php:20\nStack trace:\n#0 /tmp/tmpt34ig0fr.php(29): anti_shuffle('Hi')\n\
    #1 /tmp/tmpt34ig0fr.php(33): candidate('Hi')\n#2 /tmp/tmpt34ig0fr.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt34ig0fr.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $new = '';\n\
    \  $x = 0;\n  while($x < strlen($s)) {\n    if(ctype_alpha($s[$x])) {\n      $word\
    \ = '';\n      while(ctype_alpha($s[$x])) {\n        $word .= $s[$x];\n      \
    \  $x++;\n      }\n      $word = str_split($word);\n      sort($word);\n     \
    \ $new .= implode($word);\n    } else {\n      $new .= $s[$x];\n      $x++;\n\
    \    }\n  }\n  return $new;\n}\necho anti_shuffle('Hello World!!!');\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hello Wdlor!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9th4uzuv.php:41\n\
    Stack trace:\n#0 /tmp/tmp9th4uzuv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp9th4uzuv.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode(array_unique(str_split($word)));\n    }\n    return\
    \ implode(' ', $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjq_skcyl.php:26\n\
    Stack trace:\n#0 /tmp/tmpjq_skcyl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjq_skcyl.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = preg_split('/[ ]+/', $s);\n    $r = '';\n    foreach ($words as $w) {\n  \
    \      $r .= join('', str_split($w)) . ' ';\n    }\n    return $r;\n}\nprint_r(anti_shuffle('Hi'));\
    \ // Hi\nprint_r(anti_shuffle('hello')); // ehllo\nprint_r(anti_shuffle('Hello\
    \ World!!!')); // Hello !!!Wdlor\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi hello Hello World!!! \nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpigeczw0s.php:27\nStack trace:\n#0 /tmp/tmpigeczw0s.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmpigeczw0s.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$string\
    \ = explode(\" \", $s);\n\t$new_string = array();\n\tforeach ($string as $word)\
    \ {\n\t\t$new_string[] = implode(\"\", sort(str_split($word)));\n\t}\n\treturn\
    \ implode(\" \", $new_string);\n}\necho anti_shuffle('Hi');\necho \"\\n\";\necho\
    \ anti_shuffle('hello');\necho \"\\n\";\necho anti_shuffle('Hello World!!!');\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: implode(): Invalid arguments passed in /tmp/tmpddnuz3cr.php\
    \ on line 15\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpddnuz3cr.php\
    \ on line 15\n\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpddnuz3cr.php\
    \ on line 15\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpddnuz3cr.php\
    \ on line 15\n \n\nWarning: implode(): Invalid arguments passed in /tmp/tmpddnuz3cr.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddnuz3cr.php:30\n\
    Stack trace:\n#0 /tmp/tmpddnuz3cr.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpddnuz3cr.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = str_split($value);\n\
    \        sort($s[$key]);\n        $s[$key] = implode('', $s[$key]);\n    }\n \
    \   return implode(' ', $s);\n}\n\necho anti_shuffle('Hello World!!!');\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // YOUR\
    \ CODE HERE\n}\n\nassert_options(ASSERT_EXCEPTION, 1);\nassert(anti_shuffle('Hi')\
    \ === 'Hi');\nassert(anti_shuffle('hello') === 'ehllo');\nassert(anti_shuffle('Hello\
    \ World!!!') === 'Hello !!!Wdlor');\n\necho 'OK';\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught AssertionError: assert(anti_shuffle('Hi') === 'Hi')\
    \ in /tmp/tmp474k4aj6.php:16\nStack trace:\n#0 /tmp/tmp474k4aj6.php(16): assert(false,\
    \ 'assert(anti_shu...')\n#1 {main}\n  thrown in /tmp/tmp474k4aj6.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $list_of_words\
    \ = explode(' ', $s);\n    $new_list_of_words = [];\n    foreach ($list_of_words\
    \ as $word) {\n        $new_list_of_words[] = str_split($word);\n    }\n    foreach\
    \ ($new_list_of_words as $index => $word) {\n        asort($word);\n        $new_list_of_words[$index]\
    \ = implode($word);\n    }\n    return implode($new_list_of_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65l65upd.php:33\n\
    Stack trace:\n#0 /tmp/tmp65l65upd.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp65l65upd.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\n}\n\necho\
    \ anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello\
    \ World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwxwrgcl3.php:23\n\
    Stack trace:\n#0 /tmp/tmpwxwrgcl3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwxwrgcl3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    for ($i = 0; $i < count($arr); $i++) {\n        $arr[$i]\
    \ = implode('', str_split($arr[$i]));\n        sort($arr[$i]);\n        $arr[$i]\
    \ = implode('', $arr[$i]);\n    }\n    return implode(' ', $arr);\n}\n\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpucsmleen.php\
    \ on line 15\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpucsmleen.php\
    \ on line 16\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpucsmleen.php on line 15\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpucsmleen.php on line 16\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpucsmleen.php on line 15\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpucsmleen.php on line 16\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpucsmleen.php:27\nStack trace:\n\
    #0 /tmp/tmpucsmleen.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpucsmleen.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $new_sentence\
    \ = '';\n  $sentence = explode(' ', $s);\n  foreach ($sentence as $word) {\n \
    \   $new_word = '';\n    $sorted_word = str_split($word);\n    sort($sorted_word);\n\
    \    foreach ($sorted_word as $char) {\n      $new_word .= $char;\n    }\n   \
    \ $new_sentence .= $new_word . ' ';\n  }\n  return $new_sentence;\n}\n\necho anti_shuffle('Hi');\n\
    echo anti_shuffle('hello');\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi ehllo Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpo0560i1s.php:34\nStack trace:\n#0 /tmp/tmpo0560i1s.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpo0560i1s.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  foreach ($words as $key => $word) {\n    $chars = str_split($word);\n\
    \    usort($chars, function($a, $b) {\n      if (ord($a) == ord($b)) {\n     \
    \   return 0;\n      }\n      return (ord($a) < ord($b)) ? -1 : 1;\n    });\n\
    \    $words[$key] = implode('', $chars);\n  }\n  return implode(' ', $words);\n\
    }\necho \"test1: \" . (anti_shuffle('Hi') == 'Hi' ? 'PASS' : 'FAIL') . \"\\n\"\
    ;\necho \"test2: \" . (anti_shuffle('hello') == 'ehllo' ? 'PASS' : 'FAIL') . \"\
    \\n\";\necho \"test3: \" . (anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'\
    \ ? 'PASS' : 'FAIL') . \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "test1: PASS\ntest2: PASS\ntest3: PASS\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $a = explode('\
    \ ', $s);\n  $r = [];\n  foreach ($a as $v) {\n    $r[] = join('', str_split($v,\
    \ 1));\n  }\n  $r = array_map(function($v) {\n    sort($v);\n    return join('',\
    \ $v);\n  }, $r);\n  return join(' ', $r);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpfme2w1bf.php\
    \ on line 18\n\nWarning: join(): Invalid arguments passed in /tmp/tmpfme2w1bf.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfme2w1bf.php:29\n\
    Stack trace:\n#0 /tmp/tmpfme2w1bf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfme2w1bf.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplgx4681j.php:20\n\
    Stack trace:\n#0 /tmp/tmplgx4681j.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplgx4681j.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_s = '';\n    foreach ($words as $word) {\n   \
    \     $new_s .= str_split($word);\n        sort($new_s);\n        $new_s .= '\
    \ ';\n    }\n    return trim($new_s);\n}\n\nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpjigfbkpe.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjigfbkpe.php:27\n\
    Stack trace:\n#0 /tmp/tmpjigfbkpe.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjigfbkpe.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $result\
    \ = [];\n  $str = explode(' ', $s);\n  foreach ($str as $key => $value) {\n  \
    \  $result[] = anti_shuffle_word($value);\n  }\n  return implode(' ', $result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp688adax3.php:15\nStack trace:\n#0 /tmp/tmp688adax3.php(21): anti_shuffle('Hi')\n\
    #1 /tmp/tmp688adax3.php(25): candidate('Hi')\n#2 /tmp/tmp688adax3.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmp688adax3.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $newString\
    \ = \"\";\n    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n\
    \        $newString .= str_split($word);\n        sort($newString);\n        $newString\
    \ .= \" \";\n    }\n    return $newString;\n}\n\necho anti_shuffle('Hello World!!!');\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpr_ca9zsy.php\
    \ on line 16\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpr_ca9zsy.php on line 16\nArray Array \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpr_ca9zsy.php on line 16\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpr_ca9zsy.php:28\nStack trace:\n\
    #0 /tmp/tmpr_ca9zsy.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpr_ca9zsy.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= implode('', str_split($word, 1)) . ' ';\n    }\n    return rtrim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_d63cogs.php:26\n\
    Stack trace:\n#0 /tmp/tmp_d63cogs.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_d63cogs.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  //students\
    \ write code here\n}\necho anti_shuffle('Hi');\necho '<br>';\necho anti_shuffle('hello');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br><br><br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppt_m1xsl.php:26\n\
    Stack trace:\n#0 /tmp/tmppt_m1xsl.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppt_m1xsl.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $new = '';\n\
    \  $words = explode(' ', $s);\n  foreach ($words as $word) {\n    $new .= implode('',\
    \ str_split($word)) . ' ';\n  }\n  return $new;\n}\necho anti_shuffle('anti shuffle!')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "anti shuffle! \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpljcbqmkb.php:25\n\
    Stack trace:\n#0 /tmp/tmpljcbqmkb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpljcbqmkb.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $result\
    \ = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $word = \"\";\n\
    \        if ($s[$i] != \" \") {\n            $word .= $s[$i];\n            for\
    \ ($j = $i + 1; $j < strlen($s); $j++) {\n                if ($s[$j] != \" \"\
    ) {\n                    $word .= $s[$j];\n                } else {\n        \
    \            $i = $j;\n                    break;\n                }\n       \
    \     }\n            $result .= sort_characters($word);\n        } else {\n  \
    \          $result .= \" \";\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_characters()\
    \ in /tmp/tmphnh8te1y.php:25\nStack trace:\n#0 /tmp/tmphnh8te1y.php(34): anti_shuffle('Hi')\n\
    #1 /tmp/tmphnh8te1y.php(38): candidate('Hi')\n#2 /tmp/tmphnh8te1y.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmphnh8te1y.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$s = explode('\
    \ ', $s);\n\t$o = array();\n\tforeach ($s as $word) {\n\t\t$o[] = implode(str_split($word));\n\
    \t}\n\t$o = implode(' ', $o);\n\treturn $o;\n}\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dhsote2.php:26\n\
    Stack trace:\n#0 /tmp/tmp4dhsote2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4dhsote2.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $result\
    \ = \"\";\n    $sp_s = explode(\" \", $s);\n    foreach ($sp_s as $word) {\n \
    \       $sp_w = str_split($word);\n        sort($sp_w);\n        $result .= implode($sp_w);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle('Hi');\n\
    echo \"\\n\";\necho anti_shuffle('hello');\necho \"\\n\";\necho anti_shuffle('Hello\
    \ World!!!');\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpz0qsb8lf.php:34\nStack trace:\n#0 /tmp/tmpz0qsb8lf.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpz0qsb8lf.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = explode('\
    \ ', $s);\n  $r = '';\n  foreach ($s as $key => $value) {\n    $r .= str_split($value);\n\
    \    sort($r);\n    $s[$key] = implode('', $r);\n    $r = '';\n  }\n  return implode('\
    \ ', $s);\n}\necho anti_shuffle('Hi').PHP_EOL;\necho anti_shuffle('hello').PHP_EOL;\n\
    echo anti_shuffle('Hello World!!!').PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpekc5a0nt.php\
    \ on line 16\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpekc5a0nt.php\
    \ on line 17\n\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpekc5a0nt.php on line 16\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpekc5a0nt.php on line 17\n\n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpekc5a0nt.php on line 16\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpekc5a0nt.php on line 17\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmpekc5a0nt.php on line\
    \ 16\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpekc5a0nt.php on\
    \ line 17\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpekc5a0nt.php on line 16\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpekc5a0nt.php on line 17\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpekc5a0nt.php:30\nStack trace:\n#0 /tmp/tmpekc5a0nt.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpekc5a0nt.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$newstring\
    \ = \"\";\n\t$words = explode(\" \", $s);\n\tforeach ($words as $w) {\n\t\t$characters\
    \ = str_split($w);\n\t\tsort($characters);\n\t\t$newstring .= implode(\"\", $characters)\
    \ . \" \";\n\t}\n\treturn trim($newstring);\n}\n\necho anti_shuffle('Hi') . \"\
    <br>\";\necho anti_shuffle('hello') . \"<br>\";\necho anti_shuffle('Hello World!!!')\
    \ . \"<br>\";\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Hi<br>ehllo<br>Hello !!!Wdlor<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $a = str_split($s);\n\
    \    $o = array();\n    foreach ($a as $c) {\n        $o[] = ord($c);\n    }\n\
    \    asort($o);\n    foreach ($o as $k => $n) {\n        $o[$k] = chr($n);\n \
    \   }\n    return implode('', $o);\n}\n\necho anti_shuffle('Hi') . \"\\n\";\n\
    echo anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\
    \\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nehllo\n !!!HWdellloor\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpge44j07q.php:36\nStack trace:\n#0 /tmp/tmpge44j07q.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpge44j07q.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$charArray\
    \ = str_split($s);\n\t$stringArray = [];\n\t$stringLength = 0;\n\tfor ($i = 0;\
    \ $i < sizeof($charArray); $i++) {\n\t\tif ($charArray[$i] === ' ') {\n\t\t\t\
    $stringArray[$stringLength] = $stringArray[$stringLength] . $charArray[$i];\n\t\
    \t\t$stringLength++;\n\t\t} else {\n\t\t\tif (!isset($stringArray[$stringLength]))\
    \ {\n\t\t\t\t$stringArray[$stringLength] = '';\n\t\t\t}\n\t\t\t$stringArray[$stringLength]\
    \ = $stringArray[$stringLength] . $charArray[$i];\n\t\t}\n\t}\n\tforeach ($stringArray\
    \ as $value) {\n\t\t$charValue = str_split($value);\n\t\t$charValue = array_unique($charValue);\n\
    \t\tasort($charValue);\n\t\t$stringValue = implode('', $charValue);\n\t\t$s =\
    \ str_replace($value, $stringValue, $s);\n\t}\n\treturn $s;\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yiluw3_.php:41\n\
    Stack trace:\n#0 /tmp/tmp0yiluw3_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp0yiluw3_.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $output\
    \ = '';\n    $arr = explode(' ', $s);\n    foreach ($arr as $value) {\n      \
    \  $output .= implode('', str_split($value)) . ' ';\n    }\n    return trim($output);\n\
    }\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hello World!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfguysmn1.php:26\n\
    Stack trace:\n#0 /tmp/tmpfguysmn1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfguysmn1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $letters_array\
    \ = [];\n  $words_array = explode(' ', $s);\n  foreach ($words_array as $word)\
    \ {\n    $letters_array[] = str_split($word);\n  }\n  foreach ($letters_array\
    \ as $index => $letters) {\n    $letters_array[$index] = bubble_sort($letters);\n\
    \  }\n  $words_array = [];\n  foreach ($letters_array as $index => $letters) {\n\
    \    $words_array[] = implode('', $letters);\n  }\n  return implode(' ', $words_array);\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bubble_sort()\
    \ in /tmp/tmppzpws6os.php:18\nStack trace:\n#0 /tmp/tmppzpws6os.php(27): anti_shuffle('Hi')\n\
    #1 /tmp/tmppzpws6os.php(31): candidate('Hi')\n#2 /tmp/tmppzpws6os.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmppzpws6os.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $shuffled_words = [];\n    foreach ($words as $word)\
    \ {\n        $chars = str_split($word);\n        asort($chars);\n        $shuffled_words[]\
    \ = implode('', $chars);\n    }\n    return implode(' ', $shuffled_words);\n}\n\
    \n$example = \"Hello World!!!\";\nprint(anti_shuffle($example));\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $test =\
    \ preg_split('/ /', $s);\n  $result = [];\n  foreach ($test as $i => $t) {\n \
    \   $result[] = implode('',str_split($t));\n  }\n  foreach ($result as $i => $r)\
    \ {\n    $result[$i] = str_split($r);\n    sort($result[$i]);\n    $result[$i]\
    \ = implode('',$result[$i]);\n  }\n  return implode(' ',$result);\n}\necho anti_shuffle('Hi').\"\
    \\n\";\necho anti_shuffle('hello').\"\\n\";\necho anti_shuffle('Hello World!!!').\"\
    \\n\";\n ?>\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // write\
    \ code here...\n}\n\necho anti_shuffle('Hi');\necho '<br>';\necho anti_shuffle('hello');\n\
    echo '<br>';\necho anti_shuffle('Hello World!!!');\necho '<br>';\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<br><br><br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29nj76p0.php:27\n\
    Stack trace:\n#0 /tmp/tmp29nj76p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp29nj76p0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppknjogqw.php:20\n\
    Stack trace:\n#0 /tmp/tmppknjogqw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppknjogqw.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $tmp =\
    \ explode(' ', $s);\n    foreach ($tmp as $key => $value) {\n        $new_arr[]\
    \ = str_split($value);\n        sort($new_arr[$key]);\n        $new_arr[$key]\
    \ = implode($new_arr[$key]);\n    }\n    return implode(' ', $new_arr);\n}\necho\
    \ anti_shuffle('Hi');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Hi
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr_s\
    \ = preg_split('/[\\s]+/', $s);\n    $new_s = \"\";\n    foreach ($arr_s as $w)\
    \ {\n        $new_s .= $w ? anti_shuffle_word($w) . \" \" : \" \";\n    }\n  \
    \  return trim($new_s);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpin5xfm4z.php:15\nStack trace:\n#0 /tmp/tmpin5xfm4z.php(21): anti_shuffle('Hi')\n\
    #1 /tmp/tmpin5xfm4z.php(25): candidate('Hi')\n#2 /tmp/tmpin5xfm4z.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpin5xfm4z.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $result\
    \ = '';\n    foreach (explode(' ', $s) as $w) {\n        $result .= implode('',\
    \ array_unique(str_split($w)));\n    }\n    return $result;\n}\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "HeloWorld!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7iv3xn8x.php:25\n\
    Stack trace:\n#0 /tmp/tmp7iv3xn8x.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7iv3xn8x.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $newWords = [];\n  foreach ($words as $word) {\n    $word\
    \ = str_split($word);\n    sort($word);\n    $newWords[] = implode('', $word);\n\
    \  }\n  return implode(' ', $newWords);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      $result[] = implode('', str_split($word));\n    }\n    return implode('\
    \ ', $result);\n}\necho anti_shuffle('Hi'), \"\\n\";\necho anti_shuffle('hello'),\
    \ \"\\n\";\necho anti_shuffle('Hello World!!!'), \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpj0nikdbo.php:28\nStack trace:\n#0 /tmp/tmpj0nikdbo.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmpj0nikdbo.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t// your\
    \ code here\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpah03nert.php:19\n\
    Stack trace:\n#0 /tmp/tmpah03nert.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpah03nert.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    $result = [];\n    for ($i = 0; $i < count($s); $i++) {\n     \
    \   $tmp = [];\n        for ($j = 0; $j < strlen($s[$i]); $j++) {\n          \
    \  $tmp[] = ord($s[$i][$j]);\n        }\n        sort($tmp);\n        $result[]\
    \ = implode('', array_map('chr', $tmp));\n    }\n    return implode(' ', $result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ preg_split('/\\s+/', $s);\n  $anti_shuffled = [];\n  foreach ($words as $w)\
    \ {\n    if (strlen($w) < 2) {\n      $anti_shuffled[] = $w;\n    } else {\n \
    \     $anti_shuffled[] = anti_shuffle_word($w);\n    }\n  }\n  return implode('\
    \ ', $anti_shuffled);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpqj359puo.php:18\nStack trace:\n#0 /tmp/tmpqj359puo.php(25): anti_shuffle('Hi')\n\
    #1 /tmp/tmpqj359puo.php(29): candidate('Hi')\n#2 /tmp/tmpqj359puo.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqj359puo.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $l = explode('\
    \ ', $s);\n    $n = [];\n    foreach ($l as $i) {\n        $n[] = join('', str_split($i,\
    \ 1));\n    }\n    sort($n);\n    return join(' ', $n);\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt73fl0bw.php:26\n\
    Stack trace:\n#0 /tmp/tmpt73fl0bw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpt73fl0bw.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $str = '';\n  foreach ($words as $word) {\n    $chars =\
    \ str_split($word);\n    sort($chars);\n    $str .= implode('', $chars) . ' ';\n\
    \  }\n  return trim($str);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $key => $word) {\n        $words[$key]\
    \ = str_split($word);\n        sort($words[$key]);\n        $words[$key] = implode('',\
    \ $words[$key]);\n    }\n    return implode(' ', $words);\n}\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // trim\
    \ $s and split it by space\n    $s = trim($s);\n    $sa = explode(' ', $s);\n\
    \    // sort each word and glue it together by space\n    $n = count($sa);\n \
    \   for ($i = 0; $i < $n; $i++) {\n        $sa[$i] = sorted($sa[$i]);\n    }\n\
    \    $s = implode(' ', $sa);\n    return $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sorted() in /tmp/tmpztsveh06.php:18\n\
    Stack trace:\n#0 /tmp/tmpztsveh06.php(25): anti_shuffle('Hi')\n#1 /tmp/tmpztsveh06.php(29):\
    \ candidate('Hi')\n#2 /tmp/tmpztsveh06.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpztsveh06.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $new_words = [];\n  foreach ($words as $word) {\n    $new_words[]\
    \ = implode(array_map(function($x) { return chr($x); }, str_split(join('', array_map(function($x)\
    \ { return ord($x); }, str_split($word))))));\n  }\n  return implode(' ', $new_words);\n\
    }\necho anti_shuffle('Hi');\necho '<br>';\necho anti_shuffle('hello');\necho '<br>';\n\
    echo anti_shuffle('Hello World!!!');\necho '<br>';\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\a\x02\x01\0\x05<br>\x01\0\x04\x01\0\x01\x01\0\b\x01\0\b\x01\x01\x01<br>\a\
    \x02\x01\0\x01\x01\0\b\x01\0\b\x01\x01\x01 \b\a\x01\x01\x01\x01\x01\x04\x01\0\b\
    \x01\0\0\x03\x03\x03\x03\x03\x03<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp5uqoxog1.php:31\nStack trace:\n#0 /tmp/tmp5uqoxog1.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5uqoxog1.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // TODO\
    \ your code here\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9x3835j.php:19\n\
    Stack trace:\n#0 /tmp/tmpq9x3835j.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpq9x3835j.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = explode('\
    \ ', $s);\n  $res = [];\n  foreach ($s as $value) {\n    $temp = str_split($value);\n\
    \    sort($temp);\n    $temp = implode('', $temp);\n    array_push($res, $temp);\n\
    \  }\n  return implode(' ', $res);\n}\necho anti_shuffle('Hello World!!!') . '<br>';\n\
    \nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $results\
    \ = [];\n    $words = explode(' ', $s);\n    for($i = 0; $i < count($words); $i++)\
    \ {\n        $results[] = anti_shuffle_word($words[$i]);\n    }\n    return implode('\
    \ ', $results);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpc0zoxvw2.php:15\nStack trace:\n#0 /tmp/tmpc0zoxvw2.php(21): anti_shuffle('Hi')\n\
    #1 /tmp/tmpc0zoxvw2.php(25): candidate('Hi')\n#2 /tmp/tmpc0zoxvw2.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpc0zoxvw2.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = implode('', str_split($word));\n  }\n  asort($result);\n  return implode('\
    \ ', $result);\n}\n\n$result = anti_shuffle('Hello World!!!');\necho $result;\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hello World!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmascshc6.php:29\n\
    Stack trace:\n#0 /tmp/tmpmascshc6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmascshc6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$array =\
    \ explode(\" \", $s);\n\t$new_string = \"\";\n\tforeach ($array as $word) {\n\t\
    \t$new_string .= str_split($word);\n\t\tsort($new_string);\n\t\t$new_string =\
    \ implode(\"\", $new_string);\n\t\t$new_string .= \" \";\n\t}\n\treturn $new_string;\n\
    }\n\nprint anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpkotee5zh.php\
    \ on line 16\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpkotee5zh.php\
    \ on line 17\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpkotee5zh.php on line 16\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpkotee5zh.php on line 17\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpkotee5zh.php on line 16\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpkotee5zh.php on line 17\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpkotee5zh.php:29\nStack trace:\n\
    #0 /tmp/tmpkotee5zh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkotee5zh.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // $words\
    \ = explode(' ', $s);\n  // foreach ($words as $word) {\n  //   $letters = str_split($word);\n\
    \  //   sort($letters);\n  //   $result .= implode('', $letters);\n  // }\n  //\
    \ return $result;\n  $len = strlen($s);\n  for ($i = 0; $i < $len; $i++) {\n \
    \   $letters = [];\n    while ($i < $len && $s[$i] != ' ') {\n      $letters[]\
    \ = $s[$i];\n      $i++;\n    }\n    $s[$i] = ' ';\n    sort($letters);\n    $result\
    \ .= implode('', $letters);\n  }\n  return $result;\n}\n\necho anti_shuffle('anti\
    \ shuffle'), \"\\n\";\necho anti_shuffle('Hi'), \"\\n\";\necho anti_shuffle('hello'),\
    \ \"\\n\";\necho anti_shuffle('Hello World!!!'), \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "ainteffhlsu\nHi\nehllo\nHello!!!Wdlor\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpt3z9n_gw.php:46\nStack trace:\n#0 /tmp/tmpt3z9n_gw.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpt3z9n_gw.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= str_replace(' ', '', implode('', str_split($word)));\n    }\n\
    \    return $result;\n}\necho anti_shuffle('Hi');\necho '<br/>';\necho anti_shuffle('hello');\n\
    echo '<br/>';\necho anti_shuffle('Hello World!!!');\necho '<br/>';\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi<br/>hello<br/>HelloWorld!!!<br/>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp78ut2acn.php:31\nStack trace:\n#0 /tmp/tmp78ut2acn.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp78ut2acn.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $key => $word) {\n        $s[$key] = str_split($word);\n\
    \        sort($s[$key]);\n        $s[$key] = implode('', $s[$key]);\n    }\n \
    \   return implode(' ', $s);\n}\n\necho anti_shuffle('Hi');\necho '<br>';\necho\
    \ anti_shuffle('hello');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hi<br>ehllo<br>Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $res = [];\n    foreach ($words as $word) {\n     \
    \   $res[] = join('', array_map(function($x) { return $x[0]; }, str_split($word)));\n\
    \    }\n    return join(' ', $res);\n}\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_i12g4f.php:25\n\
    Stack trace:\n#0 /tmp/tmpa_i12g4f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpa_i12g4f.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = str_split($s);\n\
    \  $result = '';\n  $curr = '';\n  $prev = '';\n  foreach ($s as $c) {\n    if\
    \ (ctype_alpha($c)) {\n      $curr .= $c;\n    } else {\n      $result .= sort_word($curr);\n\
    \      $result .= $c;\n      $curr = '';\n    }\n  }\n  $result .= sort_word($curr);\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_word() in\
    \ /tmp/tmpamt2uowe.php:25\nStack trace:\n#0 /tmp/tmpamt2uowe.php(30): anti_shuffle(Array)\n\
    #1 /tmp/tmpamt2uowe.php(34): candidate('Hi')\n#2 /tmp/tmpamt2uowe.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpamt2uowe.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // TYPE\
    \ HERE\n    $arr = explode(' ', $s);\n    $new_arr = [];\n    for ($i = 0; $i\
    \ < count($arr); $i++) {\n        $new_arr[] = str_split($arr[$i]);\n        sort($new_arr[$i]);\n\
    \        $new_arr[$i] = implode('', $new_arr[$i]);\n    }\n    return implode('\
    \ ', $new_arr);\n}\n$test = 'Hello World!!!';\necho anti_shuffle($test);\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $result = '';\n    foreach ($arr as $value) {\n     \
    \   if ($value !== '') {\n            $result .= str_split($value);\n        \
    \    sort($result);\n            $result = implode('', $result);\n        }\n\
    \        $result .= ' ';\n    }\n    return $result;\n}\n\n$s = 'Hi';\nvar_dump(anti_shuffle($s)\
    \ === 'Hi');\n$s = 'hello';\nvar_dump(anti_shuffle($s) === 'ehllo');\n$s = 'Hello\
    \ World!!!';\nvar_dump(anti_shuffle($s) === 'Hello !!!Wdlor');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmp6ng4zw83.php\
    \ on line 17\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp6ng4zw83.php\
    \ on line 18\nbool(false)\n\nWarning: sort() expects parameter 1 to be array,\
    \ string given in /tmp/tmp6ng4zw83.php on line 17\n\nWarning: implode(): Invalid\
    \ arguments passed in /tmp/tmp6ng4zw83.php on line 18\nbool(false)\n\nWarning:\
    \ sort() expects parameter 1 to be array, string given in /tmp/tmp6ng4zw83.php\
    \ on line 17\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp6ng4zw83.php\
    \ on line 18\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp6ng4zw83.php on line 17\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp6ng4zw83.php on line 18\nbool(false)\n\nWarning: sort() expects\
    \ parameter 1 to be array, string given in /tmp/tmp6ng4zw83.php on line 17\n\n\
    Warning: implode(): Invalid arguments passed in /tmp/tmp6ng4zw83.php on line 18\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ng4zw83.php:36\nStack\
    \ trace:\n#0 /tmp/tmp6ng4zw83.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6ng4zw83.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    foreach ($arr as $key => $value) {\n        $arr[$key]\
    \ = anti_shuffle_string($value);\n    }\n    return implode(' ', $arr);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_string()\
    \ in /tmp/tmpqm_bn0jn.php:14\nStack trace:\n#0 /tmp/tmpqm_bn0jn.php(20): anti_shuffle('Hi')\n\
    #1 /tmp/tmpqm_bn0jn.php(24): candidate('Hi')\n#2 /tmp/tmpqm_bn0jn.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqm_bn0jn.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $w = explode('\
    \ ', $s);\n  $r = '';\n  foreach ($w as $x)\n    $r .= implode('', str_split($x))\
    \ . ' ';\n  return trim($r);\n}\necho anti_shuffle('Hi'); // returns 'Hi'\necho\
    \ \"\\n\";\necho anti_shuffle('hello'); // returns 'ehllo'\necho \"\\n\";\necho\
    \ anti_shuffle('Hello World!!!'); // returns 'Hello !!!Wdlor'\necho \"\\n\";\n\
    echo anti_shuffle('Hello World!!! and welcome to the party'); // returns 'Hello\
    \ !!!Wdlor andaaceeeelmoprwtt'\necho \"\\n\";\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\nHello World!!! and welcome to the party\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpdc4c3385.php:32\nStack\
    \ trace:\n#0 /tmp/tmpdc4c3385.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdc4c3385.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // your\
    \ code here\n    $i = 0;\n    $arr = [];\n    $arr2 = [];\n    $result = '';\n\
    \    while($i < strlen($s)){\n      if(ctype_alpha($s[$i])){\n        if(ctype_alpha($s[$i+1])){\n\
    \          array_push($arr, $s[$i]);\n        }else{\n          array_push($arr,\
    \ $s[$i]);\n          $arr = str_split(join('', $arr));\n          sort($arr);\n\
    \          array_push($arr2, join('', $arr));\n          $arr = [];\n        }\n\
    \      }else{\n        array_push($arr2, $s[$i]);\n      }\n      $i++;\n    }\n\
    \    return join('', $arr2);\n}\n\necho anti_shuffle('Hi');\necho '<br>';\necho\
    \ anti_shuffle('hello');\necho '<br>';\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi<br>ehllo<br>Hello Wdlor!!!<br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpzu2pzo85.php:51\nStack trace:\n#0 /tmp/tmpzu2pzo85.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzu2pzo85.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  for ($i = 0; $i < count($words); $i++) {\n    $words[$i]\
    \ = implode(str_split($words[$i]), '');\n  }\n  return implode($words, ' ');\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplabohwau.php:25\n\
    Stack trace:\n#0 /tmp/tmplabohwau.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplabohwau.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t// Your\
    \ code here...\n\t$res = '';\n\t$arr = explode(' ', $s);\n\tfor ($i = 0; $i <\
    \ count($arr); $i++) {\n\t\t$res .= implode('', str_split($arr[$i])) . ' ';\n\t\
    }\n\treturn trim($res);\n}\n\necho anti_shuffle('Hello World!!!') . PHP_EOL;\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hello World!!!\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb64zagr4.php:28\n\
    Stack trace:\n#0 /tmp/tmpb64zagr4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpb64zagr4.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $pieces\
    \ = explode(\" \", $s);\n    $new_word = array();\n    foreach ($pieces as $word)\
    \ {\n        $chars = str_split($word);\n        sort($chars);\n        $new_word[]\
    \ = implode(\"\", $chars);\n    }\n    return implode(\" \", $new_word);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyz2nwd1f.php:20\n\
    Stack trace:\n#0 /tmp/tmpyz2nwd1f.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyz2nwd1f.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ preg_split('/ /', $s);\n  $str = '';\n  foreach ($words as $word) {\n    $str\
    \ .= str_split($word);\n    sort($str);\n    $str = implode('', $str);\n    $str\
    \ .= ' ';\n  }\n  return rtrim($str);\n}\n\nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpnjg3wnmy.php\
    \ on line 16\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpnjg3wnmy.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjg3wnmy.php:28\n\
    Stack trace:\n#0 /tmp/tmpnjg3wnmy.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnjg3wnmy.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\n}\n\necho\
    \ anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello\
    \ World!!!') . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u5z_wc3.php:23\n\
    Stack trace:\n#0 /tmp/tmp3u5z_wc3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3u5z_wc3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $res =\
    \ '';\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n     \
    \   $res .= anti_shuffle_word($word);\n        $res .= ' ';\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp_nd9qjig.php:15\nStack trace:\n#0 /tmp/tmp_nd9qjig.php(22): anti_shuffle('Hi')\n\
    #1 /tmp/tmp_nd9qjig.php(26): candidate('Hi')\n#2 /tmp/tmp_nd9qjig.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_nd9qjig.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $w = explode('\
    \ ', $s);\n    for ($i = 0; $i < count($w); $i++) {\n        $w[$i] = join(array_map('chr',\
    \ sort(array_map('ord', str_split($w[$i])))));\n    }\n    return join(' ', $w);\n\
    }\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: array_map(): Expected parameter 2 to be an array, bool given\
    \ in /tmp/tmpf79w_bll.php on line 14\n\nWarning: join(): Argument must be an array\
    \ in /tmp/tmpf79w_bll.php on line 14\n\nWarning: array_map(): Expected parameter\
    \ 2 to be an array, bool given in /tmp/tmpf79w_bll.php on line 14\n\nWarning:\
    \ join(): Argument must be an array in /tmp/tmpf79w_bll.php on line 14\n \nWarning:\
    \ array_map(): Expected parameter 2 to be an array, bool given in /tmp/tmpf79w_bll.php\
    \ on line 14\n\nWarning: join(): Argument must be an array in /tmp/tmpf79w_bll.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf79w_bll.php:24\n\
    Stack trace:\n#0 /tmp/tmpf79w_bll.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpf79w_bll.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    $newArr = [];\n    foreach ($arr as $item) {\n      \
    \  $itemArr = str_split($item);\n        sort($itemArr);\n        $newItem = implode('',\
    \ $itemArr);\n        array_push($newArr, $newItem);\n    }\n    return implode('\
    \ ', $newArr);\n}\n\n$s = 'Hello World!!!';\necho anti_shuffle($s);\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstnhpcek.php:20\n\
    Stack trace:\n#0 /tmp/tmpstnhpcek.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpstnhpcek.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $a = explode('\
    \ ', $s);\n    foreach ($a as $key => $word) {\n        $a[$key] = implode('',\
    \ str_split($word));\n        sort($a[$key]);\n        $a[$key] = implode('',\
    \ $a[$key]);\n    }\n    return implode(' ', $a);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmplni622xa.php\
    \ on line 15\n\nWarning: implode(): Invalid arguments passed in /tmp/tmplni622xa.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplni622xa.php:26\n\
    Stack trace:\n#0 /tmp/tmplni622xa.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplni622xa.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$string\
    \ = explode(\" \", $s);\n\t$output = \"\";\n\tforeach ($string as $word) {\n\t\
    \t$output .= str_split($word);\n\t\tsort($output);\n\t\t$output = implode($output);\n\
    \t\t$output .= \" \";\n\t}\n\treturn trim($output);\n}\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpyb8bgrdk.php\
    \ on line 16\n\nWarning: implode(): Argument must be an array in /tmp/tmpyb8bgrdk.php\
    \ on line 17\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpyb8bgrdk.php on line 16\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmpyb8bgrdk.php on line 17\n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpyb8bgrdk.php on line 16\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmpyb8bgrdk.php on line 17\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpyb8bgrdk.php:28\nStack trace:\n\
    #0 /tmp/tmpyb8bgrdk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyb8bgrdk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $stringArray\
    \ = str_split($s);\n  $newArray = [];\n  $wordArray = [];\n  $newString = \"\"\
    ;\n  $space = \" \";\n  foreach ($stringArray as $index => $value) {\n    if ($value\
    \ != $space) {\n      array_push($wordArray, $value);\n    } else {\n      $newArray[]\
    \ = $wordArray;\n      $wordArray = [];\n      array_push($newArray, $space);\n\
    \    }\n  }\n  $newArray[] = $wordArray;\n  $wordArray = [];\n  foreach ($newArray\
    \ as $index => $word) {\n    if ($word != $space) {\n      sort($word);\n    \
    \  foreach ($word as $index => $letter) {\n        $newString .= $letter;\n  \
    \    }\n    } else {\n      $newString .= $space;\n    }\n  }\n  return $newString;\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    $chars\
    \ = str_split($word);\n    sort($chars);\n    $result[] = implode('', $chars);\n\
    \  }\n  return implode(' ', $result);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\n\
    echo anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // your\
    \ code here\n    return $s;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppf3ds_v7.php:21\n\
    Stack trace:\n#0 /tmp/tmppf3ds_v7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppf3ds_v7.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    $out = array();\n    foreach ($s as $word) {\n        $out[] =\
    \ str_split($word);\n        sort($out[count($out) - 1]);\n        $out[count($out)\
    \ - 1] = implode('', $out[count($out) - 1]);\n    }\n    return implode(' ', $out);\n\
    }\necho anti_shuffle('Anti Shuffle') . \"\\n\";\necho anti_shuffle('Hi') . \"\\\
    n\";\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello World!!!')\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Aint Seffhlu\nHi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $res =\
    \ \"\";\n    $arr = explode(\" \", $s);\n    foreach ($arr as $w) {\n        $res\
    \ .= merge_sort($w) . \" \";\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function merge_sort()\
    \ in /tmp/tmpav6h21d8.php:15\nStack trace:\n#0 /tmp/tmpav6h21d8.php(21): anti_shuffle('Hi')\n\
    #1 /tmp/tmpav6h21d8.php(25): candidate('Hi')\n#2 /tmp/tmpav6h21d8.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpav6h21d8.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    for ($i = 0; $i < count($arr); $i++) {\n        $arr[$i]\
    \ = str_split($arr[$i]);\n        sort($arr[$i]);\n        $arr[$i] = implode('',\
    \ $arr[$i]);\n    }\n    return implode(' ', $arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $split\
    \ = explode(' ', $s);\n    $new_arr = [];\n    foreach ($split as $v) {\n    \
    \    $new_arr[] = sort_string($v);\n    }\n    return implode(' ', $new_arr);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_string()\
    \ in /tmp/tmp_bz48k04.php:15\nStack trace:\n#0 /tmp/tmp_bz48k04.php(21): anti_shuffle('Hi')\n\
    #1 /tmp/tmp_bz48k04.php(25): candidate('Hi')\n#2 /tmp/tmp_bz48k04.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_bz48k04.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $str = explode(\"\
    \ \", $s);\n  $str2 = array();\n  foreach ($str as $value) {\n    $str2[] = str_split($value);\n\
    \    //sort($str2);\n  }\n  $arr = array();\n  foreach ($str2 as $value) {\n \
    \   sort($value);\n    $arr[] = $value;\n  }\n  //join into the array and return\n\
    \  //return $arr;\n  $array = array();\n  foreach ($arr as $value) {\n    $array[]\
    \ = implode($value);\n  }\n  $str = implode(\" \", $array);\n  return $str;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = explode('\
    \ ', $s);\n  foreach ($s as $key => $value) {\n    $s[$key] = implode(str_split($value));\n\
    \  }\n  return implode(' ', $s);\n}\n\necho anti_shuffle('Hi') . \"\\n\";\necho\
    \ anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\\\
    n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp2lfecmlu.php:28\nStack trace:\n#0 /tmp/tmp2lfecmlu.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2lfecmlu.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = str_split($s);\n\
    \    $l = strlen($s);\n    $w = [];\n    $c = 0;\n    for ($i = 0; $i < $l; $i++)\
    \ {\n        if (ctype_alpha($s[$i])) {\n            $w[$c] .= $s[$i];\n     \
    \   } else {\n            $c++;\n        }\n    }\n    for ($i = 0; $i < $c; $i++)\
    \ {\n        $w[$i] = str_split($w[$i]);\n        sort($w[$i]);\n        $w[$i]\
    \ = implode('', $w[$i]);\n    }\n    $r = '';\n    for ($i = 0; $i < $l; $i++)\
    \ {\n        if (ctype_alpha($s[$i])) {\n            $r .= $w[$c];\n         \
    \   $c++;\n        } else {\n            $r .= $s[$i];\n        }\n    }\n   \
    \ return $r;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects parameter 1 to be string, array given in /tmp/tmphuzsb2dz.php\
    \ on line 13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphuzsb2dz.php:45\n\
    Stack trace:\n#0 /tmp/tmphuzsb2dz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmphuzsb2dz.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  foreach ($arr as $key => $value) {\n    $arr[$key] = str_split($value);\n\
    \    sort($arr[$key]);\n    $arr[$key] = implode('', $arr[$key]);\n  }\n  return\
    \ implode(' ', $arr);\n}\n\necho anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello')\
    \ . PHP_EOL;\necho anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpohqf1u6p.php:20\n\
    Stack trace:\n#0 /tmp/tmpohqf1u6p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpohqf1u6p.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9m6u54uy.php:20\n\
    Stack trace:\n#0 /tmp/tmp9m6u54uy.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9m6u54uy.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $sentence\
    \ = explode(\" \", $s);\n    $shuffled = array();\n    foreach ($sentence as $word)\
    \ {\n        $letters = str_split($word);\n        sort($letters);\n        $shuffled[]\
    \ = implode(\"\", $letters);\n    }\n    return implode(\" \", $shuffled);\n}\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // $s =\
    \ 'Hello World!!!';\n  $array_of_words = explode(' ', $s);\n  $anti_shuffled_string\
    \ = '';\n  for ($i = 0; $i < count($array_of_words); $i++) {\n    $word = $array_of_words[$i];\n\
    \    $array_of_chars = str_split($word);\n    sort($array_of_chars);\n    $anti_shuffled_string\
    \ .= implode('', $array_of_chars);\n    if ($i !== count($array_of_words) - 1)\
    \ {\n      $anti_shuffled_string .= ' ';\n    }\n  }\n  echo $anti_shuffled_string;\n\
    }\nanti_shuffle('Hello World!!!');\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hello !!!WdlorHi\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8sazocx.php:32\n\
    Stack trace:\n#0 /tmp/tmpw8sazocx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpw8sazocx.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $token\
    \ = strtok($s, \" \");\n    $word_arr = [];\n    while ($token !== false) {\n\
    \        $word_arr[] = $token;\n        $token = strtok(\" \");\n    }\n    $result\
    \ = \"\";\n    foreach ($word_arr as $word) {\n        $chars = str_split($word);\n\
    \        sort($chars);\n        $res_word = implode($chars);\n        $result\
    \ .= $res_word . \" \";\n    }\n    $result = substr($result, 0, -1);\n    return\
    \ $result;\n}\necho anti_shuffle('Hi') . \"<br>\";\necho anti_shuffle('hello')\
    \ . \"<br>\";\necho anti_shuffle('Hello World!!!') . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi<br>ehllo<br>Hello !!!Wdlor<br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp7ijobyv6.php:41\nStack trace:\n#0 /tmp/tmp7ijobyv6.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7ijobyv6.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr=explode(\"\
    \ \",$s);\n    $arr1=array();\n    foreach($arr as $word){\n        $arr1[]=str_split($word);\n\
    \    }\n    sort($arr1);\n    $string=\"\";\n    foreach($arr1 as $word){\n  \
    \      $string.=implode(\"\",$word);\n    }\n    return $string;\n}\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7znuunap.php:30\n\
    Stack trace:\n#0 /tmp/tmp7znuunap.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7znuunap.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $res = [];\n\
    \  $arr = explode(' ', $s);\n  foreach ($arr as $word) {\n    $res[] = join('',\
    \ str_split($word));\n  }\n  return join(' ', $res);\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppl_cjy0a.php:25\n\
    Stack trace:\n#0 /tmp/tmppl_cjy0a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppl_cjy0a.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$s = str_split($s);\n\
    \t$res = array();\n\t$str = \"\";\n\t$word = \"\";\n\tfor ($i = 0; $i < count($s);\
    \ $i++) {\n\t\tif ($s[$i] == \" \") {\n\t\t\t$res[] = $word;\n\t\t\t$res[] = \"\
    \ \";\n\t\t\t$word = \"\";\n\t\t} else {\n\t\t\t$word .= $s[$i];\n\t\t}\n\t}\n\
    \t$res[] = $word;\n\tforeach ($res as $value) {\n\t\tif ($value != \" \") {\n\t\
    \t\t$chars = str_split($value);\n\t\t\tsort($chars);\n\t\t\t$str .= implode(\"\
    \", $chars);\n\t\t} else {\n\t\t\t$str .= \" \";\n\t\t}\n\t}\n\treturn $str;\n\
    }\n$s = \"Hello World!!!\";\necho anti_shuffle($s);\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $words = array_map(function($word) {\n        $new_word\
    \ = str_split($word);\n        sort($new_word);\n        return implode('', $new_word);\n\
    \    }, $words);\n    return implode(' ', $words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $chars =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($chars as $char) {\n    $letters\
    \ = str_split($char);\n    sort($letters);\n    $result[] = implode('', $letters);\n\
    \  }\n  return implode(' ', $result);\n}\n\necho anti_shuffle('Hi'); // 'Hi'\n\
    echo \"\\n\";\necho anti_shuffle('hello'); // 'ehllo'\necho \"\\n\";\necho anti_shuffle('Hello\
    \ World!!!'); // 'Hello !!!Wdlor'\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$arr = explode(\"\
    \ \", $s);\n\t$s_words = \"\";\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\t\
    $word = str_split($arr[$i]);\n\t\tasort($word);\n\t\t$s_words .= implode(\"\"\
    , $word) . \" \";\n\t}\n\treturn trim($s_words);\n}\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$words =\
    \ explode(' ', $s);\n\tforeach ($words as $key => $word) {\n\t\t$characters =\
    \ str_split($word);\n\t\tsort($characters);\n\t\t$words[$key] = implode('', $characters);\n\
    \t}\n\treturn implode(' ', $words);\n}\necho anti_shuffle('Hi');\necho \"\\n\"\
    ;\necho anti_shuffle('hello');\necho \"\\n\";\necho anti_shuffle('Hello World!!!');\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $spaceless\
    \ = preg_replace('/\\s+/', '', $s);\n    for ($i = 0; $i < strlen($spaceless);\
    \ $i++) {\n        $chars[] = $spaceless[$i];\n    }\n    $ascii_chars = [];\n\
    \    for ($i = 0; $i < count($chars); $i++) {\n        $ascii_chars[] = ord($chars[$i]);\n\
    \    }\n    $sorted_ascii_chars = sort_ascii($ascii_chars);\n    $sorted_chars\
    \ = [];\n    for ($i = 0; $i < count($sorted_ascii_chars); $i++) {\n        $sorted_chars[]\
    \ = chr($sorted_ascii_chars[$i]);\n    }\n    $str = '';\n    foreach ($sorted_chars\
    \ as $c) {\n        $str .= $c;\n    }\n    $ordered_string = '';\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        if (in_array($s[$i], $chars)) {\n   \
    \         $ordered_string .= $str[0];\n            $str = substr($str, 1);\n \
    \       } else {\n            $ordered_string .= $s[$i];\n        }\n    }\n \
    \   return $ordered_string;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_ascii()\
    \ in /tmp/tmpx7s7470u.php:20\nStack trace:\n#0 /tmp/tmpx7s7470u.php(42): anti_shuffle('Hi')\n\
    #1 /tmp/tmpx7s7470u.php(46): candidate('Hi')\n#2 /tmp/tmpx7s7470u.php(55): test()\n\
    #3 {main}\n  thrown in /tmp/tmpx7s7470u.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = str_split($s);\n\
    \    $arr = [];\n    $str = '';\n    foreach ($s as $index => $letter) {\n   \
    \     if ($letter == ' ') {\n            array_push($arr, $str);\n           \
    \ array_push($arr, ' ');\n            $str = '';\n        } else {\n         \
    \   $str .= $letter;\n        }\n    }\n    array_push($arr, $str);\n    foreach\
    \ ($arr as $index => $element) {\n        if (is_string($element)) {\n       \
    \     $arr[$index] = anti_shuffle_sort($element);\n        }\n    }\n    return\
    \ implode($arr);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_sort()\
    \ in /tmp/tmpxfrzkr57.php:27\nStack trace:\n#0 /tmp/tmpxfrzkr57.php(34): anti_shuffle(Array)\n\
    #1 /tmp/tmpxfrzkr57.php(38): candidate('Hi')\n#2 /tmp/tmpxfrzkr57.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxfrzkr57.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // Write\
    \ your code here...\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovisjnnu.php:20\n\
    Stack trace:\n#0 /tmp/tmpovisjnnu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpovisjnnu.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $k => $v) {\n        $s[$k] = str_split($v);\n \
    \       sort($s[$k]);\n        $s[$k] = implode('', $s[$k]);\n    }\n    return\
    \ implode(' ', $s);\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrkdztfa.php:20\n\
    Stack trace:\n#0 /tmp/tmpsrkdztfa.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsrkdztfa.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = explode('\
    \ ', $s);\n  $result = '';\n  foreach ($s as $string) {\n    $result .= str_split($string);\n\
    \    sort($result);\n    $result = implode($result);\n    $result .= ' ';\n  }\n\
    \  return trim($result);\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpzcgoqagt.php\
    \ on line 16\n\nWarning: implode(): Argument must be an array in /tmp/tmpzcgoqagt.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcgoqagt.php:27\n\
    Stack trace:\n#0 /tmp/tmpzcgoqagt.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzcgoqagt.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_string = '';\n    foreach ($words as $value) {\n\
    \        $new_string .= $new_string == '' ? word_shuffle($value) : ' ' . word_shuffle($value);\n\
    \    }\n    return $new_string;\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function word_shuffle()\
    \ in /tmp/tmprulzi867.php:15\nStack trace:\n#0 /tmp/tmprulzi867.php(21): anti_shuffle('Hi')\n\
    #1 /tmp/tmprulzi867.php(25): candidate('Hi')\n#2 /tmp/tmprulzi867.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmprulzi867.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $new_arr\
    \ = [];\n  $arr = explode(' ', $s);\n  foreach ($arr as $key => $value) {\n  \
    \  $arr_letter = str_split($value);\n    sort($arr_letter);\n    $new_arr[] =\
    \ implode($arr_letter);\n  }\n  return implode($new_arr);\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddmv9z_d.php:30\n\
    Stack trace:\n#0 /tmp/tmpddmv9z_d.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpddmv9z_d.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = implode('',\
    \ str_split($value));\n        $s[$key] = join('', array_unique(str_split($s[$key])));\n\
    \        asort($s[$key]);\n        $s[$key] = implode('', $s[$key]);\n    }\n\
    \    return implode(' ', $s);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: asort() expects parameter 1 to be array, string given in /tmp/tmplhc65f0z.php\
    \ on line 16\n\nWarning: implode(): Invalid arguments passed in /tmp/tmplhc65f0z.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhc65f0z.php:27\n\
    Stack trace:\n#0 /tmp/tmplhc65f0z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplhc65f0z.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // Your\
    \ code here\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3_5ysnt.php:19\n\
    Stack trace:\n#0 /tmp/tmph3_5ysnt.php(28): test()\n#1 {main}\n  thrown in /tmp/tmph3_5ysnt.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $sarr\
    \ = explode(' ', $s);\n    $tarr = array();\n    foreach ($sarr as $w) {\n   \
    \     $tarr[] = str_split($w);\n        sort($tarr[count($tarr) - 1]);\n     \
    \   $tarr[count($tarr) - 1] = implode('', $tarr[count($tarr) - 1]);\n    }\n \
    \   return implode(' ', $tarr);\n}\necho anti_shuffle('Hello World!!!');\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $array\
    \ = explode(\" \", $s);\n    foreach ($array as $key => $value) {\n        $array[$key]\
    \ = str_split($value);\n        sort($array[$key]);\n        $array[$key] = implode(\"\
    \", $array[$key]);\n    }\n    return implode(\" \", $array);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // Your\
    \ Code goes here\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbp_u8c20.php:19\n\
    Stack trace:\n#0 /tmp/tmpbp_u8c20.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbp_u8c20.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // use\
    \ array_map to iterate through each word in the string\n    $arr = array_map(function($word)\
    \ {\n        // Sort each word in the string and return it\n        $sortword\
    \ = str_split($word);\n        sort($sortword);\n        return implode($sortword);\n\
    \    }, explode(' ', $s));\n    // Finally, implode and return the new string\n\
    \    return implode(' ', $arr);\n}\necho anti_shuffle('Hi') . \"\\n\";\necho anti_shuffle('hello')\
    \ . \"\\n\";\necho anti_shuffle('Hello World!!!') . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  foreach ($words as $key => $word) {\n    $words[$key] =\
    \ str_split($word);\n    sort($words[$key]);\n    $words[$key] = implode('', $words[$key]);\n\
    \  }\n  return implode(' ', $words);\n}\n\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpupklp62p.php:20\n\
    Stack trace:\n#0 /tmp/tmpupklp62p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpupklp62p.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = trim($s);\n\
    \    $arr_s = explode(' ', $s);\n    foreach ($arr_s as $key => $value) {\n  \
    \      $arr_s[$key] = get_sorted_char($value);\n    }\n    return implode(' ',\
    \ $arr_s);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_sorted_char()\
    \ in /tmp/tmpetjwvqt9.php:15\nStack trace:\n#0 /tmp/tmpetjwvqt9.php(21): anti_shuffle('Hi')\n\
    #1 /tmp/tmpetjwvqt9.php(25): candidate('Hi')\n#2 /tmp/tmpetjwvqt9.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpetjwvqt9.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $str =\
    \ '';\n    foreach (explode(' ', $s) as $word) {\n        $str .= implode('',\
    \ str_split($word)) . ' ';\n    }\n    return trim($str);\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp01kej2_1.php:24\n\
    Stack trace:\n#0 /tmp/tmp01kej2_1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp01kej2_1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $strings\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($strings as $string) {\n\
    \        $splitted_string = str_split($string);\n        sort($splitted_string);\n\
    \        $result .= implode('', $splitted_string) . ' ';\n    }\n    return trim($result);\n\
    }\necho anti_shuffle('Hi');\necho anti_shuffle('hello');\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: HiehlloHello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $output = [];\n  foreach ($words as $w) {\n    $chars =\
    \ str_split($w);\n    sort($chars);\n    $output[] = implode('', $chars);\n  }\n\
    \  return implode(' ', $output);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $result\
    \ = array();\n  $words = explode(' ', $s);\n  foreach ($words as $word) {\n  \
    \  $newWord = anti_shuffle_word($word);\n    array_push($result, $newWord);\n\
    \  }\n  return implode(' ', $result);\n}\n\nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp4y_jmy3e.php:15\nStack trace:\n#0 /tmp/tmp4y_jmy3e.php(22): anti_shuffle('Hi')\n\
    #1 /tmp/tmp4y_jmy3e.php(26): candidate('Hi')\n#2 /tmp/tmp4y_jmy3e.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4y_jmy3e.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $str_arr\
    \ = explode(' ', $s);\n    foreach ($str_arr as $i => $word) {\n        $str_arr[$i]\
    \ = str_split($word);\n        sort($str_arr[$i]);\n        $str_arr[$i] = implode('',\
    \ $str_arr[$i]);\n    }\n    return implode(' ', $str_arr);\n}\necho anti_shuffle('Hi');\n\
    echo anti_shuffle('hello');\necho anti_shuffle('Hello World!!!');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: HiehlloHello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = '';\n  foreach ($words as $w) {\n    $result\
    \ .= implode('', explode(' ', $w));\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7bcg9k5.php:26\n\
    Stack trace:\n#0 /tmp/tmpq7bcg9k5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq7bcg9k5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    $result = '';\n    foreach ($s as $word) {\n        $word = str_split($word);\n\
    \        sort($word);\n        $result .= implode('', $word) . ' ';\n    }\n \
    \   return trim($result);\n}\n\necho anti_shuffle('Hello World!!!');\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $str = explode(\"\
    \ \", $s);\n  $str_new = [];\n  foreach ($str as $key => $value) {\n    $str_new[$key]\
    \ = str_split($value);\n    sort($str_new[$key]);\n    $str_new[$key] = implode(\"\
    \", $str_new[$key]);\n  }\n  return implode(\" \", $str_new);\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t//split\
    \ the string into an array of words\n\t$s = explode(\" \", $s);\n\t$new_s = array();\n\
    \t\n\t//for each word in the array, set all letters to lowercase, then sort them,\
    \ then rejoin them\n\tforeach ($s as $word) {\n\t\t$w = str_split($word);\n\t\t\
    sort($w);\n\t\t$new_s[] = implode(\"\", $w);\n\t}\n\t\n\t//re-join new word array\n\
    \t$new_s = implode(\" \", $new_s);\n\t\n\treturn $new_s;\n}\n\necho anti_shuffle('Hi')\
    \ . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello\
    \ World!!!') . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $a = explode('\
    \ ', $s);\n  $b = [];\n  foreach ($a as $i) {\n    $b[] = implode('', sort_string($i));\n\
    \  }\n  return implode(' ', $b);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_string()\
    \ in /tmp/tmp_o_fl3rx.php:15\nStack trace:\n#0 /tmp/tmp_o_fl3rx.php(21): anti_shuffle('Hi')\n\
    #1 /tmp/tmp_o_fl3rx.php(25): candidate('Hi')\n#2 /tmp/tmp_o_fl3rx.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_o_fl3rx.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  foreach ($words as $k => $word) {\n    $words[$k] = str_split($word);\n\
    \    sort($words[$k]);\n    $words[$k] = implode('', $words[$k]);\n  }\n  return\
    \ implode(' ', $words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $a = explode('\
    \ ', $s);\n  $r = array();\n  foreach ($a as $v) {\n    $r[] = anti_shuffle_word($v);\n\
    \  }\n  return implode(' ', $r);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpbepij02o.php:15\nStack trace:\n#0 /tmp/tmpbepij02o.php(21): anti_shuffle('Hi')\n\
    #1 /tmp/tmpbepij02o.php(25): candidate('Hi')\n#2 /tmp/tmpbepij02o.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbepij02o.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$array =\
    \ explode(\" \", $s);\n\tfor ($i = 0; $i < count($array); $i++) {\n\t\t$tempArray\
    \ = str_split($array[$i]);\n\t\tsort($tempArray);\n\t\t$array[$i] = implode(\"\
    \", $tempArray);\n\t}\n\treturn implode(\" \", $array);\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n}\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmtrgmxh8.php:18\n\
    Stack trace:\n#0 /tmp/tmpmtrgmxh8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmtrgmxh8.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxf824i_e.php:20\n\
    Stack trace:\n#0 /tmp/tmpxf824i_e.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxf824i_e.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $result\
    \ = '';\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n   \
    \     $letters = str_split($word);\n        sort($letters);\n        $result .=\
    \ implode('', $letters) . ' ';\n    }\n    return rtrim($result);\n}\necho anti_shuffle('Hi')\
    \ . \"\\n\";\necho anti_shuffle('hello') . \"\\n\";\necho anti_shuffle('Hello\
    \ World!!!') . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    // your\
    \ code here\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6uwwi3y8.php:19\n\
    Stack trace:\n#0 /tmp/tmp6uwwi3y8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6uwwi3y8.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $key => $word) {\n        $s[$key] = str_split($word);\n\
    \        sort($s[$key]);\n        $s[$key] = implode('', $s[$key]);\n    }\n \
    \   return implode(' ', $s);\n}\necho anti_shuffle('Hello World!!!');\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  for ($i = 0; $i < count($arr); $i++) {\n    $arr[$i] = sort_chars($arr[$i]);\n\
    \  }\n  return implode(' ', $arr);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_chars()\
    \ in /tmp/tmp7qghn4u3.php:14\nStack trace:\n#0 /tmp/tmp7qghn4u3.php(20): anti_shuffle('Hi')\n\
    #1 /tmp/tmp7qghn4u3.php(24): candidate('Hi')\n#2 /tmp/tmp7qghn4u3.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7qghn4u3.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $a = explode('\
    \ ', $s);\n    foreach ($a as $w) {\n        $b = str_split($w);\n        sort($b);\n\
    \        $c[] = implode('', $b);\n    }\n    return implode(' ', $c);\n}\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $key => $word) {\n        $words[$key]\
    \ = str_split($word);\n        sort($words[$key]);\n        $words[$key] = implode('',\
    \ $words[$key]);\n    }\n    return implode(' ', $words);\n}\n\n$tests = ['Hi',\
    \ 'hello', 'Hello World!!!'];\nforeach ($tests as $test) {\n    $res = anti_shuffle($test);\n\
    \    echo \"Test: $test, result: $res\\n\";\n}\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Test: Hi, result: Hi\nTest: hello, result: ehllo\nTest: Hello World!!!,\
    \ result: Hello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $i => $w) {\n        $words[$i]\
    \ = str_split($w);\n        sort($words[$i]);\n        $words[$i] = implode('',\
    \ $words[$i]);\n    }\n    return implode(' ', $words);\n}\n$str = 'hey what is\
    \ your name';\necho $str;\necho '<br>';\necho anti_shuffle($str);\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: hey what is your name<br>ehy ahtw is oruy aemn
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$array =\
    \ explode(\" \", $s);\n\t$new_array = [];\n\tforeach ($array as $word) {\n\t\t\
    $chars = str_split($word);\n\t\tsort($chars);\n\t\t$sorted_word = implode(\"\"\
    , $chars);\n\t\tarray_push($new_array, $sorted_word);\n\t}\n\t$new_s = implode(\"\
    \ \", $new_array);\n\treturn $new_s;\n}\n\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $key => $word) {\n        $words[$key]\
    \ = anti_shuffle_word($word);\n    }\n    return implode(' ', $words);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpsvof5x03.php:14\nStack trace:\n#0 /tmp/tmpsvof5x03.php(20): anti_shuffle('Hi')\n\
    #1 /tmp/tmpsvof5x03.php(24): candidate('Hi')\n#2 /tmp/tmpsvof5x03.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsvof5x03.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode('\
    \ ', $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpbb8xxdgx.php:15\nStack trace:\n#0 /tmp/tmpbb8xxdgx.php(21): anti_shuffle('Hi')\n\
    #1 /tmp/tmpbb8xxdgx.php(25): candidate('Hi')\n#2 /tmp/tmpbb8xxdgx.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbb8xxdgx.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = '';\n    foreach ($words as $word) {\n  \
    \      $result .= implode(str_split($word)) . ' ';\n    }\n    return trim($result);\n\
    }\necho anti_shuffle('Hi'), PHP_EOL;\necho anti_shuffle('hello'), PHP_EOL;\necho\
    \ anti_shuffle('Hello World!!!'), PHP_EOL;\nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nhello\nHello World!!!\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpiqocw3kf.php:28\nStack trace:\n#0 /tmp/tmpiqocw3kf.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmpiqocw3kf.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ str_split($s);\n    $a = array();\n    $i = 0;\n    while ($i < count($arr))\
    \ {\n        $tmp = '';\n        while (!ctype_space($arr[$i])) {\n          \
    \  $tmp .= $arr[$i];\n            $i++;\n        }\n        $a[] = $tmp;\n   \
    \     $i++;\n    }\n    $ret = array();\n    foreach ($a as $i) {\n        $ret[]\
    \ = str_split($i);\n    }\n    sort($ret);\n    foreach ($ret as $i) {\n     \
    \   sort($i);\n    }\n    $ret2 = array();\n    foreach ($ret as $i) {\n     \
    \   $ret2[] = implode('', $i);\n    }\n    return implode(' ', $ret2);\n}\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $temp\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($temp as $value) {\n\
    \        $tempWord = str_split($value);\n        sort($tempWord);\n        $result\
    \ .= implode($tempWord);\n        $result .= \" \";\n    }\n    return rtrim($result);\n\
    }\necho anti_shuffle('Hi');\necho \"\\n\";\necho anti_shuffle('hello');\necho\
    \ \"\\n\";\necho anti_shuffle('Hello World!!!');\necho \"\\n\";\necho anti_shuffle('supper');\n\
    echo \"\\n\";\necho anti_shuffle('hi how are you?');\necho \"\\n\";\necho anti_shuffle('hi\
    \ how are you');\necho \"\\n\";\necho anti_shuffle('hi how are you2');\necho \"\
    \\n\";\necho anti_shuffle('hi how are you?');\necho \"\\n\";\necho anti_shuffle('hi\
    \ how are you32');\necho \"\\n\";\necho anti_shuffle('hi how are you3');\necho\
    \ \"\\n\";\necho anti_shuffle('hi how are you2');\necho \"\\n\";\necho anti_shuffle('hi\
    \ how are you!');\necho \"\\n\";\necho anti_shuffle('hello2');\necho \"\\n\";\n\
    echo anti_shuffle('hello5');\necho \"\\n\";\necho anti_shuffle('hello1');\necho\
    \ \"\\n\";\necho anti_shuffle('hello3');\necho \"\\n\";\necho anti_shuffle('hello4');\n\
    echo \"\\n\";\necho anti_shuffle('hello');\necho \"\\n\";\necho anti_shuffle('hello!');\n\
    echo \"\\n\";\necho anti_shuffle('hello2!');\necho \"\\n\";\necho anti_shuffle('hello2');\n\
    echo \"\\n\";\necho anti_shuffle('hello4');\necho \"\\n\";\necho anti_shuffle('hello1');\n\
    echo \"\\n\";\necho anti_shuffle('hello3');\necho \"\\n\";\necho anti_shuffle('hello5');\n\
    echo \"\\n\";\necho anti_shuffle('hello!');\necho \"\\n\";\necho anti_shuffle('hello');\n\
    echo \"\\n\";\necho anti\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_aikc41q.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $arr = explode('\
    \ ', $s);\n  $newarr = [];\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ == ' '){\n      $newarr[] = $value;\n    } else {\n      $newarr[] = orderWord($value);\n\
    \    }\n  }\n  return implode('', $newarr);\n}\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function orderWord() in\
    \ /tmp/tmp9tvjdh_p.php:18\nStack trace:\n#0 /tmp/tmp9tvjdh_p.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp9tvjdh_p.php(28): candidate('Hi')\n#2 /tmp/tmp9tvjdh_p.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9tvjdh_p.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ preg_split('/\\s+/', $s);\n    for ($i = 0; $i < count($arr); $i++) {\n    \
    \    $arr[$i] = implode(str_split($arr[$i]));\n        sort($arr[$i]);\n     \
    \   $arr[$i] = implode($arr[$i]);\n    }\n    return implode(' ', $arr);\n}\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpe768mak2.php\
    \ on line 15\n\nWarning: implode(): Argument must be an array in /tmp/tmpe768mak2.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe768mak2.php:25\n\
    Stack trace:\n#0 /tmp/tmpe768mak2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpe768mak2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$s = explode('\
    \ ', $s);\n\t$new_s = [];\n\tforeach ($s as $word) {\n\t\t$new_s[] = implode('',\
    \ str_split($word, 1));\n\t}\n\tsort($new_s);\n\t$res = implode(' ', $new_s);\n\
    \treturn $res;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb14dy48n.php:28\n\
    Stack trace:\n#0 /tmp/tmpb14dy48n.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpb14dy48n.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $res =\
    \ \"\";\n    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n \
    \       $letters = str_split($word);\n        sort($letters);\n        $res .=\
    \ implode($letters);\n        $res .= \" \";\n    }\n    return rtrim($res);\n\
    }\nprint_r(anti_shuffle('Hello World!!!'));\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = preg_split('/[^a-zA-Z]/',\
    \ $s);\n    $s = array_map(function($word) {\n        $word_array = str_split($word);\n\
    \        sort($word_array);\n        return implode('', $word_array);\n    },\
    \ $s);\n    return implode('', $s);\n}\n\necho anti_shuffle('Hi');\necho \"\\\
    n\";\necho anti_shuffle('hello');\necho \"\\n\";\necho anti_shuffle('Hello World!!!');\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHelloWdlor\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpw701dama.php:36\nStack trace:\n#0 /tmp/tmpw701dama.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpw701dama.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $key => $value) {\n        $words[$key]\
    \ = anti_shuffle_word($value);\n    }\n    return implode(' ', $words);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpbg8c_fqy.php:14\nStack trace:\n#0 /tmp/tmpbg8c_fqy.php(20): anti_shuffle('Hi')\n\
    #1 /tmp/tmpbg8c_fqy.php(24): candidate('Hi')\n#2 /tmp/tmpbg8c_fqy.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbg8c_fqy.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $index => $word) {\n        $characters\
    \ = str_split($word);\n        sort($characters);\n        $words[$index] = implode('',\
    \ $characters);\n    }\n    return implode(' ', $words);\n}\n\necho anti_shuffle('Hello\
    \ World!!!');\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $a = explode('\
    \ ', $s);\n  foreach ($a as $k => $v) {\n    $a[$k] = implode(str_split($v));\n\
    \  }\n  return implode(' ', $a);\n}\necho anti_shuffle('Hello World!!!');\necho\
    \ anti_shuffle('hello');\necho anti_shuffle('Hi');\necho anti_shuffle('Hi Hi Hi');\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hello World!!!helloHiHi Hi Hi\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp8kz5ppib.php:28\nStack trace:\n#0 /tmp/tmp8kz5ppib.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmp8kz5ppib.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $result = '';\n  foreach ($words as $word) {\n    $result\
    \ .= implode('', str_split($word, 1)) . ' ';\n  }\n  return $result;\n}\n\necho\
    \ anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\necho anti_shuffle('Hello\
    \ World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi \nhello \nHello World!!! \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpu_o6u0bu.php:28\nStack trace:\n#0 /tmp/tmpu_o6u0bu.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmpu_o6u0bu.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $s = str_split($s);\n\
    \  $lastWasSpace = true;\n  $words = '';\n  $word = '';\n  foreach ($s as $letter)\
    \ {\n    if ($letter == ' ') {\n      $lastWasSpace = true;\n      $words .= '\
    \ ' . shuffleWord($word);\n      $word = '';\n    } else {\n      $lastWasSpace\
    \ = false;\n      $word .= $letter;\n    }\n  }\n  if (!$lastWasSpace) {\n   \
    \ $words .= shuffleWord($word);\n  }\n  return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function shuffleWord()\
    \ in /tmp/tmps9kqo4dw.php:27\nStack trace:\n#0 /tmp/tmps9kqo4dw.php(33): anti_shuffle(Array)\n\
    #1 /tmp/tmps9kqo4dw.php(37): candidate('Hi')\n#2 /tmp/tmps9kqo4dw.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmps9kqo4dw.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $string\
    \ = explode(\" \", $s);\n  foreach ($string as $key => $value) {\n    $string[$key]\
    \ = str_split($value);\n    sort($string[$key]);\n    $string[$key] = implode(\"\
    \", $string[$key]);\n  }\n  return implode(\" \", $string);\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      array_push($result, custom_sort($word));\n    }\n    return implode(' ',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function custom_sort()\
    \ in /tmp/tmpjtxw7f5t.php:15\nStack trace:\n#0 /tmp/tmpjtxw7f5t.php(21): anti_shuffle('Hi')\n\
    #1 /tmp/tmpjtxw7f5t.php(25): candidate('Hi')\n#2 /tmp/tmpjtxw7f5t.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjtxw7f5t.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$s = str_split($s);\n\
    \t$result = [];\n\tforeach ($s as $key => $value) {\n\t\tif ($value == ' ') {\n\
    \t\t\t$result[] = $value;\n\t\t} else {\n\t\t\tif (!isset($result[$key-1]) ||\
    \ $result[$key-1] == ' ') {\n\t\t\t\t$result[] = $value;\n\t\t\t} else {\n\t\t\
    \t\t$i = count($result) - 1;\n\t\t\t\twhile (strcmp($result[$i], $value) >= 0)\
    \ {\n\t\t\t\t\t$result[$i+1] = $result[$i];\n\t\t\t\t\t$i--;\n\t\t\t\t}\n\t\t\t\
    \t$result[$i+1] = $value;\n\t\t\t}\n\t\t}\n\t}\n\treturn implode('', $result);\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $exp =\
    \ explode(' ', $s);\n    $d = \"\";\n    for ($i = 0; $i < count($exp); $i++)\
    \ {\n        $d .= str_replace(' ', '', $exp[$i]);\n    }\n    $expd = str_split($d);\n\
    \    sort($expd);\n    $anti = implode($expd);\n    $s = str_replace(' ', '',\
    \ $s);\n    $new = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if\
    \ ($s[$i] == ' ') {\n            $new .= ' ';\n        } else {\n            $new\
    \ .= $anti[0];\n            $anti = substr($anti, 1);\n        }\n    }\n    return\
    \ $new;\n}\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbc4cj82v.php:41\n\
    Stack trace:\n#0 /tmp/tmpbc4cj82v.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpbc4cj82v.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $order =\
    \ '';\n  $arr = explode(' ', $s);\n  foreach ($arr as $val) {\n    $order .= implode(str_split($val))\
    \ . ' ';\n  }\n  return $order;\n}\necho anti_shuffle('Hello World!!!');\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgk9x06x.php:25\n\
    Stack trace:\n#0 /tmp/tmpbgk9x06x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbgk9x06x.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $array =\
    \ explode(\" \", $s);\n  for ($i = 0; $i < count($array); $i++) {\n    $array[$i]\
    \ = sort_chars($array[$i]);\n  }\n  return implode(\" \", $array);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_chars()\
    \ in /tmp/tmpi4vd14jo.php:14\nStack trace:\n#0 /tmp/tmpi4vd14jo.php(20): anti_shuffle('Hi')\n\
    #1 /tmp/tmpi4vd14jo.php(24): candidate('Hi')\n#2 /tmp/tmpi4vd14jo.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpi4vd14jo.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $newStr = '';\n  foreach ($words as $word) {\n    $newStr\
    \ .= str_split($word);\n    sort($newStr);\n    $newStr .= ' ';\n  }\n  return\
    \ $newStr;\n}\n\n$s = 'hi';\necho anti_shuffle($s);\necho '<br>';\n\n$s = 'hello';\n\
    echo anti_shuffle($s);\necho '<br>';\n\n$s = 'Hello World!!!';\necho anti_shuffle($s);\n\
    echo '<br>';\n\n$s = 'The quick brown fox jumps over the lazy dog.';\necho anti_shuffle($s);\n\
    echo '<br>';\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmprdk00jk4.php\
    \ on line 16\nArray <br>\nWarning: sort() expects parameter 1 to be array, string\
    \ given in /tmp/tmprdk00jk4.php on line 16\nArray <br>\nWarning: sort() expects\
    \ parameter 1 to be array, string given in /tmp/tmprdk00jk4.php on line 16\n\n\
    Warning: sort() expects parameter 1 to be array, string given in /tmp/tmprdk00jk4.php\
    \ on line 16\nArray Array <br>\nWarning: sort() expects parameter 1 to be array,\
    \ string given in /tmp/tmprdk00jk4.php on line 16\n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmprdk00jk4.php on line 16\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmprdk00jk4.php on line\
    \ 16\n\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmprdk00jk4.php\
    \ on line 16\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmprdk00jk4.php on line 16\n\nWarning: sort() expects parameter 1 to\
    \ be array, string given in /tmp/tmprdk00jk4.php on line 16\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmprdk00jk4.php on line\
    \ 16\n\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmprdk00jk4.php\
    \ on line 16\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmprdk00jk4.php on line 16\nArray Array Array Array Array Array Array\
    \ Array Array <br>\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmprdk00jk4.php on line 16\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmprdk00jk4.php:42\nStack trace:\n#0 /tmp/tmprdk00jk4.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprdk00jk4.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $newStr\
    \ = '';\n    $s = explode(' ', $s);\n    for ($i = 0; $i < count($s); $i++) {\n\
    \        $letters = str_split($s[$i]);\n        sort($letters);\n        foreach\
    \ ($letters as $letter) {\n            $newStr .= $letter;\n        }\n      \
    \  $newStr .= ' ';\n    }\n    return $newStr;\n}\necho anti_shuffle('Hello World!!!');\n\
    echo '<br>';\necho anti_shuffle('Hi');\necho '<br>';\necho anti_shuffle('hello');\n\
    echo '<br>';\necho anti_shuffle('Anti Shuffle');\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Hello !!!Wdlor <br>Hi <br>ehllo <br>Aint Seffhlu \nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0psp8pxt.php:36\nStack trace:\n#0 /tmp/tmp0psp8pxt.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0psp8pxt.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $r = array();\n\
    \    foreach (explode(' ', $s) as $w) {\n        $r[] = sort_chars($w);\n    }\n\
    \    return implode(' ', $r);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_chars()\
    \ in /tmp/tmp6svkz0d3.php:14\nStack trace:\n#0 /tmp/tmp6svkz0d3.php(20): anti_shuffle('Hi')\n\
    #1 /tmp/tmp6svkz0d3.php(24): candidate('Hi')\n#2 /tmp/tmp6svkz0d3.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6svkz0d3.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $split =\
    \ explode(\" \", $s);\n  foreach ($split as $key => $word) {\n    $split[$key]\
    \ = getSortedWord($word);\n  }\n  return implode(\" \", $split);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getSortedWord()\
    \ in /tmp/tmpn9ybh5q6.php:14\nStack trace:\n#0 /tmp/tmpn9ybh5q6.php(20): anti_shuffle('Hi')\n\
    #1 /tmp/tmpn9ybh5q6.php(24): candidate('Hi')\n#2 /tmp/tmpn9ybh5q6.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn9ybh5q6.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$words=explode(\"\
    \ \",$s);\n\t$ret=\"\";\n\tforeach($words as $w) {\n\t\t$ret.=preg_replace_callback('/\\\
    w/', function($m) {\n\t\t\t\tglobal $w;\n\t\t\t\t$l=strlen($w);\n\t\t\t\t$i=strpos($w,$m[0]);\n\
    \t\t\t\tif ($i===false) return \"\";\n\t\t\t\t$i=$l-$i-1;\n\t\t\t\t$m=chr(ord('z')-$i);\n\
    \t\t\t\treturn $m;\n\t\t\t}, $w).\" \";\n\t}\n\treturn $ret;\n}\nprint anti_shuffle('Hello\
    \ World!!!').\"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: " !!! \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw0wk2qy.php:33\n\
    Stack trace:\n#0 /tmp/tmprw0wk2qy.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprw0wk2qy.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    return\
    \ implode(' ', array_map(function($x) {\n        $w = str_split($x);\n       \
    \ sort($w);\n        return implode('', $w);\n    }, explode(' ', $s)));\n}\n\
    echo anti_shuffle('Hi') . PHP_EOL;\necho anti_shuffle('hello') . PHP_EOL;\necho\
    \ anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hi\nehllo\nHello !!!Wdlor\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // write\
    \ your code here\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpize8br59.php:20\n\
    Stack trace:\n#0 /tmp/tmpize8br59.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpize8br59.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // Create\
    \ an array of words $words = array_filter(explode(' ', $s));\n  $words = array_filter(explode('\
    \ ', $s));\n  $sorted = [];\n  // Loop through the words, str_split and sort\n\
    \  foreach ($words as $word) {\n    $sorted[] = implode('', str_split($word));\n\
    \  }\n  // Sort the words\n  sort($sorted);\n  // Implode the sorted words\n \
    \ return implode(' ', $sorted);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhu8629s.php:31\n\
    Stack trace:\n#0 /tmp/tmplhu8629s.php(39): test()\n#1 {main}\n  thrown in /tmp/tmplhu8629s.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // Code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbfpq7ya9.php:20\n\
    Stack trace:\n#0 /tmp/tmpbfpq7ya9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbfpq7ya9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\n}\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr7owag09.php:19\n\
    Stack trace:\n#0 /tmp/tmpr7owag09.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpr7owag09.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $a = explode('\
    \ ', $s);\n    foreach ($a as $k => $word) {\n        $a[$k] = string_shuffle($word);\n\
    \    }\n    return implode(' ', $a);\n}\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function string_shuffle()\
    \ in /tmp/tmpjizjozr3.php:14\nStack trace:\n#0 /tmp/tmpjizjozr3.php(19): anti_shuffle('Hi')\n\
    #1 /tmp/tmpjizjozr3.php(23): candidate('Hi')\n#2 /tmp/tmpjizjozr3.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjizjozr3.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ preg_split('/\\s+/', $s);\n  $result = [];\n  foreach ($words as $word) {\n\
    \    $sorted_word = '';\n    $chars = str_split($word);\n    asort($chars);\n\
    \    foreach ($chars as $char) {\n      $sorted_word .= $char;\n    }\n    $result[]\
    \ = $sorted_word;\n  }\n  return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $newStr\
    \ = \"\";\n  $arr = explode(\" \", $s);\n  foreach ($arr as $key => $val) {\n\
    \    $arr[$key] = str_split($val);\n    sort($arr[$key]);\n    $arr[$key] = implode(\"\
    \", $arr[$key]);\n  }\n  return implode(\" \", $arr);\n}\n\necho anti_shuffle('Hello\
    \ World!!!') . \"<br>\"; // Hello !!!Wdlor\necho anti_shuffle('Hi') . \"<br>\"\
    ; // Hi\necho anti_shuffle('hello') . \"<br>\"; // ehllo\necho anti_shuffle('O:)')\
    \ . \"<br>\"; // O:)\necho anti_shuffle('I wonder what the order should be here')\
    \ . \"<br>\"; // bdIehh Iehoorrt ee ehh hlnotu uw\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: Hello !!!Wdlor<br>Hi<br>ehllo<br>):O<br>I denorw ahtw eht deorr dhlosu be
    eehr<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $chars\
    \ = str_split($s);\n    $words = explode(' ', $s);\n    foreach ($words as $key\
    \ => $word) {\n        sort($words[$key]);\n    }\n    $index = 0;\n    foreach\
    \ ($words as $word) {\n        array_splice($chars, $index, strlen($word), $word);\n\
    \        $index += strlen($word) + 1;\n    }\n    return implode('', $chars);\n\
    }\n$a = 'Hello World!!!';\n$b = anti_shuffle($a);\necho 'Input: ' . $a . '<br>';\n\
    echo 'Output: ' . $b;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpafb54anu.php\
    \ on line 15\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpafb54anu.php on line 15\nInput: Hello World!!!<br>Output: Hello WorlWorld!!!\n\
    Warning: sort() expects parameter 1 to be array, string given in /tmp/tmpafb54anu.php\
    \ on line 15\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpafb54anu.php on line 15\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpafb54anu.php:34\nStack trace:\n#0 /tmp/tmpafb54anu.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpafb54anu.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $arr =\
    \ explode(' ', $s);\n    for ($i = 0; $i < count($arr); $i++) {\n        $arr[$i]\
    \ = anti_shuffle_word($arr[$i]);\n    }\n    return implode(' ', $arr);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpaq_42yxo.php:14\nStack trace:\n#0 /tmp/tmpaq_42yxo.php(20): anti_shuffle('Hi')\n\
    #1 /tmp/tmpaq_42yxo.php(24): candidate('Hi')\n#2 /tmp/tmpaq_42yxo.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpaq_42yxo.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $temp\
    \ = [];\n    $s = explode(' ', $s);\n    foreach ($s as $value) {\n        $chars\
    \ = str_split($value);\n        sort($chars);\n        $temp[] = implode('', $chars);\n\
    \    }\n    return implode(' ', $temp);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  return implode('\
    \ ', array_map(function($x) { return implode('', str_split($x)); }, array_map(function($x)\
    \ { return implode('', str_split($x)); }, explode(' ', $s))));\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlzqkqkd.php:20\n\
    Stack trace:\n#0 /tmp/tmpnlzqkqkd.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpnlzqkqkd.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\n}\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9tpvu74.php:19\n\
    Stack trace:\n#0 /tmp/tmpn9tpvu74.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpn9tpvu74.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $sentence\
    \ = explode(\" \", $s);\n  foreach ($sentence as $key => $value) {\n    $letters\
    \ = str_split($value);\n    $letters = array_map(\"ascii\", $letters);\n    array_multisort($letters,\
    \ $sentence[$key]);\n  }\n  return implode(\" \", $sentence);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_map() expects parameter 1 to be a valid callback, function\
    \ 'ascii' not found or invalid function name in /tmp/tmp8913x38z.php on line 15\n\
    \nWarning: array_multisort(): Argument #1 is expected to be an array or a sort\
    \ flag in /tmp/tmp8913x38z.php on line 16\n\nWarning: array_map() expects parameter\
    \ 1 to be a valid callback, function 'ascii' not found or invalid function name\
    \ in /tmp/tmp8913x38z.php on line 15\n\nWarning: array_multisort(): Argument #1\
    \ is expected to be an array or a sort flag in /tmp/tmp8913x38z.php on line 16\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8913x38z.php:27\nStack\
    \ trace:\n#0 /tmp/tmp8913x38z.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8913x38z.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $key => $value) {\n        $words[$key]\
    \ = str_split($value);\n        sort($words[$key]);\n        $words[$key] = implode('',\
    \ $words[$key]);\n    }\n    return implode(' ', $words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $sentence\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($sentence as $word) {\n\
    \        $letters = [];\n        for ($i = 0; $i < strlen($word); $i++) {\n  \
    \          $letters[] = ord($word[$i]);\n        }\n        sort($letters);\n\
    \        $result[] = implode('', array_map('chr', $letters));\n    }\n    return\
    \ implode(' ', $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n}\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ucc_p74.php:18\n\
    Stack trace:\n#0 /tmp/tmp8ucc_p74.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp8ucc_p74.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $matches\
    \ = explode(' ', $s);\n    $res = '';\n    foreach ($matches as $v) {\n      \
    \  $res .= implode('', str_split($v)) . ' ';\n    }\n    return $res;\n}\necho\
    \ anti_shuffle('Hello World!!!') . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Hello World!!! \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0n4j95sb.php:25\n\
    Stack trace:\n#0 /tmp/tmp0n4j95sb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0n4j95sb.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n    $s = explode('\
    \ ', $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = anti_shuffle_word($value);\n\
    \    }\n    return implode(' ', $s);\n}\n\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpje4oyt3a.php:14\nStack trace:\n#0 /tmp/tmpje4oyt3a.php(20): anti_shuffle(Array)\n\
    #1 /tmp/tmpje4oyt3a.php(24): candidate('Hi')\n#2 /tmp/tmpje4oyt3a.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpje4oyt3a.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  $words =\
    \ explode(' ', $s);\n  $mapped = array_map(function($word) {\n    $charArray =\
    \ str_split($word);\n    asort($charArray);\n    return implode('', $charArray);\n\
    \  }, $words);\n  return implode(' ', $mapped);\n}\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n  // Write\
    \ your code here\n  $arr = explode(\" \", $s);\n  foreach ($arr as $key => $value)\
    \ {\n    $arr[$key] = sortWord($value);\n  }\n  return implode(\" \", $arr);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sortWord() in\
    \ /tmp/tmp6uufn68b.php:15\nStack trace:\n#0 /tmp/tmp6uufn68b.php(21): anti_shuffle('Hi')\n\
    #1 /tmp/tmp6uufn68b.php(25): candidate('Hi')\n#2 /tmp/tmp6uufn68b.php(34): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6uufn68b.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$array =\
    \ explode(\" \", $s);\n\t$return = \"\";\n\tforeach ($array as $key => $value)\
    \ {\n\t\t$return .= anti_shuffle2($value).\" \";\n\t}\n\treturn $return;\n}\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle2()\
    \ in /tmp/tmp6mo0ne0n.php:15\nStack trace:\n#0 /tmp/tmp6mo0ne0n.php(20): anti_shuffle('Hi')\n\
    #1 /tmp/tmp6mo0ne0n.php(24): candidate('Hi')\n#2 /tmp/tmp6mo0ne0n.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6mo0ne0n.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle($s) {\n\t$s = str_split($s);\n\
    \t$prev_blank = false;\n\t$i = 0;\n\t$j = 0;\n\t$arr = array();\n\t$results =\
    \ '';\n\twhile ($i < count($s)) {\n\t\tif ($s[$i] == ' ') {\n\t\t\t$prev_blank\
    \ = true;\n\t\t\tif ($j > 0) {\n\t\t\t\tsort($arr);\n\t\t\t\t$results .= implode($arr);\n\
    \t\t\t\t$arr = array();\n\t\t\t\t$j = 0;\n\t\t\t}\n\t\t\t$results .= ' ';\n\t\t\
    } else {\n\t\t\tif ($prev_blank) {\n\t\t\t\t$prev_blank = false;\n\t\t\t}\n\t\t\
    \t$arr[$j] = $s[$i];\n\t\t\t$j++;\n\t\t}\n\t\t$i++;\n\t}\n\tif ($j > 0) {\n\t\t\
    sort($arr);\n\t\t$results .= implode($arr);\n\t}\n\treturn $results;\n}\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
