name: HumanEval_46_fib4
language: php
results:
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $f4s = [0, 0, 2, 0];\n \
    \   for ($i = 4; $i <= $n; $i++) {\n        $f4s[$i%4] = $f4s[($i-1)%4] + $f4s[($i-2)%4]\
    \ + $f4s[($i-3)%4] + $f4s[($i-4)%4];\n    }\n    return $f4s[$n%4];\n}\n\necho\
    \ fib4(10);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: '104'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    if ($n < count($fib4)) {\n        return $fib4[$n];\n    }\n    $fib4_n1\
    \ = 0;\n    $fib4_n2 = 0;\n    $fib4_n3 = 2;\n    $fib4_n4 = 0;\n    $fib4_n =\
    \ 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_n = $fib4_n1 + $fib4_n2\
    \ + $fib4_n3 + $fib4_n4;\n        $fib4_n1 = $fib4_n2;\n        $fib4_n2 = $fib4_n3;\n\
    \        $fib4_n3 = $fib4_n4;\n        $fib4_n4 = $fib4_n;\n    }\n    return\
    \ $fib4_n;\n}\n\n$test = [5, 6, 7];\n$check = [4, 8, 14];\nfor ($i = 0; $i < count($test);\
    \ $i++) {\n    $input = $test[$i];\n    $output = fib4($input);\n    $expect =\
    \ $check[$i];\n    if ($output == $expect) {\n        echo '$input = ' . $input\
    \ . '; ' . '$output = ' . $output . '; ' . '$expect = ' . $expect . '; PASS' .\
    \ \"\\n\";\n    } else {\n        echo '$input = ' . $input . '; ' . '$output\
    \ = ' . $output . '; ' . '$expect = ' . $expect . '; FAIL' . \"\\n\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "$input = 5; $output = 4; $expect = 4; PASS\n$input = 6; $output = 8; $expect\
    \ = 8; PASS\n$input = 7; $output = 14; $expect = 14; PASS\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        throw\
    \ new Exception(\"n must be >= 0\");\n    }\n    if ($n < 3) {\n        return\
    \ $n * 2;\n    }\n    $last = 0;\n    $lastlast = 0;\n    $lastlastlast = 2;\n\
    \    $lastlastlastlast = 2;\n    for ($i = 3; $i <= $n; $i++) {\n        $temp\
    \ = $lastlastlastlast;\n        $lastlastlastlast = $lastlastlastlast + $lastlastlast\
    \ + $lastlast + $last;\n        $lastlastlast = $lastlast;\n        $lastlast\
    \ = $last;\n        $last = $temp;\n    }\n    return $lastlastlastlast;\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw41k63a8.php:41\n\
    Stack trace:\n#0 /tmp/tmpw41k63a8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpw41k63a8.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib = array(0, 0, 2, 0);\n\
    \tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib[$i%4] = $fib[($i-1)%4] + $fib[($i-2)%4]\
    \ + $fib[($i-3)%4] + $fib[($i-4)%4];\n\t}\n\treturn $fib[$n%4];\n}\nprint_r(fib4(5)\
    \ . \"\\n\");\nprint_r(fib4(6) . \"\\n\");\nprint_r(fib4(7) . \"\\n\");\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array(0, 0, 2, 0);\n\
    \    if ($n <= count($fib)) {\n        return $fib[$n];\n    }\n\n    $newfib\
    \ = fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n    $fib[] = $newfib;\n\
    \    return $newfib;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuii_672t.php:31\n\
    Stack trace:\n#0 /tmp/tmpuii_672t.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpuii_672t.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t// $result = [0, 0, 2, 0];\n\
    \t$result = [0, 0, 1, 0];\n\tif ($n < 4) return $result[$n];\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\t$result[] = $result[count($result) - 1] + $result[count($result)\
    \ - 2] + $result[count($result) - 3] + $result[count($result) - 4];\n\t}\n\treturn\
    \ $result[count($result) - 1];\n}\necho fib4(7);\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "7\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovmse1_w.php:31\n\
    Stack trace:\n#0 /tmp/tmpovmse1_w.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpovmse1_w.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // Write your code here\n\
    \  // To print results to the standard output you can use print\n  // Example:\
    \ print \"Hello world!\";\n  $memory = array();\n  $memory[0] = 0;\n  $memory[1]\
    \ = 0;\n  $memory[2] = 2;\n  $memory[3] = 0;\n  for ($i = 4; $i <= $n; $i++) {\n\
    \    $memory[$i] = $memory[$i-1] + $memory[$i-2] + $memory[$i-3] + $memory[$i-4];\n\
    \  }\n  return $memory[$n];\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n <= 1) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n == 2) {\n\t\treturn 2;\n\t}\n\t$fib4s = array(0, 0, 2, 0);\n\
    \tfor ($i = 3; $i < $n; $i++) {\n\t\t$fib4s[$i % 4] = $fib4s[($i-1) % 4] + $fib4s[($i-2)\
    \ % 4] + $fib4s[($i-3) % 4] + $fib4s[($i-4) % 4];\n\t}\n\treturn $fib4s[($n-1)\
    \ % 4];\n}\necho fib4(5).\"\\n\";\necho fib4(6).\"\\n\";\necho fib4(7).\"\\n\"\
    ;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "4\n8\n16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc39fws9l.php:37\n\
    Stack trace:\n#0 /tmp/tmpc39fws9l.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpc39fws9l.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $array_n = array($n);\n\
    \    if ($n === 0) {\n        return 0;\n    } elseif ($n === 1) {\n        return\
    \ 0;\n    } elseif ($n === 2) {\n        return 2;\n    } elseif ($n === 3) {\n\
    \        return 0;\n    } else {\n        $x = 0;\n        $y = 0;\n        $z\
    \ = 2;\n        $w = 0;\n        for ($i = 4; $i <= $n; $i++) {\n            $x\
    \ = $y + $z + $w;\n            $y = $z;\n            $z = $w;\n            $w\
    \ = $x;\n        }\n        return $x;\n    }\n}\n$answer = fib4(5);\necho \"\
    fib4(5) --> {$answer}\\n\";\n$answer = fib4(6);\necho \"fib4(6) --> {$answer}\\\
    n\";\n$answer = fib4(7);\necho \"fib4(7) --> {$answer}\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "fib4(5) --> 4\nfib4(6) --> 6\nfib4(7) --> 12\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmpqv0zy7.php:52\nStack trace:\n#0 /tmp/tmpmpqv0zy7.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmpqv0zy7.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $a = 0;\n  $b = 0;\n  $c =\
    \ 2;\n  $d = 0;\n  for ($i = 3; $i <= $n; $i++) {\n    $e = $a + $b + $c + $d;\n\
    \    $a = $b;\n    $b = $c;\n    $c = $d;\n    $d = $e;\n  }\n  return $d;\n}\n\
    \necho fib4(5);\necho PHP_EOL;\necho fib4(6);\necho PHP_EOL;\necho fib4(7);\n\
    echo PHP_EOL;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "8\n14\n28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphedm10mr.php:41\n\
    Stack trace:\n#0 /tmp/tmphedm10mr.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphedm10mr.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $last = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $curr = $last[0] + $last[1] + $last[2]\
    \ + $last[3];\n        $last[0] = $last[1];\n        $last[1] = $last[2];\n  \
    \      $last[2] = $last[3];\n        $last[3] = $curr;\n    }\n    return $last[3];\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $i = 0;\n    $j = 0;\n \
    \   $k = 2;\n    $l = 0;\n    for ($count = 3; $count <= $n; $count++) {\n   \
    \     $m = $i + $j + $k + $l;\n        $i = $j;\n        $j = $k;\n        $k\
    \ = $l;\n        $l = $m;\n    }\n    return $m;\n}\n\nfib4(3);\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe167e1lg.php:36\n\
    Stack trace:\n#0 /tmp/tmpe167e1lg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpe167e1lg.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fibs = [0, 0, 2, 0];\n  if\
    \ ($n < 4) {\n    return $fibs[$n];\n  }\n\n  for ($i = 4; $i <= $n; $i++) {\n\
    \    $fibs[$i % 4] = $fibs[($i - 1) % 4] + $fibs[($i - 2) % 4] + $fibs[($i - 3)\
    \ % 4] + $fibs[($i - 4) % 4];\n  }\n\n  return $fibs[$n % 4];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n ==\
    \ 3) {\n        return 0;\n    }\n    $prev4 = 0;\n    $prev3 = 0;\n    $prev2\
    \ = 2;\n    $prev1 = 0;\n    $nth = 1;\n    while ($nth < $n) {\n        $curr\
    \ = $prev4 + $prev3 + $prev2 + $prev1;\n        $prev4 = $prev3;\n        $prev3\
    \ = $prev2;\n        $prev2 = $prev1;\n        $prev1 = $curr;\n        $nth++;\n\
    \    }\n    return $curr;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28ag6316.php:45\n\
    Stack trace:\n#0 /tmp/tmp28ag6316.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp28ag6316.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n ==\
    \ 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    }\
    \ else {\n        $result = 0;\n        $i = 0;\n        $j = 0;\n        $k =\
    \ 2;\n        $l = 0;\n        for ($m = 4; $m <= $n; $m++) {\n            $result\
    \ = $i + $j + $k + $l;\n            $i = $j;\n            $j = $k;\n         \
    \   $k = $l;\n            $l = $result;\n        }\n        return $result;\n\
    \    }\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n == 0) return 0;\n\
    \    if($n == 1) return 0;\n    if($n == 2) return 2;\n    if($n == 3) return\
    \ 0;\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for($i = 4; $i <=\
    \ $n; $i++) {\n        $temp = $a + $b + $c + $d;\n        $a = $b;\n        $b\
    \ = $c;\n        $c = $d;\n        $d = $temp;\n    }\n    return $d;\n}\nprint_r(fib4(5));\n\
    print_r(fib4(6));\nprint_r(fib4(7));\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '4814'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $nums = [0, 0, 2, 0];\n\
    \    for ($i = 3; $i < $n; $i++) {\n        $nums[$i%4] = $nums[($i-1)%4] + $nums[($i-2)%4]\
    \ + $nums[($i-3)%4] + $nums[($i-4)%4];\n    }\n    return $nums[($n-1)%4];\n}\n\
    \n$nums = [5, 6, 7];\nforeach ($nums as $num) {\n    echo \">>> fib4($num)\\n\"\
    ;\n    echo fib4($num) . \"\\n\";\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ">>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n16\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpu69x5p_q.php:34\nStack trace:\n#0 /tmp/tmpu69x5p_q.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu69x5p_q.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = $b = $c = $d = 0;\n\
    \    $e = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $temp = $e;\n       \
    \ $e = $a + $b + $c + $d;\n        $d = $c;\n        $c = $b;\n        $b = $a;\n\
    \        $a = $temp;\n    }\n    return $e;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfcvu_gwe.php:34\n\
    Stack trace:\n#0 /tmp/tmpfcvu_gwe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpfcvu_gwe.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // first use the fib3 function\
    \ to define the 4-number sequence\n    $fib4 = array();\n    $fib4[0] = 0;\n \
    \   $fib4[1] = 0;\n    $fib4[2] = 2;\n    $fib4[3] = 0;\n    for ($i = 4; $i <=\
    \ $n; $i++) {\n        $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \    }\n    return $fib4[$n];\n}\n\nfor ($i = 0; $i < 10; $i++) {\n    echo fib4($i)\
    \ . \"\\n\";\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib1 = 0;\n\t$fib2 = 0;\n\
    \t$fib3 = 2;\n\t$fib4 = 0;\n\t$i = 4;\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\t\
    if ($n == 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn 2;\n\t}\n\tif\
    \ ($n == 3) {\n\t\treturn 0;\n\t}\n\tif ($n == 4) {\n\t\treturn 2;\n\t}\n\twhile\
    \ ($i <= $n) {\n\t\t$fib4 = $fib1 + $fib2 + $fib3 + $fib4;\n\t\t$fib1 = $fib2;\n\
    \t\t$fib2 = $fib3;\n\t\t$fib3 = $fib4;\n\t\t$i++;\n\t}\n\treturn $fib4;\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuoo8ml4q.php:50\n\
    Stack trace:\n#0 /tmp/tmpuoo8ml4q.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpuoo8ml4q.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t// Write code here...\n\t\
    // Do not use recursion.\n}\necho fib4(5).\"\\n\"; // Expects 4\necho fib4(6).\"\
    \\n\"; // Expects 8\necho fib4(7).\"\\n\"; // Expects 14\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xugf3k5.php:27\n\
    Stack trace:\n#0 /tmp/tmp6xugf3k5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6xugf3k5.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ 0;\n    }\n\n    $f = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n  \
    \      $f[$i % 4] = $f[($i - 1) % 4] + $f[($i - 2) % 4] + $f[($i - 3) % 4] + $f[($i\
    \ - 4) % 4];\n    }\n\n    return $f[$n % 4];\n}\n\nvar_dump(fib4(0));\nvar_dump(fib4(1));\n\
    var_dump(fib4(2));\nvar_dump(fib4(3));\nvar_dump(fib4(4));\nvar_dump(fib4(5));\n\
    var_dump(fib4(6));\nvar_dump(fib4(7));\nvar_dump(fib4(8));\nvar_dump(fib4(9));\n\
    var_dump(fib4(10));\nvar_dump(fib4(11));\nvar_dump(fib4(12));\nvar_dump(fib4(13));\n\
    var_dump(fib4(14));\nvar_dump(fib4(15));\nvar_dump(fib4(16));\nvar_dump(fib4(17));\n\
    var_dump(fib4(18));\nvar_dump(fib4(19));\nvar_dump(fib4(20));\nvar_dump(fib4(21));\n\
    var_dump(fib4(22));\nvar_dump(fib4(23));\nvar_dump(fib4(24));\nvar_dump(fib4(25));\n\
    var_dump(fib4(26));\nvar_dump(fib4(27));\nvar_dump(fib4(28));\nvar_dump(fib4(29));\n\
    var_dump(fib4(30));\nvar_dump(fib4(31));\nvar_dump(fib4(32));\nvar_dump(fib4(33));\n\
    var_dump(fib4(34));\nvar_\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwwfpo1o5.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        if\
    \ ($n === 2) {\n            return 2;\n        }\n        return 0;\n    }\n \
    \   $fib = [0, 0, 2, 0];\n    $size = count($fib);\n    while ($size < $n) {\n\
    \        $fib[] = $fib[$size - 1] + $fib[$size - 2] + $fib[$size - 3] + $fib[$size\
    \ - 4];\n        $size++;\n    }\n    return $fib[$size - 1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5i8x66_.php:36\n\
    Stack trace:\n#0 /tmp/tmpq5i8x66_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpq5i8x66_.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $f0 = 0;\n  $f1 = 0;\n  $f2\
    \ = 2;\n  $f3 = 0;\n  $f4 = 4;\n  if ($n == 0) {\n    return $f0;\n  } else if\
    \ ($n == 1) {\n    return $f1;\n  } else if ($n == 2) {\n    return $f2;\n  }\
    \ else if ($n == 3) {\n    return $f3;\n  } else if ($n == 4) {\n    return $f4;\n\
    \  } else {\n    $i = 4;\n    while ($i < $n) {\n      $t = $f4;\n      $f4 =\
    \ $f4 + $f3 + $f2 + $f1;\n      $f3 = $f2;\n      $f2 = $f1;\n      $f1 = $f0;\n\
    \      $f0 = $t;\n      $i++;\n    }\n    return $f4;\n  }\n}\n\necho fib4(5)\
    \ . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n8\n12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ti2fu8q.php:54\n\
    Stack trace:\n#0 /tmp/tmp7ti2fu8q.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp7ti2fu8q.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fibs = [0, 0, 2, 0];\n  if\
    \ ($n <= 3) {\n    return $fibs[$n];\n  }\n  for ($i = 4; $i <= $n; $i++) {\n\
    \    $fibs[$i % 4] = $fibs[($i - 1) % 4] + $fibs[($i - 2) % 4] + $fibs[($i - 3)\
    \ % 4] + $fibs[($i - 4) % 4];\n  }\n  return $fibs[$n % 4];\n}\necho fib4(10)\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "104\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib4 = [0, 0, 2, 0];\n  for\
    \ ($i = 4; $i <= $n; $i++) {\n    $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i\
    \ - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n  }\n  return $fib4[$n\
    \ % 4];\n}\n\nprint fib4(5) . \"\\n\";\nprint fib4(6) . \"\\n\";\nprint fib4(7)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4 = array(0, 0, 2, 0);\n\
    \tif ($n <= 3) {\n\t\treturn $fib4[$n];\n\t}\n\t$num = $fib4[3];\n\tfor ($i =\
    \ 4; $i <= $n; $i++) {\n\t\t$fib4[3] = $fib4[2];\n\t\t$fib4[2] = $fib4[1];\n\t\
    \t$fib4[1] = $fib4[0];\n\t\t$fib4[0] = $num;\n\t\t$num = $fib4[0] + $fib4[1] +\
    \ $fib4[2] + $fib4[3];\n\t}\n\treturn $num;\n}\necho fib4(5);\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyzj77n9n.php:36\n\
    Stack trace:\n#0 /tmp/tmpyzj77n9n.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyzj77n9n.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $seq = [0, 0, 2, 0];\n  for\
    \ ($i = 3; $i < $n; $i++) {\n    $seq[$i%4] = $seq[($i+1)%4] + $seq[($i+2)%4]\
    \ + $seq[($i+3)%4];\n  }\n  return $seq[$n%4];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvoevk4hs.php:28\n\
    Stack trace:\n#0 /tmp/tmpvoevk4hs.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvoevk4hs.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if($n === 0) {\n    return\
    \ 0;\n  }\n  $res = [0, 0, 2, 0];\n  for($i = 4; $i <= $n; $i++) {\n    $res[$i\
    \ % 4] = $res[0] + $res[1] + $res[2] + $res[3];\n  }\n  return $res[$n % 4];\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    for ($i = 3; $i < $n; $i++) {\n        $fib4[$i+1] = $fib4[$i] + $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3];\n    }\n    return $fib4[$n];\n}\necho fib4(5).\"\
    \\n\";\necho fib4(6).\"\\n\";\necho fib4(7).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $i = 0;\n    $y = 0;\n \
    \   $z = 0;\n    $x = 0;\n    $w = 0;\n    $fib = [];\n    $fib[0] = 0;\n    $fib[1]\
    \ = 0;\n    $fib[2] = 2;\n    $fib[3] = 0;\n    if ($n == 0) {\n        return\
    \ 0;\n    } elseif ($n == 1) {\n        return 0;\n    } elseif ($n == 2) {\n\
    \        return 2;\n    } elseif ($n == 3) {\n        return 0;\n    } else {\n\
    \        for ($i = 4; $i <= $n; $i++) {\n            $y = $fib[$i - 1];\n    \
    \        $z = $fib[$i - 2];\n            $x = $fib[$i - 3];\n            $w =\
    \ $fib[$i - 4];\n            $fib[$i] = $y + $z + $x + $w;\n        }\n      \
    \  return $fib[$n];\n    }\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = $fib[($i - 1) % 4]\
    \ + $fib[($i - 2) % 4] + $fib[($i - 3) % 4] + $fib[($i - 4) % 4];\n    }\n   \
    \ return $fib[$n % 4];\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n <= 0) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn\
    \ 2;\n\t}\n\tif ($n == 3) {\n\t\treturn 0;\n\t}\n\t$f[0] = 0;\n\t$f[1] = 0;\n\t\
    $f[2] = 2;\n\t$f[3] = 0;\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$f[$i] = $f[$i-1]\
    \ + $f[$i-2] + $f[$i-3] + $f[$i-4];\n\t}\n\treturn $f[$n];\n}\n\necho fib4(5)\
    \ . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = $b = $c = $d = 0;\n\t\
    $e = 1;\n\tif ($n == 0) return $a;\n\telse if ($n == 1) return $b;\n\telse if\
    \ ($n == 2) return $c;\n\telse if ($n == 3) return $d;\n\telse if ($n == 4) return\
    \ $e;\n\telse {\n\t\tfor ($i = 5; $i <= $n; $i++) {\n\t\t\t$f = $a + $b + $c +\
    \ $d + $e;\n\t\t\t$a = $b;\n\t\t\t$b = $c;\n\t\t\t$c = $d;\n\t\t\t$d = $e;\n\t\
    \t\t$e = $f;\n\t\t}\n\t\treturn $f;\n\t}\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n2\n4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlgiv9x_.php:44\n\
    Stack trace:\n#0 /tmp/tmprlgiv9x_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmprlgiv9x_.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $cache = array(0, 0, 2, 0);\n\
    \  while (count($cache) <= $n) {\n    $cache[] = $cache[count($cache)-1] + $cache[count($cache)-2]\
    \ + $cache[count($cache)-3] + $cache[count($cache)-4];\n  }\n  return $cache[$n];\n\
    }\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\necho fib4(8);\n\
    echo \"\\n\";\necho fib4(9);\necho \"\\n\";\necho fib4(10);\necho \"\\n\";\necho\
    \ fib4(11);\necho \"\\n\";\necho fib4(12);\necho \"\\n\";\necho fib4(13);\necho\
    \ \"\\n\";\necho fib4(14);\necho \"\\n\";\necho fib4(15);\necho \"\\n\";\necho\
    \ fib4(16);\necho \"\\n\";\necho fib4(17);\necho \"\\n\";\necho fib4(18);\necho\
    \ \"\\n\";\necho fib4(19);\necho \"\\n\";\necho fib4(20);\necho \"\\n\";\necho\
    \ fib4(21);\necho \"\\n\";\necho fib4(22);\necho \"\\n\";\necho fib4(23);\necho\
    \ \"\\n\";\necho fib4(24);\necho \"\\n\";\necho fib4(25);\necho \"\\n\";\necho\
    \ fib4(26);\necho \"\\n\";\necho fib4(27);\necho \"\\n\";\necho fib4(28);\necho\
    \ \"\\n\";\necho fib4(29);\necho \"\\n\";\necho fib4(30);\necho \"\\n\";\necho\
    \ fib4(31);\necho \"\\n\";\necho fib4(32);\necho \"\\n\";\necho fib4(33);\necho\
    \ \"\\n\";\necho fib4(34);\necho \"\\n\";\necho fib4(35);\necho \"\\n\";\necho\
    \ fib4(36);\necho \"\\n\";\necho fib4(37);\necho \"\\n\";\necho fib4(38);\necho\
    \ \"\\n\";\necho fib4(39);\necho \"\\n\";\necho fib4(40);\necho \"\\n\";\necho\
    \ fib4(\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnfwhjbtd.php on line 93\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // your code here\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6j7_ah_.php:24\n\
    Stack trace:\n#0 /tmp/tmpe6j7_ah_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpe6j7_ah_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // get the first four terms\n\
    \  $fibs = [0, 0, 2, 0];\n  if ($n < 4) {\n    return $fibs[$n];\n  }\n  for ($i\
    \ = 4; $i <= $n; $i++) {\n    $fibs[$i] = $fibs[$i - 1] + $fibs[$i - 2] + $fibs[$i\
    \ - 3] + $fibs[$i - 4];\n  }\n  return $fibs[$n];\n}\n\necho fib4(5);\necho \"\
    \\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $prev1 = 0;\n    $prev2\
    \ = 0;\n    $prev3 = 2;\n    $prev4 = 0;\n    if ($n == 0) {\n        return $prev1;\n\
    \    }\n    if ($n == 1) {\n        return $prev2;\n    }\n    if ($n == 2) {\n\
    \        return $prev3;\n    }\n    if ($n == 3) {\n        return $prev4;\n \
    \   }\n    for ($i = 4; $i <= $n; $i++) {\n        $current = $prev1 + $prev2\
    \ + $prev3 + $prev4;\n        $prev1 = $prev2;\n        $prev2 = $prev3;\n   \
    \     $prev3 = $prev4;\n        $prev4 = $current;\n    }\n    return $current;\n\
    }\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib = array(0, 0, 2, 0);\n\
    \  if ($n < 4) {\n    return $fib[$n];\n  }\n  for ($i = 4; $i <= $n; $i++) {\n\
    \    $fib[$i % 4] = $fib[($i - 1) % 4] + $fib[($i - 2) % 4] + $fib[($i - 3) %\
    \ 4] + $fib[($i - 4) % 4];\n  }\n  return $fib[$n % 4];\n}\necho fib4(5) . \"\\\
    n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    //base cases\n    if ($n\
    \ == 0 || $n == 1 || $n == 3) {\n        return 0;\n    } else if ($n == 2) {\n\
    \        return 2;\n    }\n\n    //keeping track of the previous 4 numbers\n \
    \   $fourAgo = 0;\n    $threeAgo = 0;\n    $twoAgo = 2;\n    $oneAgo = 0;\n  \
    \  $current = 0;\n\n    //loop to calculate the next number\n    for ($i = 3;\
    \ $i < $n; $i++) {\n        $current = $fourAgo + $threeAgo + $twoAgo + $oneAgo;\n\
    \        $fourAgo = $threeAgo;\n        $threeAgo = $twoAgo;\n        $twoAgo\
    \ = $oneAgo;\n        $oneAgo = $current;\n    }\n\n    return $current;\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4 = [0, 0, 2, 0];\n\t\n\
    \tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2]\
    \ + $fib4[$i - 3] + $fib4[$i - 4];\n\t}\n\t\n\treturn $fib4[$n];\n}\n\necho fib4(5);\n\
    echo PHP_EOL;\necho fib4(6);\necho PHP_EOL;\necho fib4(7);\necho PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) {\n        return\
    \ 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    $fib[0] = 0;\n\
    \    $fib[1] = 0;\n    $fib[2] = 2;\n    $fib[3] = 0;\n    for ($i = 4; $i <=\
    \ $n; $i++) {\n        $fib[$i] = $fib[$i - 1] + $fib[$i - 2] + $fib[$i - 3] +\
    \ $fib[$i - 4];\n    }\n    return $fib[$n];\n}\n\necho fib4(1) . \"\\n\";\necho\
    \ fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5)\
    \ . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) .\
    \ \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) .\
    \ \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14)\
    \ . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17)\
    \ . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20)\
    \ . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23)\
    \ . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26)\
    \ . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29)\
    \ . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32)\
    \ . \"\\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps86ujj31.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4 = array(0, 0, 2, 0);\n\
    \tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] +\
    \ $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . PHP_EOL;\n\
    echo fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i\
    \ - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho\
    \ fib4(7);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: '14'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = 0;\n\t$b = 0;\n\t$c =\
    \ 2;\n\t$d = 0;\n\t\n\t$x = 4;\n\twhile($x <= $n) {\n\t\t$temp = $d;\n\t\t$d =\
    \ $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $temp;\n\t\t$x++;\n\
    \t}\n\treturn $d;\n}\necho fib4(5); //4\necho \"<br>\";\necho fib4(6); //8\necho\
    \ \"<br>\";\necho fib4(7); //14\necho \"<br>\";\necho fib4(8); //26\necho \"<br>\"\
    ;\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: 4<br>8<br>14<br>28<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $prev = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $tmp = $prev[0] + $prev[1] + $prev[2]\
    \ + $prev[3];\n        $prev[0] = $prev[1];\n        $prev[1] = $prev[2];\n  \
    \      $prev[2] = $prev[3];\n        $prev[3] = $tmp;\n    }\n    return $prev[3];\n\
    }\n\nfor ($i = 0; $i < 10; $i++) {\n    print fib4($i) . \"\\n\";\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n0\n0\n0\n2\n4\n8\n14\n28\n54\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ 0;\n    }\n\n    if ($n < 2) {\n        return 0;\n    }\n\n    if ($n < 3)\
    \ {\n        return 2;\n    }\n\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i\
    \ <= $n; $i++) {\n        $fib[$i % 4] = $fib[0] + $fib[1] + $fib[2] + $fib[3];\n\
    \    }\n\n    return $fib[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n ==\
    \ 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n\
    \    $start = 4;\n    $f1 = 0;\n    $f2 = 0;\n    $f3 = 2;\n    $f4 = 0;\n   \
    \ $count = 0;\n    while ($start <= $n) {\n        $count = $f1 + $f2 + $f3 +\
    \ $f4;\n        $f1 = $f2;\n        $f2 = $f3;\n        $f3 = $f4;\n        $f4\
    \ = $count;\n        $start++;\n    }\n    return $count;\n}\necho fib4(5).\"\\\
    n\";\necho fib4(6).\"\\n\";\necho fib4(7).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return 0;\n    }\n    $term2 = 0;\n    $term3 = 0;\n    $term4 = 0;\n    $i\
    \ = 2;\n    $a = 1;\n    $b = 2;\n    $c = 0;\n    while ($i < $n) {\n       \
    \ $c = $a + $b + $term2 + $term3 + $term4;\n        $term4 = $term3;\n       \
    \ $term3 = $term2;\n        $term2 = $b;\n        $b = $a;\n        $a = $c;\n\
    \        $i++;\n    }\n    return $c;\n}\nfunction candidate(...$args) {\n   \
    \ return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12r7i793.php:42\n\
    Stack trace:\n#0 /tmp/tmp12r7i793.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp12r7i793.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i\
    \ - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\n$fh\
    \ = fopen($argv[1], \"r\");\nwhile (!feof($fh)) {\n    $test = fgets($fh);\n \
    \   echo fib4($test).\"\\n\";\n}\nfclose($fh);\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "b'\\nWarning: fopen(): Filename cannot be empty in /tmp/tmp9f70nifu.php\
    \ on line 23\\n\\nWarning: feof() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmp9f70nifu.php on line 24\\n\\nWarning: fgets() expects parameter 1\
    \ to be resource, bool given in /tmp/tmp9f70nifu.php on line 25\\n0\\n\\nWarning:\
    \ feof() expects parameter 1 to be resource, bool given in /tmp/tmp9f70nifu.php\
    \ on line 24\\n\\nWarning: fgets() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmp9f70nifu.php on line 25\\n0\\n\\nWarning: feof() expects parameter\
    \ 1 to be resource, bool given in /tmp/tmp9f70nifu.php on line 24\\n\\nWarning:\
    \ fgets() expects parameter 1 to be resource, bool given in /tmp/tmp9f70nifu.php\
    \ on line 25\\n0\\n\\nWarning: feof() expects parameter 1 to be resource, bool\
    \ given in /tmp/tmp9f70nifu.php on line 24\\n\\nWarning: fgets() expects parameter\
    \ 1 to be resource, bool given in /tmp/tmp9f70nifu.php on line 25\\n0\\n\\nWarning:\
    \ feof() expects parameter 1 to be resource, bool given in /tmp/tmp9f70nifu.php\
    \ on line 24\\n\\nWarning: fgets() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmp9f70nifu.php on line 25\\n0\\n\\nWarning: feof() expects parameter\
    \ 1 to be resource, bool given in /tmp/tmp9f70nifu.php on line 24\\n\\nWarning:\
    \ fgets() expects parameter 1 to be resource, bool given in /tmp/tmp9f70nifu.php\
    \ on line 25\\n0\\n\\nWarning: feof() expects parameter 1 to be resource, bool\
    \ given in /tmp/tmp9f70nifu.php on line 24\\n\\nWarning: fgets() expects parameter\
    \ 1 to be resource, bool given in /tmp/tmp9f70nifu.php on line 25\\n0\\n\\nWarning:\
    \ feof() expects parameter 1 to be resource, bool given in /tmp/tmp9f70nifu.php\
    \ on line 24\\n\\nWarning: fgets() expects parameter 1 to be resource, bool given\
    \ in /tmp/tmp9f70nifu.php on line 25\\n0\\n\\nWarning: feof() expects parameter\
    \ 1 to be resource, bool given in /tmp/tmp9f70nifu.php on line 24\\n\\nWarning:\
    \ fgets() expects parameter 1 to be resource, bool given in /tmp/tmp9f70nifu.php\
    \ on line 25\\n0\\n\\nWarning: feof() expects parameter 1 to be resource, bool\
    \ given in /tmp/tmp9f70nifu.php on line 24\\n\\nWarning:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$num1 = 0;\n\t$num2 = 0;\n\
    \t$num3 = 2;\n\t$num4 = 0;\n\t$result = 0;\n\tif ($n == 0) {\n\t\treturn 0;\n\t\
    }\n\tif ($n == 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn 2;\n\t}\n\
    \tif ($n == 3) {\n\t\treturn 0;\n\t}\n\tfor ($i = 3; $i < $n; $i++) {\n\t\t$result\
    \ = $num1 + $num2 + $num3 + $num4;\n\t\t$num1 = $num2;\n\t\t$num2 = $num3;\n\t\
    \t$num3 = $num4;\n\t\t$num4 = $result;\n\t}\n\treturn $result;\n}\nprint_r(fib4(7));\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: '14'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  // your code here\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps3g75djo.php:24\n\
    Stack trace:\n#0 /tmp/tmps3g75djo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmps3g75djo.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $lastFour = [0, 0, 2, 0];\n\
    \    if ($n <= 3) {\n        return $lastFour[$n];\n    }\n\n    for ($i = 4;\
    \ $i <= $n; $i++) {\n        $sum = array_sum($lastFour);\n        array_shift($lastFour);\n\
    \        array_push($lastFour, $sum);\n    }\n\n    return $lastFour[3];\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n ==\
    \ 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n\
    \    $arr = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $temp =\
    \ $arr[0] + $arr[1] + $arr[2] + $arr[3];\n        $arr[0] = $arr[1];\n       \
    \ $arr[1] = $arr[2];\n        $arr[2] = $arr[3];\n        $arr[3] = $temp;\n \
    \   }\n    return $arr[3];\n}\necho fib4(5);\necho fib4(6);\necho fib4(7);\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: '4814'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fn4 = [0, 0, 2, 0];\n \
    \   for ($i = 4; $i <= $n; $i++) {\n        $fn4[$i % 4] = array_sum(array_slice($fn4,\
    \ $i - 4));\n    }\n    return $fn4[$n % 4];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7qsmp8a.php:28\n\
    Stack trace:\n#0 /tmp/tmpw7qsmp8a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpw7qsmp8a.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array();\n    $fib[0]\
    \ = 0;\n    $fib[1] = 0;\n    $fib[2] = 2;\n    $fib[3] = 0;\n    for ($i = 4;\
    \ $i <= $n; $i++) {\n        $fib[$i] = $fib[$i-1] + $fib[$i-2] + $fib[$i-3] +\
    \ $fib[$i-4];\n    }\n    return $fib[$n];\n}\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $first = 0;\n    $second\
    \ = 0;\n    $third = 2;\n    $fourth = 0;\n    if ($n == 0) {\n        return\
    \ $first;\n    } else if ($n == 1) {\n        return $second;\n    } else if ($n\
    \ == 2) {\n        return $third;\n    } else if ($n == 3) {\n        return $fourth;\n\
    \    }\n    for ($i = 4; $i <= $n; $i++) {\n        $f = $first + $second + $third\
    \ + $fourth;\n        $first = $second;\n        $second = $third;\n        $third\
    \ = $fourth;\n        $fourth = $f;\n    }\n    return $f;\n}\n\necho(fib4(5));\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: '4'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpza3v347_.php:23\n\
    Stack trace:\n#0 /tmp/tmpza3v347_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpza3v347_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fibNums = [0, 0, 2, 0];\n\
    \    if ($n > 3) {\n        for ($i = 4; $i <= $n; $i++) {\n            $fibNums[$i\
    \ % 4] = $fibNums[($i - 1) % 4] + $fibNums[($i - 2) % 4] + $fibNums[($i - 3) %\
    \ 4] + $fibNums[($i - 4) % 4];\n        }\n    }\n    return $fibNums[$n % 4];\n\
    }\necho fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $d = $a\
    \ + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    }\n  \
    \  return $d;\n}\nprint_r(fib4(5));\nprint_r(fib4(6));\nprint_r(fib4(7));\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "81426\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixvhe_o8.php:36\n\
    Stack trace:\n#0 /tmp/tmpixvhe_o8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpixvhe_o8.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) return \"Please\
    \ enter a non-negative number\";\n    if ($n == 0) return 0;\n    if ($n == 1)\
    \ return 0;\n    if ($n == 2) return 2;\n    if ($n == 3) return 0;\n    $num1\
    \ = 0;\n    $num2 = 0;\n    $num3 = 2;\n    $num4 = 0;\n    $result = 0;\n   \
    \ for ($i = 4; $i <= $n; $i++) {\n        $result = $num1 + $num2 + $num3 + $num4;\n\
    \        $num1 = $num2;\n        $num2 = $num3;\n        $num3 = $num4;\n    \
    \    $num4 = $result;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$r=array(0,0,2,0);\n\t$nr=4;\n\
    \tif($n<$nr)\n\t\treturn $r[$n];\n\tfor($i=$nr;$i<=$n;$i++) {\n\t\t$r[$i%4]=$r[($i-1)%4]+$r[($i-2)%4]+$r[($i-3)%4]+$r[($i-4)%4];\n\
    \t}\n\treturn $r[$n%4];\n}\necho \"fib4(5) = \".fib4(5).PHP_EOL;\necho \"fib4(6)\
    \ = \".fib4(6).PHP_EOL;\necho \"fib4(7) = \".fib4(7).PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "fib4(5) = 4\nfib4(6) = 8\nfib4(7) = 14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $first = 0;\n    $second\
    \ = 0;\n    $third = 2;\n    $fourth = 0;\n    if ($n == 0) {\n        return\
    \ $first;\n    } else if ($n == 1) {\n        return $second;\n    } else if ($n\
    \ == 2) {\n        return $third;\n    } else if ($n == 3) {\n        return $fourth;\n\
    \    } else {\n        for ($i = 4; $i <= $n; $i++) {\n            $sum = $first\
    \ + $second + $third + $fourth;\n            $first = $second;\n            $second\
    \ = $third;\n            $third = $fourth;\n            $fourth = $sum;\n    \
    \    }\n        return $sum;\n    }\n}\necho \"Result: \".fib4(5);\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 'Result: 4'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $prev1 = 0;\n    $prev2\
    \ = 0;\n    $prev3 = 2;\n    $prev4 = 0;\n    $fib4 = 0;\n    for ($i = 4; $i\
    \ <= $n; $i++) {\n        $fib4 = $prev1 + $prev2 + $prev3 + $prev4;\n       \
    \ $prev1 = $prev2;\n        $prev2 = $prev3;\n        $prev3 = $prev4;\n     \
    \   $prev4 = $fib4;\n    }\n    return $fib4;\n}\n\necho fib4(5) . \"\\n\";\n\
    echo fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t} else if ($n == 1) {\n\t\treturn 0;\n\t} else if ($n == 2) {\n\t\treturn\
    \ 2;\n\t} else if ($n == 3) {\n\t\treturn 0;\n\t} else {\n\t\t$f1 = 0;\n\t\t$f2\
    \ = 0;\n\t\t$f3 = 2;\n\t\t$f4 = 0;\n\t\t$f = 0;\n\t\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t\t$f = $f1 + $f2 + $f3 + $f4;\n\t\t\t$f1 = $f2;\n\t\t\t$f2 = $f3;\n\t\
    \t\t$f3 = $f4;\n\t\t\t$f4 = $f;\n\t\t}\n\t\treturn $f;\n\t}\n}\n\nvar_dump(fib4(5));\n\
    var_dump(fib4(6));\nvar_dump(fib4(7));\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "int(4)\nint(8)\nint(14)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $x = 0;\n    $y = 1;\n \
    \   $z = 2;\n    $w = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $w = $x\
    \ + $y + $z;\n        $x = $y;\n        $y = $z;\n        $z = $w;\n    }\n  \
    \  return $w;\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "11\n20\n37\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4354ft48.php:36\n\
    Stack trace:\n#0 /tmp/tmp4354ft48.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4354ft48.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    if ($n == 0) return $a;\n    if ($n == 1) return\
    \ $b;\n    if ($n == 2) return $c;\n    if ($n == 3) return $d;\n    for ($i =\
    \ 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n  \
    \      $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $i = 0;\n    $j = 0;\n \
    \   $k = 2;\n    $l = 0;\n    for ($m = 4; $m <= $n; $m++) {\n        $l = $i\
    \ + $j + $k + $l;\n        $i = $j;\n        $j = $k;\n        $k = $l;\n    }\n\
    \    return $l;\n}\n$n = 8;\necho(fib4($n));\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "102\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrt5qdqy.php:35\n\
    Stack trace:\n#0 /tmp/tmpjrt5qdqy.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjrt5qdqy.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $a = 0;\n  $b = 0;\n  $c =\
    \ 2;\n  $d = 0;\n  for ($i = 3; $i <= $n; $i++) {\n    $e = $a + $b + $c + $d;\n\
    \    $a = $b;\n    $b = $c;\n    $c = $d;\n    $d = $e;\n  }\n  return $d;\n}\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptizjk7wg.php:34\n\
    Stack trace:\n#0 /tmp/tmptizjk7wg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptizjk7wg.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $memo = [0, 0, 2, 0];\n\
    \    $i = 3;\n    while ($i < $n) {\n        $memo[$i % 4] = $memo[($i - 1) %\
    \ 4] + $memo[($i - 2) % 4] + $memo[($i - 3) % 4] + $memo[($i - 4) % 4];\n    \
    \    $i++;\n    }\n    return $memo[($n - 1) % 4];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__6kvang.php:31\n\
    Stack trace:\n#0 /tmp/tmp__6kvang.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp__6kvang.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    $f0 = 0;\n\
    \    $f1 = 0;\n    $f2 = 2;\n    $f3 = 0;\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        $f4 = $f0 + $f1 + $f2 + $f3;\n        $f0 = $f1;\n        $f1 = $f2;\n\
    \        $f2 = $f3;\n        $f3 = $f4;\n    }\n    return $f3;\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv1pilszr.php:40\n\
    Stack trace:\n#0 /tmp/tmpv1pilszr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpv1pilszr.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4wp398q.php:23\n\
    Stack trace:\n#0 /tmp/tmpw4wp398q.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw4wp398q.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = [0, 0, 2, 0];\n   \
    \ if ($n < 4) {\n        return $a[$n];\n    }\n\n    $ret = 0;\n    for ($i =\
    \ 4; $i <= $n; $i++) {\n        $ret = $a[0] + $a[1] + $a[2] + $a[3];\n      \
    \  $a[0] = $a[1];\n        $a[1] = $a[2];\n        $a[2] = $a[3];\n        $a[3]\
    \ = $ret;\n    }\n\n    return $ret;\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) return 0;\n\t\
    if ($n == 1) return 0;\n\tif ($n == 2) return 2;\n\tif ($n == 3) return 0;\n\t\
    $a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\
    \t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d =\
    \ $e;\n\t}\n\treturn $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn\
    \ 2;\n\t}\n\tif ($n == 3) {\n\t\treturn 0;\n\t}\n\t$ret = 0;\n\t$n0 = 0;\n\t$n1\
    \ = 0;\n\t$n2 = 2;\n\t$n3 = 0;\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$ret = $n0\
    \ + $n1 + $n2 + $n3;\n\t\t$n0 = $n1;\n\t\t$n1 = $n2;\n\t\t$n2 = $n3;\n\t\t$n3\
    \ = $ret;\n\t}\n\treturn $ret;\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\n\
    echo \"\\n\";\necho fib4(7);\necho \"\\n\";\necho fib4(8);\necho \"\\n\";\necho\
    \ fib4(9);\necho \"\\n\";\necho fib4(10);\necho \"\\n\";\necho fib4(11);\necho\
    \ \"\\n\";\necho fib4(12);\necho \"\\n\";\necho fib4(13);\necho \"\\n\";\necho\
    \ fib4(14);\necho \"\\n\";\necho fib4(15);\necho \"\\n\";\necho fib4(16);\necho\
    \ \"\\n\";\necho fib4(17);\necho \"\\n\";\necho fib4(18);\necho \"\\n\";\necho\
    \ fib4(19);\necho \"\\n\";\necho fib4(20);\necho \"\\n\";\necho fib4(21);\necho\
    \ \"\\n\";\necho fib4(22);\necho \"\\n\";\necho fib4(23);\necho \"\\n\";\necho\
    \ fib4(24);\necho \"\\n\";\necho fib4(25);\necho \"\\n\";\necho fib4(26);\necho\
    \ \"\\n\";\necho fib4(27);\necho \"\\n\";\necho fib4(28);\necho \"\\n\";\necho\
    \ fib4(29);\necho \"\\n\";\necho fib4(30\nfunction candidate(...$args) {\n   \
    \ return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1_jqytup.php on line 94\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    $numbers = [0, 0, 2, 0];\n    if ($n < 4) {\n        return\
    \ $numbers[$n - 1];\n    }\n    $i = 4;\n    while ($i <= $n) {\n        $sum\
    \ = $numbers[0] + $numbers[1] + $numbers[2] + $numbers[3];\n        array_shift($numbers);\n\
    \        array_push($numbers, $sum);\n        $i++;\n    }\n    return $numbers[3];\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4[0] = 0;\n\t$fib4[1]\
    \ = 0;\n\t$fib4[2] = 2;\n\t$fib4[3] = 0;\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\
    \t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) .\
    \ \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojhi3tb1.php:23\n\
    Stack trace:\n#0 /tmp/tmpojhi3tb1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpojhi3tb1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $x0 = 0;\n    $x1 = 0;\n\
    \    $x2 = 2;\n    $x3 = 0;\n    $x4 = 0;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $x4 = $x3 + $x2 + $x1 + $x0;\n        $x0 = $x1;\n        $x1 = $x2;\n\
    \        $x2 = $x3;\n        $x3 = $x4;\n    }\n    return $x4;\n}\necho fib4(5)\
    \ . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "28\n54\n104\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftlghr9x.php:38\n\
    Stack trace:\n#0 /tmp/tmpftlghr9x.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpftlghr9x.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    $m = 2;\n    $i = 2;\n    while ($i < $n) {\n  \
    \      $d = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c\
    \ = $d;\n        $i++;\n    }\n    return $d;\n}\n\nvar_dump(fib4(6));\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "int(40)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0m2a2lwv.php:38\n\
    Stack trace:\n#0 /tmp/tmp0m2a2lwv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0m2a2lwv.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = 0;\n\t$b = 0;\n\t$c =\
    \ 2;\n\t$d = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\
    \t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\treturn $d;\n}\n\
    \necho \"fib4(0) = \" . fib4(0) . \"\\n\";\necho \"fib4(1) = \" . fib4(1) . \"\
    \\n\";\necho \"fib4(2) = \" . fib4(2) . \"\\n\";\necho \"fib4(3) = \" . fib4(3)\
    \ . \"\\n\";\necho \"fib4(4) = \" . fib4(4) . \"\\n\";\necho \"fib4(5) = \" .\
    \ fib4(5) . \"\\n\";\necho \"fib4(6) = \" . fib4(6) . \"\\n\";\necho \"fib4(7)\
    \ = \" . fib4(7) . \"\\n\";\necho \"fib4(20) = \" . fib4(20) . \"\\n\";\necho\
    \ \"fib4(100) = \" . fib4(100) . \"\\n\";\necho \"fib4(1000) = \" . fib4(1000)\
    \ . \"\\n\";\necho \"fib4(10000) = \" . fib4(10000) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "fib4(0) = 0\nfib4(1) = 0\nfib4(2) = 0\nfib4(3) = 2\nfib4(4) = 4\nfib4(5)\
    \ = 8\nfib4(6) = 14\nfib4(7) = 28\nfib4(20) = 141776\nfib4(100) = 8.9592309568468E+27\n\
    fib4(1000) = 2.8826119389921E+284\nfib4(10000) = INF\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp9ygdrsgl.php:47\nStack trace:\n#0 /tmp/tmp9ygdrsgl.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9ygdrsgl.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n ==\
    \ 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n\
    \    if ($n == 4) {\n        return 2;\n    }\n    $a = array(0, 0, 2, 0, 2);\n\
    \    for ($i = 5; $i <= $n; $i++) {\n        $a[] = $a[$i - 1] + $a[$i - 2] +\
    \ $a[$i - 3] + $a[$i - 4];\n    }\n    return $a[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\necho fib4(6);\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "23\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgavdqpgm.php:28\n\
    Stack trace:\n#0 /tmp/tmpgavdqpgm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpgavdqpgm.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4 = [0, 0, 2, 0];\n\t\
    for ($i = 3; $i < $n; $i++) {\n\t\t$fib4[$i + 1] = $fib4[$i] + $fib4[$i - 1] +\
    \ $fib4[$i - 2] + $fib4[$i - 3];\n\t}\n\treturn $fib4[$n];\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) {\n        return\
    \ 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    $res = [0, 0, 2,\
    \ 0];\n    for ($i = 3; $i < $n; $i++) {\n        $res[$i % 4] = $res[($i - 1)\
    \ % 4] + $res[($i - 2) % 4] + $res[($i - 3) % 4] + $res[($i - 4) % 4];\n    }\n\
    \    return $res[($n - 1) % 4];\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkptwznsu.php:34\n\
    Stack trace:\n#0 /tmp/tmpkptwznsu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkptwznsu.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $temp =\
    \ $d;\n        $d = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n \
    \       $c = $temp;\n    }\n    return $d;\n}\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cn0mr4s.php:34\n\
    Stack trace:\n#0 /tmp/tmp4cn0mr4s.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4cn0mr4s.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n < 0) return null;\n\
    \    if($n <= 2) return $n * 2;\n    $f0 = 0;\n    $f1 = 0;\n    $f2 = 2;\n  \
    \  $f3 = 0;\n    $res = 0;\n    for($i = 3; $i <= $n; $i++) {\n        $res =\
    \ $f0 + $f1 + $f2 + $f3;\n        $f0 = $f1;\n        $f1 = $f2;\n        $f2\
    \ = $f3;\n        $f3 = $res;\n    }\n    return $res;\n}\n\necho fib4(5);\necho\
    \ PHP_EOL;\necho fib4(6);\necho PHP_EOL;\necho fib4(7);\necho PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "8\n14\n28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyy69itru.php:44\n\
    Stack trace:\n#0 /tmp/tmpyy69itru.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpyy69itru.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n == 0) return 0;\n \
    \ if ($n == 1) return 0;\n  if ($n == 2) return 2;\n  if ($n == 3) return 0;\n\
    \  $n1 = 0;\n  $n2 = 0;\n  $n3 = 2;\n  $n4 = 0;\n  for ($i = 3; $i < $n; $i++)\
    \ {\n    $res = $n1 + $n2 + $n3 + $n4;\n    $n1 = $n2;\n    $n2 = $n3;\n    $n3\
    \ = $n4;\n    $n4 = $res;\n  }\n  return $res;\n}\n\necho fib4(5) . \"\\n\";\n\
    echo fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  //YOUR CODE GOES HERE\n}\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbn9qii8.php:23\n\
    Stack trace:\n#0 /tmp/tmpjbn9qii8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjbn9qii8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $n0 = 0;\n    $n1 = 0;\n\
    \    $n2 = 2;\n    $n3 = 0;\n    if ($n == 0) return $n0;\n    if ($n == 1) return\
    \ $n1;\n    if ($n == 2) return $n2;\n    if ($n == 3) return $n3;\n    for ($i\
    \ = 4; $i <= $n; $i++) {\n        $n0 = $n1;\n        $n1 = $n2;\n        $n2\
    \ = $n3;\n        $n3 = $n0 + $n1 + $n2 + $n3;\n    }\n    return $n3;\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f1v9ipg.php:38\n\
    Stack trace:\n#0 /tmp/tmp4f1v9ipg.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4f1v9ipg.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 0) {\n    return\
    \ 0;\n  }\n  if ($n == 1) {\n    return 0;\n  }\n  if ($n == 2) {\n    return\
    \ 2;\n  }\n  if ($n == 3) {\n    return 0;\n  }\n  $f1 = 0;\n  $f2 = 0;\n  $f3\
    \ = 2;\n  $f4 = 0;\n  $f5 = 0;\n  for ($i = 4; $i <= $n; $i++) {\n    $f5 = $f1\
    \ + $f2 + $f3 + $f4;\n    $f1 = $f2;\n    $f2 = $f3;\n    $f3 = $f4;\n    $f4\
    \ = $f5;\n  }\n  return $f5;\n}\n\necho \"fib4(5):\" . fib4(5) . \"\\n\";\necho\
    \ \"fib4(6):\" . fib4(6) . \"\\n\";\necho \"fib4(7):\" . fib4(7) . \"\\n\";\n\
    echo \"fib4(8):\" . fib4(8) . \"\\n\";\necho \"fib4(9):\" . fib4(9) . \"\\n\"\
    ;\necho \"fib4(10):\" . fib4(10) . \"\\n\";\necho \"fib4(11):\" . fib4(11) . \"\
    \\n\";\necho \"fib4(12):\" . fib4(12) . \"\\n\";\necho \"fib4(13):\" . fib4(13)\
    \ . \"\\n\";\necho \"fib4(14):\" . fib4(14) . \"\\n\";\necho \"fib4(15):\" . fib4(15)\
    \ . \"\\n\";\necho \"fib4(16):\" . fib4(16) . \"\\n\";\necho \"fib4(17):\" . fib4(17)\
    \ . \"\\n\";\necho \"fib4(18):\" . fib4(18) . \"\\n\";\necho \"fib4(19):\" . fib4(19)\
    \ . \"\\n\";\necho \"fib4(20):\" .\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkbqm07gq.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) return 0;\n\
    \    if ($n == 1) return 0;\n    if ($n == 2) return 2;\n    if ($n == 3) return\
    \ 0;\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i\
    \ <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b\
    \ = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\necho fib4(5).\"\
    \\n\";\necho fib4(6).\"\\n\";\necho fib4(7).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n <= 3) {\n\t\treturn\
    \ $n - 1;\n\t}\n\t$nums = [0, 0, 2, 0];\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t\
    $nums[$i % 4] = $nums[($i - 1) % 4] + $nums[($i - 2) % 4] + $nums[($i - 3) % 4]\
    \ + $nums[($i - 4) % 4];\n\t}\n\treturn $nums[$n % 4];\n}\n\nprint_r(fib4(5));\n\
    print_r(fib4(6));\nprint_r(fib4(7));\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: '4814'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    $i = 3;\n    while ($i <= $n) {\n        $d = $a\
    \ + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $i++;\n\
    \    }\n    return $d;\n}\nfib4(8);\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5tfuklk.php:37\n\
    Stack trace:\n#0 /tmp/tmpf5tfuklk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpf5tfuklk.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if ($n ==\
    \ 3) {\n        return 0;\n    } else {\n        $f[0] = 0;\n        $f[1] = 0;\n\
    \        $f[2] = 2;\n        $f[3] = 0;\n        for ($i = 4; $i <= $n; $i++)\
    \ {\n            $f[$i] = $f[$i-1] + $f[$i-2] + $f[$i-3] + $f[$i-4];\n       \
    \ }\n        return $f[$n];\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib = [0, 0, 2, 0];\n\tfor\
    \ ($i = 4; $i <= $n; $i++) {\n\t\t$fib[$i%4] = $fib[($i+3)%4] + $fib[($i+2)%4]\
    \ + $fib[($i+1)%4] + $fib[$i%4];\n\t}\n\treturn $fib[$n%4];\n}\necho fib4(5) .\
    \ \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i\
    \ = 3; $i < $n; $i++) {\n        $temp = $a + $b + $c + $d;\n        $a = $b;\n\
    \        $b = $c;\n        $c = $d;\n        $d = $temp;\n    }\n    return $a\
    \ + $b + $c + $d;\n}\necho fib4(6);\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "14\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndph8vi7.php:38\n\
    Stack trace:\n#0 /tmp/tmpndph8vi7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpndph8vi7.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        throw\
    \ new Exception(\"argument invalid\");\n    }\n    if ($n == 0) {\n        return\
    \ 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n\
    \        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a\
    \ = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++)\
    \ {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n   \
    \     $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(5);\n\
    echo \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t//https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/\n\
    \t$f = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$f[$i % 4] =\
    \ $f[($i-1) % 4] + $f[($i-2) % 4] + $f[($i-3) % 4] + $f[($i-4) % 4];\n\t}\n\t\
    return $f[$n % 4];\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fibs = [0, 0, 2, 0];\n\
    \    $cur = 3;\n    while ($cur < $n) {\n        $fibs[3] = $fibs[0] + $fibs[1]\
    \ + $fibs[2] + $fibs[3];\n        $fibs[0] = $fibs[1];\n        $fibs[1] = $fibs[2];\n\
    \        $fibs[2] = $fibs[3];\n        $cur++;\n    }\n    return $fibs[3];\n\
    }\nprint_r(fib4(5).\"\\n\");\nprint_r(fib4(6).\"\\n\");\nprint_r(fib4(7).\"\\\
    n\");\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "6\n16\n40\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8wlij9x.php:35\n\
    Stack trace:\n#0 /tmp/tmpe8wlij9x.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpe8wlij9x.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 3) {\n        return\
    \ $n * 2;\n    }\n\n    $fib_prev_prev_prev = 0;\n    $fib_prev_prev = 0;\n  \
    \  $fib_prev = 2;\n    $fib = 0;\n\n    for ($i = 3; $i <= $n; $i++) {\n     \
    \   $fib = $fib_prev_prev_prev + $fib_prev_prev + $fib_prev;\n        $fib_prev_prev_prev\
    \ = $fib_prev_prev;\n        $fib_prev_prev = $fib_prev;\n        $fib_prev =\
    \ $fib;\n    }\n\n    return $fib;\n}\n\necho fib4(5);\necho fib4(6);\necho fib4(7);\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "81426\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgsxkps8.php:43\n\
    Stack trace:\n#0 /tmp/tmpzgsxkps8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpzgsxkps8.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n < 2) return 0;\n \
    \   if($n == 2) return 2;\n    $cache = array();\n    $cache[0] = 0;\n    $cache[1]\
    \ = 0;\n    $cache[2] = 2;\n    $cache[3] = 0;\n    for($i = 4; $i <= $n; $i++)\
    \ {\n        $cache[$i] = $cache[$i-1] + $cache[$i-2] + $cache[$i-3] + $cache[$i-4];\n\
    \    }\n    return $cache[$n];\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5he3w02e.php:23\n\
    Stack trace:\n#0 /tmp/tmp5he3w02e.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5he3w02e.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    if ($n == 0) {\n        return $a;\n    } else if\
    \ ($n == 1) {\n        return $b;\n    } else if ($n == 2) {\n        return $c;\n\
    \    } else if ($n == 3) {\n        return $d;\n    }\n    for ($i = 0; $i < $n\
    \ - 3; $i++) {\n        $a = $b;\n        $b = $c;\n        $c = $d;\n       \
    \ $d = $a + $b + $c + $d;\n    }\n    return $d;\n}\n\necho fib4(5) . \"\\n\"\
    ; // 4\necho fib4(6) . \"\\n\"; // 8\necho fib4(7) . \"\\n\"; // 14\necho fib4(8)\
    \ . \"\\n\"; // 26\necho fib4(9) . \"\\n\"; // 48\necho fib4(10) . \"\\n\"; //\
    \ 88\necho fib4(11) . \"\\n\"; // 162\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n14\n36\n92\n234\n596\n1518\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp9xpz8gvp.php:51\nStack trace:\n#0 /tmp/tmp9xpz8gvp.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9xpz8gvp.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $f = [0, 0, 2, 0];\n   \
    \ for ($i = 4; $i <= $n; $i++) {\n        $f[$i % 4] = $f[($i - 1) % 4] + $f[($i\
    \ - 2) % 4] + $f[($i - 3) % 4] + $f[($i - 4) % 4];\n    }\n    return $f[$n %\
    \ 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = 0;\n\t$b = 0;\n\t$c =\
    \ 2;\n\t$d = 0;\n\tfor ($i = 2; $i < $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\
    \t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\treturn $d;\n}\n\
    fib4(5);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3p4o6w2j.php:35\n\
    Stack trace:\n#0 /tmp/tmp3p4o6w2j.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp3p4o6w2j.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$nth = 0;\n\t$previous = 0;\n\
    \t$two_before = 0;\n\t$three_before = 0;\n\t$four_before = 0;\n\tfor ($i = 1;\
    \ $i <= $n; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$nth = 0;\n\t\t} else if ($i ==\
    \ 2) {\n\t\t\t$nth = 2;\n\t\t} else {\n\t\t\t$nth = $previous + $two_before +\
    \ $three_before + $four_before;\n\t\t}\n\t\t$four_before = $three_before;\n\t\t\
    $three_before = $two_before;\n\t\t$two_before = $previous;\n\t\t$previous = $nth;\n\
    \t}\n\treturn $nth;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0dhhz03e.php:41\n\
    Stack trace:\n#0 /tmp/tmp0dhhz03e.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0dhhz03e.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n ==\
    \ 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n\
    \    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    $e = 0;\n    for ($i\
    \ = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n\
    \        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        throw\
    \ new InvalidArgumentException(\"n must be >= 0\");\n    }\n    $fib4_0 = 0;\n\
    \    $fib4_1 = 0;\n    $fib4_2 = 2;\n    $fib4_3 = 0;\n    $fib4_4 = 0;\n    if\
    \ ($n < 4) {\n        switch ($n) {\n            case 0:\n                return\
    \ $fib4_0;\n            case 1:\n                return $fib4_1;\n           \
    \ case 2:\n                return $fib4_2;\n            case 3:\n            \
    \    return $fib4_3;\n        }\n    }\n    for ($i = 4; $i <= $n; $i++) {\n \
    \       $fib4_4 = $fib4_3 + $fib4_2 + $fib4_1 + $fib4_0;\n        $fib4_0 = $fib4_1;\n\
    \        $fib4_1 = $fib4_2;\n        $fib4_2 = $fib4_3;\n        $fib4_3 = $fib4_4;\n\
    \    }\n    return $fib4_4;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4 = array(0, 0, 2, 0);\n\
    \t$currentN = 4;\n\t$currentNum = 0;\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\
    \t}\n\twhile ($currentN <= $n) {\n\t\t$currentNum = $fib4[$currentN - 1] + $fib4[$currentN\
    \ - 2] + $fib4[$currentN - 3] + $fib4[$currentN - 4];\n\t\t$fib4[] = $currentNum;\n\
    \t\t$currentN++;\n\t}\n\treturn $currentNum;\n}\nprint(fib4(7));\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '14'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fibs = [0, 0, 2, 0];\n  for\
    \ ($i = 4; $i <= $n; $i++) {\n    $fibs[$i % 4] = $fibs[($i - 1) % 4] + $fibs[($i\
    \ - 2) % 4] + $fibs[($i - 3) % 4] + $fibs[($i - 4) % 4];\n  }\n  return $fibs[$n\
    \ % 4];\n}\n\nfor ($i = 0; $i < 8; $i++) {\n  print(fib4($i) . \"\\n\");\n}\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "0\n0\n2\n0\n2\n4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 2) {\n        return\
    \ 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 3; $i < $n; $i++) {\n  \
    \      $fib4[$i + 1] = $fib4[$i] + $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i -\
    \ 3];\n    }\n    return $fib4[$n];\n}\nprint(fib4(7).\"\\n\");\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        throw\
    \ new Exception(\"fib4(n) requires n > 0\");\n    }\n\n    $a = 0;\n    $b = 0;\n\
    \    $c = 2;\n    $d = 0;\n\n    for ($i = 2; $i < $n; $i++) {\n        $e = $a\
    \ + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    \
    \    $d = $e;\n    }\n\n    return $d;\n}\n\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4b4n8wh.php:41\n\
    Stack trace:\n#0 /tmp/tmpu4b4n8wh.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpu4b4n8wh.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) %\
    \ 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n\
    \    return $fib4[$n % 4];\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rfks1ce.php:24\n\
    Stack trace:\n#0 /tmp/tmp7rfks1ce.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7rfks1ce.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$base = [0, 0, 2, 0];\n\t\
    if ($n < 4) {\n\t\treturn $base[$n];\n\t}\n\t$count = 4;\n\t$lastCount = 4;\n\t\
    $lastValue = 8;\n\twhile ($count <= $n) {\n\t\t$prevCount = $lastCount;\n\t\t\
    $lastCount = $count;\n\t\t$lastValue = ($lastValue + $prevCount) % 1000000007;\n\
    \t\t$count++;\n\t}\n\treturn $lastValue;\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(100) . \"\\n\";\necho fib4(10000)\
    \ . \"\\n\";\necho fib4(1000000) . \"\\n\";\necho fib4(100000000) . \"\\n\";\n\
    echo fib4(100000000) . \"\\n\";\necho fib4(100000000) . \"\\n\";\necho fib4(100000000)\
    \ . \"\\n\";\necho fib4(100000000) . \"\\n\";\necho fib4(100000000) . \"\\n\"\
    ;\necho fib4(100000000) . \"\\n\";\necho fib4(100000000) . \"\\n\";\necho fib4(100000000)\
    \ . \"\\n\";\necho fib4(100000000) . \"\\n\";\necho fib4(100000000) . \"\\n\"\
    ;\necho fib4(100000000) . \"\\n\";\necho fib4(100000000) . \"\\n\";\necho fib4(100000000)\
    \ . \"\\n\";\necho fib4(100000000) . \"\\n\";\necho fib4(100000000) . \"\\n\"\
    ;\necho fib4(100000000) . \"\\n\";\necho fib4(100000000) . \"\\n\";\necho fib4(100000000)\
    \ . \"\\n\";\necho fib4(100000000) . \"\\n\";\necho fib4(100000000) . \"\\n\"\
    ;\necho fib4(100000000) . \"\\n\";\necho fib4(100000000) . \"\\n\";\necho fib4(100000000)\
    \ . \"\\n\";\necho fib4(100000000) . \"\\n\";\necho fib4(100000000) . \"\\n\"\
    ;\necho fib4\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpefsspaqy.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n == 0) return 0;\n\
    \    if($n == 1) return 0;\n    if($n == 2) return 2;\n    if($n == 3) return\
    \ 0;\n    $result = 0;\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n \
    \   for($i = 4; $i <= $n; $i++) {\n        $result = $a + $b + $c + $d;\n    \
    \    $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $result;\n   \
    \ }\n    return $result;\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array();\n    $fib[0]\
    \ = 0;\n    $fib[1] = 0;\n    $fib[2] = 2;\n    $fib[3] = 0;\n    for ($i = 4;\
    \ $i <= $n; $i++) {\n        $fib[$i] = $fib[$i-1] + $fib[$i-2] + $fib[$i-3] +\
    \ $fib[$i-4];\n    }\n    return $fib[$n];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4 = array(0, 0, 2, 0);\n\
    \t$i = 3;\n\twhile($i <= $n) {\n\t\t$fib4[$i%4] = $fib4[0] + $fib4[1] + $fib4[2]\
    \ + $fib4[3];\n\t\t$i++;\n\t}\n\treturn $fib4[$n%4];\n}\n\nfor($i = 0; $i < 10;\
    \ $i++) {\n\techo $i . \": \" . fib4($i) . \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0: 0\n1: 0\n2: 2\n3: 2\n4: 4\n5: 8\n6: 16\n7: 30\n8: 58\n9: 112\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpa73pgvg0.php:33\nStack trace:\n\
    #0 /tmp/tmpa73pgvg0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa73pgvg0.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 0) {\n\t\treturn\
    \ null;\n\t}\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tif ($n == 1) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n == 2) {\n\t\treturn 2;\n\t}\n\tif ($n == 3) {\n\t\treturn\
    \ 0;\n\t}\n\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 4; $i <= $n;\
    \ $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\
    \t\t$d = $e;\n\t}\n\treturn $e;\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\
    \\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $arr = [0, 0, 2, 0];\n  if\
    \ ($n <= 3) {\n    return $arr[$n];\n  }\n  for ($i = 4; $i <= $n; $i++) {\n \
    \   $arr[$i % 4] = $arr[($i - 1) % 4] + $arr[($i - 2) % 4] + $arr[($i - 3) % 4]\
    \ + $arr[($i - 4) % 4];\n  }\n  return $arr[$n % 4];\n}\n\nfib4(4);\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib_nums = [0, 0, 2, 0];\n\
    \  if ($n < 4) {\n    return $fib_nums[$n];\n  }\n  for ($i = 4; $i <= $n; $i++)\
    \ {\n    $fib_nums[$i%4] = $fib_nums[($i+3)%4] + $fib_nums[($i+2)%4] + $fib_nums[($i+1)%4]\
    \ + $fib_nums[$i%4];\n  }\n  return $fib_nums[$n%4];\n}\necho fib4(5); // 4\n\
    echo \"\\n\";\necho fib4(6); // 8\necho \"\\n\";\necho fib4(7); // 14\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        $a =\
    \ $b;\n        $b = $c;\n        $c = $d;\n        $d = $a + $b + $c;\n    }\n\
    \    return $d;\n}\n\necho fib4(5);\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "6\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj33mvkct.php:35\n\
    Stack trace:\n#0 /tmp/tmpj33mvkct.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpj33mvkct.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) return 0;\n\
    \    $p = 0;\n    $q = 0;\n    $r = 2;\n    $i = 3;\n    while ($i < $n) {\n \
    \       $s = $p + $q + $r;\n        $p = $q;\n        $q = $r;\n        $r = $s;\n\
    \        $i += 1;\n    }\n    return $s;\n}\n\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjjn9k6e.php:37\n\
    Stack trace:\n#0 /tmp/tmpmjjn9k6e.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpmjjn9k6e.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$list = [0, 0, 2, 0];\n\t\
    $i = 4;\n\twhile($i <= $n) {\n\t\t$list[$i % 4] = $list[($i-1) % 4] + $list[($i-2)\
    \ % 4] + $list[($i-3) % 4] + $list[($i-4) % 4];\n\t\t$i++;\n\t}\n\treturn $list[$n\
    \ % 4];\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 0) {\n    throw new\
    \ Exception(\"Unsupported Number\");\n  }\n  if ($n == 0) {\n    return 0;\n \
    \ }\n  if ($n == 1) {\n    return 0;\n  }\n  if ($n == 2) {\n    return 2;\n \
    \ }\n  if ($n == 3) {\n    return 0;\n  }\n  $fib = [0, 0, 2, 0];\n  for ($i =\
    \ 4; $i <= $n; $i++) {\n    $fib[0] = $fib[1];\n    $fib[1] = $fib[2];\n    $fib[2]\
    \ = $fib[3];\n    $fib[3] = $fib[0] + $fib[1] + $fib[2] + $fib[3];\n  }\n  return\
    \ $fib[3];\n}\necho fib4(5); // 4\necho \"\\n\";\necho fib4(6); // 8\necho \"\\\
    n\";\necho fib4(7); // 14\necho \"\\n\";\necho fib4(8); // 28\necho \"\\n\";\n\
    echo fib4(9); // 50\necho \"\\n\";\necho fib4(10); // 90\necho \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n14\n36\n92\n234\n596\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp5ysu2v4o.php:58\nStack trace:\n#0 /tmp/tmp5ysu2v4o.php(64): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5ysu2v4o.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fibs = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fibs[$i % 4] = $fibs[($i - 1) %\
    \ 4] + $fibs[($i - 2) % 4] + $fibs[($i - 3) % 4] + $fibs[($i - 4) % 4];\n    }\n\
    \    return $fibs[$n % 4];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\\
    n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fib4Cache = [0, 0, 2, 0];\n\
    \  $i = 4;\n  while($i <= $n) {\n    $fib4Cache[$i % 4] = $fib4Cache[($i-1) %\
    \ 4] + $fib4Cache[($i-2) % 4] + $fib4Cache[($i-3) % 4] + $fib4Cache[($i-4) % 4];\n\
    \    $i++;\n  }\n  return $fib4Cache[$n % 4];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n\n    if ($n <= 2) {\n        return 2;\n    }\n\n    $f =\
    \ [0, 0, 2, 0];\n    for ($i = 3; $i < $n; $i++) {\n        $f[$i % 4] = $f[($i\
    \ - 1) % 4] + $f[($i - 2) % 4] + $f[($i - 3) % 4] + $f[($i - 4) % 4];\n    }\n\
    \n    return $f[($n - 1) % 4];\n}\n\nforeach (range(0, 15) as $i) {\n    echo\
    \ \"$i: \" . fib4($i) . \"\\n\";\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "0: 0\n1: 2\n2: 2\n3: 2\n4: 2\n5: 4\n6: 8\n7: 16\n8: 30\n9: 58\n10: 112\n\
    11: 216\n12: 416\n13: 802\n14: 1546\n15: 2980\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpp_87d_76.php:41\nStack trace:\n#0 /tmp/tmpp_87d_76.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp_87d_76.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 0) {\n\t\treturn\
    \ false;\n\t}\n\n\t$fib0 = 0;\n\t$fib1 = 0;\n\t$fib2 = 2;\n\t$fib3 = 0;\n\t$fib4\
    \ = 0;\n\n\tif ($n == 0) {\n\t\treturn $fib0;\n\t}\n\tif ($n == 1) {\n\t\treturn\
    \ $fib1;\n\t}\n\tif ($n == 2) {\n\t\treturn $fib2;\n\t}\n\tif ($n == 3) {\n\t\t\
    return $fib3;\n\t}\n\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4 = $fib0 + $fib1\
    \ + $fib2 + $fib3;\n\t\t$fib0 = $fib1;\n\t\t$fib1 = $fib2;\n\t\t$fib2 = $fib3;\n\
    \t\t$fib3 = $fib4;\n\t}\n\n\treturn $fib4;\n}\n\necho fib4(5) . \"\\n\";\necho\
    \ fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(10) . \"\\n\";\necho\
    \ fib4(20) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(40) . \"\\n\";\necho\
    \ fib4(50) . \"\\n\";\necho fib4(60) . \"\\n\";\necho fib4(70) . \"\\n\";\necho\
    \ fib4(80) . \"\\n\";\necho fib4(90) . \"\\n\";\necho fib4(100) . \"\\n\";\necho\
    \ fib4(110) . \"\\n\";\necho fib4(120) . \"\\n\";\necho fib4(130) . \"\\n\";\n\
    echo fib4(140) . \"\\n\";\necho fib4(150) . \"\\n\";\necho fib4(160) . \"\\n\"\
    ;\necho fib4(170) . \"\\n\";\necho fib4(180) . \"\\n\";\necho fib4(190) . \"\\\
    n\";\necho fib4(200) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "4\n8\n14\n104\n73552\n52080824\n36877489824\n26112283777288\n18489636016979440\n\
    1.3092176959938E+19\n9.2703337909376E+21\n6.56415574418E+24\n4.6479599985895E+27\n\
    3.2911364371028E+30\n2.330394205396E+33\n1.650110001919E+36\n1.1684130573825E+39\n\
    8.2733216032519E+41\n5.8581894406567E+44\n4.148078023358E+47\n2.9371790486066E+50\n\
    2.0797633783633E+53\n1.4726428448525E+56\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib_numbers = [0, 0, 2,\
    \ 0];\n    for ($i = 3; $i < $n; $i++) {\n        $fib_numbers[$i+1] = $fib_numbers[$i-1]\
    \ + $fib_numbers[$i-2] + $fib_numbers[$i-3] + $fib_numbers[$i-4];\n    }\n   \
    \ return $fib_numbers[$n];\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpds8lacwl.php:27\n\
    Stack trace:\n#0 /tmp/tmpds8lacwl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpds8lacwl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n ==\
    \ 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n\
    \    $result = 0;\n    $first = 0;\n    $second = 0;\n    $third = 2;\n    $fourth\
    \ = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $result = $first + $second\
    \ + $third + $fourth;\n        $first = $second;\n        $second = $third;\n\
    \        $third = $fourth;\n        $fourth = $result;\n    }\n    return $result;\n\
    }\n\n$n = 5;\n$result = fib4($n);\necho $result;\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '4'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_l0j0yao.php:24\n\
    Stack trace:\n#0 /tmp/tmp_l0j0yao.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_l0j0yao.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n == 0 || $n == 1 ||\
    \ $n == 3) {\n        return 0;\n    }\n    if($n == 2) {\n        return 2;\n\
    \    }\n    $n1 = 0;\n    $n2 = 0;\n    $n3 = 0;\n    $n4 = 2;\n    for($i = 3;\
    \ $i < $n; $i++) {\n        $tmp = $n1 + $n2 + $n3 + $n4;\n        $n1 = $n2;\n\
    \        $n2 = $n3;\n        $n3 = $n4;\n        $n4 = $tmp;\n    }\n    return\
    \ $n1 + $n2 + $n3 + $n4;\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "8\n16\n30\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0qze8iz.php:43\n\
    Stack trace:\n#0 /tmp/tmpu0qze8iz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpu0qze8iz.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 4) {\n\t\treturn\
    \ $n * 2;\n\t}\n\t$fib = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib[$i % 4] = $fib[($i-1) % 4] + $fib[($i-2) % 4] + $fib[($i-3) % 4] + $fib[($i-4)\
    \ % 4];\n\t}\n\treturn $fib[$n % 4];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n28\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $n = $n - 1;\n    if ($n\
    \ <= 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 2;\n \
    \   }\n    $f = array(0, 0, 2, 0);\n    $i = 3;\n    while ($i < $n) {\n     \
    \   $f[0] = $f[1];\n        $f[1] = $f[2];\n        $f[2] = $f[3];\n        $f[3]\
    \ = $f[0] + $f[1] + $f[2];\n        $i++;\n    }\n    return $f[3];\n}\n\necho\
    \ fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\
    \\n\";\necho fib4(8);\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "2\n4\n6\n12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4_58bvd.php:49\n\
    Stack trace:\n#0 /tmp/tmpk4_58bvd.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpk4_58bvd.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4 = [0, 0, 2, 0];\n\t\n\
    \tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i\
    \ - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n\t}\n\t\n\treturn $fib4[$n\
    \ % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwj99a19t.php:24\n\
    Stack trace:\n#0 /tmp/tmpwj99a19t.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpwj99a19t.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $map = array(0, 0, 2, 0);\n\
    \    if ($n <= 3) {\n        return $map[$n];\n    }\n    $i = 0;\n    $j = 1;\n\
    \    $k = 2;\n    $l = 3;\n    $sum = 6;\n    for ($m = 4; $m <= $n; $m++) {\n\
    \        $map[$m] = $sum;\n        $sum += $map[$i];\n        $i = $j;\n     \
    \   $j = $k;\n        $k = $l;\n        $l = $m;\n    }\n    return $map[$n];\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5ah_jis.php:41\n\
    Stack trace:\n#0 /tmp/tmpj5ah_jis.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpj5ah_jis.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // this solution is O(n)\n\
    \    if ($n < 3) return [0, 0, 2, 0][$n];\n    $prev = 0;\n    $prev_prev = 0;\n\
    \    $prev_prev_prev = 0;\n    $prev_prev_prev_prev = 0;\n    $curr = 0;\n   \
    \ for ($i = 3; $i <= $n; $i++) {\n        $curr = $prev + $prev_prev + $prev_prev_prev\
    \ + $prev_prev_prev_prev;\n        $prev_prev_prev_prev = $prev_prev_prev;\n \
    \       $prev_prev_prev = $prev_prev;\n        $prev_prev = $prev;\n        $prev\
    \ = $curr;\n    }\n    return $curr;\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvidd1zh.php:37\n\
    Stack trace:\n#0 /tmp/tmpbvidd1zh.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpbvidd1zh.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ -1;\n    }\n    $fib = array_fill(0, $n+1, 0);\n    $fib[0] = 0;\n    $fib[1]\
    \ = 0;\n    $fib[2] = 2;\n    for ($i = 3; $i <= $n; $i++) {\n        $fib[$i]\
    \ = $fib[$i-1] + $fib[$i-2] + $fib[$i-3] + $fib[$i-4];\n    }\n    return $fib[$n];\n\
    }\n\necho \"fib4(5): \" . fib4(5) . \"\\n\";\necho \"fib4(6): \" . fib4(6) . \"\
    \\n\";\necho \"fib4(7): \" . fib4(7) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "fib4(5): 8\nfib4(6): 16\nfib4(7): 30\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv9hel7dr.php:37\nStack trace:\n#0 /tmp/tmpv9hel7dr.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv9hel7dr.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4 = [0, 0, 2, 0];\n\t\
    if ($n <= 3) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho\
    \ \"\\n\";\necho fib4(7);\necho \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = 0;\n\t$b = 0;\n\t$c =\
    \ 2;\n\t$d = 0;\n\tif ($n <= 3) {\n\t\tif ($n == 0) {\n\t\t\treturn 0;\n\t\t}\
    \ else if ($n == 1) {\n\t\t\treturn 0;\n\t\t} else if ($n == 2) {\n\t\t\treturn\
    \ 2;\n\t\t} else if ($n == 3) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tfor ($i = 0; $i\
    \ < $n-3; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\
    \t$c = $d;\n\t\t$d = $e;\n\t}\n\treturn $e;\n}\nprint fib4(5) . \"\\n\";\nprint\
    \ fib4(6) . \"\\n\";\nprint fib4(7) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array();\n    $fib4[0]\
    \ = 0;\n    $fib4[1] = 0;\n    $fib4[2] = 2;\n    $fib4[3] = 0;\n    if ($n <\
    \ 4) {\n        return $fib4[$n];\n    }\n    for ($i = 4; $i <= $n; $i++) {\n\
    \        $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \    }\n    return $fib4[$n];\n}\necho fib4(5).\"\\n\";\necho fib4(6).\"\\n\"\
    ;\necho fib4(7).\"\\n\";\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$a = 0;\n\t$b = 0;\n\t$c =\
    \ 2;\n\t$d = 0;\n\t$e = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$e = $a + $b\
    \ + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\t\
    return $e;\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "8\n14\n28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzr6t60e.php:39\n\
    Stack trace:\n#0 /tmp/tmpkzr6t60e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkzr6t60e.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return 0;\n    }\n    if ($n == 4) {\n        return 2;\n    }\n    $lastN =\
    \ 2;\n    $last2 = 0;\n    $last3 = 0;\n    $last4 = 0;\n    for ($i = 5; $i <=\
    \ $n; $i++) {\n        $newN = $lastN + $last2 + $last3 + $last4;\n        $last4\
    \ = $last3;\n        $last3 = $last2;\n        $last2 = $lastN;\n        $lastN\
    \ = $newN;\n    }\n    return $lastN;\n}\nprint_r(fib4(0));\nprint_r(fib4(1));\n\
    print_r(fib4(2));\nprint_r(fib4(3));\nprint_r(fib4(4));\nprint_r(fib4(5));\nprint_r(fib4(6));\n\
    print_r(fib4(7));\nprint_r(fib4(8));\nprint_r(fib4(9));\nprint_r(fib4(10));\n\
    print_r(fib4(11));\nprint_r(fib4(12));\nprint_r(fib4(13));\nprint_r(fib4(14));\n\
    print_r(fib4(15));\nprint_r(fib4(16));\nprint_r(fib4(17));\nprint_r(fib4(18));\n\
    print_r(fib4(19));\nprint_r(fib4(20));\nprint_r(fib4(21));\nprint_r(fib4(22));\n\
    print_r(fib4(23));\nprint_r(fib4(24));\nprint_r(fib4(25));\nprint_r(fib4(26));\n\
    print_r(fib4(27));\nprint_r(fib4(28));\nprint_r(fib4(29));\nprint_r(fib4(30));\n\
    print_r(fib4(31));\nprint\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe6tnqfb1.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $d = 0;\n    $c = 0;\n \
    \   $b = 0;\n    $a = 0;\n    $f = 2;\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      $d = $c;\n        $c = $b;\n        $b = $a;\n        $a = $f;\n      \
    \  $f = $a + $b + $c + $d;\n    }\n    return $f;\n}\n\necho fib4(5) . PHP_EOL;\n\
    echo fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "16\n30\n58\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkqd3vira.php:39\n\
    Stack trace:\n#0 /tmp/tmpkqd3vira.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkqd3vira.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) return 0;\n\
    \    $f = new SplFixedArray(4);\n    $f[0] = 0;\n    $f[1] = 0;\n    $f[2] = 2;\n\
    \    $f[3] = 0;\n    for ($i = 3; $i < $n; $i++) {\n        $f[3] = $f[0] + $f[1]\
    \ + $f[2] + $f[3];\n        $f[0] = $f[1];\n        $f[1] = $f[2];\n        $f[2]\
    \ = $f[3];\n    }\n    return $f[3];\n}\n\necho fib4(5) . PHP_EOL;\necho fib4(6)\
    \ . PHP_EOL;\necho fib4(7) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "6\n16\n40\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfim192sq.php:39\n\
    Stack trace:\n#0 /tmp/tmpfim192sq.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfim192sq.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\n}\n\nassert(true);\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsjg2wz0.php:25\n\
    Stack trace:\n#0 /tmp/tmpcsjg2wz0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcsjg2wz0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i\
    \ - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho\
    \ fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array(0, 0, 2, 0);\n\
    \    $index = 4;\n    while ($index <= $n) {\n        $fib[$index % 4] = $fib[($index\
    \ - 1) % 4] + $fib[($index - 2) % 4] + $fib[($index - 3) % 4] + $fib[($index -\
    \ 4) % 4];\n        $index++;\n    }\n    return $fib[$n % 4];\n}\necho fib4(5)\
    \ . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) return 0;\n\t\
    $fibs = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fibs[$i % 4]\
    \ = $fibs[0] + $fibs[1] + $fibs[2] + $fibs[3];\n\t}\n\treturn $fibs[$n % 4];\n\
    }\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 3) {\n    return\
    \ $n - 1;\n  }\n  $prev1 = 0;\n  $prev2 = 0;\n  $prev3 = 1;\n  $prev4 = 2;\n \
    \ $value = 3;\n  for ($i = 4; $i <= $n; $i++) {\n    $value = $prev1 + $prev2\
    \ + $prev3 + $prev4;\n    $prev1 = $prev2;\n    $prev2 = $prev3;\n    $prev3 =\
    \ $prev4;\n    $prev4 = $value;\n  }\n  return $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgt63ua1.php:39\n\
    Stack trace:\n#0 /tmp/tmpcgt63ua1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcgt63ua1.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib = [0, 0, 2, 0];\n\tif\
    \ ($n < 4) return $fib[$n];\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib[$i%4]\
    \ = $fib[($i-1)%4] + $fib[($i-2)%4] + $fib[($i-3)%4] + $fib[($i-4)%4];\n\t}\n\t\
    return $fib[$n%4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $i = 0;\n  $fib = array(0,\
    \ 0, 2, 0);\n  while ($i < $n) {\n    $fib[3] = $fib[0] + $fib[1] + $fib[2] +\
    \ $fib[3];\n    $fib[0] = $fib[1];\n    $fib[1] = $fib[2];\n    $fib[2] = $fib[3];\n\
    \    $i++;\n  }\n  return $fib[3];\n}\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxncwewg.php:32\n\
    Stack trace:\n#0 /tmp/tmpkxncwewg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkxncwewg.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $val = array(0, 0, 2, 0);\n\
    \    for ($i = 3; $i < $n; $i++) {\n        $val[$i % 4] = array_sum($val);\n\
    \    }\n    return $val[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6tc7xv0.php:28\n\
    Stack trace:\n#0 /tmp/tmpe6tc7xv0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpe6tc7xv0.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    for ($i = 2; $i < $n; $i++) {\n        $new = $b\
    \ + $c + $d + $a;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    \
    \    $d = $new;\n    }\n    return $b + $c + $d + $a;\n}\n\n$fib = fib4(7);\n\
    echo $fib;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "54\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8th9_sk.php:37\n\
    Stack trace:\n#0 /tmp/tmpx8th9_sk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpx8th9_sk.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $number = 0;\n    if ($n\
    \ <= 3) {\n        return $number;\n    }\n    if ($n == 4) {\n        return\
    \ 2;\n    }\n    $fib4_4 = 0;\n    $fib4_3 = 0;\n    $fib4_2 = 2;\n    $fib4_1\
    \ = 0;\n    for ($i = 5; $i <= $n; $i++) {\n        $number = $fib4_4 + $fib4_3\
    \ + $fib4_2 + $fib4_1;\n        $fib4_4 = $fib4_3;\n        $fib4_3 = $fib4_2;\n\
    \        $fib4_2 = $fib4_1;\n        $fib4_1 = $number;\n    }\n    return $number;\n\
    }\nprint fib4(5);\nprint \"\\n\";\nprint fib4(6);\nprint \"\\n\";\nprint fib4(7);\n\
    print \"\\n\";\nprint fib4(8);\nprint \"\\n\";\nprint fib4(9);\nprint \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "2\n4\n8\n14\n28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirhexqq7.php:51\n\
    Stack trace:\n#0 /tmp/tmpirhexqq7.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpirhexqq7.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i =\
    \ 3; $i <= $n; $i++) {\n        $tmp = $a + $b + $c + $d;\n        $a = $b;\n\
    \        $b = $c;\n        $c = $d;\n        $d = $tmp;\n    }\n    return $a\
    \ + $b + $c + $d;\n}\necho fib4(7) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "54\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprn5_vl0x.php:38\n\
    Stack trace:\n#0 /tmp/tmprn5_vl0x.php(44): test()\n#1 {main}\n  thrown in /tmp/tmprn5_vl0x.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // TODO:\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfsr8tqj.php:24\n\
    Stack trace:\n#0 /tmp/tmpxfsr8tqj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxfsr8tqj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n ==\
    \ 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    }\
    \ else {\n        $last = $penultimate = $threeBago = $fourBago = 0;\n       \
    \ for ($i = 4; $i <= $n; $i++) {\n            $fourBago = $threeBago;\n      \
    \      $threeBago = $penultimate;\n            $penultimate = $last;\n       \
    \     $last = $fourBago + $threeBago + $penultimate + $last;\n        }\n    \
    \    return $last;\n    }\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "0\n0\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8midir2h.php:45\n\
    Stack trace:\n#0 /tmp/tmp8midir2h.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp8midir2h.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $cache = [0, 0, 2, 0];\n \
    \ for ($i = 4; $i <= $n; $i++) {\n    $cache[$i % 4] = $cache[($i - 1) % 4] +\
    \ $cache[($i - 2) % 4] + $cache[($i - 3) % 4] + $cache[($i - 4) % 4];\n  }\n \
    \ return $cache[$n % 4];\n}\nvar_dump(fib4(5) === 4);\nvar_dump(fib4(6) === 8);\n\
    var_dump(fib4(7) === 14);\nvar_dump(fib4(8) === 26);\nvar_dump(fib4(9) === 46);\n\
    var_dump(fib4(10) === 80);\nvar_dump(fib4(11) === 136);\nvar_dump(fib4(12) ===\
    \ 232);\nvar_dump(fib4(13) === 392);\nvar_dump(fib4(14) === 648);\nvar_dump(fib4(15)\
    \ === 1072);\nvar_dump(fib4(16) === 1768);\nvar_dump(fib4(17) === 2912);\nvar_dump(fib4(18)\
    \ === 4808);\nvar_dump(fib4(19) === 7920);\nvar_dump(fib4(20) === 12992);\nvar_dump(fib4(21)\
    \ === 21224);\nvar_dump(fib4(22) === 34816);\nvar_dump(fib4(23) === 57128);\n\
    var_dump(fib4(24) === 93224);\nvar_dump(fib4(25) === 152752);\nvar_dump(fib4(26)\
    \ === 249776);\nvar_dump(fib4(27) === 407480);\nvar_dump(fib4(28) === 657952);\n\
    var_dump(fib4(29) === 1070544);\nvar_dump(fib4(30) === 1740992);\nvar_dump(fib4(31)\
    \ === 2829504);\nvar_\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf6o_0c19.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i%4] = $fib[($i-1)%4] + $fib[($i-2)%4]\
    \ + $fib[($i-3)%4] + $fib[($i-4)%4];\n    }\n    return $fib[$n%4];\n}\n\nvar_dump(fib4(0));\n\
    var_dump(fib4(1));\nvar_dump(fib4(2));\nvar_dump(fib4(3));\nvar_dump(fib4(4));\n\
    var_dump(fib4(5));\nvar_dump(fib4(6));\nvar_dump(fib4(7));\nvar_dump(fib4(8));\n\
    var_dump(fib4(9));\nvar_dump(fib4(10));\n\n/**\n * \u76F8\u5F53\u4E8Efib(1)~fib(n)%4\n\
    \ */\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "int(0)\nint(0)\nint(2)\nint(0)\nint(2)\nint(4)\nint(8)\nint(14)\nint(28)\n\
    int(54)\nint(104)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i-1) % 4]\
    \ + $fib4[($i-2) % 4] + $fib4[($i-3) % 4] + $fib4[($i-4) % 4];\n    }\n    return\
    \ $fib4[$n % 4];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho\
    \ fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n ==\
    \ 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n\
    \    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n;\
    \ $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n\
    \        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib = [0, 0, 2, 0];\n \
    \   for ($i = 3; $i < $n; $i++) {\n        $fib[$i % 4] = array_sum(array_slice($fib,\
    \ max(0, $i - 4), min($i, 4)));\n    }\n    return $fib[$n % 4];\n}\n\necho fib4(5)\
    \ . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "0\n2\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbnxhxjd0.php:31\n\
    Stack trace:\n#0 /tmp/tmpbnxhxjd0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbnxhxjd0.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    $count = 0;\n    while ($count < $n - 3) {\n   \
    \     $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n\
    \        $count += 1;\n    }\n    return $d;\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9i7q8gf.php:37\n\
    Stack trace:\n#0 /tmp/tmpm9i7q8gf.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpm9i7q8gf.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39pgqpbz.php:23\n\
    Stack trace:\n#0 /tmp/tmp39pgqpbz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp39pgqpbz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n <= 1) {\n    return\
    \ 0;\n  }\n  if ($n == 2) {\n    return 2;\n  }\n  $fib4 = array(0, 0, 2, 0);\n\
    \  for ($i = 3; $i < $n; $i++) {\n    $fib4[$i%4] = $fib4[($i-1)%4] + $fib4[($i-2)%4]\
    \ + $fib4[($i-3)%4] + $fib4[($i-4)%4];\n  }\n  return $fib4[($n-1)%4];\n}\necho\
    \ fib4(5).\"\\n\";\necho fib4(6).\"\\n\";\necho fib4(7).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_wukwo8.php:37\n\
    Stack trace:\n#0 /tmp/tmpr_wukwo8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpr_wukwo8.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  $fibs = [0, 0, 2, 0];\n  if\
    \ ($n < 4) {\n    return $fibs[$n];\n  }\n  for ($i = 4; $i <= $n; $i++) {\n \
    \   $fibs[$i % 4] = array_sum(array_slice($fibs, $i - 4));\n  }\n  return $fibs[$n\
    \ % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_uk46tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpx_uk46tr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpx_uk46tr.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 0)\n\t\treturn -1;\n\
    \tif ($n < 3)\n\t\treturn $n * 2;\n\t$first = 1;\n\t$second = 2;\n\t$third = 4;\n\
    \t$fourth = 8;\n\t$result = $fourth;\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$result\
    \ = $first + $second + $third + $fourth;\n\t\t$first = $second;\n\t\t$second =\
    \ $third;\n\t\t$third = $fourth;\n\t\t$fourth = $result;\n\t}\n\treturn $result;\n\
    }\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "29\n56\n108\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3tsbhe0j.php:45\n\
    Stack trace:\n#0 /tmp/tmp3tsbhe0j.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp3tsbhe0j.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $result = 0;\n    $count\
    \ = $n;\n    if ($n == 0) {\n        return 0;\n    }\n    $cache = [0, 0, 2,\
    \ 0];\n    while ($count > 3) {\n        $fib4_temp = 0;\n        $fib4_temp +=\
    \ $cache[3];\n        $fib4_temp += $cache[2];\n        $fib4_temp += $cache[1];\n\
    \        $fib4_temp += $cache[0];\n        $cache[0] = $cache[1];\n        $cache[1]\
    \ = $cache[2];\n        $cache[2] = $cache[3];\n        $cache[3] = $fib4_temp;\n\
    \        $count--;\n    }\n    return $cache[3];\n}\necho fib4(5) . \"\\n\";\n\
    echo fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n \
    \   $c = 2;\n    $d = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $e = $d;\n\
    \        $d = $c;\n        $c = $b;\n        $b = $a;\n        $a = $e + $d +\
    \ $c + $b;\n    }\n    return $d;\n}\necho fib4(5) . \"\\n\";\necho fib4(6) .\
    \ \"\\n\";\necho fib4(7) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n6\n12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_1fkhv8.php:38\n\
    Stack trace:\n#0 /tmp/tmpm_1fkhv8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpm_1fkhv8.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return [0,0,2,0][$n];\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d\
    \ = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n\
    \        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n\
    \    return $e;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n == 0) return 0;\n\
    \    if($n == 1) return 0;\n    if($n == 2) return 2;\n    if($n == 3) return\
    \ 0;\n    $arr = array(0,0,2,0);\n    for($i = 4; $i <= $n; $i++) {\n        $arr[$i%4]\
    \ = $arr[($i-1)%4] + $arr[($i-2)%4] + $arr[($i-3)%4] + $arr[($i-4)%4];\n    }\n\
    \    return $arr[$n%4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) %\
    \ 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n\
    \    return $fib4[$n % 4];\n}\n\necho \"fib4(5) = \".fib4(5).\"\\n\";\necho \"\
    fib4(6) = \".fib4(6).\"\\n\";\necho \"fib4(7) = \".fib4(7).\"\\n\";\necho \"fib4(20)\
    \ = \".fib4(20).\"\\n\";\necho \"fib4(30) = \".fib4(30).\"\\n\";\necho \"fib4(40)\
    \ = \".fib4(40).\"\\n\";\necho \"fib4(50) = \".fib4(50).\"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "fib4(5) = 4\nfib4(6) = 8\nfib4(7) = 14\nfib4(20) = 73552\nfib4(30) = 52080824\n\
    fib4(40) = 36877489824\nfib4(50) = 26112283777288\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if($n < 0) {\n        return\
    \ -1;\n    }\n    if($n == 0) {\n        return 0;\n    }\n    if($n == 1) {\n\
    \        return 0;\n    }\n    if($n == 2) {\n        return 2;\n    }\n    if($n\
    \ == 3) {\n        return 0;\n    }\n    $n_minus_one = 0;\n    $n_minus_two =\
    \ 0;\n    $n_minus_three = 2;\n    $n_minus_four = 0;\n    $current = 0;\n   \
    \ for($i = 4; $i <= $n; $i++) {\n        $current = $n_minus_one + $n_minus_two\
    \ + $n_minus_three + $n_minus_four;\n        $n_minus_four = $n_minus_three;\n\
    \        $n_minus_three = $n_minus_two;\n        $n_minus_two = $n_minus_one;\n\
    \        $n_minus_one = $current;\n    }\n    return $current;\n}\nprint fib4(5)\
    \ . \"\\n\";\nprint fib4(6) . \"\\n\";\nprint fib4(7) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n6\n12\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_pcj4h5.php:54\n\
    Stack trace:\n#0 /tmp/tmp8_pcj4h5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp8_pcj4h5.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n <= 1) {\n\t\treturn\
    \ 0;\n\t} else if ($n == 2) {\n\t\treturn 2;\n\t} else if ($n == 3) {\n\t\treturn\
    \ 0;\n\t} else {\n\t\t$f = [0, 0, 2, 0];\n\t\t$fn = 3;\n\t\twhile ($fn < $n) {\n\
    \t\t\t$f[0] = $f[1];\n\t\t\t$f[1] = $f[2];\n\t\t\t$f[2] = $f[3];\n\t\t\t$f[3]\
    \ = $f[0] + $f[1] + $f[2] + $f[3];\n\t\t\t$fn++;\n\t\t}\n\t\treturn $f[3];\n\t\
    }\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2dwzpom.php:40\n\
    Stack trace:\n#0 /tmp/tmpd2dwzpom.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpd2dwzpom.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 0) {\n        return\
    \ null;\n    }\n\n    if ($n == 0) {\n        return 0;\n    }\n\n    if ($n ==\
    \ 1) {\n        return 0;\n    }\n\n    if ($n == 2) {\n        return 2;\n  \
    \  }\n\n    if ($n == 3) {\n        return 0;\n    }\n\n    $values = array();\n\
    \    $values[0] = 0;\n    $values[1] = 0;\n    $values[2] = 2;\n    $values[3]\
    \ = 0;\n\n    for ($i = 4; $i <= $n; $i++) {\n        $values[$i] = $values[$i\
    \ - 1] + $values[$i - 2] + $values[$i - 3] + $values[$i - 4];\n    }\n\n    return\
    \ $values[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // your code here\n}\n\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfayf0v0.php:24\n\
    Stack trace:\n#0 /tmp/tmpdfayf0v0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdfayf0v0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $cache = array();\n    $cache[0]\
    \ = 0;\n    $cache[1] = 0;\n    $cache[2] = 2;\n    $cache[3] = 0;\n    for ($i\
    \ = 4; $i <= $n; $i++) {\n        $cache[$i] = $cache[$i-1] + $cache[$i-2] + $cache[$i-3]\
    \ + $cache[$i-4];\n    }\n    return $cache[$n];\n}\n\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\n\
    echo fib4(15) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(1) . \"\\n\";\necho\
    \ fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(0)\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "8\n14\n28\n54\n2764\n4\n0\n2\n0\n2\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $nums = [0, 0, 2, 0];\n\
    \    if ($n < 4) {\n        return $nums[$n];\n    }\n    for ($i = 4; $i <= $n;\
    \ $i++) {\n        $nums[$i % 4] = $nums[($i - 1) % 4] + $nums[($i - 2) % 4] +\
    \ $nums[($i - 3) % 4] + $nums[($i - 4) % 4];\n    }\n    return $nums[$n % 4];\n\
    }\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67hs0b2z.php:24\n\
    Stack trace:\n#0 /tmp/tmp67hs0b2z.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp67hs0b2z.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n  if ($n < 0) {\n    return\
    \ -1;\n  }\n  if ($n == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return\
    \ 0;\n  }\n  if ($n == 2) {\n    return 2;\n  }\n  if ($n == 3) {\n    return\
    \ 0;\n  }\n  $lastFour = array(0, 0, 2, 0);\n  for ($i = 4; $i <= $n; $i++) {\n\
    \    $lastFour[0] = $lastFour[1];\n    $lastFour[1] = $lastFour[2];\n    $lastFour[2]\
    \ = $lastFour[3];\n    $lastFour[3] = $lastFour[0] + $lastFour[1] + $lastFour[2]\
    \ + $lastFour[3];\n  }\n  return $lastFour[3];\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqctb63kh.php:46\n\
    Stack trace:\n#0 /tmp/tmpqctb63kh.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqctb63kh.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $arr = [0, 0, 2, 0];\n \
    \   if($n < 4) {\n        return $arr[$n];\n    }\n    for($i = 4; $i <= $n; $i++)\
    \ {\n        $arr[$i % 4] = $arr[($i - 1) % 4] + $arr[($i - 2) % 4] + $arr[($i\
    \ - 3) % 4] + $arr[($i - 4) % 4];\n    }\n    return $arr[$n % 4];\n}\necho fib4(5);\n\
    echo fib4(6);\necho fib4(7);\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: '4814'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // Your code here\n    if\
    \ ($n == 0) {\n        return 0;\n    } elseif ($n == 1) {\n        return 0;\n\
    \    } elseif ($n == 2) {\n        return 2;\n    } elseif ($n == 3) {\n     \
    \   return 0;\n    }\n    $sequence = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n;\
    \ $i++) {\n        $sequence[$i % 4] = ($sequence[($i - 1) % 4] + $sequence[($i\
    \ - 2) % 4] + $sequence[($i - 3) % 4] + $sequence[($i - 4) % 4]);\n    }\n   \
    \ return $sequence[$n % 4];\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) return $n *\
    \ 0;\n    else if ($n == 4) return 2;\n    else {\n        $sum = 0;\n       \
    \ $first = 0;\n        $second = 0;\n        $third = 0;\n        $fourth = 2;\n\
    \        for ($i = 5; $i <= $n; $i++) {\n            $sum = $first + $second +\
    \ $third + $fourth;\n            $first = $second;\n            $second = $third;\n\
    \            $third = $fourth;\n            $fourth = $sum;\n        }\n     \
    \   return $sum;\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98cp4jmq.php:40\n\
    Stack trace:\n#0 /tmp/tmp98cp4jmq.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp98cp4jmq.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // Your code here\n    if\
    \ ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return\
    \ 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3)\
    \ {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d =\
    \ 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $temp = $a + $b + $c + $d;\n\
    \        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $temp;\n \
    \   }\n    return $d;\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fibs = [0, 0, 2, 0];\n\
    \    for ($i = 3; $i < $n; $i++) {\n        $fibs[$i % 4] = $fibs[($i - 1) % 4]\
    \ + $fibs[($i - 2) % 4] + $fibs[($i - 3) % 4] + $fibs[($i - 4) % 4];\n    }\n\
    \    return $fibs[($n - 1) % 4];\n}\necho fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\n\
    echo fib4(7) . PHP_EOL;\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "4\n8\n16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj59ojdi_.php:31\n\
    Stack trace:\n#0 /tmp/tmpj59ojdi_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpj59ojdi_.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n == 0) {\n       \
    \ return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n ==\
    \ 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    }\
    \ else {\n        $a = $b = $c = $d = 0;\n        for ($i = 4; $i <= $n; $i++)\
    \ {\n            $e = $a + $b + $c + $d;\n            $a = $b;\n            $b\
    \ = $c;\n            $c = $d;\n            $d = $e;\n        }\n        return\
    \ $e;\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzkqm5zam.php:42\n\
    Stack trace:\n#0 /tmp/tmpzkqm5zam.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzkqm5zam.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4_arr = array(0, 0, 2,\
    \ 0);\n\tif ($n <= 3) {\n\t\treturn $fib4_arr[$n];\n\t}\n\t\n\t$result = $fib4_arr[3];\n\
    \t$prev1 = $fib4_arr[2];\n\t$prev2 = $fib4_arr[1];\n\t$prev3 = $fib4_arr[0];\n\
    \tfor ($i = 4; $i <= $n; $i++) {\n\t\t$result = $prev1 + $prev2 + $prev3 + $result;\n\
    \t\t$prev3 = $prev2;\n\t\t$prev2 = $prev1;\n\t\t$prev1 = $result;\n\t}\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8npf92qy.php:39\n\
    Stack trace:\n#0 /tmp/tmp8npf92qy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8npf92qy.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $prev1 = 0;\n    $prev2\
    \ = 0;\n    $prev3 = 2;\n    $prev4 = 0;\n    $result = 0;\n    if ($n == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if\
    \ ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n\
    \    }\n    for ($i = 4; $i <= $n; $i++) {\n        $result = $prev1 + $prev2\
    \ + $prev3 + $prev4;\n        $prev1 = $prev2;\n        $prev2 = $prev3;\n   \
    \     $prev3 = $prev4;\n        $prev4 = $result;\n    }\n    return $result;\n\
    }\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\n\
    function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "4\n8\n14\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif($n == 0) {\n\t\treturn\
    \ 0;\n\t}\n\telse if($n == 1) {\n\t\treturn 0;\n\t}\n\telse if($n == 2) {\n\t\t\
    return 2;\n\t}\n\telse if($n == 3) {\n\t\treturn 0;\n\t}\n\telse {\n\t\t$a = 0;\n\
    \t\t$b = 0;\n\t\t$c = 2;\n\t\t$d = 0;\n\t\tfor($i = 3; $i < $n; $i++) {\n\t\t\t\
    $e = $a + $b + $c + $d;\n\t\t\t$a = $b;\n\t\t\t$b = $c;\n\t\t\t$c = $d;\n\t\t\t\
    $d = $e;\n\t\t}\n\t\treturn $a + $b + $c + $d;\n\t}\n}\necho fib4(5) . \"\\n\"\
    ;\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "8\n14\n28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmvvgz9jc.php:52\n\
    Stack trace:\n#0 /tmp/tmpmvvgz9jc.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpmvvgz9jc.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    // YOUR CODE HERE\n}\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvqssnu3.php:23\n\
    Stack trace:\n#0 /tmp/tmphvqssnu3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphvqssnu3.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t// your code here\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2h7_t42.php:24\n\
    Stack trace:\n#0 /tmp/tmpg2h7_t42.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpg2h7_t42.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4_cache = [0, 0, 2, 0];\n\
    \tif (isset($fib4_cache[$n])) {\n\t\treturn $fib4_cache[$n];\n\t} else {\n\t\t\
    for ($i = count($fib4_cache); $i <= $n; $i++) {\n\t\t\t$fib4_cache[$i] = $fib4_cache[$i-1]\
    \ + $fib4_cache[$i-2] + $fib4_cache[$i-3] + $fib4_cache[$i-4];\n\t\t}\n\t\treturn\
    \ $fib4_cache[$n];\n\t}\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn\
    \ 2;\n\t}\n\tif ($n == 3) {\n\t\treturn 0;\n\t}\n\tif ($n > 3) {\n\t\treturn (fib4($n-1)\
    \ + fib4($n-2) + fib4($n-3) + fib4($n-4));\n\t}\n}\necho fib4(7);\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '14'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\t$fib4n = [0, 0, 2, 0];\n\t\
    for ($i = 4; $i <= $n; $i++) {\n\t\t$fib4n[$i%4] = $fib4n[($i+3)%4] + $fib4n[($i+2)%4]\
    \ + $fib4n[($i+1)%4] + $fib4n[$i%4];\n\t}\n\treturn $fib4n[$n%4];\n}\necho fib4(5)\
    \ . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\n\necho PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "4\n8\n14\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $arr = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $arr[$i % 4] = $arr[($i - 1) % 4]\
    \ + $arr[($i - 2) % 4] + $arr[($i - 3) % 4] + $arr[($i - 4) % 4];\n    }\n   \
    \ return $arr[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\tif ($n < 0) {\n\t\treturn\
    \ 0;\n\t}\n\t$fib = array();\n\t$fib[0] = 0;\n\t$fib[1] = 0;\n\t$fib[2] = 2;\n\
    \t$fib[3] = 0;\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib[$i] = $fib[$i-1] +\
    \ $fib[$i-2] + $fib[$i-3] + $fib[$i-4];\n\t}\n\treturn $fib[$n];\n}\n\nfunction\
    \ candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
