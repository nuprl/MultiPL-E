name: HumanEval_24_largest_divisor
language: php
results:
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $i = $n - 1;\n  while ($i > 0) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n    $i--;\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $divisor = $n;\n    while ($divisor > 0) {\n        if ($n % $divisor\
    \ == 0) {\n            return $divisor;\n        }\n        $divisor--;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtg4olqj.php:20\n\
    Stack trace:\n#0 /tmp/tmpjtg4olqj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpjtg4olqj.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $d = 0;\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0)\
    \ {\n            $d = $i;\n        }\n    }\n    return $d;\n}\necho largest_divisor(15)\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_dspc8w.php:21\n\
    Stack trace:\n#0 /tmp/tmp3_dspc8w.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3_dspc8w.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    if ($n % 2 == 0) {\n        return $n / 2;\n    }\n    for ($i = 3; $i\
    \ < $n; $i += 2) {\n        if ($n % $i == 0) {\n            return $n / $i;\n\
    \        }\n    }\n    return 1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    // YOUR CODE HERE\n    // we need to find all the factors of n, then\
    \ return the largest one. \n    // we need to start at 2, because we need to find\
    \ numbers that are smaller than n\n    $divisor = 2;\n    $largest = 1;\n    while($divisor\
    \ < $n) {\n      if ($n % $divisor == 0) {\n        $largest = $divisor;\n   \
    \   }\n      $divisor++;\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = floor($n/2); $i > 0; $i--) {\n\t\tif ($n % $i == 0) {\n\t\t\t\
    return $i;\n\t\t}\n\t}\n}\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0k6saua.php:17\n\
    Stack trace:\n#0 /tmp/tmpt0k6saua.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpt0k6saua.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largest = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % $i\
    \ == 0) {\n            $largest = $i;\n        }\n    }\n    return $largest;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = floor($n / 2); $i > 0; $i--) {\n        if ($n % $i == 0) {\n\
    \            return $i;\n        }\n    }\n}\n\necho largest_divisor(15) . PHP_EOL;\n\
    function candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdvpjhku.php:19\n\
    Stack trace:\n#0 /tmp/tmpcdvpjhku.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcdvpjhku.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\necho largest_divisor(100);\necho '<br>';\n\
    \nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: 50<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n-1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n      \
    \      return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $largest_divisor = 1;\n  $i = 2;\n  while ($i < $n) {\n    if ($n % $i\
    \ == 0) {\n      $largest_divisor = $i;\n    }\n    $i++;\n  }\n  return $largest_divisor;\n\
    }\n\necho largest_divisor(15); // 5\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n - 1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n - 1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\n$result = largest_divisor(9);\necho\
    \ \"<h2>$result</h2>\";\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: <h2>3</h2>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n-1; $i > 0; $i--) {\n\t\tif (($n % $i) == 0) {\n\t\t\techo\
    \ \"$i\\n\";\n\t\t\tbreak;\n\t\t}\n\t}\n}\nlargest_divisor(10);\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kn0dgqz.php:19\n\
    Stack trace:\n#0 /tmp/tmp8kn0dgqz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8kn0dgqz.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i=$n-1; $i>0; $i--) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn $i;\n\
    \t\t}\n\t}\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$divisor = $n - 1;\n\twhile ($n % $divisor != 0) {\n\t\t$divisor--;\n\t\
    }\n\treturn $divisor;\n}\n\necho largest_divisor(15);\necho \"<br>\";\n\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 5<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  // Enter code here\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpns6jvhhu.php:14\n\
    Stack trace:\n#0 /tmp/tmpns6jvhhu.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpns6jvhhu.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largest = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % $i\
    \ == 0) {\n            $largest = $i;\n        }\n    }\n    return $largest;\n\
    }\n\necho largest_divisor(15) . PHP_EOL;\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $smallest_int = 1;\n  $largest_int = $n - 1;\n  while($smallest_int < $largest_int)\
    \ {\n    $half_int = ceil(($smallest_int + $largest_int) / 2);\n    $division\
    \ = $n / $half_int;\n    $modulo = $n % $half_int;\n    if ($modulo == 0) {\n\
    \      return $half_int;\n    } else if ($division < $half_int) {\n      $largest_int\
    \ = $half_int - 1;\n    } else {\n      $smallest_int = $half_int + 1;\n    }\n\
    \  }\n  return $smallest_int;\n}\nprint largest_divisor(15) . \"\\n\";\nprint\
    \ largest_divisor(16) . \"\\n\";\nprint largest_divisor(17) . \"\\n\";\nprint\
    \ largest_divisor(24) . \"\\n\";\nprint largest_divisor(25) . \"\\n\";\nprint\
    \ largest_divisor(36) . \"\\n\";\nprint largest_divisor(37) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n8\n4\n12\n5\n18\n6\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwg5yx61l.php:35\nStack trace:\n#0 /tmp/tmpwg5yx61l.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwg5yx61l.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largest = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % $i\
    \ == 0) {\n            $largest = $i;\n        }\n    }\n    return $largest;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$a = 1;\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif ($n % $i == 0) {\n\t\t\
    \t$a = $i;\n\t\t}\n\t}\n\treturn $a;\n}\necho largest_divisor(15);\necho \"<br>\"\
    ;\necho largest_divisor(14);\necho \"<br>\";\necho largest_divisor(13);\necho\
    \ \"<br>\";\necho largest_divisor(12);\necho \"<br>\";\necho largest_divisor(11);\n\
    echo \"<br>\";\necho largest_divisor(10);\necho \"<br>\";\necho largest_divisor(9);\n\
    echo \"<br>\";\necho largest_divisor(8);\necho \"<br>\";\necho largest_divisor(7);\n\
    echo \"<br>\";\necho largest_divisor(6);\necho \"<br>\";\necho largest_divisor(5);\n\
    echo \"<br>\";\necho largest_divisor(4);\necho \"<br>\";\necho largest_divisor(3);\n\
    echo \"<br>\";\necho largest_divisor(2);\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 5<br>7<br>1<br>6<br>1<br>5<br>3<br>4<br>1<br>3<br>1<br>2<br>1<br>1<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $max = floor($n / 2);\n    if ($n % 2 == 0) {\n        $max = $n / 2;\n\
    \    }\n    for ($i = $max; $i > 0; $i--) {\n        if ($n % $i == 0) {\n   \
    \         return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbvi39o9.php:22\n\
    Stack trace:\n#0 /tmp/tmpxbvi39o9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxbvi39o9.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$i = $n-1;\n\twhile ($i > 0) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn $i;\n\
    \t\t}\n\t\t$i -= 1;\n\t}\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n - 1; $i > 0; $i--) {\n\t\tif ($n % $i == 0) return $i;\n\t\
    }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $i = $n - 1;\n  while($i > 0) {\n    if($n % $i == 0) {\n      return $i;\n\
    \    }\n    $i--;\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t// your code here\n}\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6y3tjmil.php:13\n\
    Stack trace:\n#0 /tmp/tmp6y3tjmil.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp6y3tjmil.php\
    \ on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n - 1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$mod = $n;\n\twhile ($mod > 0) {\n\t\tif ($n % $mod == 0) {\n\t\t\tbreak;\n\
    \t\t}\n\t\t$mod--;\n\t}\n\treturn $mod;\n}\n\n$test = largest_divisor(15);\necho\
    \ \"should be 5: $test\\n\";\n$test = largest_divisor(17);\necho \"should be 1:\
    \ $test\\n\";\n$test = largest_divisor(27);\necho \"should be 9: $test\\n\";\n\
    \nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "should be 5: 15\nshould be 1: 17\nshould be 9: 27\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmps3oj_n9n.php:28\nStack trace:\n#0 /tmp/tmps3oj_n9n.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmps3oj_n9n.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $c = $n - 1;\n    while ($n % $c !== 0) {\n        $c--;\n    }\n   \
    \ return $c;\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n-1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n      \
    \      return $i;\n        }\n    }\n}\nprint largest_divisor(15) . \"\\n\";\n\
    print largest_divisor(9) . \"\\n\";\nprint largest_divisor(17) . \"\\n\";\nprint\
    \ largest_divisor(26) . \"\\n\";\nprint largest_divisor(1534) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n3\n1\n13\n767\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    // your code here\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxsvj353s.php:14\n\
    Stack trace:\n#0 /tmp/tmpxsvj353s.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpxsvj353s.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) return $i;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largest_divisor = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if\
    \ ($n % $i == 0) {\n            $largest_divisor = $i;\n        }\n    }\n   \
    \ return $largest_divisor;\n}\necho largest_divisor(15);\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpmo4w_c29.php:8\n\
    Stack trace:\n#0 /tmp/tmpmo4w_c29.php(14): largest_divisor(15)\n#1 {main}\n  thrown\
    \ in /tmp/tmpmo4w_c29.php on line 8\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $factor = 2;\n    $lastFactor = 1;\n    if ($n % $factor) {\n       \
    \ $factor = 3;\n        while (($n % $factor) && (($factor * $factor) < $n)) {\n\
    \            $factor += 2;\n        }\n    }\n    if ($factor * $factor > $n)\
    \ {\n        $lastFactor = $n;\n    } else {\n        $lastFactor = $factor;\n\
    \    }\n    return $lastFactor;\n}\necho \"The largest divisor of 15 is: \" .\
    \ largest_divisor(15) . \"</br>\";\necho \"The largest divisor of 17 is: \" .\
    \ largest_divisor(17) . \"</br>\";\necho \"The largest divisor of 18 is: \" .\
    \ largest_divisor(18) . \"</br>\";\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "The largest divisor of 15 is: 3</br>The largest divisor of 17 is: 17</br>The\
    \ largest divisor of 18 is: 2</br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp19tgecrr.php:30\nStack trace:\n#0 /tmp/tmp19tgecrr.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmp19tgecrr.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$divisor = ($n/2);\n\tfor ($i = $divisor; $i >= 2; $i--) {\n\t\tif ($n\
    \ % $i == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn 1;\n}\necho largest_divisor(15)\
    \ . PHP_EOL;\necho largest_divisor(19) . PHP_EOL;\necho largest_divisor(13) .\
    \ PHP_EOL;\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5.5\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj39ot09s.php:27\n\
    Stack trace:\n#0 /tmp/tmpj39ot09s.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpj39ot09s.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $ld = 0;\n    $iter = 1;\n    while($iter < $n) {\n        if($n % $iter\
    \ == 0) {\n            $ld = $iter;\n        }\n        $iter++;\n    }\n    return\
    \ $ld;\n}\necho largest_divisor(15) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n-1; $i >= 2; $i--) {\n        if ($n % $i == 0) {\n     \
    \       return $i;\n        }\n    }\n    return 1;\n}\necho largest_divisor(15);\n\
    \nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: '5'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\necho largest_divisor(15) . PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$i = $n - 1;\n\twhile ($i > 0) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn\
    \ $i;\n\t\t}\n\t\t$i--;\n\t}\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n - 1; $i > 0; $i--) {\n\t\tif (is_divisible($n, $i)) {\n\t\t\
    \treturn $i;\n\t\t}\n\t}\n}\n\necho \"largest_divisor(15):\" . PHP_EOL;\necho\
    \ largest_divisor(15) . PHP_EOL;\necho PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "largest_divisor(15):\n\nFatal error: Uncaught Error: Call to undefined\
    \ function is_divisible() in /tmp/tmpvup6joci.php:7\nStack trace:\n#0 /tmp/tmpvup6joci.php(14):\
    \ largest_divisor(15)\n#1 {main}\n  thrown in /tmp/tmpvup6joci.php on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    if ($n % 2 === 0) {\n        return 2;\n    } elseif ($n % 3 === 0) {\n\
    \        return 3;\n    }\n    for ($i = 5; $i <= sqrt($n); $i += 6) {\n     \
    \   if ($n % $i === 0) {\n            return $i;\n        }\n        if ($n %\
    \ ($i + 2) === 0) {\n            return $i + 2;\n        }\n    }\n    return\
    \ $n;\n}\n\necho largest_divisor(15);\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp174egl9j.php:29\n\
    Stack trace:\n#0 /tmp/tmp174egl9j.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp174egl9j.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $rem = $n % 2;\n    if ($rem == 0) {\n        $n = $n / 2;\n        return\
    \ largest_divisor($n);\n    } else {\n        return $n;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8cn_61d.php:20\n\
    Stack trace:\n#0 /tmp/tmpv8cn_61d.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpv8cn_61d.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($x = $n-1; $x > 0; $x--) {\n\t\tif ($n % $x == 0) {\n\t\t\treturn\
    \ $x;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $divisor = $n;\n    while ($divisor > 0) {\n        if ($n % $divisor\
    \ == 0) {\n            break;\n        }\n        $divisor--;\n    }\n    return\
    \ $divisor;\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80afchyh.php:21\n\
    Stack trace:\n#0 /tmp/tmp80afchyh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp80afchyh.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t// Your Code Here\n\t$i = $n - 1;\n\twhile($i > 0) {\n\t\tif($n % $i ==\
    \ 0) {\n\t\t\treturn $i;\n\t\t}\n\t\t$i--;\n\t}\n}\n\necho \"largest_divisor(15)\
    \ : \" . largest_divisor(15) . \"\\n\";\necho \"largest_divisor(4) : \" . largest_divisor(4)\
    \ . \"\\n\";\necho \"largest_divisor(13) : \" . largest_divisor(13) . \"\\n\"\
    ;\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "largest_divisor(15) : 5\nlargest_divisor(4) : 2\nlargest_divisor(13) :\
    \ 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\necho largest_divisor(15) . PHP_EOL;\
    \ // 5\necho largest_divisor(2) . PHP_EOL; // 1\necho largest_divisor(100) . PHP_EOL;\
    \ // 10\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5\n1\n50\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$largest_divisor = 1;\n\tfor ($i = 1; $i < $n; $i++) {\n\t\tif ($n % $i\
    \ == 0) {\n\t\t\t$largest_divisor = $i;\n\t\t}\n\t}\n\treturn $largest_divisor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    // check if n is divisble by 2\n    if ($n % 2 == 0) {\n        // call\
    \ the function recursively\n        return largest_divisor($n / 2);\n    }\n \
    \   // check if n is divisble by 3\n    if ($n % 3 == 0) {\n        // call the\
    \ function recursively\n        return largest_divisor($n / 3);\n    }\n    //\
    \ check if n is divisble by 5\n    if ($n % 5 == 0) {\n        // call the function\
    \ recursively\n        return largest_divisor($n / 5);\n    }\n    // check if\
    \ n is divisble by 7\n    if ($n % 7 == 0) {\n        // call the function recursively\n\
    \        return largest_divisor($n / 7);\n    }\n    // check if n is divisble\
    \ by 11\n    if ($n % 11 == 0) {\n        // call the function recursively\n \
    \       return largest_divisor($n / 11);\n    }\n    // if n was not divisble\
    \ by 2, 3, 5, 7 or 11 then it is not divisble by any of the other primes and return\
    \ n\n    return $n;\n}\n\necho largest_divisor(2000) . PHP_EOL;\necho largest_divisor(1024)\
    \ . PHP_EOL;\necho largest_divisor(2048) . PHP_EOL;\necho largest_divisor(100000)\
    \ . PHP_EOL;\necho largest_divisor(10) . PHP_EOL;\necho largest_divisor(64) .\
    \ PHP_EOL;\necho largest_divisor(120) . PHP_EOL;\necho largest_divisor(4) . PHP_EOL;\n\
    echo largest_divisor(5) . PHP_EOL;\necho largest_divisor(15) . PHP_EOL;\necho\
    \ largest_divisor(255) . PHP_EOL;\necho largest_divisor(24) . PHP_EOL;\necho largest_divisor(22)\
    \ . PHP_EOL;\necho largest_divisor(78) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n17\n1\n1\n13\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_g1k7ia1.php:56\nStack trace:\n#0 /tmp/tmp_g1k7ia1.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_g1k7ia1.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$largest_divisor = 1;\n\tfor ($i = 1; $i < $n; $i++) {\n\t\tif ($n % $i\
    \ == 0) {\n\t\t\t$largest_divisor = $i;\n\t\t}\n\t}\n\treturn $largest_divisor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $divisor = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % $i\
    \ == 0) {\n            $divisor = $i;\n        }\n    }\n    return $divisor;\n\
    }\necho largest_divisor(20);\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: '10'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $arr = range(2, $n-1);\n  $div = array_filter($arr, function($i) use ($n)\
    \ {\n    return $n % $i == 0;\n  });\n  return max($div);\n}\necho largest_divisor(15);\n\
    function candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\nWarning: max(): Array must contain at least one element in /tmp/tmp0u8al6pb.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0u8al6pb.php:18\n\
    Stack trace:\n#0 /tmp/tmp0u8al6pb.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0u8al6pb.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n-1; $i > 0; $i--) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn\
    \ $i;\n\t\t}\n\t}\n}\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n - 1; $i > 0; $i--) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn\
    \ $i;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n - 1; $i > 0; $i--) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn\
    \ $i;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$result = 1;\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif ($n % $i == 0) {\n\
    \t\t\t$result = $i;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = 2;\n    while ($i < $n) {\n        if ( $n % $i == 0 ) {\n     \
    \       return $i;\n        }\n        $i++;\n    }\n}\n\necho largest_divisor(15)\
    \ . \"\\n\";\necho largest_divisor(16) . \"\\n\";\necho largest_divisor(35) .\
    \ \"\\n\";\necho largest_divisor(36) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n2\n5\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwvsts_f.php:25\n\
    Stack trace:\n#0 /tmp/tmphwvsts_f.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphwvsts_f.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    // YOUR CODE HERE\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3tphvnc8.php:15\n\
    Stack trace:\n#0 /tmp/tmp3tphvnc8.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp3tphvnc8.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $i = floor($n / 2);\n  while ($i > 0) {\n    if ($n % $i == 0) {\n    \
    \  return $i;\n    }\n    $i--;\n  }\n}\n\necho largest_divisor(15) . \"\\n\"\
    ;\necho largest_divisor(18) . \"\\n\";\necho largest_divisor(25) . \"\\n\";\n\
    echo largest_divisor(14) . \"\\n\";\necho largest_divisor(27) . \"\\n\";\necho\
    \ largest_divisor(12) . \"\\n\";\necho largest_divisor(13) . \"\\n\";\necho largest_divisor(11)\
    \ . \"\\n\";\necho largest_divisor(17) . \"\\n\";\necho largest_divisor(8) . \"\
    \\n\";\necho largest_divisor(6) . \"\\n\";\necho largest_divisor(9) . \"\\n\"\
    ;\necho largest_divisor(20) . \"\\n\";\necho largest_divisor(24) . \"\\n\";\n\
    echo largest_divisor(4) . \"\\n\";\necho largest_divisor(3) . \"\\n\";\necho largest_divisor(7)\
    \ . \"\\n\";\necho largest_divisor(10) . \"\\n\";\necho largest_divisor(16) .\
    \ \"\\n\";\necho largest_divisor(19) . \"\\n\";\necho largest_divisor(21) . \"\
    \\n\";\necho largest_divisor(22) . \"\\n\";\necho largest_divisor(23) . \"\\n\"\
    ;\necho largest_divisor(26) . \"\\n\";\necho largest_divisor(28) . \"\\n\";\n\
    echo largest_divisor(29) . \"\\n\";\necho largest_divisor(30) . \"\\n\";\necho\
    \ largest_divisor(5) . \"\\n\";\necho largest_divisor(2) . \"\\n\";\necho largest_divisor(1)\
    \ . \"\\n\";\necho largest_divisor(0) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n9\n5\n7\n9\n6\n1\n1\n1\n4\n3\n3\n10\n12\n2\n1\n1\n5\n8\n1\n7\n11\n1\n\
    13\n14\n1\n15\n1\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjkcd4e1c.php:51\n\
    Stack trace:\n#0 /tmp/tmpjkcd4e1c.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpjkcd4e1c.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largest = 1;\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i\
    \ == 0) {\n            $largest = $i;\n        }\n    }\n    return $largest;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i=$n-1; $i > 0; $i--) { \n\t\tif ($n % $i == 0) {\n\t\t\treturn $i;\n\
    \t\t}\n\t}\n}\necho 'largest_divisor(15)'.PHP_EOL;\necho largest_divisor(15).PHP_EOL;\n\
    \nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "largest_divisor(15)\n5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n - 1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i=$n-1; $i > 0; $i--) { \n\t\tif ($n % $i == 0) {\n\t\t\treturn $i;\n\
    \t\t}\n\t}\n}\necho largest_divisor(15).\"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n - 1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\necho largest_divisor(15);\necho \"<br>\";\necho largest_divisor(4);\n\
    echo \"<br>\";\necho largest_divisor(9);\necho \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: 5<br>2<br>3<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$divisor = $n - 1;\n\twhile ($n % $divisor != 0) {\n\t\t$divisor--;\n\t\
    }\n\treturn $divisor;\n}\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n-1; $i >= 1; $i--) {\n        if ($n % $i == 0) {\n     \
    \       return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = $n - 1;\n    while ($i > 0) {\n        if ($n % $i == 0) {\n   \
    \         return $i;\n        }\n        $i--;\n    }\n}\n\necho largest_divisor(15);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $largest = 1;\n  for ($i = 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n\
    \      $largest = $i;\n    }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $divisor = 2;\n  while ($n > $divisor) {\n    if ($n % $divisor == 0) {\n\
    \      return $divisor;\n    }\n    $divisor++;\n  }\n  return 1;\n}\n\necho largest_divisor(10)\
    \ . PHP_EOL;\necho largest_divisor(15) . PHP_EOL;\necho largest_divisor(113) .\
    \ PHP_EOL;\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "2\n3\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiunu4o11.php:27\n\
    Stack trace:\n#0 /tmp/tmpiunu4o11.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpiunu4o11.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i=$n-1; $i>0; $i--) {\n\t\tif ($n % $i == 0) return $i;\n\t}\n}\n\
    \nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % $i == 0) {\n        \
    \    return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfvdxu_at.php:20\n\
    Stack trace:\n#0 /tmp/tmpfvdxu_at.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfvdxu_at.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $i = $n - 1;\n  while ($i > 0) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n    $i--;\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$largest = 1;\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif ($n % $i == 0) {\n\
    \t\t\t$largest = $i;\n\t\t}\n\t}\n\treturn $largest;\n}\n\necho largest_divisor(15);\n\
    echo \"<br>\";\necho largest_divisor(16);\necho \"<br>\";\necho largest_divisor(17);\n\
    echo \"<br>\";\necho largest_divisor(18);\necho \"<br>\";\necho largest_divisor(19);\n\
    echo \"<br>\";\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: 5<br>8<br>1<br>9<br>1<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$largest = 0;\n\tfor ($i = 1; $i < $n; $i++) {\n\t\tif ($n % $i == 0) {\n\
    \t\t\t$largest = $i;\n\t\t}\n\t}\n\treturn $largest;\n}\n\necho largest_divisor(15)\
    \ . \"<br>\";\n\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: 5<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$divisor = $n - 1;\n\twhile ($n % $divisor != 0) {\n\t\t$divisor -= 1;\n\
    \t}\n\treturn $divisor;\n}\n\necho largest_divisor(15) . PHP_EOL;\necho largest_divisor(16)\
    \ . PHP_EOL;\necho largest_divisor(17) . PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n8\n1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    // Your code here\n}\n\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ss4wcew.php:15\n\
    Stack trace:\n#0 /tmp/tmp4ss4wcew.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp4ss4wcew.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n - 1; $i > 0; $i--) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn\
    \ $i;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    // Start with the smallest possible divisor and keep incrementing it\
    \ by 1 until we find it\n    for ($divisor = 2; $divisor < $n; $divisor++) {\n\
    \        if ($n % $divisor == 0) {\n            return $divisor;\n        }\n\
    \    }\n    return $n;\n}\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7tr826o.php:19\n\
    Stack trace:\n#0 /tmp/tmpu7tr826o.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpu7tr826o.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tif($n == 1) {\n\t\treturn 1;\n\t}\n\tfor($i = $n-1; $i > 0; $i--) {\n\t\
    \tif($n % $i == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$i = $n-1;\n\twhile ($i > 0) {\n\t\tif ($n % $i == 0) return $i;\n\t\t\
    $i--;\n\t}\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    if ($n % 2 == 0) {\n        return 2;\n    } else {\n        for ($i\
    \ = 3; $i < $n; $i += 2) {\n            if ($n % $i == 0) {\n                return\
    \ $i;\n            }\n        }\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99i2l7jw.php:22\n\
    Stack trace:\n#0 /tmp/tmp99i2l7jw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp99i2l7jw.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $divisor = $n;\n    while ($divisor > 0) {\n        if ($n % $divisor\
    \ == 0) {\n            return $divisor;\n        }\n        $divisor--;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0hsppe9q.php:20\n\
    Stack trace:\n#0 /tmp/tmp0hsppe9q.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp0hsppe9q.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = $n - 1;\n    while($i > 0) {\n        if($n % $i == 0) {\n     \
    \       return $i;\n        }\n        $i--;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $number = $n - 1;\n    while ($number > 0) {\n        if ($n % $number\
    \ == 0) {\n            return $number;\n        }\n        $number -= 1;\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = $n-1;\n    while ($i>0) {\n        if ($n % $i == 0) return $i;\n\
    \        $i--;\n    }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$divisor = 1;\n\t$largest = 0;\n\tfor ($i = 1; $i < $n; $i++) {\n\t\tif\
    \ ($n % $i == 0) {\n\t\t\t$divisor = $i;\n\t\t\tif ($divisor > $largest) {\n\t\
    \t\t\t$largest = $divisor;\n\t\t\t}\n\t\t}\n\t}\n\treturn $largest;\n}\necho largest_divisor(15)\
    \ . PHP_EOL;\necho largest_divisor(232792560) . PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n116396280\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $rem = $n - 1;\n  while ($rem > 0) {\n    if ($n % $rem == 0) {\n     \
    \ return $rem;\n    }\n    $rem -= 1;\n  }\n}\n\necho \"largest_divisor(15) =\
    \ \" . largest_divisor(15) . \"\\n\";\necho \"largest_divisor(10) = \" . largest_divisor(10)\
    \ . \"\\n\";\necho \"largest_divisor(17) = \" . largest_divisor(17) . \"\\n\"\
    ;\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "largest_divisor(15) = 5\nlargest_divisor(10) = 5\nlargest_divisor(17) =\
    \ 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\necho \"largest_divisor(15): \" . largest_divisor(15)\
    \ . \"<br />\";\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: 'largest_divisor(15): 5<br />'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = floor($n / 2); $i > 0; $i--) {\n        if ($n % $i == 0) {\n\
    \            return $i;\n        }\n    }\n}\necho largest_divisor(15) . \"\\\
    n\";\necho largest_divisor(20) . \"\\n\";\necho largest_divisor(12) . \"\\n\"\
    ;\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5\n10\n6\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07yzlo_6.php:21\n\
    Stack trace:\n#0 /tmp/tmp07yzlo_6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp07yzlo_6.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n-1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\necho largest_divisor(15) . PHP_EOL;\n\n\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$i = floor($n / 2);\n\twhile ($i > 0) {\n\t\tif ($n % $i == 0) {\n\t\t\t\
    return $i;\n\t\t}\n\t\t$i -= 1;\n\t}\n}\n\necho largest_divisor(35);\necho \"\
    <br/>\";\necho largest_divisor(36);\necho \"<br/>\";\necho largest_divisor(37);\n\
    echo \"<br/>\";\necho largest_divisor(38);\necho \"<br/>\";\necho largest_divisor(39);\n\
    echo \"<br/>\";\necho largest_divisor(100);\necho \"<br/>\";\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "7<br/>18<br/>1<br/>19<br/>13<br/>50<br/>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpl2vp440r.php:33\nStack trace:\n#0 /tmp/tmpl2vp440r.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpl2vp440r.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($x = $n - 1; $x > 0; $x--) {\n\t\tif (($n % $x) == 0) {\n\t\t\treturn\
    \ $x;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    // Your code here\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqcf1k_z.php:14\n\
    Stack trace:\n#0 /tmp/tmpwqcf1k_z.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpwqcf1k_z.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n-1; $i >= 1; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\necho \"largest_divisor(9) = \" . largest_divisor(9) .\
    \ \"\\n\";\necho \"largest_divisor(15) = \" . largest_divisor(15) . \"\\n\";\n\
    \nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "largest_divisor(9) = 3\nlargest_divisor(15) = 5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n-1; $i >= 1; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    // your code here\n\t\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp812ohvgq.php:15\n\
    Stack trace:\n#0 /tmp/tmp812ohvgq.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp812ohvgq.php\
    \ on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $i = 2;\n  while($i < $n) {\n    if($n % $i == 0) {\n      $n = $n / $i;\n\
    \    } else {\n      $i++;\n    }\n  }\n  return $i;\n}\n\necho largest_divisor(15)\
    \ . \"<br>\"; // 5\necho largest_divisor(80) . \"<br>\"; // 10\necho largest_divisor(13)\
    \ . \"<br>\"; // 13\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5<br>5<br>13<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp21rm7n2.php:25\n\
    Stack trace:\n#0 /tmp/tmpp21rm7n2.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpp21rm7n2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n - 1; $i > 0; $i--) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn\
    \ $i;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largest_divisor = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if\
    \ ($n % $i == 0) {\n            $largest_divisor = $i;\n        }\n    }\n   \
    \ return $largest_divisor;\n}\necho largest_divisor(15) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n-1; $i >= 1; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\necho largest_divisor(20) . PHP_EOL;\necho largest_divisor(15)\
    \ . PHP_EOL;\necho largest_divisor(30) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "10\n5\n15\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $largest = 0;\n  for ($i = 1; $i < $n; $i++) {\n    if ($n % $i == 0) {\n\
    \      $largest = $i;\n    }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    if ($n % 2 == 0) {\n        return 2;\n    }\n    for ($i = 3; $i < $n;\
    \ $i+=2) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n \
    \   }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoynj7mfe.php:22\n\
    Stack trace:\n#0 /tmp/tmpoynj7mfe.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoynj7mfe.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $divisor = $n-1;\n    while ($n % $divisor != 0) {\n        $divisor\
    \ = $divisor - 1;\n    }\n    return $divisor;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n-1; $i > 0; $i--) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn\
    \ $i;\n\t\t}\n\t}\n}\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t// your code here\n\t// \t$largest = null;\n\t// for ($i = $n - 1; $i >\
    \ 0; $i--) {\n\t// \tif ($n % $i == 0) {\n\t// \t\t$largest = $i;\n\t// \t\tbreak;\n\
    \t// \t}\n\t// }\n\t// return $largest;\n\t$largest = null;\n\tfor ($i = $n -\
    \ 1; $i > 0; $i--) {\n\t\tif ($n % $i == 0) {\n\t\t\t$largest = $i;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn $largest;\n}\necho largest_divisor(15) . \"\\n\";\necho largest_divisor(16)\
    \ . \"\\n\";\necho largest_divisor(17) . \"\\n\";\necho largest_divisor(18) .\
    \ \"\\n\";\necho largest_divisor(19) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n8\n1\n9\n1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $i = 2;\n  while ($i < $n) {\n    if ($n % $i == 0) {\n      return $i;\n\
    \    }\n    $i++;\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdzyxcieu.php:20\n\
    Stack trace:\n#0 /tmp/tmpdzyxcieu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpdzyxcieu.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n-1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n      \
    \      return $i;\n        }\n    }\n}\n\necho largest_divisor(15);\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '5'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largest = -1;\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % $i\
    \ == 0) {\n            $largest = $i;\n        }\n    }\n    return $largest;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = 1; $i < $n; $i++) {\n    if (is_divisible($n, $i)) {\n      return\
    \ $i;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_divisible()\
    \ in /tmp/tmp6wpcgrbi.php:7\nStack trace:\n#0 /tmp/tmp6wpcgrbi.php(14): largest_divisor(3)\n\
    #1 /tmp/tmp6wpcgrbi.php(18): candidate(3)\n#2 /tmp/tmp6wpcgrbi.php(25): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6wpcgrbi.php on line 7\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$i = $n - 1;\n\twhile ($i > 0) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn\
    \ $i;\n\t\t}\n\t\t$i--;\n\t}\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t// $n = abs($n);\n\tfor ($i = $n-1; $i >= 1; $i--) {\n\t\tif ($n % $i ==\
    \ 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n}\n\necho largest_divisor(15).\"\\n\";\n\
    \nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largest_divisor = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if\
    \ ($n % $i == 0) {\n            $largest_divisor = $i;\n        }\n    }\n   \
    \ return $largest_divisor;\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$largest = 1;\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif ($n % $i == 0) {\n\
    \t\t\t$largest = $i;\n\t\t}\n\t}\n\treturn $largest;\n}\necho largest_divisor(15)\
    \ . PHP_EOL;\necho largest_divisor(8) . PHP_EOL;\necho largest_divisor(20) . PHP_EOL;\n\
    echo largest_divisor(100) . PHP_EOL;\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n4\n10\n50\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  // return $n if $n == 1;\n  if ($n == 1) {\n    return $n;\n  }\n\n  //\
    \ i = $n - 1;\n  $i = $n - 1;\n\n  // while (i > 0):\n  while ($i > 0) {\n   \
    \ // if (n % i == 0):\n    if ($n % $i == 0) {\n      // return i\n      return\
    \ $i;\n    }\n    // i = i - 1\n    $i = $i - 1;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n-1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n      \
    \      return $i;\n        }\n    }\n}\necho largest_divisor(15) . PHP_EOL;\n\
    echo largest_divisor(17) . PHP_EOL;\necho largest_divisor(14) . PHP_EOL;\necho\
    \ largest_divisor(7919) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n1\n7\n1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $limit = $n/2;\n  for ($i = $limit; $i > 0; $i--) {\n    if ($n % $i ==\
    \ 0) {\n      return $i;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n  \
    \  return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5z4s2d02.php:19\n\
    Stack trace:\n#0 /tmp/tmp5z4s2d02.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp5z4s2d02.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) return $i;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$i = 1;\n\twhile ($i < $n) {\n\t\tif ($n % $i == 0) {\n\t\t\t$divisor =\
    \ $i;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $divisor;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$i = $n - 1;\n\twhile ($i > 0) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn\
    \ $i;\n\t\t}\n\t\t$i--;\n\t}\n}\necho largest_divisor(15) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $divisor = 2;\n    $largest_divisor = 1;\n    while ($divisor < $n) {\n\
    \        if ($n % $divisor == 0) {\n            $largest_divisor = $divisor;\n\
    \        }\n        $divisor += 1;\n    }\n    return $largest_divisor;\n}\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $x = $n - 1;\n    while($n % $x != 0) {\n        $x--;\n    }\n    return\
    \ $x;\n}\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t\n\t$i = 1;\n\t\n\twhile($i < $n) {\n\t\t\n\t\tif($n % $i == 0) {\n\t\t\
    \t\n\t\t\t$new_i = $i;\n\t\t\t\n\t\t}\n\t\t\n\t\t$i++;\n\t\t\n\t}\n\t\n\treturn\
    \ $new_i;\n\t\n}\n\necho largest_divisor(15);\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '5'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n - 1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\necho largest_divisor(15);\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '5'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n - 1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = floor($n / 2); $i > 0; $i--) {\n\t\tif ($n % $i == 0) {\n\t\t\
    \treturn $i;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmponr3t26b.php:18\n\
    Stack trace:\n#0 /tmp/tmponr3t26b.php(25): test()\n#1 {main}\n  thrown in /tmp/tmponr3t26b.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n       \
    \     return $i;\n        }\n        $i++;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3r30wu4.php:20\n\
    Stack trace:\n#0 /tmp/tmpv3r30wu4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpv3r30wu4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $rem = $n % 1;\n    for ($i = $n-1; $i > 1; $i--) {\n        $rem = $n\
    \ % $i;\n        if ($rem == 0) {\n            return $i;\n        }\n    }\n\
    }\necho largest_divisor(15);\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplbf2cylt.php:20\n\
    Stack trace:\n#0 /tmp/tmplbf2cylt.php(27): test()\n#1 {main}\n  thrown in /tmp/tmplbf2cylt.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = $n - 1;\n    while ($i > 0) {\n        if ($n % $i == 0) {\n   \
    \         return $i;\n        }\n        $i--;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tfor ($i=$n; $i>0; $i--) {\n\t\tif\
    \ ($n % $i == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n}\n\necho largest_divisor(15);\n\
    function candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyg3_h8re.php:22\n\
    Stack trace:\n#0 /tmp/tmpyg3_h8re.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyg3_h8re.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $divisor = $n;\n    while ($divisor > 0) {\n        if ($n % $divisor\
    \ == 0) {\n            break;\n        }\n        $divisor--;\n    }\n    return\
    \ $divisor;\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vj13rr3.php:21\n\
    Stack trace:\n#0 /tmp/tmp0vj13rr3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0vj13rr3.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largest = 1;\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % $i\
    \ == 0) {\n            $largest = $i;\n        }\n    }\n    return $largest;\n\
    }\necho largest_divisor(15) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5br2yxas.php:14\n\
    Stack trace:\n#0 /tmp/tmp5br2yxas.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp5br2yxas.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n       \
    \     return $i;\n        }\n        $i++;\n    }\n}\necho(largest_divisor(15)\
    \ . \"\\n\");\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "3\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7xyt6d2v.php:20\n\
    Stack trace:\n#0 /tmp/tmp7xyt6d2v.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7xyt6d2v.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$max_divisor = 1;\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif ($n % $i ==\
    \ 0) {\n\t\t\t$max_divisor = $i;\n\t\t}\n\t}\n\treturn $max_divisor;\n}\n\necho\
    \ largest_divisor(15) . PHP_EOL;\necho largest_divisor(10) . PHP_EOL;\necho largest_divisor(17)\
    \ . PHP_EOL;\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5\n5\n1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largest_divisor = 1;\n    $i = 2;\n    while ($i < $n) {\n        if\
    \ ($n % $i == 0) {\n            $largest_divisor = $i;\n        }\n        $i++;\n\
    \    }\n    return $largest_divisor;\n}\n\nfunction candidate(...$args) {\n  \
    \  return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largest = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % $i\
    \ == 0) {\n            $largest = $i;\n        }\n    }\n    return $largest;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  if ($n > 0) {\n    for ($i = $n - 1; $i > 0; $i--) {\n      if ($n % $i\
    \ == 0) {\n        return $i;\n      }\n    }\n  }\n  return 0;\n}\n\necho \"\
    largest_divisor(15): \" . largest_divisor(15) . \"\\n\";\necho \"largest_divisor(30):\
    \ \" . largest_divisor(30) . \"\\n\";\necho \"largest_divisor(16): \" . largest_divisor(16)\
    \ . \"\\n\";\necho \"largest_divisor(17): \" . largest_divisor(17) . \"\\n\";\n\
    echo \"largest_divisor(18): \" . largest_divisor(18) . \"\\n\";\necho \"largest_divisor(19):\
    \ \" . largest_divisor(19) . \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "largest_divisor(15): 5\nlargest_divisor(30): 15\nlargest_divisor(16): 8\n\
    largest_divisor(17): 1\nlargest_divisor(18): 9\nlargest_divisor(19): 1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($x = $n-1; $x > 0; $x--) {\n    if ($n % $x == 0) {\n      return\
    \ $x;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6is_ku7.php:14\n\
    Stack trace:\n#0 /tmp/tmpn6is_ku7.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpn6is_ku7.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = $n - 1;\n    while ($i >= 1) {\n        if ($n % $i == 0) {\n  \
    \          return $i;\n        }\n        $i--;\n    }\n}\necho largest_divisor(15)\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largedivisor = 2;\n    while ($n > 2 && $n % $largedivisor != 0) {\n\
    \        $largedivisor += 1;\n    }\n    return $largedivisor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnd5j30vn.php:18\n\
    Stack trace:\n#0 /tmp/tmpnd5j30vn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnd5j30vn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$l = 0;\n\tfor ($i = 1; $i < $n; $i++) {\n\t\tif ($n % $i == 0) {\n\t\t\
    \t$l = $i;\n\t\t}\n\t}\n\techo $l;\n}\nlargest_divisor(20);\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "101\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhhd1lcs.php:21\n\
    Stack trace:\n#0 /tmp/tmplhhd1lcs.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplhhd1lcs.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $divisor = $n;\n    while($divisor > 0) {\n        if($n % $divisor ==\
    \ 0) {\n            return $divisor;\n        }\n        $divisor--;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9iow8w4.php:20\n\
    Stack trace:\n#0 /tmp/tmpj9iow8w4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpj9iow8w4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    // your code here\n    $i = 1;\n    while($i <= $n) {\n        if ($n\
    \ % $i == 0) {\n            $greatest = $i;\n        }\n        $i++;\n    }\n\
    \    return $greatest;\n}\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5lxdgvno.php:21\n\
    Stack trace:\n#0 /tmp/tmp5lxdgvno.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5lxdgvno.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $i = 0;\n  while ($i < $n) {\n    $i++;\n    if ($n % $i == 0) {\n    \
    \  $largest = $i;\n    }\n  }\n  return $largest;\n}\n\necho largest_divisor(15);\n\
    echo '<br>';\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "15<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuw2i1h0u.php:23\n\
    Stack trace:\n#0 /tmp/tmpuw2i1h0u.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpuw2i1h0u.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n - 1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\t$largest = 1;\n\tfor ($i = 2; $i < $n; $i++) {\n\t\tif ($n % $i == 0) {\n\
    \t\t\t$largest = $i;\n\t\t}\n\t}\n\treturn $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    //TODO\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8yduo9i.php:14\n\
    Stack trace:\n#0 /tmp/tmpg8yduo9i.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpg8yduo9i.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n       \
    \     return $i;\n        }\n        $i++;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdunri6p.php:19\n\
    Stack trace:\n#0 /tmp/tmpqdunri6p.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqdunri6p.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n-1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n      \
    \      return $i;\n        }\n    }\n}\necho largest_divisor(15);\necho \"\\n\"\
    ;\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    // Your code here\n    if ($n == 0) {\n        return 0;\n    }\n   \
    \ for ($x = $n - 1; $x > 0; $x--) {\n        if ($n % $x == 0) {\n           \
    \ return $x;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $arr = [];\n  for ($i = 1; $i < $n; $i++) {\n    if ($n % $i == 0) {\n\
    \      $arr[] = $i;\n    }\n  }\n  $max = max($arr);\n  return $max;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n - 1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tif(!is_int($n)){\n\t\treturn false;\n\t}\n\tfor($i=$n-1; $i>0; $i--){\n\
    \t\tif($n%$i == 0){\n\t\t\treturn $i;\n\t\t}\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    if ($n < 2) return 0;\n    for ($i = 2; $i < $n; $i++) {\n        if\
    \ ($n % $i == 0) return $i;\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3d__9eg7.php:18\n\
    Stack trace:\n#0 /tmp/tmp3d__9eg7.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp3d__9eg7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $result = 0;\n  $smallest_factor = 2;\n  while ($smallest_factor < $n)\
    \ {\n    if ($n % $smallest_factor == 0) {\n      $result = $smallest_factor;\n\
    \    }\n    $smallest_factor++;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38g1ojnw.php:22\n\
    Stack trace:\n#0 /tmp/tmp38g1ojnw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp38g1ojnw.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $factor = floor($n / 2);\n    while($factor > 0) {\n        if($n % $factor\
    \ == 0) {\n            return $factor;\n        }\n        $factor -= 1;\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_x718fa.php:20\n\
    Stack trace:\n#0 /tmp/tmpy_x718fa.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpy_x718fa.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n-1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    // your code here\n    $largest_divisor = 1;\n    $i = 2;\n    while($i\
    \ <= $n) {\n        if($n % $i == 0) {\n            $largest_divisor = $i;\n \
    \       }\n        $i += 1;\n    }\n    return $largest_divisor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwmr48m2.php:23\n\
    Stack trace:\n#0 /tmp/tmpxwmr48m2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxwmr48m2.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = $n - 1;\n    while ($i > 0) {\n        if ($n % $i == 0) {\n   \
    \         return $i;\n        }\n        $i -= 1;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n - 1; $i > 0; $i--) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn\
    \ $i;\n\t\t}\n\t}\n}\n\n$test = largest_divisor(15);\necho '<p>' . $test . '</p>';\n\
    \nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: <p>5</p>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $d = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % $i == 0)\
    \ {\n            $d = $i;\n        }\n    }\n    return $d;\n}\n\necho largest_divisor(15);\n\
    \nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: '5'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = $n - 1;\n    while ( $i > 0 ) {\n        if ( $n % $i == 0 ) {\n\
    \            return $i;\n        }\n        $i--;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n - 1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n    \
    \        return $i;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 5)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n-1; $i > 0; $i--) {\n\t\tif ($n % $i == 0) return $i;\n\t}\n\
    }\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  // your code here\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5g9c80mc.php:14\n\
    Stack trace:\n#0 /tmp/tmp5g9c80mc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp5g9c80mc.php\
    \ on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n - 1; $i > 0; $i--) {\n\t\tif (($n % $i) == 0) return $i;\n\
    \t}\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $num = 0;\n  $i = 2;\n  while ($i < $n) {\n    if ($n % $i == 0) {\n  \
    \    $num = $i;\n    }\n    $i++;\n  }\n  return $num;\n}\nprint(largest_divisor(15)\
    \ . \"\\n\");\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp94aakju.php:23\n\
    Stack trace:\n#0 /tmp/tmpp94aakju.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpp94aakju.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n - 1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\necho largest_divisor(15);\necho \"\\n\";\necho largest_divisor(17);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "5\n1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\tfor ($i = $n - 1; $i > 0; $i--) {\n\t\tif ($n % $i == 0) {\n\t\t\treturn\
    \ $i;\n\t\t}\n\t}\n}\necho largest_divisor(15) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "5\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n-1; $i >= 1; $i--) {\n        if ($n % $i == 0) {\n     \
    \       return $i;\n        }\n    }\n}\necho largest_divisor(15);\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '5'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  if ($n < 2) {\n    return $n;\n  }\n  $largest = 1;\n  for ($i = 2; $i\
    \ < $n; $i++) {\n    if ($n % $i == 0) {\n      $largest = $i;\n    }\n  }\n \
    \ return $largest;\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    for ($i = $n-1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n      \
    \      return $i;\n        }\n    }\n}\necho largest_divisor(24) . \"<br>\";\n\
    \nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: 12<br>
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $largest_divisor = $n;\n    while($largest_divisor > 1) {\n        if($n\
    \ % $largest_divisor == 0) {\n            return $largest_divisor;\n        }\n\
    \        $largest_divisor--;\n    }\n}\necho largest_divisor(15) . PHP_EOL;\n\
    function candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqfajcndv.php:20\n\
    Stack trace:\n#0 /tmp/tmpqfajcndv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqfajcndv.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  for ($i = $n - 1; $i > 0; $i--) {\n    if ($n % $i == 0) {\n      return\
    \ $i;\n    }\n  }\n}\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = $n - 1;\n    while ($i > 0) {\n        if ($n % $i == 0) {\n   \
    \         return $i;\n        }\n        $i--;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n\n}\n\necho(largest_divisor(15)) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return largest_divisor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !==\
    \ 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 50)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(49) !== 7) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8v629cz.php:16\n\
    Stack trace:\n#0 /tmp/tmpf8v629cz.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpf8v629cz.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  // Write your code here\n  // To print results to the standard output you\
    \ can use print\n  // Example: print \"Hello world!\";\n  for ($i = $n - 1; $i\
    \ > 0; $i--) {\n    if ($n % $i == 0) {\n      return $i;\n    }\n  }\n  return\
    \ -1;\n}\n\nprint largest_divisor(15);\nprint largest_divisor(16);\nprint largest_divisor(17);\n\
    print largest_divisor(10);\nprint largest_divisor(9);\nprint largest_divisor(13);\n\
    print largest_divisor(18);\nprint largest_divisor(17);\nprint largest_divisor(7);\n\
    print largest_divisor(25);\nprint largest_divisor(12);\nprint largest_divisor(8);\n\
    print largest_divisor(6);\nprint largest_divisor(24);\nprint largest_divisor(11);\n\
    print largest_divisor(4);\nprint largest_divisor(20);\nprint largest_divisor(2);\n\
    print largest_divisor(3);\nprint largest_divisor(5);\nprint largest_divisor(2);\n\
    print largest_divisor(2);\nprint largest_divisor(2);\nprint largest_divisor(2);\n\
    print largest_divisor(2);\nprint largest_divisor(2);\nprint largest_divisor(2);\n\
    print largest_divisor(2);\nprint largest_divisor(2);\nprint largest_divisor(2);\n\
    print largest_divisor(2);\nprint largest_divisor(2);\nprint largest_divisor(2);\n\
    print largest_divisor(2);\nprint largest_divisor(2);\nprint largest_divisor(2);\n\
    print largest_divisor(2);\nprint largest_divisor(2);\nprint largest_divisor(2);\n\
    print largest_divisor(2);\nprint largest_divisor(2);\nprint largest_divisor(2);\n\
    print largest_divis\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpkttdzzt3.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = 1;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n       \
    \     $divisor = $i;\n        }\n        $i++;\n    }\n    return $divisor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $i = $n;\n  while ($i > 0) {\n    if (is_integer($n / $i)) {\n      return\
    \ $i;\n    }\n    $i--;\n  }\n}\n\necho largest_divisor(15) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwt5t1ibn.php:22\n\
    Stack trace:\n#0 /tmp/tmpwt5t1ibn.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwt5t1ibn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n    $i = 1;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n       \
    \     $a = $i;\n        }\n        $i++;\n    }\n    return $a;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_divisor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given number n, find the largest number that divides n\
    \ evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n)\
    \ {\n  $largest = 0;\n  for ($i = 1; $i < $n; $i++) {\n    if ($n % $i == 0) {\n\
    \      $largest = $i;\n    }\n  }\n  return $largest;\n}\necho 'largest_divisor(15):\
    \ ' . largest_divisor(15) . PHP_EOL;\necho 'largest_divisor(17): ' . largest_divisor(17)\
    \ . PHP_EOL;\necho 'largest_divisor(31): ' . largest_divisor(31) . PHP_EOL;\n\
    echo 'largest_divisor(36): ' . largest_divisor(36) . PHP_EOL;\necho 'largest_divisor(48):\
    \ ' . largest_divisor(48) . PHP_EOL;\necho 'largest_divisor(54): ' . largest_divisor(54)\
    \ . PHP_EOL;\n\nfunction candidate(...$args) {\n    return largest_divisor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(10) !== 5) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(100) !== 50) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(49) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "largest_divisor(15): 5\nlargest_divisor(17): 1\nlargest_divisor(31): 1\n\
    largest_divisor(36): 18\nlargest_divisor(48): 24\nlargest_divisor(54): 27\n"
  stderr: ''
  exit_code: 0
  status: OK
